[
    {
        "id": "5d3ffd892ca09f6dffd55923294e8e0c5257cdff0216417e84943542451374b9",
        "question": "How many heads of the departments are older than 56 ?",
        "parsing_tree": "department_management | #1 = Scan Table [ head ] Predicate [ age > 56.0 ] Output [ age ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "40759deacb76f6ccac4d7f87c0662f90e2fa90da89b041172fb95e18d35b44ca",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "parsing_tree": "department_management | #1 = Scan Table [ head ] Output [ name , born_state , age ] ; #2 = Sort [ #1 ] OrderBy [ age ASC ] Output [ name , born_state , age ]"
    },
    {
        "id": "aa79da355ec7c1a64f7e402cf1e797ab030ee709acad0ddf456d9e11bc5debf7",
        "question": "List the creation year, name and budget of each department.",
        "parsing_tree": "department_management | #1 = Scan Table [ department ] Output [ Creation , Name , Budget_in_Billions ]"
    },
    {
        "id": "e40de77e53eb4bcf9d81bf07d121c135264dbd62cdca7e88f5cebda7b73fafa4",
        "question": "What are the maximum and minimum budget of the departments?",
        "parsing_tree": "department_management | #1 = Scan Table [ department ] Output [ Budget_in_Billions ] ; #2 = Aggregate [ #1 ] Output [ MIN(Budget_in_Billions) AS Min_Budget_in_Billions , MAX(Budget_in_Billions) AS Max_Budget_in_Billions ]"
    },
    {
        "id": "47f00f939411fff3d9dd81cdab4b7937fb837492b042f78ebf58dcb092a6f3a8",
        "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "parsing_tree": "department_management | #1 = Scan Table [ department ] Predicate [ Ranking >= 10 AND Ranking <= 15 ] Output [ Ranking , Num_Employees ] ; #2 = Aggregate [ #1 ] Output [ AVG(Num_Employees) AS Avg_Num_Employees ]"
    },
    {
        "id": "39ae01b638dcdce3997751511c9c44e3ad8c5f2e705f8ab9598bfd75006f30ef",
        "question": "What are the names of the heads who are born outside the California state?",
        "parsing_tree": "department_management | #1 = Scan Table [ head ] Predicate [ born_state <> 'California' ] Output [ name , born_state ]"
    },
    {
        "id": "3f36f679138a1b0cbb597bd04bf833870f757d27d1f867576d45d426577fcfe5",
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "parsing_tree": "department_management | #1 = Scan Table [ head ] Predicate [ born_state = 'Alabama' ] Output [ head_ID , born_state ] ; #2 = Scan Table [ management ] Output [ head_ID , department_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.head_ID = #2.head_ID ] Output [ #2.department_ID ] ; #4 = Scan Table [ department ] Output [ Creation , Department_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.department_ID = #4.Department_ID ] Distinct [ true ] Output [ #4.Creation ]"
    },
    {
        "id": "00651f398215c361491c8d06175867c38b39a535517c378d98e8f7f5a0e6191f",
        "question": "What are the names of the states where at least 3 heads were born?",
        "parsing_tree": "department_management | #1 = Scan Table [ head ] Output [ born_state ] ; #2 = Aggregate [ #1 ] GroupBy [ born_state ] Output [ countstar AS Count_Star , born_state ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 3 ] Output [ born_state ]"
    },
    {
        "id": "586865d060d7830514507ad9c19a330a0fe3f7dd3a21dc88d9c82b2c0b3f3626",
        "question": "In which year were most departments established?",
        "parsing_tree": "department_management | #1 = Scan Table [ department ] Output [ Creation ] ; #2 = Aggregate [ #1 ] GroupBy [ Creation ] Output [ Creation , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Creation , Count_Star ]"
    },
    {
        "id": "a755587236ae98ce64932aae821a229a2fa5c22085e4ae14a98c9e2ed37913e1",
        "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "parsing_tree": "department_management | #1 = Scan Table [ management ] Predicate [ temporary_acting = 'Yes' ] Output [ temporary_acting , department_ID ] ; #2 = Scan Table [ department ] Output [ Name , Department_ID , Num_Employees ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.department_ID = #2.Department_ID ] Output [ #2.Name , #2.Num_Employees ]"
    },
    {
        "id": "91d8d2fd0df0fc77fca751084707e55ef77ded3b9fddf66b2c3a0152bf83fd22",
        "question": "How many acting statuses are there?",
        "parsing_tree": "department_management | #1 = Scan Table [ management ] Distinct [ true ] Output [ temporary_acting ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT temporary_acting) AS Count_Dist_temporary_acting ]"
    },
    {
        "id": "11721bd0ca619c9b885db09fa053a789068bbc906d3565209a493f47b01c04b0",
        "question": "How many departments are led by heads who are not mentioned?",
        "parsing_tree": "department_management | #1 = Scan Table [ department ] Output [ Department_ID ] ; #2 = Scan Table [ management ] Output [ department_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ department_ID ] Output [ department_ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.department_ID = #1.Department_ID ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "84ee6c0bbf937a87b1575510a08e72067bb1e07ac77e10e668e97e922f82649c",
        "question": "What are the distinct ages of the heads who are acting?",
        "parsing_tree": "department_management | #1 = Scan Table [ management ] Predicate [ temporary_acting = 'Yes' ] Output [ head_ID , temporary_acting ] ; #2 = Scan Table [ head ] Output [ head_ID , age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.head_ID = #2.head_ID ] Distinct [ true ] Output [ #2.age ]"
    },
    {
        "id": "05fa1d5719ed4259ca79420810514335c8c92d1a75f475ba25bbc8c7b9d36673",
        "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
        "parsing_tree": "department_management | #1 = Scan Table [ department ] Predicate [ Name = 'Treasury' ] Output [ Name , Department_ID ] ; #2 = Scan Table [ management ] Output [ head_ID , department_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Department_ID = #2.department_ID ] Output [ #2.head_ID ] ; #4 = Scan Table [ head ] Output [ head_ID , born_state ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.head_ID = #4.head_ID ] Distinct [ true ] Output [ #4.born_state ] ; #6 = Scan Table [ department ] Predicate [ Name = 'Homeland Security' ] Output [ Name , Department_ID ] ; #7 = Scan Table [ management ] Output [ head_ID , department_ID ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.Department_ID = #7.department_ID ] Output [ #7.head_ID ] ; #9 = Scan Table [ head ] Output [ head_ID , born_state ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.head_ID = #9.head_ID ] Output [ #9.born_state ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.born_state = #10.born_state ] Output [ #5.born_state ]"
    },
    {
        "id": "8e18920291df2091510d1e6b8b5f5cc811f673c1d3aee970da4d23535b452dd0",
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "parsing_tree": "department_management | #1 = Scan Table [ head ] Predicate [ name like '%Ha%' ] Output [ name , head_ID ]"
    },
    {
        "id": "556c655f2737c1a29f0bba860349464a8eb70888488492fdaac7491258f059e5",
        "question": "How many farms are there?",
        "parsing_tree": "farm | #1 = Scan Table [ farm ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a7ab9c2cf6f8768915a14f47c4c677b0568c4329652a12f3130f49696bfeed71",
        "question": "Count the number of farms.",
        "parsing_tree": "farm | #1 = Scan Table [ farm ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c43419466758786be8086a3a83c28e3a6e9c67af4e04b843bba7e8f807af0cc8",
        "question": "List the total number of horses on farms in ascending order.",
        "parsing_tree": "farm | #1 = Scan Table [ farm ] Output [ Total_Horses ] ; #2 = Sort [ #1 ] OrderBy [ Total_Horses ASC ] Output [ Total_Horses ]"
    },
    {
        "id": "fd4ec0ecb8ae1c200f37726477316bf3acd23ee83a350beb5a7dd38cc37bfede",
        "question": "What is the total horses record for each farm, sorted ascending?",
        "parsing_tree": "farm | #1 = Scan Table [ farm ] Output [ Total_Horses ] ; #2 = Sort [ #1 ] OrderBy [ Total_Horses ASC ] Output [ Total_Horses ]"
    },
    {
        "id": "cec687ff47e0a5fc41502c04b474cc537872fae82c18b6498e139715aac854e3",
        "question": "What are the hosts of competitions whose theme is not \"Aliens\"?",
        "parsing_tree": "farm | #1 = Scan Table [ farm_competition ] Predicate [ Theme <> 'Aliens' ] Output [ Hosts , Theme ]"
    },
    {
        "id": "bf82cd940e88cb823a297867749a11a54f3fc9751b5320c05f29695c985133ff",
        "question": "Return the hosts of competitions for which the theme is not Aliens?",
        "parsing_tree": "farm | #1 = Scan Table [ farm_competition ] Predicate [ Theme <> 'Aliens' ] Output [ Hosts , Theme ]"
    },
    {
        "id": "bd2f7e288dd397a9b8ab4642f9ac04c5e77b47ffa2db052329487c7cbdcff76f",
        "question": "What are the themes of farm competitions sorted by year in ascending order?",
        "parsing_tree": "farm | #1 = Scan Table [ farm_competition ] Output [ Theme , Year ] ; #2 = Sort [ #1 ] OrderBy [ Year ASC ] Output [ Theme , Year ]"
    },
    {
        "id": "b11ab9fef1792c41e96078d4abe87b7d9398d6579a7cf4309d7c4bb54d6d0e34",
        "question": "Return the themes of farm competitions, sorted by year ascending.",
        "parsing_tree": "farm | #1 = Scan Table [ farm_competition ] Output [ Theme , Year ] ; #2 = Sort [ #1 ] OrderBy [ Year ASC ] Output [ Theme , Year ]"
    },
    {
        "id": "01bcb75c2f1501f234259b80ba0a38bd37b6978d7354f269f4fdb62537b74c5c",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "parsing_tree": "farm | #1 = Scan Table [ farm ] Predicate [ Total_Horses > 5000.0 ] Output [ Total_Horses , Working_Horses ] ; #2 = Aggregate [ #1 ] Output [ AVG(Working_Horses) AS Avg_Working_Horses ]"
    },
    {
        "id": "dae782b20de5b18242610c758f4beb375baecff971e5b07ed80f18373ff1eca2",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "parsing_tree": "farm | #1 = Scan Table [ farm ] Predicate [ Total_Horses > 5000.0 ] Output [ Total_Horses , Working_Horses ] ; #2 = Aggregate [ #1 ] Output [ AVG(Working_Horses) AS Avg_Working_Horses ]"
    },
    {
        "id": "6870e259d7d217c97bf22d4164c3e4919d692594c98f51f902abc9c5daa1f6ae",
        "question": "What are the maximum and minimum number of cows across all farms.",
        "parsing_tree": "farm | #1 = Scan Table [ farm ] Output [ Cows ] ; #2 = Aggregate [ #1 ] Output [ MIN(Cows) AS Min_Cows , MAX(Cows) AS Max_Cows ]"
    },
    {
        "id": "da69d487c871b3dbb14a08348231720204910489613652bfe03d4e9d848dc8b3",
        "question": "Return the maximum and minimum number of cows across all farms.",
        "parsing_tree": "farm | #1 = Scan Table [ farm ] Output [ Cows ] ; #2 = Aggregate [ #1 ] Output [ MIN(Cows) AS Min_Cows , MAX(Cows) AS Max_Cows ]"
    },
    {
        "id": "a76a419110e56eadea2f81a7d5b23d2d746db87b8cb4ae2ac5823862201aa999",
        "question": "How many different statuses do cities have?",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Distinct [ true ] Output [ Status ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Status) AS Count_Dist_Status ]"
    },
    {
        "id": "c5002a577bd5f2e184aa143e17fbbd7ef2fc32f8a3b1361776a2d49c155ed31c",
        "question": "Count the number of different statuses.",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Distinct [ true ] Output [ Status ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Status) AS Count_Dist_Status ]"
    },
    {
        "id": "2b3c60db750ba52e1c491cf07f780b12b155e7cd235127357a0858a9608ae5dd",
        "question": "List official names of cities in descending order of population.",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Output [ Population , Official_Name ] ; #2 = Sort [ #1 ] OrderBy [ Population DESC ] Output [ Population , Official_Name ]"
    },
    {
        "id": "917d34f46620f84960e9c1ebef602465a57055601e972e2ec637a716d4e012f0",
        "question": "What are the official names of cities, ordered descending by population?",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Output [ Population , Official_Name ] ; #2 = Sort [ #1 ] OrderBy [ Population DESC ] Output [ Population , Official_Name ]"
    },
    {
        "id": "eac2fc782ad4c08f1a019056f19bd25411c5ba476a026fe8c345b5e91669485a",
        "question": "List the official name and status of the city with the largest population.",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Output [ Population , Status , Official_Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Population DESC ] Output [ Population , Status , Official_Name ]"
    },
    {
        "id": "6e117912c192d88de1aafca02cf34ff911fe869980cc5016aff1f41a2b3a1b8a",
        "question": "What is the official name and status of the city with the most residents?",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Output [ Population , Status , Official_Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Population DESC ] Output [ Population , Status , Official_Name ]"
    },
    {
        "id": "7a233282b2e29514b51b842774abff3f6a95db80c23f805c0f383e5e940e1730",
        "question": "Show the years and the official names of the host cities of competitions.",
        "parsing_tree": "farm | #1 = Scan Table [ farm_competition ] Output [ Year , Host_city_ID ] ; #2 = Scan Table [ city ] Output [ City_ID , Official_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Host_city_ID = #2.City_ID ] Output [ #1.Year , #2.Official_Name ]"
    },
    {
        "id": "aa8f85214b52972a4b2621237a4c0b85e723f50b1dd3963e5bca990f01bcdcd3",
        "question": "Give the years and official names of the cities of each competition.",
        "parsing_tree": "farm | #1 = Scan Table [ farm_competition ] Output [ Year , Host_city_ID ] ; #2 = Scan Table [ city ] Output [ City_ID , Official_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Host_city_ID = #2.City_ID ] Output [ #1.Year , #2.Official_Name ]"
    },
    {
        "id": "4e7c634308ce04be87c7346458ee0d0e056b6f4f3162c938cb563738ec1fe77b",
        "question": "Show the official names of the cities that have hosted more than one competition.",
        "parsing_tree": "farm | #1 = Scan Table [ farm_competition ] Output [ Host_city_ID ] ; #2 = Scan Table [ city ] Output [ City_ID , Official_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Host_city_ID = #2.City_ID ] Output [ #1.Host_city_ID , #2.Official_Name , #2.City_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Host_city_ID ] Output [ countstar AS Count_Star , Official_Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Official_Name ]"
    },
    {
        "id": "a65f44a4ab12c64c23fc8a4a994c4e453a6f200fe69ad40b4ccd4e8c905361a8",
        "question": "What are the official names of cities that have hosted more than one competition?",
        "parsing_tree": "farm | #1 = Scan Table [ farm_competition ] Output [ Host_city_ID ] ; #2 = Scan Table [ city ] Output [ City_ID , Official_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Host_city_ID = #2.City_ID ] Output [ #1.Host_city_ID , #2.Official_Name , #2.City_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Host_city_ID ] Output [ countstar AS Count_Star , Official_Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Official_Name ]"
    },
    {
        "id": "4aa1ee3fe85a5f572bf6c57214ba9550cb9c5d0e66902dc0e1c06fc19aba0d3d",
        "question": "Show the status of the city that has hosted the greatest number of competitions.",
        "parsing_tree": "farm | #1 = Scan Table [ farm_competition ] Output [ Host_city_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Host_city_ID ] Output [ countstar AS Count_Star , Host_city_ID ] ; #3 = Scan Table [ city ] Output [ Status , City_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Host_city_ID = #3.City_ID ] Output [ #3.Status , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Status ]"
    },
    {
        "id": "80592e5d97f133869abf94a23234b3aee1f23c7307896f203d1ef7628a8fb305",
        "question": "What is the status of the city that has hosted the most competitions?",
        "parsing_tree": "farm | #1 = Scan Table [ farm_competition ] Output [ Host_city_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Host_city_ID ] Output [ countstar AS Count_Star , Host_city_ID ] ; #3 = Scan Table [ city ] Output [ Status , City_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Host_city_ID = #3.City_ID ] Output [ #3.Status , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Status ]"
    },
    {
        "id": "70dab9d41178f8c33dad649256b9217b4ee8600fad7c4d095fef0971ac501592",
        "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Predicate [ Population > 1000.0 ] Output [ Population , City_ID ] ; #2 = Scan Table [ farm_competition ] Output [ Theme , Host_city_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.Host_city_ID ] Output [ #2.Theme ]"
    },
    {
        "id": "358e31e4cf42ff4b98619163c161a7bf76dcf45d3eca74f9afff2882169f1ea9",
        "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Predicate [ Population > 1000.0 ] Output [ Population , City_ID ] ; #2 = Scan Table [ farm_competition ] Output [ Theme , Host_city_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.Host_city_ID ] Output [ #2.Theme ]"
    },
    {
        "id": "5facfc7fd711b6935823289e9d8ca510e6520c8592709de0ca0a63183e58849a",
        "question": "Please show the different statuses of cities and the average population of cities with each status.",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Output [ Population , Status ] ; #2 = Aggregate [ #1 ] GroupBy [ Status ] Output [ Status , AVG(Population) AS Avg_Population ]"
    },
    {
        "id": "3beabbe28d7a9466b3517488e0a99a0fac065846d9092759306c579d9edfce12",
        "question": "What are the statuses and average populations of each city?",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Output [ Population , Status ] ; #2 = Aggregate [ #1 ] GroupBy [ Status ] Output [ Status , AVG(Population) AS Avg_Population ]"
    },
    {
        "id": "1a173468b826d169d284e14a868c6bdf70125edacfefeeb0d6e668027405ecf9",
        "question": "Please show the different statuses, ordered by the number of cities that have each.",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Output [ Status ] ; #2 = Aggregate [ #1 ] GroupBy [ Status ] Output [ countstar AS Count_Star , Status ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Status ]"
    },
    {
        "id": "67fac65e398a5f4e09432aa8d1a58a670ac395916495c28a836c081928eb05b0",
        "question": "Return the different statuses of cities, ascending by frequency.",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Output [ Status ] ; #2 = Aggregate [ #1 ] GroupBy [ Status ] Output [ countstar AS Count_Star , Status ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Status ]"
    },
    {
        "id": "d5c43b3de2893451910c07c5f40b5b8be9d3442655fbb0f6c0a633eb508d207d",
        "question": "List the most common type of Status across cities.",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Output [ Status ] ; #2 = Aggregate [ #1 ] GroupBy [ Status ] Output [ countstar AS Count_Star , Status ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Status ]"
    },
    {
        "id": "97bb984cc3f800c5574aa8d4b77574135408840ce9b0c292cfd0317cd6bd5ab9",
        "question": "What is the most common status across all cities?",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Output [ Status ] ; #2 = Aggregate [ #1 ] GroupBy [ Status ] Output [ countstar AS Count_Star , Status ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Status ]"
    },
    {
        "id": "85a22b9437c08ee2879b152c269a3899f83c59136649b7d6c846911a06ea47e7",
        "question": "List the official names of cities that have not held any competition.",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Output [ City_ID , Official_Name ] ; #2 = Scan Table [ farm_competition ] Output [ Host_city_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Host_city_ID IS NULL OR #1.City_ID = #2.Host_city_ID ] Output [ #1.Official_Name ]"
    },
    {
        "id": "138f1e4b52f0e50d8ccd52842727f1acce2f89c8a6d96c84746297bd80567c8e",
        "question": "What are the official names of cities that have not hosted a farm competition?",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Output [ City_ID , Official_Name ] ; #2 = Scan Table [ farm_competition ] Output [ Host_city_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Host_city_ID IS NULL OR #1.City_ID = #2.Host_city_ID ] Output [ #1.Official_Name ]"
    },
    {
        "id": "d6d71756af2a4df40ca99d4264cc5ee2f26dd569476540355bd1e2fdffe7ce7d",
        "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Predicate [ Population > 1500.0 ] Distinct [ true ] Output [ Population , Status ] ; #2 = Scan Table [ city ] Predicate [ Population < 500.0 ] Output [ Population , Status ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Status = #2.Status ] Output [ #1.Status ]"
    },
    {
        "id": "eaff9045bbbc5f3f828eb3c1593f7da4f710d1c103ecc29ca1daaf0f109cdcf5",
        "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Predicate [ Population > 1500.0 ] Distinct [ true ] Output [ Population , Status ] ; #2 = Scan Table [ city ] Predicate [ Population < 500.0 ] Output [ Population , Status ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Status = #2.Status ] Output [ #1.Status ]"
    },
    {
        "id": "f676b126234f264c8e532c4433baf888c0ca07a223e3221b6a1fec74e4be13a2",
        "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Predicate [ Population < 500.0 OR Population > 1500.0 ] Output [ Population , Official_Name ]"
    },
    {
        "id": "fe63d1e29af14dbae58e1504acd0143e249ce78e4964da486099d6ea32826697",
        "question": "What are the official names of cities that have population over 1500 or less than 500?",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Predicate [ Population < 500.0 OR Population > 1500.0 ] Output [ Population , Official_Name ]"
    },
    {
        "id": "2037239cf66641149856f7af24a5f93c6e212d486e09390dd85a1c05d5684521",
        "question": "Show the census ranking of cities whose status are not \"Village\".",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Predicate [ Status <> 'Village' ] Output [ Census_Ranking , Status ]"
    },
    {
        "id": "34132b06ff4be7d108694deb46787824bbb18ee1de094051132fd31ef4b538af",
        "question": "What are the census rankings of cities that do not have the status \"Village\"?",
        "parsing_tree": "farm | #1 = Scan Table [ city ] Predicate [ Status <> 'Village' ] Output [ Census_Ranking , Status ]"
    },
    {
        "id": "fb3d5e25bfbe7234076dec055bf6c72690eb2db10136a7b4865dbcb67a2a2a3c",
        "question": "which course has most number of registered students?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Registrations ] Output [ course_id ] ; #2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ countstar AS Count_Star , course_id ] ; #3 = Scan Table [ Courses ] Output [ course_name , course_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.course_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ course_name , Count_Star ]"
    },
    {
        "id": "f6a3d3c30b46b65d8766c4e9ee18a3fb6da5a4ec250a7187e15a093f6fbabbb8",
        "question": "What is the name of the course with the most registered students?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Registrations ] Output [ course_id ] ; #2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ countstar AS Count_Star , course_id ] ; #3 = Scan Table [ Courses ] Output [ course_name , course_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.course_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ course_name , Count_Star ]"
    },
    {
        "id": "64bf70c21831c531b02d222774e169a79da009aa766e235896d7ee7f2f830c4d",
        "question": "what is id of students who registered some courses but the least number of courses in these students?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Registrations ] Output [ student_id ] ; #2 = Aggregate [ #1 ] GroupBy [ student_id ] Output [ student_id , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ student_id , Count_Star ]"
    },
    {
        "id": "5107c3e865233b7af33d3c084f4dcb13d2721e5d2186208fef436cab79fdc2c3",
        "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Registrations ] Output [ student_id ] ; #2 = Aggregate [ #1 ] GroupBy [ student_id ] Output [ student_id , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ student_id , Count_Star ]"
    },
    {
        "id": "50dc44b0bb8ab0787b469440dfb85d68569dceba680168f344478fb16beb405a",
        "question": "what are the first name and last name of all candidates?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Candidates ] Output [ candidate_id ] ; #2 = Scan Table [ People ] Output [ last_name , person_id , first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.candidate_id = #2.person_id ] Output [ #2.first_name , #2.last_name ]"
    },
    {
        "id": "cf64197edf01bb123e73f066f448377dd1c270df30ae6ec1a7543b125618cf38",
        "question": "What are the first and last names of all the candidates?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Candidates ] Output [ candidate_id ] ; #2 = Scan Table [ People ] Output [ last_name , person_id , first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.candidate_id = #2.person_id ] Output [ #2.first_name , #2.last_name ]"
    },
    {
        "id": "47cb3592ae31420ae9d267217a540dbb8bb1bb2ebdeb808497983583bc822582",
        "question": "List the id of students who never attends courses?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Students ] Output [ student_id ] ; #2 = Scan Table [ Student_Course_Attendance ] Output [ student_id ] ; #3 = Aggregate [ #2 ] GroupBy [ student_id ] Output [ student_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.student_id = #1.student_id ] Output [ #1.student_id ]"
    },
    {
        "id": "81755edadd0cf4bfde3e2dd44df8c63684ce6259c4713adad223eba8ac7c69e4",
        "question": "What are the  ids of every student who has never attended a course?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Students ] Output [ student_id ] ; #2 = Scan Table [ Student_Course_Attendance ] Output [ student_id ] ; #3 = Aggregate [ #2 ] GroupBy [ student_id ] Output [ student_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.student_id = #1.student_id ] Output [ #1.student_id ]"
    },
    {
        "id": "7f4b4aa0ed1001add86a582823b0b2406084ef964137c8942975fb42ef1d770a",
        "question": "List the id of students who attended some courses?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Attendance ] Output [ student_id ]"
    },
    {
        "id": "54c1d491895de46fd68be3754c28453c7f3d06a235a6f4fcf644b11aab2e2bbf",
        "question": "What are the ids of all students who have attended at least one course?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Attendance ] Output [ student_id ]"
    },
    {
        "id": "b1d7e82ef55f07d167307e1aec6aa5c443b812a3a3c7a14c7bd17821ade0a2cc",
        "question": "What are the ids of all students for courses and what are the names of those courses?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Courses ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Registrations ] Output [ student_id , course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #1.course_name , #2.student_id ]"
    },
    {
        "id": "e06273940266e32990ff8c0ec94e6cacd1873a393519f9fa44299786f5cab07c",
        "question": "What is detail of the student who most recently registered course?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Students ] Output [ student_id , student_details ] ; #2 = Scan Table [ Student_Course_Registrations ] Output [ student_id , registration_date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.student_id ] Output [ #1.student_details , #2.registration_date ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ registration_date DESC ] Output [ student_details , registration_date ]"
    },
    {
        "id": "8bdf30f44f898ab25909e0862ff6c1bb13f058dd4dac18ab8fe0224a404c5e77",
        "question": "What details do we have on the students who registered for courses most recently?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Students ] Output [ student_id , student_details ] ; #2 = Scan Table [ Student_Course_Registrations ] Output [ student_id , registration_date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.student_id ] Output [ #1.student_details , #2.registration_date ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ registration_date DESC ] Output [ student_details , registration_date ]"
    },
    {
        "id": "dfdf85e06a6e3b2a155381b5b042e865db1c481794fbbe1027de4e3c4b66e9e7",
        "question": "How many students attend course English?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Courses ] Predicate [ course_name = 'English' ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Attendance ] Output [ course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #1.course_name , #1.course_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e1efb519932f8937b319f4c2982155f3ae8776b0ea491a997cc554762d4ed70d",
        "question": "How many students are attending English courses?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Courses ] Predicate [ course_name = 'English' ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Attendance ] Output [ course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #1.course_name , #1.course_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "da9c2036f9c51deb4a8173cc060e8a5481dd76d53b84cd6d19ee1ebda7e85ec1",
        "question": "How many courses do the student whose id is 171 attend?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Attendance ] Predicate [ student_id = 171 ] Output [ student_id , course_id ] ; #2 = Scan Table [ Courses ] Output [ course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #1.course_id , #1.student_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "648da2c60c6ceebe2027885253a645b536c730c30924bf29cc7b0591394ab7c8",
        "question": "How many courses does the student with id 171 actually attend?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Attendance ] Predicate [ student_id = 171 ] Output [ student_id , course_id ] ; #2 = Scan Table [ Courses ] Output [ course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #1.course_id , #1.student_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "22cab2e1a0d2b700ea6e6d0cbb66e5be13d7bcb2001d73eeee4485f8b4f38f2b",
        "question": "Find id of the candidate who most recently accessed the course?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Candidate_Assessments ] Output [ candidate_id , assessment_date ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ assessment_date DESC ] Output [ candidate_id , assessment_date ]"
    },
    {
        "id": "d222c9570e9f83bd97c920b59c108b637566e8ac4f5d1609a74bcc032ddd22a0",
        "question": "What is the id of the candidate who most recently accessed the course?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Candidate_Assessments ] Output [ candidate_id , assessment_date ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ assessment_date DESC ] Output [ candidate_id , assessment_date ]"
    },
    {
        "id": "4772b89c50b371f10244560f805a2620e5bc512424c62e6c22da18e0a4e27b94",
        "question": "List the id of students who registered some courses and the number of their registered courses?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Students ] Output [ student_id ] ; #2 = Scan Table [ Student_Course_Registrations ] Output [ student_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.student_id ] Output [ #1.student_id ] ; #4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ student_id , countstar AS Count_Star ]"
    },
    {
        "id": "1155c9d91bdf1e70cb9cd98f0f9e69424c58294ef227ea4f1f38f2cced595ffe",
        "question": "For every student who is registered for some course, how many courses are they registered for?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Students ] Output [ student_id ] ; #2 = Scan Table [ Student_Course_Registrations ] Output [ student_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.student_id ] Output [ #1.student_id ] ; #4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ student_id , countstar AS Count_Star ]"
    },
    {
        "id": "0096ccceb4fd07ce57183a0a274790a6329e3a94ba28fee7faaf9eeb9f3a37f0",
        "question": "How many registed students do each course have? List course name and the number of their registered students?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Registrations ] Output [ course_id ] ; #2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ countstar AS Count_Star , course_id ] ; #3 = Scan Table [ Courses ] Output [ course_name , course_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.course_name , #2.Count_Star ]"
    },
    {
        "id": "f29d5538a6413e129f466e1cd0d7b53142fb2996673ab2287fb4bcb372ccae4b",
        "question": "For each course id, how many students are registered and what are the course names?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Registrations ] Output [ course_id ] ; #2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ countstar AS Count_Star , course_id ] ; #3 = Scan Table [ Courses ] Output [ course_name , course_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.course_name , #2.Count_Star ]"
    },
    {
        "id": "3e39c38b25a345b20684fcfd42a6d54871307b9e58c7dbaa285edaf0ff7b31f4",
        "question": "Find id of candidates whose assessment code is \"Pass\"?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Candidate_Assessments ] Predicate [ asessment_outcome_code = 'Pass' ] Output [ candidate_id , asessment_outcome_code ]"
    },
    {
        "id": "1efbe0e516632e0d24d3437fd251fead484ee6a6c87042ebdcff02cf3568705b",
        "question": "What are the ids of the candidates that have an outcome code of Pass?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Candidate_Assessments ] Predicate [ asessment_outcome_code = 'Pass' ] Output [ candidate_id , asessment_outcome_code ]"
    },
    {
        "id": "b6cca3fed57e82312761ca260fa8533d1bd287a27e80c0651281901bc501b3aa",
        "question": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Candidate_Assessments ] Predicate [ asessment_outcome_code = 'Fail' ] Output [ candidate_id , asessment_outcome_code ] ; #2 = Scan Table [ People ] Output [ cell_mobile_number , person_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.candidate_id = #2.person_id ] Output [ #2.cell_mobile_number ]"
    },
    {
        "id": "01974bdd2e57ad399d477236c26bae758685f5e9370fc76dcc6861e85ee2c6da",
        "question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Candidate_Assessments ] Predicate [ asessment_outcome_code = 'Fail' ] Output [ candidate_id , asessment_outcome_code ] ; #2 = Scan Table [ People ] Output [ cell_mobile_number , person_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.candidate_id = #2.person_id ] Output [ #2.cell_mobile_number ]"
    },
    {
        "id": "f99f6c3261f21f947eac174ccfaec7e6569289b15f4b9a99d40c78490c8ed7cb",
        "question": "What are the id of students who registered course 301?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Attendance ] Predicate [ course_id = 301 ] Output [ student_id , course_id ]"
    },
    {
        "id": "ed791df9cb523c70f275b198aefbfc9917d0048aef50b9cce8ce682e87810a15",
        "question": "What are the ids of the students who registered for course 301?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Attendance ] Predicate [ course_id = 301 ] Output [ student_id , course_id ]"
    },
    {
        "id": "660d558fe31a50f072af7f41982498dbbfe32e25fc761295ce1cd8f53ea942f7",
        "question": "What is the id of the student who most recently registered course 301?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Attendance ] Predicate [ course_id = 301 ] Output [ student_id , date_of_attendance , course_id ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date_of_attendance DESC ] Output [ student_id , date_of_attendance ]"
    },
    {
        "id": "79e57560a5743ff8a35773f5e0533ba605e18265fead6d9e8ebc946731fcb13c",
        "question": "What are the ids of the students who registered for course 301 most recently?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Attendance ] Predicate [ course_id = 301 ] Output [ student_id , date_of_attendance , course_id ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date_of_attendance DESC ] Output [ student_id , date_of_attendance ]"
    },
    {
        "id": "8be4594de9f7a66798f0e0f42704eb5249b8ca902f52ee57071093170769fb06",
        "question": "Find distinct cities of addresses of people?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ People_Addresses ] Output [ address_id ] ; #2 = Scan Table [ Addresses ] Output [ address_id , city ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Distinct [ true ] Output [ #2.city ]"
    },
    {
        "id": "ba893087f64af478d5cc6ebad69bcdf34872bb9645cc54679c2f1ab63c359c28",
        "question": "What are the different cities where people live?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ People_Addresses ] Output [ address_id ] ; #2 = Scan Table [ Addresses ] Output [ address_id , city ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Distinct [ true ] Output [ #2.city ]"
    },
    {
        "id": "f26fb7b7437f924ee75f64f56f342908e426538bedf5ca03b50ba5721dfb6584",
        "question": "Find distinct cities of address of students?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Students ] Output [ student_id ] ; #2 = Scan Table [ People_Addresses ] Output [ address_id , person_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.person_id ] Output [ #2.address_id ] ; #4 = Scan Table [ Addresses ] Output [ address_id , city ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.address_id = #4.address_id ] Distinct [ true ] Output [ #4.city ]"
    },
    {
        "id": "b52edbde128a98a4708d726f84af09d20c732fd6d768905dc5236e44013a279e",
        "question": "What are the different cities where students live?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Students ] Output [ student_id ] ; #2 = Scan Table [ People_Addresses ] Output [ address_id , person_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.person_id ] Output [ #2.address_id ] ; #4 = Scan Table [ Addresses ] Output [ address_id , city ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.address_id = #4.address_id ] Distinct [ true ] Output [ #4.city ]"
    },
    {
        "id": "0a0cc56532d1ce9b2be8be3ee1fb424f67f111259f065b54fd43f71577eb56c8",
        "question": "List the names of courses in alphabetical order?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Courses ] Output [ course_name ] ; #2 = Sort [ #1 ] OrderBy [ course_name ASC ] Output [ course_name ]"
    },
    {
        "id": "cc115b2b89335fa588fc160d702d86944ab577f6cec7a7fd10a906fb417d4f8b",
        "question": "What are the names of the courses in alphabetical order?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Courses ] Output [ course_name ] ; #2 = Sort [ #1 ] OrderBy [ course_name ASC ] Output [ course_name ]"
    },
    {
        "id": "82626d0b7651dd6a5c2b744afbaf4a7a8e4c9471b8e2cdc2f3be9c8d3787ca55",
        "question": "List the first names of people in alphabetical order?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ People ] Output [ first_name ] ; #2 = Sort [ #1 ] OrderBy [ first_name ASC ] Output [ first_name ]"
    },
    {
        "id": "4d062037065dd7fad6c432ae0fcac982c0c3949e5ee9ee93dbe5df78812f52e9",
        "question": "What are the first names of the people in alphabetical order?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ People ] Output [ first_name ] ; #2 = Sort [ #1 ] OrderBy [ first_name ASC ] Output [ first_name ]"
    },
    {
        "id": "148bbf602e44dbee15c5714d99676567818837aa301cdc0aa1b0c1d788d30033",
        "question": "What are the id of students who registered courses or attended courses?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Registrations ] Output [ student_id ] ; #2 = Aggregate [ #1 ] GroupBy [ student_id ] Output [ student_id ] ; #3 = Scan Table [ Student_Course_Attendance ] Output [ student_id ] ; #4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ student_id ] ; #5 = Union [ #2 , #4 ] Output [ #2.student_id ]"
    },
    {
        "id": "89e8396c72347f825e2d0ba819fff30c56b9865e77997c0ce3a27eebd13f92da",
        "question": "What are the ids of the students who either registered or attended a course?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Registrations ] Output [ student_id ] ; #2 = Aggregate [ #1 ] GroupBy [ student_id ] Output [ student_id ] ; #3 = Scan Table [ Student_Course_Attendance ] Output [ student_id ] ; #4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ student_id ] ; #5 = Union [ #2 , #4 ] Output [ #2.student_id ]"
    },
    {
        "id": "fa23c225ef8e06f534f1e9e4d956c245eee1470790bde2bbf715cc63d418d384",
        "question": "Find the id of courses which are registered or attended by student whose id is 121?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Registrations ] Predicate [ student_id = 121 ] Output [ student_id , course_id ] ; #2 = Scan Table [ Student_Course_Attendance ] Predicate [ student_id = 121 ] Output [ student_id , course_id ] ; #3 = Union [ #1 , #2 ] Output [ #1.course_id ]"
    },
    {
        "id": "a94a3ca121f434bc9ad819a74c2d768fc3499b0dfd59a5a4ac6eba68e7bcba18",
        "question": "What are the ids of the courses that are registered or attended by the student whose id is 121?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Registrations ] Predicate [ student_id = 121 ] Output [ student_id , course_id ] ; #2 = Scan Table [ Student_Course_Attendance ] Predicate [ student_id = 121 ] Output [ student_id , course_id ] ; #3 = Union [ #1 , #2 ] Output [ #1.course_id ]"
    },
    {
        "id": "cfc7c5841fa4d6469c85b0e97e0ef438c818010279369adbeaa110591e90ece7",
        "question": "What are all info of students who registered courses but not attended courses?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Registrations ] Output [ student_id , course_id , registration_date ] ; #2 = Scan Table [ Student_Course_Attendance ] Output [ student_id ] ; #3 = Aggregate [ #2 ] GroupBy [ student_id ] Output [ student_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.student_id = #1.student_id ] Output [ #1.registration_date , #1.course_id , #1.student_id ]"
    },
    {
        "id": "26a2e23fd6b1d30e8312fd7791cf234769c3387c76bfb6383bb00708a42db230",
        "question": "What are all details of the students who registered but did not attend any course?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Student_Course_Registrations ] Output [ student_id , course_id , registration_date ] ; #2 = Scan Table [ Student_Course_Attendance ] Output [ student_id ] ; #3 = Aggregate [ #2 ] GroupBy [ student_id ] Output [ student_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.student_id = #1.student_id ] Output [ #1.registration_date , #1.course_id , #1.student_id ]"
    },
    {
        "id": "eb091f7bae4aae67af08519d30e3c4123763ea58fc445a016893f789168759d1",
        "question": "List the id of students who registered course statistics in the order of registration date.",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Courses ] Predicate [ course_name = 'statistics' ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Registrations ] Output [ student_id , course_id , registration_date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.registration_date , #2.student_id ] ; #4 = Sort [ #3 ] OrderBy [ registration_date ASC ] Output [ student_id , registration_date ]"
    },
    {
        "id": "95ebe62b593427f287fb022eb3a4ae99a9594fe6d8ba5021cd7d124b27156888",
        "question": "What are the ids of the students who registered course statistics by order of registration date?",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Courses ] Predicate [ course_name = 'statistics' ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Registrations ] Output [ student_id , course_id , registration_date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.registration_date , #2.student_id ] ; #4 = Sort [ #3 ] OrderBy [ registration_date ASC ] Output [ student_id , registration_date ]"
    },
    {
        "id": "50bc1a05513026fb4a6a563bb839cf558fa3721597fc2016751718bc8339a878",
        "question": "List the id of students who attended  statistics courses in the order of attendance date.",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Courses ] Predicate [ course_name = 'statistics' ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Attendance ] Output [ student_id , date_of_attendance , course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.date_of_attendance , #2.student_id ] ; #4 = Sort [ #3 ] OrderBy [ date_of_attendance ASC ] Output [ student_id , date_of_attendance ]"
    },
    {
        "id": "0a76aae647fc12b399e0eaee1b8bdf7c6f90588b48281114e4a6a699d8b6cf91",
        "question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.",
        "parsing_tree": "student_assessment | #1 = Scan Table [ Courses ] Predicate [ course_name = 'statistics' ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Attendance ] Output [ student_id , date_of_attendance , course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.date_of_attendance , #2.student_id ] ; #4 = Sort [ #3 ] OrderBy [ date_of_attendance ASC ] Output [ student_id , date_of_attendance ]"
    },
    {
        "id": "38bca28582263b2c2df23d59fce6223cd738349266419088e43fc7aa445087c8",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ max_temperature_f > 85 ] Output [ date , max_temperature_f ]"
    },
    {
        "id": "8af9bf66d9e405b14cc7618fcb5258edef720f9d37bbec216d2697038599e3d0",
        "question": "What are the dates with a maximum temperature higher than 85?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ max_temperature_f > 85 ] Output [ date , max_temperature_f ]"
    },
    {
        "id": "5c978139b24f43c65593ea3080502fbe1b4741eb91c7b643f25f900418eb3d6c",
        "question": "What are the names of stations that have latitude lower than 37.5?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Predicate [ lat < 37.5 ] Output [ name , lat ]"
    },
    {
        "id": "ab5cf4d48fae2a2952d32016e880460ac1f5ab726337477dd66ffb42c82ce63c",
        "question": "What are the names of all stations with a latitude smaller than 37.5?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Predicate [ lat < 37.5 ] Output [ name , lat ]"
    },
    {
        "id": "0706697f1597716d2a52853e7fa9fc1b1f94181e897d10c6d3edbbc816ad92af",
        "question": "For each city, return the highest latitude among its stations.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ city , lat ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ MAX(lat) AS Max_lat , city ]"
    },
    {
        "id": "bb951602e899f7b431decbd392b476b92a4df1c77451fdb401f792d529557e85",
        "question": "For each city, what is the highest latitude for its stations?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ city , lat ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ MAX(lat) AS Max_lat , city ]"
    },
    {
        "id": "5e447b1a4564c2950995ae8063c3edd0d31f973da0a64644076bd0561df32860",
        "question": "Give me the start station and end station for the trips with the three oldest id.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Output [ end_station_name , start_station_name , id ] ; #2 = Top [ #1 ] Rows [ 3 ] Output [ end_station_name , start_station_name ]"
    },
    {
        "id": "0fa3aedf90e60bfdc6b0e855d1e28bc0f6d27e3e0f5ee1f63583f1d2477c9f2f",
        "question": "What is the station station and end station for the trips with the three smallest ids?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Output [ end_station_name , start_station_name , id ] ; #2 = Top [ #1 ] Rows [ 3 ] Output [ end_station_name , start_station_name ]"
    },
    {
        "id": "d236e1ac0bcb8e43614eb9e5f5c708f80d22eccc77a7bc5f194f73d13f919a26",
        "question": "What is the average latitude and longitude of stations located in San Jose city?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Predicate [ city = 'San Jose' ] Output [ city , long , lat ] ; #2 = Aggregate [ #1 ] Output [ AVG(lat) AS Avg_lat , AVG(long) AS Avg_long ]"
    },
    {
        "id": "3203efc343f0adb529e8fd715eb7a542f3e0666d5c1a9f3679f3b0f3f42612de",
        "question": "What is the average latitude and longitude in San Jose?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Predicate [ city = 'San Jose' ] Output [ city , long , lat ] ; #2 = Aggregate [ #1 ] Output [ AVG(lat) AS Avg_lat , AVG(long) AS Avg_long ]"
    },
    {
        "id": "f631918dd7e2446fcec664d2c3e65fe2d69f0768fd99d15a2012ba28b20b5b8b",
        "question": "What is the id of the trip that has the shortest duration?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Output [ duration , id ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ duration ASC ] Output [ duration , id ]"
    },
    {
        "id": "02f1e17f2f13fa0508a03466515054a2c252f653c177844b6a814be435b95894",
        "question": "What is the id of the shortest trip?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Output [ duration , id ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ duration ASC ] Output [ duration , id ]"
    },
    {
        "id": "3c487f5b74e9b04c6c3971518315050f055e7e29bc32ab3cc5ddcc8060ef537c",
        "question": "What is the total and maximum duration of trips with bike id 636?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Predicate [ bike_id = 636 ] Output [ bike_id , duration ] ; #2 = Aggregate [ #1 ] Output [ SUM(duration) AS Sum_duration , MAX(duration) AS Max_duration ]"
    },
    {
        "id": "26ee328b390f57b8c45047e66466b53adb7384ccb29914bfce1df1f92697c514",
        "question": "What is the total and maximum duration for all trips with the bike id 636?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Predicate [ bike_id = 636 ] Output [ bike_id , duration ] ; #2 = Aggregate [ #1 ] Output [ SUM(duration) AS Sum_duration , MAX(duration) AS Max_duration ]"
    },
    {
        "id": "1e0c47536d9117543435f5a4ebd1181551f088fbef6f049171feaa36233fc259",
        "question": "For each zip code, return the average mean temperature of August there.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ date like '8/%' ] Output [ zip_code , date , mean_temperature_f ] ; #2 = Aggregate [ #1 ] GroupBy [ zip_code ] Output [ zip_code , AVG(mean_temperature_f) AS Avg_mean_temperature_f ]"
    },
    {
        "id": "bb07f6d56e7bd0959edfa797729dd8d9caa0760e940b85aae581073c356898be",
        "question": "For each zip code, what is the average mean temperature for all dates that start with '8'?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ date like '8/%' ] Output [ zip_code , date , mean_temperature_f ] ; #2 = Aggregate [ #1 ] GroupBy [ zip_code ] Output [ zip_code , AVG(mean_temperature_f) AS Avg_mean_temperature_f ]"
    },
    {
        "id": "b7d878dcd6f3b8a774190cf6fe37594c0f24fab943d8199fa8fffd04def6e21f",
        "question": "From the trip record, find the number of unique bikes.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Distinct [ true ] Output [ bike_id ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT bike_id) AS Count_Dist_bike_id ]"
    },
    {
        "id": "c3fa2c96566d5862ab253fb70a76a7b7921fd6855cae7250ca1d5d80f29c155e",
        "question": "How many different bike ids are there?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Distinct [ true ] Output [ bike_id ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT bike_id) AS Count_Dist_bike_id ]"
    },
    {
        "id": "368cc9355d56eb3b486eca93685769263c1f9b62a5c5d08e0bd7d2a51bccbc12",
        "question": "What is the number of distinct cities the stations are located at?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Distinct [ true ] Output [ city ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT city) AS Count_Dist_city ]"
    },
    {
        "id": "5fd9c18fd8f7f3d18ca2daa79dd37b67cd7a2767c46617f91061d81da21977b4",
        "question": "How many different cities have these stations?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Distinct [ true ] Output [ city ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT city) AS Count_Dist_city ]"
    },
    {
        "id": "1b1d690cbac6b0e9c3ae7f8dcee645737cb8e86a89037c1738a377b7eb6aa143",
        "question": "How many stations does Mountain View city has?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Predicate [ city = 'Mountain View' ] Output [ city ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "64f47791fba6f5dc30f1cd1461598f350c29a6cd72dc3a2ea69c5e9f48bc44d2",
        "question": "How many stations are in Mountain View?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Predicate [ city = 'Mountain View' ] Output [ city ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "af542f0cb8ec9c085df5a2b746d33739107bc53fd8c832dacf12c7b646dd648d",
        "question": "Return the unique name for stations that have ever had 7 bikes available.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ status ] Predicate [ bikes_available = 7 ] Distinct [ true ] Output [ station_id , bikes_available ] ; #2 = Scan Table [ station ] Output [ name , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.station_id = #2.id ] Distinct [ true ] Output [ #2.name ]"
    },
    {
        "id": "7710d36d72e327af80ce4a562fd13a88fe4bbb6aa8427242ef1dd53ce345f840",
        "question": "What are the different names for each station that has ever had 7 bikes available?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ status ] Predicate [ bikes_available = 7 ] Distinct [ true ] Output [ station_id , bikes_available ] ; #2 = Scan Table [ station ] Output [ name , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.station_id = #2.id ] Distinct [ true ] Output [ #2.name ]"
    },
    {
        "id": "fd73e8699a38df392a3daad6330cf07e65da22dfd584291478f2cce5adec1496",
        "question": "Which start station had the most trips starting from August? Give me the name and id of the station.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Predicate [ start_date like '8/%' ] Output [ start_date , start_station_id , start_station_name ] ; #2 = Aggregate [ #1 ] GroupBy [ start_station_id , start_station_name ] Output [ countstar AS Count_Star , start_station_id , start_station_name ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , start_station_id , start_station_name ]"
    },
    {
        "id": "703ad8491c8060cfe80ba0c0734b83ade20b298a7122634a986c06a1de56c642",
        "question": "What are the start station's name and id for the one that had the most start trips in August?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Predicate [ start_date like '8/%' ] Output [ start_date , start_station_id , start_station_name ] ; #2 = Aggregate [ #1 ] GroupBy [ start_station_id , start_station_name ] Output [ countstar AS Count_Star , start_station_id , start_station_name ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , start_station_id , start_station_name ]"
    },
    {
        "id": "12fcfeedacdd250de9d0e2d63c6b2b952c4bd862bd68cc37cc4f8c6c6c3c86e0",
        "question": "Which bike traveled the most often in zip code 94002?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Predicate [ zip_code = 94002 ] Output [ zip_code , bike_id ] ; #2 = Aggregate [ #1 ] GroupBy [ bike_id ] Output [ countstar AS Count_Star , bike_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , bike_id ]"
    },
    {
        "id": "7070e7d2bd787f19b8901abae9caeffe61b21124df74bc8f12d3fdb8d000eb54",
        "question": "What is the id of the bike that traveled the most in 94002?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Predicate [ zip_code = 94002 ] Output [ zip_code , bike_id ] ; #2 = Aggregate [ #1 ] GroupBy [ bike_id ] Output [ countstar AS Count_Star , bike_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , bike_id ]"
    },
    {
        "id": "416bbc244f0ea81fd844eeb694758b183fd8be5c4e6b5a37a93f14da6d2f9278",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ mean_humidity > 50 AND mean_visibility_miles > 8 ] Output [ mean_visibility_miles , mean_humidity ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "dd1269d25122e92cfb73ba0e6ff2880484985d0db15e1ed83c50226e14d80356",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ mean_humidity > 50 AND mean_visibility_miles > 8 ] Output [ mean_visibility_miles , mean_humidity ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f1b66880b87ca798edcb9f7028af744cafd7816166a5843bfbf62a195a41895b",
        "question": "What is the latitude, longitude, city of the station from which the shortest trip started?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ lat , city , long , id ] ; #2 = Scan Table [ trip ] Output [ start_station_id , duration ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.start_station_id ] Output [ #1.long , #2.duration , #1.lat , #1.city ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ duration ASC ] Output [ duration , city , long , lat ]"
    },
    {
        "id": "93b565f9e374fc4f1087cc8905aecd8370ae66637241ea5cc7776c28834c1af3",
        "question": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ lat , city , long , id ] ; #2 = Scan Table [ trip ] Output [ start_station_id , duration ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.start_station_id ] Output [ #1.long , #2.duration , #1.lat , #1.city ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ duration ASC ] Output [ duration , city , long , lat ]"
    },
    {
        "id": "63ba9976df86608637a5a134fd9c698aa149eaaa5163e08dc9e5bd8a2c0cf709",
        "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ status ] Output [ station_id , bikes_available ] ; #2 = Aggregate [ #1 ] GroupBy [ station_id ] Output [ station_id , AVG(bikes_available) AS Avg_bikes_available ] ; #3 = Filter [ #2 ] Predicate [ Avg_bikes_available > 10 ] Output [ station_id ] ; #4 = Scan Table [ station ] Predicate [ city = 'San Francisco' ] Output [ city , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.station_id = #4.id ] Output [ #4.id ]"
    },
    {
        "id": "d03719a9452548303ef609ffd1f8ffbb355b4e65d1928274a5e723aec07bdd43",
        "question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ status ] Output [ station_id , bikes_available ] ; #2 = Aggregate [ #1 ] GroupBy [ station_id ] Output [ station_id , AVG(bikes_available) AS Avg_bikes_available ] ; #3 = Filter [ #2 ] Predicate [ Avg_bikes_available > 10 ] Output [ station_id ] ; #4 = Scan Table [ station ] Predicate [ city = 'San Francisco' ] Output [ city , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.station_id = #4.id ] Output [ #4.id ]"
    },
    {
        "id": "3a3a879d7eac437cdca93b240c8b46e52f35296883132c3fbd20784dcd4dba49",
        "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ zip_code = 94107 ] Output [ zip_code , cloud_cover ] ; #2 = Aggregate [ #1 ] GroupBy [ cloud_cover ] Output [ countstar AS Count_Star , cloud_cover ] ; #3 = TopSort [ #2 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , cloud_cover ]"
    },
    {
        "id": "38b9d20d1e37ff5d5cacbb0f5c88a7cd2c98be54605ea65ba656df7abb360551",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ zip_code = 94107 ] Output [ zip_code , cloud_cover ] ; #2 = Aggregate [ #1 ] GroupBy [ cloud_cover ] Output [ countstar AS Count_Star , cloud_cover ] ; #3 = TopSort [ #2 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , cloud_cover ]"
    },
    {
        "id": "cfd4e6878cacf66bf95d2cdb2b0dc1e46645728f569246c2c23a02c0b0044b65",
        "question": "What is the zip code in which the average mean sea level pressure is the lowest?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Output [ mean_sea_level_pressure_inches , zip_code ] ; #2 = Aggregate [ #1 ] GroupBy [ zip_code ] Output [ AVG(mean_sea_level_pressure_inches) AS Avg_mean_sea_level_pressure_inches , zip_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Avg_mean_sea_level_pressure_inches ASC ] Output [ zip_code , Avg_mean_sea_level_pressure_inches ]"
    },
    {
        "id": "3244c77fb16cde990ce667c55c9a8b2a5f58ea6e3c9514b299feb442b51d1395",
        "question": "What is the zip code that has the lowest average mean sea level pressure?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Output [ mean_sea_level_pressure_inches , zip_code ] ; #2 = Aggregate [ #1 ] GroupBy [ zip_code ] Output [ AVG(mean_sea_level_pressure_inches) AS Avg_mean_sea_level_pressure_inches , zip_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Avg_mean_sea_level_pressure_inches ASC ] Output [ zip_code , Avg_mean_sea_level_pressure_inches ]"
    },
    {
        "id": "44ffe916309f90e02bbc3862b8169c1b7f3e443cedfa4b5ae92faa709795de52",
        "question": "What is the average longitude of stations that never had bike availability more than 10?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ long , id ] ; #2 = Scan Table [ status ] Output [ station_id , bikes_available ] ; #3 = Aggregate [ #2 ] Output [ station_id , MAX(bikes_available) AS Max_bikes_available ] ; #4 = Filter [ #3 ] Predicate [ Max_bikes_available > 10 ] Output [ station_id ] ; #5 = Except [ #1 , #4 ] Predicate [ #4.station_id IS NULL OR #1.id = #4.station_id ] Output [ #1.long ] ; #6 = Aggregate [ #5 ] Output [ AVG(long) AS Avg_long ]"
    },
    {
        "id": "e21e08b679a5c9989c14f81a0a6ceae5aa2e892a3dcd2a6e3af532d445e8d52c",
        "question": "What is the mean longitude for all stations that have never had more than 10 bikes available?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ long , id ] ; #2 = Scan Table [ status ] Output [ station_id , bikes_available ] ; #3 = Aggregate [ #2 ] Output [ station_id , MAX(bikes_available) AS Max_bikes_available ] ; #4 = Filter [ #3 ] Predicate [ Max_bikes_available > 10 ] Output [ station_id ] ; #5 = Except [ #1 , #4 ] Predicate [ #4.station_id IS NULL OR #1.id = #4.station_id ] Output [ #1.long ] ; #6 = Aggregate [ #5 ] Output [ AVG(long) AS Avg_long ]"
    },
    {
        "id": "bfb64f830667dfe8b71f38683d4d00c75acfcfc792ec39e867967ea59e2f3181",
        "question": "When and in what zip code did max temperature reach 80?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ max_temperature_f >= 80 ] Output [ zip_code , date , max_temperature_f ]"
    },
    {
        "id": "1ecb780e1308e3d6d76397f405f5582b475435a0c860b17274ef795c5240ca78",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ max_temperature_f >= 80 ] Output [ zip_code , date , max_temperature_f ]"
    },
    {
        "id": "b62892360ba2f373283ecfd92c8c7533b2e2460c12d0c6b8e9197c7a9ce1b83b",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Output [ zip_code , mean_temperature_f ] ; #2 = Aggregate [ #1 ] GroupBy [ zip_code ] Output [ zip_code , AVG(mean_temperature_f) AS Avg_mean_temperature_f ] ; #3 = Scan Table [ trip ] Output [ zip_code , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.zip_code = #3.zip_code ] Output [ #3.id , #2.Avg_mean_temperature_f ] ; #5 = Filter [ #4 ] Predicate [ Avg_mean_temperature_f > 60 ] Output [ id ]"
    },
    {
        "id": "c8b2af9b9c670ba300fcecd5755211cbd1956e37e4c0cae8f48632f400d35878",
        "question": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Output [ zip_code , mean_temperature_f ] ; #2 = Aggregate [ #1 ] GroupBy [ zip_code ] Output [ zip_code , AVG(mean_temperature_f) AS Avg_mean_temperature_f ] ; #3 = Scan Table [ trip ] Output [ zip_code , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.zip_code = #3.zip_code ] Output [ #3.id , #2.Avg_mean_temperature_f ] ; #5 = Filter [ #4 ] Predicate [ Avg_mean_temperature_f > 60 ] Output [ id ]"
    },
    {
        "id": "bdead28e61ddd5c3eb00fb27472c6a38dd6d38d694c12ce872f0083d812fadc4",
        "question": "For each zip code, return how many times max wind speed reached 25?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ max_wind_Speed_mph >= 25 ] Output [ zip_code , max_wind_Speed_mph ] ; #2 = Aggregate [ #1 ] GroupBy [ zip_code ] Output [ countstar AS Count_Star , zip_code ]"
    },
    {
        "id": "dfe31732c7c89171ea8fdfc622b8a9107ee56c13286140183d6ca163227ce04c",
        "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ max_wind_Speed_mph >= 25 ] Output [ zip_code , max_wind_Speed_mph ] ; #2 = Aggregate [ #1 ] GroupBy [ zip_code ] Output [ countstar AS Count_Star , zip_code ]"
    },
    {
        "id": "299cf6838f715641066e9174747b13d7d253549bba51e8c3a6c3a0742133486c",
        "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ zip_code = 94107 ] Output [ min_dew_point_f , zip_code ] ; #2 = Aggregate [ #1 ] Output [ MIN(min_dew_point_f) AS Min_min_dew_point_f ] ; #3 = Scan Table [ weather ] Output [ min_dew_point_f , zip_code , date ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.min_dew_point_f < #2.Min_min_dew_point_f ] Output [ #3.zip_code , #3.date ]"
    },
    {
        "id": "0e58bacb31564af5be55c9c79665cdd87cf78dcccefb8fa35d83d2a11e770818",
        "question": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ zip_code = 94107 ] Output [ min_dew_point_f , zip_code ] ; #2 = Aggregate [ #1 ] Output [ MIN(min_dew_point_f) AS Min_min_dew_point_f ] ; #3 = Scan Table [ weather ] Output [ min_dew_point_f , zip_code , date ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.min_dew_point_f < #2.Min_min_dew_point_f ] Output [ #3.zip_code , #3.date ]"
    },
    {
        "id": "b7ef89e2ad10fb40cb95f0f7c06721f4207e82a7ff72cb41bedd431225a44eec",
        "question": "For each trip, return its ending station's installation date.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ installation_date , id ] ; #2 = Scan Table [ trip ] Output [ end_station_id , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.end_station_id ] Output [ #1.installation_date , #2.id ]"
    },
    {
        "id": "9e0131ffb453f9e289117248b877337b73b9ff73424ba8c29adb2d3ad56f8ce7",
        "question": "What is the installation date for each ending station on all the trips?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ installation_date , id ] ; #2 = Scan Table [ trip ] Output [ end_station_id , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.end_station_id ] Output [ #1.installation_date , #2.id ]"
    },
    {
        "id": "245c6fefccf6e0d263f47cbf044c3b7c5e974ab196bf2d6bf55334516ed256d3",
        "question": "Count the number of trips that did not end in San Francisco city.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Predicate [ city <> 'San Francisco' ] Output [ city , id ] ; #2 = Scan Table [ trip ] Output [ end_station_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.end_station_id ] Output [ #1.id , #1.city ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f7cc47764e2119e183079a270342c947b1a700d45f848a4d8198e70492333ee3",
        "question": "How many trips did not end in San Francisco?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Predicate [ city <> 'San Francisco' ] Output [ city , id ] ; #2 = Scan Table [ trip ] Output [ end_station_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.end_station_id ] Output [ #1.id , #1.city ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b384be188ae12ae85c0efccc0df3e040100e2b72b061b691a7140066aa11dc47",
        "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ status ] Output [ station_id , bikes_available ] ; #2 = Aggregate [ #1 ] GroupBy [ station_id ] Output [ station_id , AVG(bikes_available) AS Avg_bikes_available ] ; #3 = Scan Table [ station ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.station_id = #3.id ] Output [ #3.name , #2.Avg_bikes_available ] ; #5 = Filter [ #4 ] Predicate [ Avg_bikes_available > 10 ] Distinct [ true ] Output [ name ] ; #6 = Scan Table [ station ] Predicate [ city = 'San Jose' ] Output [ name , city ] ; #7 = Except [ #5 , #6 ] Predicate [ #5.name = #6.name ] Output [ #5.name ]"
    },
    {
        "id": "f976631d667330a5a91e11a00fe60967a50cfdc65754414d9fa687bc4a85d9e9",
        "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ status ] Output [ station_id , bikes_available ] ; #2 = Aggregate [ #1 ] GroupBy [ station_id ] Output [ station_id , AVG(bikes_available) AS Avg_bikes_available ] ; #3 = Scan Table [ station ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.station_id = #3.id ] Output [ #3.name , #2.Avg_bikes_available ] ; #5 = Filter [ #4 ] Predicate [ Avg_bikes_available > 10 ] Distinct [ true ] Output [ name ] ; #6 = Scan Table [ station ] Predicate [ city = 'San Jose' ] Output [ name , city ] ; #7 = Except [ #5 , #6 ] Predicate [ #5.name = #6.name ] Output [ #5.name ]"
    },
    {
        "id": "4e7f9ed51c0b38492c41d10cc6a12f6a5106c2a9229ddba311b38a5c79278286",
        "question": "What are the name, latitude, and city of the station with the lowest latitude?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ name , city , lat ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ lat ASC ] Output [ name , city , lat ]"
    },
    {
        "id": "6e78efe547ff16014638522b85c0e81176ec7f0f2eabde362318b2a6d451f2d6",
        "question": "What is the name, latitude, and city of the station that is located the furthest South?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ name , city , lat ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ lat ASC ] Output [ name , city , lat ]"
    },
    {
        "id": "3bae371aa204e5f4f9f562a90d450948b9b32bdffd1047485644c6089dc41d74",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Output [ date , mean_temperature_f , max_gust_speed_mph , mean_humidity ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ max_gust_speed_mph DESC ] Output [ date , mean_temperature_f , max_gust_speed_mph , mean_humidity ]"
    },
    {
        "id": "1bc3f9b060ea326966888c230317c8d6d2647b48ae7e9f628e0627da878bee31",
        "question": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Output [ date , mean_temperature_f , max_gust_speed_mph , mean_humidity ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ max_gust_speed_mph DESC ] Output [ date , mean_temperature_f , max_gust_speed_mph , mean_humidity ]"
    },
    {
        "id": "e5dccb2c582ef8641d7f9b4374d3ab69b3d018e5a2d74882956a9da73b4da179",
        "question": "List the name and the number of stations for all the cities that have at least 15 stations.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ city ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 15 ] Output [ Count_Star , city ]"
    },
    {
        "id": "6eb2604ecde6faa09753f35288ab1ebd7abd8c707af6a73b22bebd69c711baec",
        "question": "What is the name of every city that has at least 15 stations and how many stations does it have?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ city ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 15 ] Output [ Count_Star , city ]"
    },
    {
        "id": "ad457595bb416841086887698c1b64ce533387905529ea8bccac58d72cc5ccfb",
        "question": "Find the ids and names of stations from which at least 200 trips started.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Output [ start_station_id , start_station_name ] ; #2 = Aggregate [ #1 ] GroupBy [ start_station_name , start_station_id ] Output [ countstar AS Count_Star , start_station_id , start_station_name ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 200 ] Output [ start_station_id , start_station_name ]"
    },
    {
        "id": "fcf66e82a8673062fa88494bb942b1be8683a29515d311cacdc534cd317dfe55",
        "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Output [ start_station_id , start_station_name ] ; #2 = Aggregate [ #1 ] GroupBy [ start_station_name , start_station_id ] Output [ countstar AS Count_Star , start_station_id , start_station_name ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 200 ] Output [ start_station_id , start_station_name ]"
    },
    {
        "id": "da90406319eb63791446366fdc40ebeb2fa0b94a3a1c58fa15689c90e4b84b20",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Output [ zip_code , mean_visibility_miles ] ; #2 = Aggregate [ #1 ] GroupBy [ zip_code ] Output [ AVG(mean_visibility_miles) AS Avg_mean_visibility_miles , zip_code ] ; #3 = Filter [ #2 ] Predicate [ Avg_mean_visibility_miles < 10 ] Output [ zip_code ]"
    },
    {
        "id": "7699ad11b8a13028de9101f9f183a3d542f807419250788ebdfafac8aec0b008",
        "question": "For each zip code, select all those that have an average mean visiblity below 10.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Output [ zip_code , mean_visibility_miles ] ; #2 = Aggregate [ #1 ] GroupBy [ zip_code ] Output [ AVG(mean_visibility_miles) AS Avg_mean_visibility_miles , zip_code ] ; #3 = Filter [ #2 ] Predicate [ Avg_mean_visibility_miles < 10 ] Output [ zip_code ]"
    },
    {
        "id": "dedcf6f71a10a247eca6b0b561c48e8c619bc3cc10c9c9b1b447869b45aa6f1c",
        "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Output [ date , cloud_cover ] ; #2 = TopSort [ #1 ] Rows [ 5 ] OrderBy [ cloud_cover DESC ] Output [ date , cloud_cover ]"
    },
    {
        "id": "cd3d54c4eb487bd0103478e98629dbb8c4bb284e8362bacc260827be36755651",
        "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Output [ date , cloud_cover ] ; #2 = TopSort [ #1 ] Rows [ 5 ] OrderBy [ cloud_cover DESC ] Output [ date , cloud_cover ]"
    },
    {
        "id": "3f14b690730bcb35a8b50f57aeb1cfcae79a999ef8aaf47862e49f3763353a93",
        "question": "What are the ids and durations of the trips with the top 3 durations?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Output [ duration , id ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ duration DESC ] Output [ duration , id ]"
    },
    {
        "id": "517e282278af688678f9a3533955d0a15b0289c87dfc27169801f960b6b3c218",
        "question": "What are the ids of the trips that lasted the longest and how long did they last?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Output [ duration , id ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ duration DESC ] Output [ duration , id ]"
    },
    {
        "id": "ff3fa9155f4b15d12a445e5c375945372ef405f11f50cab893982230705f9efa",
        "question": "For each station, return its longitude and the average duration of trips that started from the station.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Output [ start_station_id , duration ] ; #2 = Aggregate [ #1 ] GroupBy [ start_station_id ] Output [ AVG(duration) AS Avg_duration , start_station_id ] ; #3 = Scan Table [ station ] Output [ name , long , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.start_station_id = #3.id ] Output [ #3.name , #2.Avg_duration , #3.long ]"
    },
    {
        "id": "1628a0abfddcb2ed0aec59cbc04614d1d43821f743c0e4a5a283c097eef3b3a0",
        "question": "For each start station id, what is its name, longitude and average duration of trips started there?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Output [ start_station_id , duration ] ; #2 = Aggregate [ #1 ] GroupBy [ start_station_id ] Output [ AVG(duration) AS Avg_duration , start_station_id ] ; #3 = Scan Table [ station ] Output [ name , long , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.start_station_id = #3.id ] Output [ #3.name , #2.Avg_duration , #3.long ]"
    },
    {
        "id": "6b0ed300e6aca92c542bb3b6484c690335f25b79fd8651e4d9204899176ca6d6",
        "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Output [ end_station_id , duration ] ; #2 = Aggregate [ #1 ] GroupBy [ end_station_id ] Output [ MIN(duration) AS Min_duration , end_station_id ] ; #3 = Scan Table [ station ] Output [ name , id , lat ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.end_station_id = #3.id ] Output [ #3.name , #2.Min_duration , #3.lat ]"
    },
    {
        "id": "0d089d717c70d01438519c274089214a80c2af2306a3d65eba4eba31bd6b9ae1",
        "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Output [ end_station_id , duration ] ; #2 = Aggregate [ #1 ] GroupBy [ end_station_id ] Output [ MIN(duration) AS Min_duration , end_station_id ] ; #3 = Scan Table [ station ] Output [ name , id , lat ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.end_station_id = #3.id ] Output [ #3.name , #2.Min_duration , #3.lat ]"
    },
    {
        "id": "ff8bc7e81f760f1a9c890abd446fb82c4611a77a3a059020cbb7e337734c4558",
        "question": "List all the distinct stations from which a trip of duration below 100 started.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Predicate [ duration < 100 ] Distinct [ true ] Output [ start_station_name ]"
    },
    {
        "id": "2dabacc0acd7c76a01e8f8e1ca81cfd01873a95d50217165b487dcfb04ed6d57",
        "question": "What are all the different start station names for a trip that lasted less than 100?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Predicate [ duration < 100 ] Distinct [ true ] Output [ start_station_name ]"
    },
    {
        "id": "31aaf487a9c4419ba787a8c64207aa800a3d1e0db7c24d7c7808cdad36490756",
        "question": "Find all the zip codes in which the max dew point have never reached 70.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Distinct [ true ] Output [ zip_code ] ; #2 = Scan Table [ weather ] Predicate [ max_dew_point_f >= 70 ] Distinct [ true ] Output [ zip_code , max_dew_point_f ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.zip_code = #2.zip_code ] Output [ #1.zip_code ]"
    },
    {
        "id": "453d9a82af737bd0c154085deec67ca4898f915a01e04eb57cfcb430f252d6c4",
        "question": "What are all the different zip codes that have a maximum dew point that was always below 70?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Distinct [ true ] Output [ zip_code ] ; #2 = Scan Table [ weather ] Predicate [ max_dew_point_f >= 70 ] Distinct [ true ] Output [ zip_code , max_dew_point_f ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.zip_code = #2.zip_code ] Output [ #1.zip_code ]"
    },
    {
        "id": "dedfac116b4d56d25f06562797813880393451c9bb0e2b5be1acf435de7d3d6c",
        "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Predicate [ zip_code = 94103 ] Output [ zip_code , duration ] ; #2 = Aggregate [ #1 ] Output [ AVG(duration) AS Avg_duration ] ; #3 = Scan Table [ trip ] Output [ duration , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.duration >= #2.Avg_duration ] Output [ #3.id ]"
    },
    {
        "id": "8b7d8ac29d3c94b11c690f9d85a2f789b7b0784045c44ce2eaf811bcdef46f1b",
        "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ trip ] Predicate [ zip_code = 94103 ] Output [ zip_code , duration ] ; #2 = Aggregate [ #1 ] Output [ AVG(duration) AS Avg_duration ] ; #3 = Scan Table [ trip ] Output [ duration , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.duration >= #2.Avg_duration ] Output [ #3.id ]"
    },
    {
        "id": "2ada7823e3bed4444e7149a32460d4aec5e15fee3d3bcf8c4df70121c893dd1b",
        "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ mean_sea_level_pressure_inches >= 30.3 AND mean_sea_level_pressure_inches <= 31.0 ] Output [ mean_sea_level_pressure_inches , date ]"
    },
    {
        "id": "ca56f1530c4459210950f4c6a6c7224dd39362e55b807ed3a01f9b15c143dad8",
        "question": "What are the dates that have an average sea level pressure between 30.3 and 31?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Predicate [ mean_sea_level_pressure_inches >= 30.3 AND mean_sea_level_pressure_inches <= 31.0 ] Output [ mean_sea_level_pressure_inches , date ]"
    },
    {
        "id": "b2c8f49faac756b7d827a67a52a7bae73a32612aa77f6c895e29653214776fa1",
        "question": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ name , id ] ; #2 = Scan Table [ status ] Predicate [ bikes_available > 12 ] Output [ station_id , bikes_available ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.station_id = #1.id ] Output [ #1.name , #1.id ]"
    },
    {
        "id": "27627bc6a8dad3cc4059d173a5e1e550d35bcdac62facc97a0fb0b83b9a429f4",
        "question": "What are the different ids and names of the stations that have had more than 12 bikes available?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ name , id ] ; #2 = Scan Table [ status ] Predicate [ bikes_available > 12 ] Output [ station_id , bikes_available ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.station_id = #1.id ] Output [ #1.name , #1.id ]"
    },
    {
        "id": "1cbdd20e568e30b6e1f50e336a85724ad6503a756ac1a69a3c119f1e17144cf8",
        "question": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Output [ zip_code , mean_humidity ] ; #2 = Aggregate [ #1 ] GroupBy [ zip_code ] Output [ AVG(mean_humidity) AS Avg_mean_humidity , zip_code ] ; #3 = Filter [ #2 ] Predicate [ Avg_mean_humidity < 70 ] Output [ zip_code ] ; #4 = Scan Table [ trip ] Output [ zip_code ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.zip_code = #4.zip_code ] Output [ #3.zip_code ] ; #6 = Aggregate [ #5 ] GroupBy [ zip_code ] Output [ countstar AS Count_Star , zip_code ] ; #7 = Filter [ #6 ] Predicate [ Count_Star >= 100 ] Output [ zip_code ]"
    },
    {
        "id": "dd6082b516f368a13565239aeb4e76827fe94d840b3fdfe189aab581f1f3ea1a",
        "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ weather ] Output [ zip_code , mean_humidity ] ; #2 = Aggregate [ #1 ] GroupBy [ zip_code ] Output [ AVG(mean_humidity) AS Avg_mean_humidity , zip_code ] ; #3 = Filter [ #2 ] Predicate [ Avg_mean_humidity < 70 ] Output [ zip_code ] ; #4 = Scan Table [ trip ] Output [ zip_code ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.zip_code = #4.zip_code ] Output [ #3.zip_code ] ; #6 = Aggregate [ #5 ] GroupBy [ zip_code ] Output [ countstar AS Count_Star , zip_code ] ; #7 = Filter [ #6 ] Predicate [ Count_Star >= 100 ] Output [ zip_code ]"
    },
    {
        "id": "c25df819c41cf3ef2be12ccc713efa62c85ceff16d6ae5792e998f469615e165",
        "question": "What is the average latitude and longitude of the starting points of all trips?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ lat , long , id ] ; #2 = Scan Table [ trip ] Output [ start_station_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.start_station_id ] Output [ #1.long , #1.lat ] ; #4 = Aggregate [ #3 ] Output [ AVG(lat) AS Avg_lat , AVG(long) AS Avg_long ]"
    },
    {
        "id": "03081856c56929fd359b558faafe3bf0260141e17f7d55c89da847851c977a7d",
        "question": "What is the average latitude and longitude of all starting stations for the trips?",
        "parsing_tree": "bike_1 | #1 = Scan Table [ station ] Output [ lat , long , id ] ; #2 = Scan Table [ trip ] Output [ start_station_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.start_station_id ] Output [ #1.long , #1.lat ] ; #4 = Aggregate [ #3 ] Output [ AVG(lat) AS Avg_lat , AVG(long) AS Avg_long ]"
    },
    {
        "id": "95eec9b742e5b58e736ce6bd8583580a3496752ed2c1b38689cbbbef3a644f17",
        "question": "How many books are there?",
        "parsing_tree": "book_2 | #1 = Scan Table [ book ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0fef24269ff1794aaa4fae8a52e39d807d9db7550f447a9fca05af7a99b30892",
        "question": "List the writers of the books in ascending alphabetical order.",
        "parsing_tree": "book_2 | #1 = Scan Table [ book ] Output [ Writer ] ; #2 = Sort [ #1 ] OrderBy [ Writer ASC ] Output [ Writer ]"
    },
    {
        "id": "e8eac87787680ef30c54af2c1eb210f8bdadb19703ea57fabb1eaa6ec3ab8fba",
        "question": "List the titles of the books in ascending order of issues.",
        "parsing_tree": "book_2 | #1 = Scan Table [ book ] Output [ Issues , Title ] ; #2 = Sort [ #1 ] OrderBy [ Issues ASC ] Output [ Issues , Title ]"
    },
    {
        "id": "296145db87a60f93603139fdb89d7f04e05a86948a530af58d22302a48924678",
        "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?",
        "parsing_tree": "book_2 | #1 = Scan Table [ book ] Predicate [ Writer <> 'Elaine Lee' ] Output [ Writer , Title ]"
    },
    {
        "id": "79500bdc70f196b9e0f0a0a84ad82f1a550cc81c27b8d0787c3aed87426748a0",
        "question": "What are the title and issues of the books?",
        "parsing_tree": "book_2 | #1 = Scan Table [ book ] Output [ Issues , Title ]"
    },
    {
        "id": "344e2958c0e25b6713acd0beb14ba09e6c90db7ddd1ae85f037d5d0cdae36328",
        "question": "What are the dates of publications in descending order of price?",
        "parsing_tree": "book_2 | #1 = Scan Table [ publication ] Output [ Price , Publication_Date ] ; #2 = Sort [ #1 ] OrderBy [ Price DESC ] Output [ Price , Publication_Date ]"
    },
    {
        "id": "77f70a0a4151f9b6641295c8e3d1a483596d709a4a08861aa62c363deabd4256",
        "question": "What are the distinct publishers of publications with price higher than 5000000?",
        "parsing_tree": "book_2 | #1 = Scan Table [ publication ] Predicate [ Price > 5000000.0 ] Distinct [ true ] Output [ Publisher ]"
    },
    {
        "id": "fbc809aee9630064381a820ea0b623e58e5efed0ac8d992931f65b4ccf7733da",
        "question": "List the publisher of the publication with the highest price.",
        "parsing_tree": "book_2 | #1 = Scan Table [ publication ] Output [ Price , Publisher ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Price DESC ] Output [ Price , Publisher ]"
    },
    {
        "id": "33c8b5638943e2c47f63470ee4aa55fdd31344483bb5e636b8489626b4cf0895",
        "question": "List the publication dates of publications with 3 lowest prices.",
        "parsing_tree": "book_2 | #1 = Scan Table [ publication ] Output [ Price , Publication_Date ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ Price ASC ] Output [ Price , Publication_Date ]"
    },
    {
        "id": "d4ff3939cfc9d9b9b0a255e0663e8ced04dc332653924a9a8380e7c37f86bd09",
        "question": "Show the title and publication dates of books.",
        "parsing_tree": "book_2 | #1 = Scan Table [ publication ] Output [ Book_ID , Publication_Date ] ; #2 = Scan Table [ book ] Output [ Book_ID , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Book_ID = #2.Book_ID ] Output [ #1.Publication_Date , #2.Title ]"
    },
    {
        "id": "a211f6eba10abf8a8a8557d42ca9cd5ab25c9dd9424d64c270e835c7993cc449",
        "question": "Show writers who have published a book with price more than 4000000.",
        "parsing_tree": "book_2 | #1 = Scan Table [ publication ] Predicate [ Price > 4000000.0 ] Output [ Price , Book_ID ] ; #2 = Scan Table [ book ] Output [ Writer , Book_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Book_ID = #2.Book_ID ] Output [ #2.Writer ]"
    },
    {
        "id": "e606404c533a3138203ef8032f19a28e237bf7a7670b2896fde92754f89ab772",
        "question": "Show the titles of books in descending order of publication price.",
        "parsing_tree": "book_2 | #1 = Scan Table [ publication ] Output [ Price , Book_ID ] ; #2 = Scan Table [ book ] Output [ Book_ID , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Book_ID = #2.Book_ID ] Output [ #2.Title , #1.Price ] ; #4 = Sort [ #3 ] OrderBy [ Price DESC ] Output [ Price , Title ]"
    },
    {
        "id": "27485652e8e9ad333f5e60fcbc60212a7cae131d70873824fe9139dc091e4be9",
        "question": "Show publishers that have more than one publication.",
        "parsing_tree": "book_2 | #1 = Scan Table [ publication ] Output [ Publisher ] ; #2 = Aggregate [ #1 ] GroupBy [ Publisher ] Output [ countstar AS Count_Star , Publisher ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Publisher ]"
    },
    {
        "id": "394e3cd537493741969313ef98b901523577ea24ff66c8b3fd87c2047eb7d273",
        "question": "Show different publishers together with the number of publications they have.",
        "parsing_tree": "book_2 | #1 = Scan Table [ publication ] Output [ Publisher ] ; #2 = Aggregate [ #1 ] GroupBy [ Publisher ] Output [ countstar AS Count_Star , Publisher ]"
    },
    {
        "id": "fbce3f5deacfe357461b9b9a0bb09badeac663a2f912bbef7c5f6a09c74f6bdb",
        "question": "Please show the most common publication date.",
        "parsing_tree": "book_2 | #1 = Scan Table [ publication ] Output [ Publication_Date ] ; #2 = Aggregate [ #1 ] GroupBy [ Publication_Date ] Output [ countstar AS Count_Star , Publication_Date ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Publication_Date ]"
    },
    {
        "id": "1a16916797c08606a98799a0ddf5292d71deb301c3e350d87c84898759e7c22e",
        "question": "List the writers who have written more than one book.",
        "parsing_tree": "book_2 | #1 = Scan Table [ book ] Output [ Writer ] ; #2 = Aggregate [ #1 ] GroupBy [ Writer ] Output [ countstar AS Count_Star , Writer ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Writer ]"
    },
    {
        "id": "0ece0ede2076245db0ef4b39c579127fe830d670304a3187787f01334c50e480",
        "question": "List the titles of books that are not published.",
        "parsing_tree": "book_2 | #1 = Scan Table [ book ] Output [ Book_ID , Title ] ; #2 = Scan Table [ publication ] Output [ Book_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Book_ID IS NULL OR #1.Book_ID = #2.Book_ID ] Output [ #1.Title ]"
    },
    {
        "id": "c113c3dc6b9fa2c5d7c1e1d3e7055e3137e61c5f1f6ecbb6c4258a9792b6f478",
        "question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.",
        "parsing_tree": "book_2 | #1 = Scan Table [ publication ] Predicate [ Price > 1.0E7 ] Distinct [ true ] Output [ Price , Publisher ] ; #2 = Scan Table [ publication ] Predicate [ Price < 5000000.0 ] Output [ Price , Publisher ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Publisher = #2.Publisher ] Output [ #1.Publisher ]"
    },
    {
        "id": "c6104068508eb7509312d518923e7ecf2fc5ee898e9ec1053cf54489f825d675",
        "question": "What is the number of distinct publication dates?",
        "parsing_tree": "book_2 | #1 = Scan Table [ publication ] Distinct [ true ] Output [ Publication_Date ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Publication_Date) AS Count_Dist_Publication_Date ]"
    },
    {
        "id": "da760c72d596eb33c9ccc3431c252654b0348ebc24810b3f664c055a4885d0c3",
        "question": "How many distinct publication dates are there in our record?",
        "parsing_tree": "book_2 | #1 = Scan Table [ publication ] Distinct [ true ] Output [ Publication_Date ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Publication_Date) AS Count_Dist_Publication_Date ]"
    },
    {
        "id": "b6468ba8e4becf13f14c54bb581c06189115571b31231ed0f3e592e67a9907a9",
        "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
        "parsing_tree": "book_2 | #1 = Scan Table [ publication ] Predicate [ Publisher = 'Person' OR Publisher = 'Wiley' ] Output [ Price , Publisher ]"
    },
    {
        "id": "e7e2196610060a21c1c76297e0d8cd79a5bfb8de3c717c94335af8478fb5e52b",
        "question": "How many actors are there?",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ac7d1d9ae31f263414df2896ebadc92b25c601ff01b2c5e8152ade960be4adf0",
        "question": "Count the number of actors.",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "703ffa2baaf70b8bacbe1a8880b0525b9e0b46333de36c8a938617317e5d49fb",
        "question": "List the name of actors in ascending alphabetical order.",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "c17b9c32de632be21812f7fd1d0515e914223cb91df9c9869c014c331285961e",
        "question": "What are the names of actors, ordered alphabetically?",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "6fc753450bbfe7c2adaea667884327e5146438de8228dc189ba6cf33b2a48ecc",
        "question": "What are the characters and duration of actors?",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Output [ Duration , Character ]"
    },
    {
        "id": "541000db2830297d94c0869fe81e52de21e6038505de8addf25b1ee058cc2fd0",
        "question": "Return the characters and durations for each actor.",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Output [ Duration , Character ]"
    },
    {
        "id": "ed3ef7385ad65f9f0c645230a887f86802bf26874cd09c5ae23838c8fca213c6",
        "question": "List the name of actors whose age is not 20.",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Predicate [ age <> 20 ] Output [ Name , age ]"
    },
    {
        "id": "eca39ce0012870d6364303634eb202a38a73c73a21edf9530f9e645b8ba9ac4b",
        "question": "What are the names of actors who are not 20 years old?",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Predicate [ age <> 20 ] Output [ Name , age ]"
    },
    {
        "id": "6c341420181b1150d29b6dd1c9ca96908079d3d8b7b7478e949f4568d44d6719",
        "question": "What are the characters of actors in descending order of age?",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Output [ Character , age ] ; #2 = Sort [ #1 ] OrderBy [ age DESC ] Output [ Character , age ]"
    },
    {
        "id": "6ddd398e23a44210081174a750977c185b03e116c7c37498756c9b03a7b1ca20",
        "question": "Return the characters for actors, ordered by age descending.",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Output [ Character , age ] ; #2 = Sort [ #1 ] OrderBy [ age DESC ] Output [ Character , age ]"
    },
    {
        "id": "a6131b78e10fec7abab13a80c7d7a778415315fee83ea0db3979d4a97a76c9d7",
        "question": "What is the duration of the oldest actor?",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Output [ Duration , age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ age DESC ] Output [ Duration , age ]"
    },
    {
        "id": "2e43e31800650341a76bf70dc5550866d034f67cc90d5eb7d853cc6ec857223b",
        "question": "Return the duration of the actor with the greatest age.",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Output [ Duration , age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ age DESC ] Output [ Duration , age ]"
    },
    {
        "id": "b08242ff04d2f6cec80b23d5593ff9ec76a6b54b9732f301f44b8aa28b936690",
        "question": "What are the names of musicals with nominee \"Bob Fosse\"?",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Predicate [ Nominee = 'Bob Fosse' ] Output [ Nominee , Name ]"
    },
    {
        "id": "9364239c002b9a8dc5429e73fab0b0ccb0dff1d47ef26057238e0e8c1159bb56",
        "question": "Return the names of musicals who have the nominee Bob Fosse.",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Predicate [ Nominee = 'Bob Fosse' ] Output [ Nominee , Name ]"
    },
    {
        "id": "08acb1c98809989be0e3f5b792a04eaf6c088c6c4bbb26307fe3050eea55f452",
        "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Predicate [ Award <> 'Tony Award' ] Distinct [ true ] Output [ Nominee ]"
    },
    {
        "id": "14ee0e167a6389246ce8a2c5913f0b61995552cdc39bd12dcbb1b5cd2cb03906",
        "question": "Return the different nominees of musicals that have an award that is not the Tony Award.",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Predicate [ Award <> 'Tony Award' ] Distinct [ true ] Output [ Nominee ]"
    },
    {
        "id": "c61d76743c876c828c7168ae2323268fb87abdbdf4a3b0acf80e5d8c54151214",
        "question": "Show names of actors that have appeared in musical with name \"The Phantom of the Opera\".",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Predicate [ Name = 'The Phantom of the Opera' ] Output [ Musical_ID , Name ] ; #2 = Scan Table [ actor ] Output [ Musical_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Musical_ID = #2.Musical_ID ] Output [ #2.Name ]"
    },
    {
        "id": "ef5d5b9c0c0887e4aff64e60337f3d11e0b6f44fff40f2ba95b33057defc25e8",
        "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Predicate [ Name = 'The Phantom of the Opera' ] Output [ Musical_ID , Name ] ; #2 = Scan Table [ actor ] Output [ Musical_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Musical_ID = #2.Musical_ID ] Output [ #2.Name ]"
    },
    {
        "id": "d4e7aec824d610bdf656356ea392c5126a295c3b7ee20a975aed95e06b66955a",
        "question": "Show names of actors in descending order of the year their musical is awarded.",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Output [ Musical_ID , Year ] ; #2 = Scan Table [ actor ] Output [ Musical_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Musical_ID = #2.Musical_ID ] Output [ #2.Name , #1.Year ] ; #4 = Sort [ #3 ] OrderBy [ Year DESC ] Output [ Name , Year ]"
    },
    {
        "id": "2c44aa41c1df6f43db41de0f41ac84a09fdc411ec76b67c9424e70041915cae7",
        "question": "What are the names of actors ordered descending by the year in which their musical was awarded?",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Output [ Musical_ID , Year ] ; #2 = Scan Table [ actor ] Output [ Musical_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Musical_ID = #2.Musical_ID ] Output [ #2.Name , #1.Year ] ; #4 = Sort [ #3 ] OrderBy [ Year DESC ] Output [ Name , Year ]"
    },
    {
        "id": "776045142876083346cd5285f007440d850b288ad4e54778e29219aa07790603",
        "question": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Output [ Musical_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Musical_ID ] Output [ countstar AS Count_Star , Musical_ID ] ; #3 = Scan Table [ musical ] Output [ Musical_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Musical_ID = #3.Musical_ID ] Output [ #3.Name , #2.Count_Star ]"
    },
    {
        "id": "815afa2f28c96b9583623974a9abf8018bf3546ab3e67037822efc57cf984f8f",
        "question": "How many actors have appeared in each musical?",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Output [ Musical_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Musical_ID ] Output [ countstar AS Count_Star , Musical_ID ] ; #3 = Scan Table [ musical ] Output [ Musical_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Musical_ID = #3.Musical_ID ] Output [ #3.Name , #2.Count_Star ]"
    },
    {
        "id": "4e031fa5a02694007b1222f5c9cad8b39cbbc8e65e03a16d3a95d6a5f53fa5db",
        "question": "Show names of musicals which have at least three actors.",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Output [ Musical_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Musical_ID ] Output [ countstar AS Count_Star , Musical_ID ] ; #3 = Scan Table [ musical ] Output [ Musical_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Musical_ID = #3.Musical_ID ] Output [ #3.Name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ Name ]"
    },
    {
        "id": "da455c283e41ef5db04399b74ebf83fca63dae63780fc19c1b6239337098b8d2",
        "question": "What are the names of musicals who have at 3 or more actors?",
        "parsing_tree": "musical | #1 = Scan Table [ actor ] Output [ Musical_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Musical_ID ] Output [ countstar AS Count_Star , Musical_ID ] ; #3 = Scan Table [ musical ] Output [ Musical_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Musical_ID = #3.Musical_ID ] Output [ #3.Name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ Name ]"
    },
    {
        "id": "5155575941b1caf1337d13b181408ca4e3846e6d96d6874d43c0857c13e3c803",
        "question": "Show different nominees and the number of musicals they have been nominated.",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Output [ Nominee ] ; #2 = Aggregate [ #1 ] GroupBy [ Nominee ] Output [ Nominee , countstar AS Count_Star ]"
    },
    {
        "id": "1d5530dfae0296961d1cb0c07849448ec6ae0137f662843282ea0868be7843c8",
        "question": "How many musicals has each nominee been nominated for?",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Output [ Nominee ] ; #2 = Aggregate [ #1 ] GroupBy [ Nominee ] Output [ Nominee , countstar AS Count_Star ]"
    },
    {
        "id": "01b0caf2ca9a173f8ca4315b36751cdf0ef4b86598b7c4e17373e585ffdd86ea",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Output [ Nominee ] ; #2 = Aggregate [ #1 ] GroupBy [ Nominee ] Output [ Nominee , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Nominee , Count_Star ]"
    },
    {
        "id": "e9fd8fe3a9758dd2c8577dea67c568cce2532607041d0f155df7ac7ae583b038",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Output [ Nominee ] ; #2 = Aggregate [ #1 ] GroupBy [ Nominee ] Output [ Nominee , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Nominee , Count_Star ]"
    },
    {
        "id": "8781f09617ff9184f5d9038b95b0a0fda00c65696790e5503085dd4a318261f5",
        "question": "List the most common result of the musicals.",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Output [ Result ] ; #2 = Aggregate [ #1 ] GroupBy [ Result ] Output [ Result , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Result , Count_Star ]"
    },
    {
        "id": "c0d942c62139ba634d1c79b7a727baa2b1848fca80b141918d9f103360fbc7f4",
        "question": "Return the most frequent result across all musicals.",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Output [ Result ] ; #2 = Aggregate [ #1 ] GroupBy [ Result ] Output [ Result , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Result , Count_Star ]"
    },
    {
        "id": "69b4416306b799e718101d327118451c0ba4ae3abc90aea34410b96d4e6b1b15",
        "question": "List the nominees that have been nominated more than two musicals.",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Output [ Nominee ] ; #2 = Aggregate [ #1 ] GroupBy [ Nominee ] Output [ Nominee , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Nominee ]"
    },
    {
        "id": "fd8fddc2d734965e1ed007dacda4ee1b35ae98983eae8b70d18c8c761a280aac",
        "question": "Who are the nominees who have been nominated more than two times?",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Output [ Nominee ] ; #2 = Aggregate [ #1 ] GroupBy [ Nominee ] Output [ Nominee , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Nominee ]"
    },
    {
        "id": "f260c3a1aa4c390768bcbdbea00c7c2a269a77847c5d040b7a3779bb32162b4e",
        "question": "List the name of musicals that do not have actors.",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Output [ Musical_ID , Name ] ; #2 = Scan Table [ actor ] Output [ Musical_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Musical_ID IS NULL OR #1.Musical_ID = #2.Musical_ID ] Output [ #1.Name ]"
    },
    {
        "id": "0b9956b0124908dfd065e8863a386fa3b0d009420273152c35d554df8e5d27c3",
        "question": "What are the names of musicals who have no actors?",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Output [ Musical_ID , Name ] ; #2 = Scan Table [ actor ] Output [ Musical_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Musical_ID IS NULL OR #1.Musical_ID = #2.Musical_ID ] Output [ #1.Name ]"
    },
    {
        "id": "eeb848fcd73e79ff4cb321ad96acd882ec496c85f966f3072169ed71c302d899",
        "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Predicate [ Award = 'Tony Award' ] Distinct [ true ] Output [ Nominee , Award ] ; #2 = Scan Table [ musical ] Predicate [ Award = 'Drama Desk Award' ] Output [ Nominee , Award ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Nominee = #2.Nominee ] Output [ #1.Nominee ]"
    },
    {
        "id": "9b988543d5985f8d2a48676cdc3564c302d4e73484e5fe46a8561334a548b27e",
        "question": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Predicate [ Award = 'Tony Award' ] Distinct [ true ] Output [ Nominee , Award ] ; #2 = Scan Table [ musical ] Predicate [ Award = 'Drama Desk Award' ] Output [ Nominee , Award ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Nominee = #2.Nominee ] Output [ #1.Nominee ]"
    },
    {
        "id": "da18ec0ef4d691afff231eff98c34b33f8da7a170daa3ab90645871e885b1677",
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Predicate [ Award = 'Cleavant Derricks' OR Award = 'Tony Award' ] Output [ Nominee , Award ]"
    },
    {
        "id": "dfa454ce80ebcf21d1d51bbdad826a6589a597dc106d155ed59e9d67b82faaa0",
        "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
        "parsing_tree": "musical | #1 = Scan Table [ musical ] Predicate [ Award = 'Cleavant Derricks' OR Award = 'Tony Award' ] Output [ Nominee , Award ]"
    },
    {
        "id": "8675dbcd8089cb8c5cdb7a6599b44580a23116ab21fb0a58b66da2c0b84a7c19",
        "question": "Find the emails of the user named \"Mary\".",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Predicate [ name = 'Mary' ] Output [ name , email ]"
    },
    {
        "id": "84c41286c0de6923f21da782035d3aaf48e1b989c473dd3ab5e9e50c45627789",
        "question": "What is the partition id of the user named \"Iron Man\".",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Predicate [ name = 'Iron Man' ] Output [ name , partitionid ]"
    },
    {
        "id": "8fe8db73e66a82126768ed7b4a0cf6906d568bc2866ef2d1113f0cb9ca8a14ac",
        "question": "How many users are there?",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "44c333321f2d2349b05ce9f8478617ff7fdcff1abc949693b36b1952e7a0152e",
        "question": "How many followers does each user have?",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ follows ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e17586ed812d9a78209fc78e2283eb62e336858c6398acc25179fb3a26d17119",
        "question": "Find the number of followers for each user.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ follows ] Output [ f1 ] ; #2 = Aggregate [ #1 ] GroupBy [ f1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cbeb3cd2f2659e43b5a02b0f54d90d317df11f65fabc8c6dbae39fcecbeffbd3",
        "question": "Find the number of tweets in record.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ tweets ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9811ab60f19fc5cd52dbed83687cdf6cd9885fb97ec0d6bed63eaab9a490e739",
        "question": "Find the number of users who posted some tweets.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ tweets ] Distinct [ true ] Output [ uid ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ccef56684162d8d7fc1b3e7fd0352f67e71acc6752dbce6e279e0c7ccf9c8a78",
        "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Predicate [ name like '%Swift%' ] Output [ name , email ]"
    },
    {
        "id": "5045ced82615d6efa3ea30f41011e68b1749766804bc6cf7673854567f6b4a3b",
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Predicate [ email like '%superstar%' OR email like '%edu%' ] Output [ name , email ]"
    },
    {
        "id": "630127ecdf2378a81dacada4525c9c358f3ef0b0a53343230905807a018a8454",
        "question": "Return the text of tweets about the topic 'intern'.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ tweets ] Predicate [ text like '%intern%' ] Output [ text ]"
    },
    {
        "id": "b85c1da270b19b20e8fc7ef2ab61debd10194479cbff694730bd470463324dc3",
        "question": "Find the name and email of the users who have more than 1000 followers.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Predicate [ followers > 1000 ] Output [ name , followers , email ]"
    },
    {
        "id": "d91628b525a0d728663a0e4b80349f595ee38a729e4b17557ea0c8fb00abc733",
        "question": "Find the name and email for the users who have more than one follower.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ follows ] Output [ f1 ] ; #2 = Aggregate [ #1 ] GroupBy [ f1 ] Output [ countstar AS Count_Star , f1 ] ; #3 = Scan Table [ user_profiles ] Output [ name , uid , email ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.f1 = #3.uid ] Output [ #3.name , #3.email , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name , email ]"
    },
    {
        "id": "ae7bc2483b65af5315c24d5cae20ad2606b0993b0f714fd40f5f8f58083140ea",
        "question": "Find the names of users who have more than one tweet.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ tweets ] Output [ uid ] ; #2 = Aggregate [ #1 ] GroupBy [ uid ] Output [ countstar AS Count_Star , uid ] ; #3 = Scan Table [ user_profiles ] Output [ name , uid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.uid = #3.uid ] Output [ #3.name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]"
    },
    {
        "id": "1c5cbb2e00b9419af0bc5b740b76ab0db6523cdd35cf3b7c257cfa1bbf468191",
        "question": "Find the id of users who are followed by Mary and Susan.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Predicate [ name = 'Mary' ] Output [ name , uid ] ; #2 = Scan Table [ follows ] Output [ f1 , f2 ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.uid = #2.f2 ] Distinct [ true ] Output [ #2.f1 ] ; #4 = Scan Table [ user_profiles ] Predicate [ name = 'Susan' ] Output [ name , uid ] ; #5 = Scan Table [ follows ] Output [ f1 , f2 ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.uid = #5.f2 ] Output [ #5.f1 ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.f1 = #6.f1 ] Output [ #3.f1 ]"
    },
    {
        "id": "5423f0f34d805a2f7fced5241985f5e874a15598b39c882c8f46825b4d38d2fd",
        "question": "Find the id of users who are followed by Mary or Susan.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Predicate [ name = 'Mary' OR name = 'Susan' ] Output [ name , uid ] ; #2 = Scan Table [ follows ] Output [ f1 , f2 ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.uid = #2.f2 ] Output [ #2.f1 ]"
    },
    {
        "id": "2b1af4c6af06c54532109d6260d4e3ab21877871a636758b48838677d36bcf45",
        "question": "Find the name of the user who has the largest number of followers.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Output [ name , followers ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ followers DESC ] Output [ name , followers ]"
    },
    {
        "id": "6c6c4d2e263a17ff0fddbe3a9c20dd3b0b3753dc5064da1665b4b2f6284eb902",
        "question": "Find the name and email of the user followed by the least number of people.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Output [ name , followers , email ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ followers ASC ] Output [ name , followers , email ]"
    },
    {
        "id": "52c279a84378e4830fa176591dcdb4fa7f4661b76c5cfad2d65bef102398874a",
        "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Output [ name , followers ] ; #2 = Sort [ #1 ] OrderBy [ followers DESC ] Output [ name , followers ]"
    },
    {
        "id": "e8a783fa20999a0fb885b90237d79639eaa0ca04a505c6b0cb55cad802ac65c5",
        "question": "List the names of 5 users followed by the largest number of other users.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Output [ name , followers ] ; #2 = TopSort [ #1 ] Rows [ 5 ] OrderBy [ followers DESC ] Output [ name , followers ]"
    },
    {
        "id": "318c736a759bf1b3a34b11066759362a196e30c2c0a148526643b21f0801f2c7",
        "question": "List the text of all tweets in the order of date.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ tweets ] Output [ text , createdate ] ; #2 = Sort [ #1 ] OrderBy [ createdate ASC ] Output [ text , createdate ]"
    },
    {
        "id": "4fb8306024d4aa06b119c825fed76d3afef4377de50b5a552cdddbc9cbd04603",
        "question": "Find the name of each user and number of tweets tweeted by each of them.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ tweets ] Output [ uid ] ; #2 = Aggregate [ #1 ] GroupBy [ uid ] Output [ countstar AS Count_Star , uid ] ; #3 = Scan Table [ user_profiles ] Output [ name , uid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.uid = #3.uid ] Output [ #3.name , #2.Count_Star ]"
    },
    {
        "id": "23575563e97bfbf8acd3d4b95aa8ad64c15972bad70243cf8ae4a42dda07e758",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ tweets ] Output [ uid ] ; #2 = Aggregate [ #1 ] GroupBy [ uid ] Output [ countstar AS Count_Star , uid ] ; #3 = Scan Table [ user_profiles ] Output [ name , partitionid , uid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.uid = #3.uid ] Output [ #3.name , #2.Count_Star , #3.partitionid ] ; #5 = Filter [ #4 ] Predicate [ Count_Star < 2 ] Output [ name , partitionid ]"
    },
    {
        "id": "28dd428705642efcefcbf8dd811ac0b7bc00dc21f892e4b55ef9ff26d2011570",
        "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ tweets ] Output [ uid ] ; #2 = Aggregate [ #1 ] GroupBy [ uid ] Output [ countstar AS Count_Star , uid ] ; #3 = Scan Table [ user_profiles ] Output [ name , uid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.uid = #3.uid ] Output [ #3.name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name , Count_Star ]"
    },
    {
        "id": "d9cee1a8c12668d0d6e243475aaeec25eb3adc4519013f97d8b3d8594ccb26de",
        "question": "Find the average number of followers for the users who do not have any tweet.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Output [ followers , uid ] ; #2 = Scan Table [ tweets ] Output [ uid ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.uid = #1.uid ] Output [ #1.followers ] ; #4 = Aggregate [ #3 ] Output [ AVG(followers) AS Avg_followers ]"
    },
    {
        "id": "cf1794ba50656a395d06bb7e25d7d66e9f891471869d55a6cdb660f1435e98ca",
        "question": "Find the average number of followers for the users who had some tweets.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Output [ followers , uid ] ; #2 = Scan Table [ tweets ] Output [ uid ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.uid = #1.uid ] Output [ #1.followers ] ; #4 = Aggregate [ #3 ] Output [ AVG(followers) AS Avg_followers ]"
    },
    {
        "id": "608b6a5bc9ab305a72e479823d4f966faa5608cfc0054930fc33ad4ba47a2c16",
        "question": "Find the maximum and total number of followers of all users.",
        "parsing_tree": "twitter_1 | #1 = Scan Table [ user_profiles ] Output [ followers ] ; #2 = Aggregate [ #1 ] Output [ SUM(followers) AS Sum_followers , MAX(followers) AS Max_followers ]"
    },
    {
        "id": "ed92fca8ee1d49e508adcc16ad593e9ecd2bf8dcacaaf3379c368b2c5f5bf622",
        "question": "Find the names of all the catalog entries.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Distinct [ true ] Output [ catalog_entry_name ]"
    },
    {
        "id": "2a44556cbba98b31e6e976ecbe75d7beae01607d6df492bf63b140b64d38196b",
        "question": "What are all the catalog entry names?",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Distinct [ true ] Output [ catalog_entry_name ]"
    },
    {
        "id": "0933d7f4452a7c5aa5873ceeaade98e7ca660ccb304885e67efbc5822b4fa470",
        "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Attribute_Definitions ] Output [ attribute_data_type ] ; #2 = Aggregate [ #1 ] GroupBy [ attribute_data_type ] Output [ countstar AS Count_Star , attribute_data_type ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ attribute_data_type ]"
    },
    {
        "id": "0f0e12f1558937f09f1918af76233712ea0716e7f44668c8ce32a214f911def4",
        "question": "What are the attribute data types with more than 3 attribute definitions?",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Attribute_Definitions ] Output [ attribute_data_type ] ; #2 = Aggregate [ #1 ] GroupBy [ attribute_data_type ] Output [ countstar AS Count_Star , attribute_data_type ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ attribute_data_type ]"
    },
    {
        "id": "7eb6b4ba6c3a86edd04be417cc26b547d3276f42511c95b61f4fd5c8a3649a4f",
        "question": "What is the attribute data type of the attribute with name \"Green\"?",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Attribute_Definitions ] Predicate [ attribute_name = 'Green' ] Output [ attribute_name , attribute_data_type ]"
    },
    {
        "id": "d67832e8f80374b31f9185a7dba0cb29e8bfe205bec936058c87ef5a2ee9e852",
        "question": "Find the attribute data type for the attribute named \"Green\".",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Attribute_Definitions ] Predicate [ attribute_name = 'Green' ] Output [ attribute_name , attribute_data_type ]"
    },
    {
        "id": "3a0327638a3bdb834e44e46b0eb9773232073e0fa8e913dfba210e3b4d11fec4",
        "question": "Find the name and level of catalog structure with level between 5 and 10.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Structure ] Predicate [ catalog_level_number >= 5 AND catalog_level_number <= 10 ] Output [ catalog_level_number , catalog_level_name ]"
    },
    {
        "id": "8c22c1be002bba174cedf0a495357c2bea5be427a6139ad4b2e8d09ff8532b28",
        "question": "What are the name and level of catalog structure with level number between 5 and 10",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Structure ] Predicate [ catalog_level_number >= 5 AND catalog_level_number <= 10 ] Output [ catalog_level_number , catalog_level_name ]"
    },
    {
        "id": "cc44bbe75c6e2f5ff5d8a4322f00cc4c95d7fd1d604b90d360247f8b61813d08",
        "question": "Find all the catalog publishers whose name contains \"Murray\"",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalogs ] Predicate [ catalog_publisher like '%Murray%' ] Distinct [ true ] Output [ catalog_publisher ]"
    },
    {
        "id": "97d01e50d377b8709664cd35f4ca374ef4a40a29a834344674b3739e933b461b",
        "question": "Which catalog publishers have substring \"Murray\" in their names?",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalogs ] Predicate [ catalog_publisher like '%Murray%' ] Distinct [ true ] Output [ catalog_publisher ]"
    },
    {
        "id": "265df860a836282f836d577f98fd86d2264e3af569f06958b728589e5b5aa06b",
        "question": "Which catalog publisher has published the most catalogs?",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalogs ] Output [ catalog_publisher ] ; #2 = Aggregate [ #1 ] GroupBy [ catalog_publisher ] Output [ countstar AS Count_Star , catalog_publisher ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , catalog_publisher ]"
    },
    {
        "id": "02694dba21c5c5f077c90db0b9cd5227e3254870d336df5d6389ad2244b9acf8",
        "question": "Find the catalog publisher that has the most catalogs.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalogs ] Output [ catalog_publisher ] ; #2 = Aggregate [ #1 ] GroupBy [ catalog_publisher ] Output [ countstar AS Count_Star , catalog_publisher ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , catalog_publisher ]"
    },
    {
        "id": "7712b812bf04c40e79b9d7b0a5e99d3214828a286692f7495ac22f16a7b639f9",
        "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Structure ] Predicate [ catalog_level_number > 5 ] Output [ catalog_level_number , catalog_id ] ; #2 = Scan Table [ Catalogs ] Output [ date_of_publication , catalog_name , catalog_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.catalog_id = #2.catalog_id ] Output [ #2.catalog_name , #2.date_of_publication ]"
    },
    {
        "id": "3d76422267005daa7014df562ae002dd727c6633982eb2bcd30987a4829d8537",
        "question": "What are the name and publication date of the catalogs with catalog level number above 5?",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Structure ] Predicate [ catalog_level_number > 5 ] Output [ catalog_level_number , catalog_id ] ; #2 = Scan Table [ Catalogs ] Output [ date_of_publication , catalog_name , catalog_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.catalog_id = #2.catalog_id ] Output [ #2.catalog_name , #2.date_of_publication ]"
    },
    {
        "id": "03d0b3e8a8992407ab37fb93ffd6d04a02afc50ed71cd24a9bd70dae3556f8be",
        "question": "What are the entry names of catalog with the attribute possessed by most entries.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents_Additional_Attributes ] Output [ attribute_value ] ; #2 = Aggregate [ #1 ] GroupBy [ attribute_value ] Output [ countstar AS Count_Star , attribute_value ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , attribute_value ] ; #4 = Scan Table [ Catalog_Contents_Additional_Attributes ] Output [ catalog_entry_id , attribute_value ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.attribute_value = #4.attribute_value ] Output [ #4.catalog_entry_id ] ; #6 = Scan Table [ Catalog_Contents ] Output [ catalog_entry_id , catalog_entry_name ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.catalog_entry_id = #6.catalog_entry_id ] Output [ #6.catalog_entry_name ]"
    },
    {
        "id": "522a4013ad350004973d0767465e7e90e71d05e29a91bcaa43444ad5345f0033",
        "question": "Find the entry names of the catalog with the attribute that have the most entries.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents_Additional_Attributes ] Output [ attribute_value ] ; #2 = Aggregate [ #1 ] GroupBy [ attribute_value ] Output [ countstar AS Count_Star , attribute_value ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , attribute_value ] ; #4 = Scan Table [ Catalog_Contents_Additional_Attributes ] Output [ catalog_entry_id , attribute_value ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.attribute_value = #4.attribute_value ] Output [ #4.catalog_entry_id ] ; #6 = Scan Table [ Catalog_Contents ] Output [ catalog_entry_id , catalog_entry_name ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.catalog_entry_id = #6.catalog_entry_id ] Output [ #6.catalog_entry_name ]"
    },
    {
        "id": "8c55ab964b4bd8443660b1276b17d527f8a13b177b100f9fe71d6fd29a18da9c",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Output [ price_in_dollars , catalog_entry_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ price_in_dollars DESC ] Output [ price_in_dollars , catalog_entry_name ]"
    },
    {
        "id": "9a8d0b8b82a3c097e78f515b85086998f0e79003b3a0adef26dba8bb9c4650cd",
        "question": "Find the entry name of the catalog with the highest price (in USD).",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Output [ price_in_dollars , catalog_entry_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ price_in_dollars DESC ] Output [ price_in_dollars , catalog_entry_name ]"
    },
    {
        "id": "e87b0d926179f83939f43270ff189b2663f3717d9a642ad1457c5276ba1408b2",
        "question": "What is the level name of the cheapest catalog (in USD)?",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Structure ] Output [ catalog_level_number , catalog_level_name ] ; #2 = Scan Table [ Catalog_Contents ] Output [ catalog_level_number , price_in_dollars ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.catalog_level_number = #2.catalog_level_number ] Output [ #1.catalog_level_name , #2.price_in_dollars ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ price_in_dollars ASC ] Output [ catalog_level_name , price_in_dollars ]"
    },
    {
        "id": "824891958d9423af4341b98563c416843da4658ad1b1986d9fe830f3e066546f",
        "question": "Find the level name of the catalog with the lowest price (in USD).",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Structure ] Output [ catalog_level_number , catalog_level_name ] ; #2 = Scan Table [ Catalog_Contents ] Output [ catalog_level_number , price_in_dollars ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.catalog_level_number = #2.catalog_level_number ] Output [ #1.catalog_level_name , #2.price_in_dollars ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ price_in_dollars ASC ] Output [ catalog_level_name , price_in_dollars ]"
    },
    {
        "id": "f1e3a8874da87396a48bd33bf9640604c9467e315bd8d8099477df2cb788c61f",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Output [ price_in_euros ] ; #2 = Aggregate [ #1 ] Output [ AVG(price_in_euros) AS Avg_price_in_euros , MIN(price_in_euros) AS Min_price_in_euros ]"
    },
    {
        "id": "21df1fc3c4e53ef82886979bac88f4faeaf783ec0758b514d933727194a242dc",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Output [ price_in_euros ] ; #2 = Aggregate [ #1 ] Output [ AVG(price_in_euros) AS Avg_price_in_euros , MIN(price_in_euros) AS Min_price_in_euros ]"
    },
    {
        "id": "c082b5d0d58398131aad6934d03a932d836bc277ee4578405042c8f79dfdc8a9",
        "question": "What is the product with the highest height? Give me the catalog entry name.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Output [ height , catalog_entry_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ height DESC ] Output [ height , catalog_entry_name ]"
    },
    {
        "id": "d46527350a05a60e65fff29dc1503d02a73ac3e460982f6c5ce34c871be4f862",
        "question": "Which catalog content has the highest height? Give me the catalog entry name.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Output [ height , catalog_entry_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ height DESC ] Output [ height , catalog_entry_name ]"
    },
    {
        "id": "680293dcba29a355c1b9d8c3d002d7c976cd32942273b1add810661071fb1215",
        "question": "Find the name of the product that has the smallest capacity.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Output [ capacity , catalog_entry_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ capacity ASC ] Output [ capacity , catalog_entry_name ]"
    },
    {
        "id": "35a3a3867d3f0c4c39238dcd6b52713112615fba25b5e4c4321349100f5bdbce",
        "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Output [ capacity , catalog_entry_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ capacity ASC ] Output [ capacity , catalog_entry_name ]"
    },
    {
        "id": "75c7f7a902edc4c121a5a8c0ecca0487ee81b2ccdff8d6d1230c27953c9d1418",
        "question": "Find the names of all the products whose stock number starts with \"2\".",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Predicate [ product_stock_number like '2%' ] Output [ product_stock_number , catalog_entry_name ]"
    },
    {
        "id": "9ff6899399afea11321b58f798b0bac13e4547f81909e937e874397c3468a0f0",
        "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Predicate [ product_stock_number like '2%' ] Output [ product_stock_number , catalog_entry_name ]"
    },
    {
        "id": "83d0b88fd38acaf02426bf2f816cb71169d5c56b4923f21d345004a1e3e7aa97",
        "question": "Find the names of catalog entries with level number 8.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents_Additional_Attributes ] Predicate [ catalog_level_number = 8 ] Output [ catalog_level_number , catalog_entry_id ] ; #2 = Scan Table [ Catalog_Contents ] Output [ catalog_entry_id , catalog_entry_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.catalog_entry_id = #2.catalog_entry_id ] Output [ #2.catalog_entry_name ]"
    },
    {
        "id": "95113fd437c1f2f600ad28d9c1d49c0ba28414929ee04d3373cb50357b0a0de6",
        "question": "What are the names of catalog entries with level number 8?",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents_Additional_Attributes ] Predicate [ catalog_level_number = 8 ] Output [ catalog_level_number , catalog_entry_id ] ; #2 = Scan Table [ Catalog_Contents ] Output [ catalog_entry_id , catalog_entry_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.catalog_entry_id = #2.catalog_entry_id ] Output [ #2.catalog_entry_name ]"
    },
    {
        "id": "1dc8d91dec31669b93fce830455918ca8192ffbeb6530dd6bb424978dcd36a34",
        "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Predicate [ length < 3 OR width > 5 ] Output [ width , length , catalog_entry_name ]"
    },
    {
        "id": "869de6c8c2dda9ee4649cc36cd307d3bb681af695c647300248acc8467ac7421",
        "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Predicate [ length < 3 OR width > 5 ] Output [ width , length , catalog_entry_name ]"
    },
    {
        "id": "f8195d16f999d3235f0bedebe25072a2bbd964bd983681f2aef3fd1b8a68b055",
        "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Attribute_Definitions ] Output [ attribute_id , attribute_name ] ; #2 = Scan Table [ Catalog_Contents_Additional_Attributes ] Predicate [ attribute_value = 0 ] Output [ attribute_id , attribute_value ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.attribute_id = #2.attribute_id ] Output [ #1.attribute_name , #1.attribute_id ]"
    },
    {
        "id": "2f77f31cfd24864f1a37113f39b85c29aac1823e0652b0ce28ddd51883d3ca2a",
        "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Attribute_Definitions ] Output [ attribute_id , attribute_name ] ; #2 = Scan Table [ Catalog_Contents_Additional_Attributes ] Predicate [ attribute_value = 0 ] Output [ attribute_id , attribute_value ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.attribute_id = #2.attribute_id ] Output [ #1.attribute_name , #1.attribute_id ]"
    },
    {
        "id": "ee7db19dbe16994b7b687050b9f807c4bc85600a653b8fb1cd0fc2d1182cb47a",
        "question": "Find the name and capacity of products with price greater than 700 (in USD).",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Predicate [ price_in_dollars > 700.0 ] Output [ price_in_dollars , capacity , catalog_entry_name ]"
    },
    {
        "id": "6326929926c98b253efcadf501347f9f13acc49208c993523ae480c04117a2b8",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Predicate [ price_in_dollars > 700.0 ] Output [ price_in_dollars , capacity , catalog_entry_name ]"
    },
    {
        "id": "b579081cf909a6ee4b2c345481e36f1622bde13a49ffc8befa220e378e11ee88",
        "question": "Find the dates on which more than one revisions were made.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalogs ] Output [ date_of_latest_revision ] ; #2 = Aggregate [ #1 ] GroupBy [ date_of_latest_revision ] Output [ countstar AS Count_Star , date_of_latest_revision ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ date_of_latest_revision ]"
    },
    {
        "id": "c7d08fd68256187feaae49293648e1bad895440ae689d4b5fffef345593734f0",
        "question": "On which days more than one revisions were made on catalogs.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalogs ] Output [ date_of_latest_revision ] ; #2 = Aggregate [ #1 ] GroupBy [ date_of_latest_revision ] Output [ countstar AS Count_Star , date_of_latest_revision ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ date_of_latest_revision ]"
    },
    {
        "id": "6f2d4ead1b67b93558e7c26d01613e4b5f92fff90f068d74c6bd8a4e8aae8e31",
        "question": "How many products are there in the records?",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a9d38f75d540f7a6dbbce88b30fe68bac0b4f069e2dccffbf159f1ff3b9cb2b3",
        "question": "Find the total number of catalog contents.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "22c94ada630928dab06f82449f15708758e708c8be93a5f26f6cedf0edda83a7",
        "question": "Name all the products with next entry ID greater than 8.",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Predicate [ next_entry_id > 8 ] Output [ next_entry_id , catalog_entry_name ]"
    },
    {
        "id": "f8f0e0aa3ea73419bb661d1aada7610f6183c31ad9730127ccad6e9e7bc4f160",
        "question": "What are the catalog entry names of the products with next entry ID above 8?",
        "parsing_tree": "product_catalog | #1 = Scan Table [ Catalog_Contents ] Predicate [ next_entry_id > 8 ] Output [ next_entry_id , catalog_entry_name ]"
    },
    {
        "id": "61ff1794856cd0e15edbfd55c8843fa9e6274601b3407a3e0305a76d96fb2328",
        "question": "How many aircrafts do we have?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ffe0a77d97a06b59153e71c0cc03f074fc876e6ef8f94f899f65bde272097ffc",
        "question": "How many aircrafts exist in the database?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "22a64010a78a228c1d75b445707bdf59958afa8657bb8c7c758f8146e6d849ab",
        "question": "Show name and distance for all aircrafts.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Output [ name , distance ]"
    },
    {
        "id": "29311a1c68f3a62d4cd1c330923ee7d8c3f8dd4a3f7086cc17dff2703adcc4ec",
        "question": "What are the names and distances for all airplanes?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Output [ name , distance ]"
    },
    {
        "id": "cf4ad38dcaef737fc2c3cd1bc26a18c0f4c8b24c6ecf69973df598fbd6b8c226",
        "question": "Show ids for all aircrafts with more than 1000 distance.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Predicate [ distance > 1000 ] Output [ aid , distance ]"
    },
    {
        "id": "5f32b90263d0bc913a86671d0d2aa05f33ff9108b5c7080cf420ea76e01c016a",
        "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Predicate [ distance > 1000 ] Output [ aid , distance ]"
    },
    {
        "id": "e12a8f7c21ee7c855f771eef6e20a51b31136a14da420fa57d79500dd67f558d",
        "question": "How many aircrafts have distance between 1000 and 5000?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Predicate [ distance >= 1000 AND distance <= 5000 ] Output [ distance ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "97274f59b27531283d6b012d6ddbee2f35fdb8e2c421c07ff434d8967e57067e",
        "question": "What is the count of aircrafts that have a distance between 1000 and 5000?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Predicate [ distance >= 1000 AND distance <= 5000 ] Output [ distance ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "126bbd1c20b327bbf56e26de0c0567b7de9bf6a7a462bf2621f24823f0b1225a",
        "question": "What is the name and distance for aircraft with id 12?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Predicate [ aid = 12 ] Output [ name , distance , aid ]"
    },
    {
        "id": "5b1bce490aad4da3c34d9266efc89e0afbd110f1132617265388cb1ebff0ed12",
        "question": "What is the name and distance for the aircraft that has an id of 12?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Predicate [ aid = 12 ] Output [ name , distance , aid ]"
    },
    {
        "id": "a77ab958f676dbe25f1cd65167b687b8295f3a68add690a515147f5b54eb57c0",
        "question": "What is the minimum, average, and maximum distance of all aircrafts.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Output [ distance ] ; #2 = Aggregate [ #1 ] Output [ MIN(distance) AS Min_distance , AVG(distance) AS Avg_distance , MAX(distance) AS Max_distance ]"
    },
    {
        "id": "71505b0c16cf52ec0ad593383dfe0cb8e231646da4b6e10ea62e8487be970ca4",
        "question": "Return the minimum, average and maximum distances traveled across all aircrafts.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Output [ distance ] ; #2 = Aggregate [ #1 ] Output [ MIN(distance) AS Min_distance , AVG(distance) AS Avg_distance , MAX(distance) AS Max_distance ]"
    },
    {
        "id": "a515c0cea534df10fbb97a2ae949f73841eb9a8e57ed84d0510aa75166d31709",
        "question": "Show the id and name of the aircraft with the maximum distance.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Output [ aid , distance , name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ distance DESC ] Output [ aid , distance , name ]"
    },
    {
        "id": "d33f60e771661283938f640bd898fbb9646eaed633b820b430aee2cbd23aebd0",
        "question": "What is the id and name of the aircraft that can cover the maximum distance?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Output [ aid , distance , name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ distance DESC ] Output [ aid , distance , name ]"
    },
    {
        "id": "ba5fe5e65272e80c69fc32cdd4c6e1b0c6cf70e51dc6358cfc0b97bbe59e3fd2",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Output [ name , distance ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ distance ASC ] Output [ name , distance ]"
    },
    {
        "id": "ef065eda0945e11d0d0a13dc20afcd4c764e45d87e1b0587b22bf5200607b6bf",
        "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Output [ name , distance ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ distance ASC ] Output [ name , distance ]"
    },
    {
        "id": "038f064e9009c703ef83d4098019afa4112d3d626e7f0c4b03681a51ec7e9f91",
        "question": "Show names for all aircrafts with distances more than the average.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Output [ distance ] ; #2 = Aggregate [ #1 ] Output [ AVG(distance) AS Avg_distance ] ; #3 = Scan Table [ aircraft ] Output [ name , distance ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.distance > #2.Avg_distance ] Output [ #3.name ]"
    },
    {
        "id": "35d8d143a2ce73485e4ea226eb294b53434f79aa27e04230f6a49f4255d6df2b",
        "question": "What are the names of all aircrafts that can cover more distances than average?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Output [ distance ] ; #2 = Aggregate [ #1 ] Output [ AVG(distance) AS Avg_distance ] ; #3 = Scan Table [ aircraft ] Output [ name , distance ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.distance > #2.Avg_distance ] Output [ #3.name ]"
    },
    {
        "id": "6533dd3c2b08ee874ab5c45906442b0834d7759f1be47f9c665c2ebec960befa",
        "question": "How many employees do we have?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "251270a25d98765132af7fd068624fe8197dbde2016cc6cb2bec48601ebdefaf",
        "question": "What is the number of employees?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d2269b8794aa6acdb7c819f361b689ff72a10bd265c9450a20581eb8a42d7a39",
        "question": "Show name and salary for all employees sorted by salary.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Output [ name , salary ] ; #2 = Sort [ #1 ] OrderBy [ salary ASC ] Output [ name , salary ]"
    },
    {
        "id": "ad717b5cd870eeafeee3d49521e107478ffcc8798e0450b55fd9e79f9072acc8",
        "question": "What is the name and salary of all employees in order of salary?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Output [ name , salary ] ; #2 = Sort [ #1 ] OrderBy [ salary ASC ] Output [ name , salary ]"
    },
    {
        "id": "58ffbae10049f7ca63d7011634fac1360506f129133baca27ddf50e9b0f5594e",
        "question": "Show ids for all employees with at least 100000 salary.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Predicate [ salary > 100000 ] Output [ salary , eid ]"
    },
    {
        "id": "26a5b51cc5afe927a097d565df54f69efe2a22f163ae9dffab3afc163aefce1f",
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Predicate [ salary > 100000 ] Output [ salary , eid ]"
    },
    {
        "id": "170c8695b590720bef0380238e69e76b59099851e5f5649d8fc3cb1be5a24d7b",
        "question": "How many employees have salary between 100000 and 200000?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Predicate [ salary >= 100000 AND salary <= 200000 ] Output [ salary ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d5c82ff5e712d781d380de3e80e5f93ad56880c0bdc20559a787d2affd6ca01e",
        "question": "What is the number of employees that have a salary between 100000 and 200000?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Predicate [ salary >= 100000 AND salary <= 200000 ] Output [ salary ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "21eeea6a47876107e19e2ed11f03d240960ec19ce4855ac1beadeb848a5ac224",
        "question": "What is the name and salary for employee with id 242518965?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Predicate [ eid = 242518965 ] Output [ name , salary , eid ]"
    },
    {
        "id": "05d74252f3b2a18ec858cd798d19923b14e3c24a2e06bfcb3653e7ba04a34b6b",
        "question": "What is the name and salary of the employee with the id 242518965?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Predicate [ eid = 242518965 ] Output [ name , salary , eid ]"
    },
    {
        "id": "bf072cd3d941929a3b009e8d6b67160c0d9f90be5336059824ecf93e9426d407",
        "question": "What is average and maximum salary of all employees.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Output [ salary ] ; #2 = Aggregate [ #1 ] Output [ MAX(salary) AS Max_salary , AVG(salary) AS Avg_salary ]"
    },
    {
        "id": "06ac19051fd3a2979f699e1cb80e01513968456c24de9cce99318f3fb632d214",
        "question": "What is the average and largest salary of all employees?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Output [ salary ] ; #2 = Aggregate [ #1 ] Output [ MAX(salary) AS Max_salary , AVG(salary) AS Avg_salary ]"
    },
    {
        "id": "dcd81e513aeb81984ac5b5c2a9c0e8a30711a1f5002a9a04da86d1636ebe05a9",
        "question": "Show the id and name of the employee with maximum salary.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Output [ name , salary , eid ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ salary DESC ] Output [ name , salary , eid ]"
    },
    {
        "id": "ad50a55ae59f834d56fb63c8bdc7976242fe9e7389419c7ec6f1ed62b2f735cd",
        "question": "What is the id and name of the employee with the highest salary?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Output [ name , salary , eid ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ salary DESC ] Output [ name , salary , eid ]"
    },
    {
        "id": "e7b8ec3dbc3b161cf070857e891e9bcc1035cc4ed9b508c6b97c25e0decd33e6",
        "question": "Show the name of employees with three lowest salaries.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Output [ name , salary ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ salary ASC ] Output [ name , salary ]"
    },
    {
        "id": "4b78f5ad8e1e0f2e5ce7152f38a31854b46fa95b04f4499a51299baae13c41cf",
        "question": "What is the name of the 3 employees who get paid the least?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Output [ name , salary ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ salary ASC ] Output [ name , salary ]"
    },
    {
        "id": "4e126f052fb010be08d6bcd571211508e387b75f80fc65fa12629993ce52b7a6",
        "question": "Show names for all employees with salary more than the average.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Output [ salary ] ; #2 = Aggregate [ #1 ] Output [ AVG(salary) AS Avg_salary ] ; #3 = Scan Table [ employee ] Output [ name , salary ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.salary > #2.Avg_salary ] Output [ #3.name ]"
    },
    {
        "id": "8440873abe66c62064d5e1ff8fef2793dbb4e762fadc0340b99ed0167a17d23d",
        "question": "What are the names of all employees who have a salary higher than average?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Output [ salary ] ; #2 = Aggregate [ #1 ] Output [ AVG(salary) AS Avg_salary ] ; #3 = Scan Table [ employee ] Output [ name , salary ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.salary > #2.Avg_salary ] Output [ #3.name ]"
    },
    {
        "id": "3dcc2c98cd544d39ddfbfee922466ff0926d20fe557cef78a3a2e3c805555eac",
        "question": "Show the id and salary of Mark Young.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Predicate [ name = 'Mark Young' ] Output [ name , salary , eid ]"
    },
    {
        "id": "2faf6e83be138a398e0668121007acfefa38ae39edfa83cdb761796222746448",
        "question": "What is the id and salary of the employee named Mark Young?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Predicate [ name = 'Mark Young' ] Output [ name , salary , eid ]"
    },
    {
        "id": "83e6fb4800f8efaeb13cce3f43151359b4185ec0e7b354a62aa8115227f7fbd9",
        "question": "How many flights do we have?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1d5be02015e43648834ffe670de97fb0ab5e19e2d66235f4bafb7f11b495db94",
        "question": "What is the number of flights?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7baa658de46fb8f4b952f6486e6849a7907616a7f66bd148ceea3747746a081d",
        "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ origin , destination , flno ] ; #2 = Sort [ #1 ] OrderBy [ origin ASC ] Output [ origin , destination , flno ]"
    },
    {
        "id": "98e9d8b04cefd38ad07aef8696ebcc741a67380ea9ee67c2c07d50316887534b",
        "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ origin , destination , flno ] ; #2 = Sort [ #1 ] OrderBy [ origin ASC ] Output [ origin , destination , flno ]"
    },
    {
        "id": "cfc2e877ca740126b5132b804874fa5683a458f9af15919e62c8392db49a9c66",
        "question": "Show all flight number from Los Angeles.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ origin = 'Los Angeles' ] Output [ origin , flno ]"
    },
    {
        "id": "f6b619f1504f045a9b10d56ebca97e944a61874ae5ed4d099916049ffa9bb693",
        "question": "What are the numbers of all flights coming from Los Angeles?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ origin = 'Los Angeles' ] Output [ origin , flno ]"
    },
    {
        "id": "3d4181121751b5a3e542396bb16957acde0595473a64e4a5cbac6e26418fb0c4",
        "question": "Show origins of all flights with destination Honolulu.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ destination = 'Honolulu' ] Output [ origin , destination ]"
    },
    {
        "id": "d825bd8fb0ca282868564ad8d80284bacfe2927a36b827876960b7aa97d809ee",
        "question": "What are the origins of all flights that are headed to Honolulu?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ destination = 'Honolulu' ] Output [ origin , destination ]"
    },
    {
        "id": "1176badc17a436180d89c0c57d1f67b3a0b74b1ec0efde1a88437ba8a406755c",
        "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ origin = 'Los Angeles' AND destination = 'Honolulu' ] Output [ departure_date , origin , arrival_date , destination ]"
    },
    {
        "id": "1d569d71c98d154e4cdfe9fe107da4e30aedba2035311d9483522a66c8a2893f",
        "question": "What are the departure and arrival dates of all flights from LA to Honolulu?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ origin = 'Los Angeles' AND destination = 'Honolulu' ] Output [ departure_date , origin , arrival_date , destination ]"
    },
    {
        "id": "4a0f4fd305d86feebcc1eb6de79bd591ca9af3f94e1a95244bb22f41e4833f7e",
        "question": "Show flight number for all flights with more than 2000 distance.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ distance > 2000 ] Output [ distance , flno ]"
    },
    {
        "id": "9f7511d72edbba7a2f69d75b696f194b9359dbd907a715a8b7e62e447cea62a7",
        "question": "What are the numbers of all flights that can cover a distance of more than 2000?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ distance > 2000 ] Output [ distance , flno ]"
    },
    {
        "id": "de082c9ddd4fcd723410fa1c9193c25de77937ca196b5b288f28b0b411c1bef1",
        "question": "What is the average price for flights from Los Angeles to Honolulu.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ origin = 'Los Angeles' AND destination = 'Honolulu' ] Output [ origin , destination , price ] ; #2 = Aggregate [ #1 ] Output [ AVG(price) AS Avg_price ]"
    },
    {
        "id": "cf85d39c38cf18f6916827a27838c88328902c02d5c8b45f3f7f554083b543d3",
        "question": "What is the average price for flights from LA to Honolulu?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ origin = 'Los Angeles' AND destination = 'Honolulu' ] Output [ origin , destination , price ] ; #2 = Aggregate [ #1 ] Output [ AVG(price) AS Avg_price ]"
    },
    {
        "id": "ee10e302baa849d35c90868590aaa3b11758589d7f20d5272284b29df5183e47",
        "question": "Show origin and destination for flights with price higher than 300.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ price > 300 ] Output [ origin , destination , price ]"
    },
    {
        "id": "0821a7324703efb86dffcae0568c5f2352e9742cc4d9a1c0b018b4a42cac4ae4",
        "question": "What is the origin and destination for all flights whose price is higher than 300?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ price > 300 ] Output [ origin , destination , price ]"
    },
    {
        "id": "29f5cfe90564dd00b86c5bc074c13b82b507ee0d6c351c2a0baa4bac8078e82a",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ distance , price , flno ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ price DESC ] Output [ distance , price , flno ]"
    },
    {
        "id": "eedf43b43bd210b9e343e59c807fcb8e13f1b683290ac9607a499a2e3f242d1d",
        "question": "What is the flight number and its distance for the one with the maximum price?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ distance , price , flno ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ price DESC ] Output [ distance , price , flno ]"
    },
    {
        "id": "265ade8f202e29580191370687e189e888a9eaa76292845bbb9e75d0189f4c1b",
        "question": "Show the flight number of flights with three lowest distances.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ distance , flno ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ distance ASC ] Output [ distance , flno ]"
    },
    {
        "id": "19b30d460e3e2c792502d5c0ed4579ded01a99764571f6999c1b8939c4ddc9db",
        "question": "What are the numbers of the shortest flights?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ distance , flno ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ distance ASC ] Output [ distance , flno ]"
    },
    {
        "id": "7967fb8865eefb1902aa77cdee96a99f67686b9be3dac297ee45e9ed86003497",
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ origin = 'Los Angeles' ] Output [ distance , origin , price ] ; #2 = Aggregate [ #1 ] Output [ AVG(distance) AS Avg_distance , AVG(price) AS Avg_price ]"
    },
    {
        "id": "aa2942b9c88f5925915271a9d33d7cb9e6bbe6ba2902183f7c3bfa097b93e8f1",
        "question": "What is the average distance and price for all flights from LA?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ origin = 'Los Angeles' ] Output [ distance , origin , price ] ; #2 = Aggregate [ #1 ] Output [ AVG(distance) AS Avg_distance , AVG(price) AS Avg_price ]"
    },
    {
        "id": "5ac7c11ee34197968329aacc5eb0ce641c2a8cc4b3885788e38192702daeef73",
        "question": "Show all origins and the number of flights from each origin.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ origin ] ; #2 = Aggregate [ #1 ] GroupBy [ origin ] Output [ countstar AS Count_Star , origin ]"
    },
    {
        "id": "2609ada2f5d2171ec3022ab4144ce3950e989cf55e2e922efaeb92e5c7ca3dec",
        "question": "For each origin, how many flights came from there?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ origin ] ; #2 = Aggregate [ #1 ] GroupBy [ origin ] Output [ countstar AS Count_Star , origin ]"
    },
    {
        "id": "2f370b24c03b4aa49e1e6d688442fed618275f0ee21e89f4dabf6d2057acfb2f",
        "question": "Show all destinations and the number of flights to each destination.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ destination ] ; #2 = Aggregate [ #1 ] GroupBy [ destination ] Output [ countstar AS Count_Star , destination ]"
    },
    {
        "id": "68222ca50a129f0e5b08247162a1cefc5aa6cd71b5a9c43f73ef801135d92cd5",
        "question": "What are the destinations and number of flights to each one?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ destination ] ; #2 = Aggregate [ #1 ] GroupBy [ destination ] Output [ countstar AS Count_Star , destination ]"
    },
    {
        "id": "4d2a9d87453f6c9c15a96b2dd35d124c3faf9d4ac696564a631b1f3eeb6a4986",
        "question": "Which origin has most number of flights?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ origin ] ; #2 = Aggregate [ #1 ] GroupBy [ origin ] Output [ countstar AS Count_Star , origin ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ origin , Count_Star ]"
    },
    {
        "id": "a2fce7995a4cedeae7853de5d19935dcc1d0833726618733da13785bc1cfa914",
        "question": "What place has the most flights coming from there?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ origin ] ; #2 = Aggregate [ #1 ] GroupBy [ origin ] Output [ countstar AS Count_Star , origin ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ origin , Count_Star ]"
    },
    {
        "id": "095d1ef5a919910386765e4eea8a48e94d4c3fb29c724b4902ec7e2f415e0edc",
        "question": "Which destination has least number of flights?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ destination ] ; #2 = Aggregate [ #1 ] GroupBy [ destination ] Output [ countstar AS Count_Star , destination ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ destination , Count_Star ]"
    },
    {
        "id": "a44816590db0c0afa8ee7611c2479a5ee5647b34b99ee02edd324210324de9d9",
        "question": "What destination has the fewest number of flights?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ destination ] ; #2 = Aggregate [ #1 ] GroupBy [ destination ] Output [ countstar AS Count_Star , destination ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ destination , Count_Star ]"
    },
    {
        "id": "a9e07d39b45d8d929b31f9aeda0bb297d75937e7b0607776601f051b67d163ac",
        "question": "What is the aircraft name for the flight with number 99",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ flno = 99 ] Output [ aid , flno ] ; #2 = Scan Table [ aircraft ] Output [ aid , name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #2.name ]"
    },
    {
        "id": "bd79b306d4c854ca32c8d23adbac39b34d4fab6541f69d00b66c5593890ed90e",
        "question": "What is the name of the aircraft that was on flight number 99?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Predicate [ flno = 99 ] Output [ aid , flno ] ; #2 = Scan Table [ aircraft ] Output [ aid , name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #2.name ]"
    },
    {
        "id": "214d844eeb33b9b748f43320b5ae5ffd6ff5df6fa3723e86b2ec247f344bb9b6",
        "question": "Show all flight numbers with aircraft Airbus A340-300.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Predicate [ name = 'Airbus A340-300' ] Output [ aid , name ] ; #2 = Scan Table [ flight ] Output [ aid , flno ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #2.flno ]"
    },
    {
        "id": "7426d8e99a9849276b1825c2566712a338802a1b90a5e44ae63bec80cfafb979",
        "question": "What are the flight numbers for the aircraft Airbus A340-300?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Predicate [ name = 'Airbus A340-300' ] Output [ aid , name ] ; #2 = Scan Table [ flight ] Output [ aid , flno ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #2.flno ]"
    },
    {
        "id": "c4a800bd54a46b32d8eb9b9d1413a100fe5ec66a26d2a9410f5e8a846e67e667",
        "question": "Show aircraft names and number of flights for each aircraft.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ aid ] ; #2 = Scan Table [ aircraft ] Output [ aid , name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #1.aid , #2.name ] ; #4 = Aggregate [ #3 ] GroupBy [ aid ] Output [ name , countstar AS Count_Star ]"
    },
    {
        "id": "ac0b6b5ace99698d9aeed9adf30782745ce625bececae4966da72275ade711d3",
        "question": "What is the name of each aircraft and how many flights does each one complete?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ aid ] ; #2 = Scan Table [ aircraft ] Output [ aid , name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #1.aid , #2.name ] ; #4 = Aggregate [ #3 ] GroupBy [ aid ] Output [ name , countstar AS Count_Star ]"
    },
    {
        "id": "5fe2e2ffc14490af65f18273b5fffe73341cfcdaac39b8bcdbd5b39aef4a952b",
        "question": "Show names for all aircraft with at least two flights.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ aid ] ; #2 = Scan Table [ aircraft ] Output [ aid , name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #1.aid , #2.name ] ; #4 = Aggregate [ #3 ] GroupBy [ aid ] Output [ name , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]"
    },
    {
        "id": "527028cb613c142d42a6970b54bcf49f370abe911bf6d3c26ac5024a113f3bc6",
        "question": "What are the names for all aircrafts with at least 2 flights?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ flight ] Output [ aid ] ; #2 = Scan Table [ aircraft ] Output [ aid , name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #1.aid , #2.name ] ; #4 = Aggregate [ #3 ] GroupBy [ aid ] Output [ name , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]"
    },
    {
        "id": "74e921130de818d14da941ddec8f96bf427f747018a328172fa9684694e97e62",
        "question": "How many employees have certificate.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ certificate ] Output [ eid ] ; #2 = Aggregate [ #1 ] GroupBy [ eid ] Output [ eid ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9b815c3d3a66791c9e8eaecee303ec6a809e07b7bc387726b4d24c035745b031",
        "question": "What is the count of distinct employees with certificates?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ certificate ] Output [ eid ] ; #2 = Aggregate [ #1 ] GroupBy [ eid ] Output [ eid ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "71a0c62d26dc434f4be1b0103b5139193abc38b810afe14875cc16950ed84f37",
        "question": "Show ids for all employees who don't have a certificate.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Output [ eid ] ; #2 = Scan Table [ certificate ] Output [ eid ] ; #3 = Aggregate [ #2 ] GroupBy [ eid ] Output [ eid ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.eid = #1.eid ] Output [ #1.eid ]"
    },
    {
        "id": "c1a804e1474d28a6f5f78f76c4b29b21d576bb61d5c5b7118a5b2fe36447d06b",
        "question": "What are the ids of all employees that don't have certificates?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Output [ eid ] ; #2 = Scan Table [ certificate ] Output [ eid ] ; #3 = Aggregate [ #2 ] GroupBy [ eid ] Output [ eid ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.eid = #1.eid ] Output [ #1.eid ]"
    },
    {
        "id": "d725a2ba12508df90726b32e2044a54afc465e47004fadb8f794105bd0c52697",
        "question": "Show names for all aircrafts of which John Williams has certificates.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Predicate [ name = 'John Williams' ] Output [ name , eid ] ; #2 = Scan Table [ certificate ] Output [ aid , eid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.eid = #2.eid ] Output [ #2.aid ] ; #4 = Scan Table [ aircraft ] Output [ aid , name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.aid = #4.aid ] Output [ #4.name ]"
    },
    {
        "id": "eb37742060cd202ae50293fd2cab573a896c8c6e9e70691fa5d6feeed149a127",
        "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Predicate [ name = 'John Williams' ] Output [ name , eid ] ; #2 = Scan Table [ certificate ] Output [ aid , eid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.eid = #2.eid ] Output [ #2.aid ] ; #4 = Scan Table [ aircraft ] Output [ aid , name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.aid = #4.aid ] Output [ #4.name ]"
    },
    {
        "id": "921b58f17191bfcd7dd8294f2fd2c76ddae0ab4f7a77368c439a26b37f57149a",
        "question": "Show names for all employees who have certificate of Boeing 737-800.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Predicate [ name = 'Boeing 737-800' ] Output [ aid , name ] ; #2 = Scan Table [ certificate ] Output [ aid , eid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #2.eid ] ; #4 = Scan Table [ employee ] Output [ name , eid ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.eid = #4.eid ] Output [ #4.name ]"
    },
    {
        "id": "1a80d4ba02b4048205e72b6046a4ba65995e5bbfcff5b2bb77ef6e66aa2b6537",
        "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Predicate [ name = 'Boeing 737-800' ] Output [ aid , name ] ; #2 = Scan Table [ certificate ] Output [ aid , eid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #2.eid ] ; #4 = Scan Table [ employee ] Output [ name , eid ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.eid = #4.eid ] Output [ #4.name ]"
    },
    {
        "id": "939e6937285ba8aca9ff38d578dca67b83ad7b061c11d45469a4a40c7e8b9ece",
        "question": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Predicate [ name = 'Boeing 737-800' ] Output [ aid , name ] ; #2 = Scan Table [ certificate ] Output [ aid , eid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #2.eid ] ; #4 = Scan Table [ employee ] Output [ name , eid ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.eid = #4.eid ] Distinct [ true ] Output [ #4.name ] ; #6 = Scan Table [ aircraft ] Predicate [ name = 'Airbus A340-300' ] Output [ aid , name ] ; #7 = Scan Table [ certificate ] Output [ aid , eid ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.aid = #7.aid ] Output [ #7.eid ] ; #9 = Scan Table [ employee ] Output [ name , eid ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.eid = #9.eid ] Output [ #9.name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.name = #10.name ] Output [ #5.name ]"
    },
    {
        "id": "b509d72bbea86871ad51fec35c0d5864da390242d12978826ff43db7104493f9",
        "question": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Predicate [ name = 'Boeing 737-800' ] Output [ aid , name ] ; #2 = Scan Table [ certificate ] Output [ aid , eid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #2.eid ] ; #4 = Scan Table [ employee ] Output [ name , eid ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.eid = #4.eid ] Distinct [ true ] Output [ #4.name ] ; #6 = Scan Table [ aircraft ] Predicate [ name = 'Airbus A340-300' ] Output [ aid , name ] ; #7 = Scan Table [ certificate ] Output [ aid , eid ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.aid = #7.aid ] Output [ #7.eid ] ; #9 = Scan Table [ employee ] Output [ name , eid ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.eid = #9.eid ] Output [ #9.name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.name = #10.name ] Output [ #5.name ]"
    },
    {
        "id": "afca55399205902f5e9587beab950989ef3f9cafbd30405faf981563a45143af",
        "question": "Show names for all employees who do not have certificate of Boeing 737-800.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Distinct [ true ] Output [ name ] ; #2 = Scan Table [ aircraft ] Predicate [ name = 'Boeing 737-800' ] Output [ aid , name ] ; #3 = Scan Table [ certificate ] Output [ aid , eid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.aid = #3.aid ] Output [ #3.eid ] ; #5 = Scan Table [ employee ] Output [ name , eid ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.eid = #5.eid ] Output [ #5.name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.name = #6.name ] Output [ #1.name ]"
    },
    {
        "id": "89827a9ec7fbca6d090a2e1fb7c6448fc9819c275d817e7e0c00e26d04ccd05d",
        "question": "What are the names of all employees who are not certified to fly Boeing 737-800s?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ employee ] Distinct [ true ] Output [ name ] ; #2 = Scan Table [ aircraft ] Predicate [ name = 'Boeing 737-800' ] Output [ aid , name ] ; #3 = Scan Table [ certificate ] Output [ aid , eid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.aid = #3.aid ] Output [ #3.eid ] ; #5 = Scan Table [ employee ] Output [ name , eid ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.eid = #5.eid ] Output [ #5.name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.name = #6.name ] Output [ #1.name ]"
    },
    {
        "id": "bff53beab3127dbfcc11358897090ef9c7b7db5120afc79713b43e7ef085aa5b",
        "question": "Show the name of aircraft which fewest people have its certificate.",
        "parsing_tree": "flight_1 | #1 = Scan Table [ certificate ] Output [ aid ] ; #2 = Aggregate [ #1 ] GroupBy [ aid ] Output [ aid , countstar AS Count_Star ] ; #3 = Scan Table [ aircraft ] Output [ aid , name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.aid = #3.aid ] Output [ #3.name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "2da7d2e827a1942506edd4204541de4567343b6b1ed981b969b8842672689b1e",
        "question": "What are the names of the aircraft that the least people are certified to fly?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ certificate ] Output [ aid ] ; #2 = Aggregate [ #1 ] GroupBy [ aid ] Output [ aid , countstar AS Count_Star ] ; #3 = Scan Table [ aircraft ] Output [ aid , name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.aid = #3.aid ] Output [ #3.name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "4576845b9cecbf4b2b7d7642ff5ab4bc26ab0ec8d221c9ec905d9f3863054c72",
        "question": "what is the salary and name of the employee who has the most number of aircraft certificates?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ certificate ] Output [ eid ] ; #2 = Aggregate [ #1 ] GroupBy [ eid ] Output [ countstar AS Count_Star , eid ] ; #3 = Scan Table [ employee ] Output [ name , salary , eid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.eid = #3.eid ] Output [ #3.name , #3.salary , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , salary ]"
    },
    {
        "id": "c0ce91700b1795c45e95c9b00bf4cac7df6377ac4bfd542f4078e13ca171c50a",
        "question": "What is the salaray and name of the employee that is certified to fly the most planes?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ certificate ] Output [ eid ] ; #2 = Aggregate [ #1 ] GroupBy [ eid ] Output [ countstar AS Count_Star , eid ] ; #3 = Scan Table [ employee ] Output [ name , salary , eid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.eid = #3.eid ] Output [ #3.name , #3.salary , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , salary ]"
    },
    {
        "id": "977affb6190058c7748cd4da35274ba42136cf430cece70d24fbba7075f530bd",
        "question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Predicate [ distance > 5000 ] Output [ aid , distance ] ; #2 = Scan Table [ certificate ] Output [ aid , eid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #2.eid ] ; #4 = Scan Table [ employee ] Output [ name , eid ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.eid = #4.eid ] Output [ #4.eid , #4.name ] ; #6 = Aggregate [ #5 ] GroupBy [ eid ] Output [ name , countstar AS Count_Star ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "81c4e3c411e09ccfa1f72fc9e6e8e24bae4672b24f7531d51030f865155eba2c",
        "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?",
        "parsing_tree": "flight_1 | #1 = Scan Table [ aircraft ] Predicate [ distance > 5000 ] Output [ aid , distance ] ; #2 = Scan Table [ certificate ] Output [ aid , eid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #2.eid ] ; #4 = Scan Table [ employee ] Output [ name , eid ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.eid = #4.eid ] Output [ #4.eid , #4.name ] ; #6 = Aggregate [ #5 ] GroupBy [ eid ] Output [ name , countstar AS Count_Star ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "a888ad0db93a1bc364570b7e9d72b37bbc5a5da7d4e24a3f6ec6cc615e6fd380",
        "question": "How many allergies are there?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a3e8a2a681acfd5c9a61bd5a00c6654e5b668eeda775e1698a0255f793416196",
        "question": "How many allergy entries are there?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "bd0e19cc92f6b595017d039e103fe42580a60aa4853abb62f604cb40ce4f94c1",
        "question": "How many different allergy types exist?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Distinct [ true ] Output [ AllergyType ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT AllergyType) AS Count_Dist_AllergyType ]"
    },
    {
        "id": "4508f3f30e06ca0f4a787fb7be29d38c5331a03a6dcdb2cad6d2cb1ab8c1afc3",
        "question": "How many distinct allergies are there?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Distinct [ true ] Output [ AllergyType ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT AllergyType) AS Count_Dist_AllergyType ]"
    },
    {
        "id": "d4b94addeae4e9486d7f2c23885b93fda664064ea8d3979c6975e58ea4c234f1",
        "question": "Show all allergy types.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Distinct [ true ] Output [ AllergyType ]"
    },
    {
        "id": "e2d1103e44bd9343b5e40ee44010a269b1c7513652664a4e98126cce35763e42",
        "question": "What are the different allergy types?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Distinct [ true ] Output [ AllergyType ]"
    },
    {
        "id": "fa9df85f094e09e3a6e16f333f377bc3b2b53999c8f359d112ee62c03b6ad591",
        "question": "Show all allergies and their types.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Output [ AllergyType , Allergy ]"
    },
    {
        "id": "624e576ed1370dd3e1a60f5bd5d5aefb4386c245787e64c031d30cb1fc437f78",
        "question": "What are the allergies and their types?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Output [ AllergyType , Allergy ]"
    },
    {
        "id": "aa04ca324db2803e5e07beb42fd6dd820c2a094588ae61b2f9616e90dcce9d62",
        "question": "Show all allergies with type food.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'food' ] Output [ AllergyType , Allergy ]"
    },
    {
        "id": "2606ab78dafe4e801c684ba381c227cd691c66cb8604c7046f70ea3a90852616",
        "question": "What are all the different food allergies?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'food' ] Output [ AllergyType , Allergy ]"
    },
    {
        "id": "34b5eebcf5620ad5beca528f80f1fd90a66ec58d1e54b29af2e05bb65021fdff",
        "question": "What is the type of allergy Cat?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Predicate [ Allergy = 'Cat' ] Output [ AllergyType , Allergy ]"
    },
    {
        "id": "a7cbf887ffd6379b0b7e81bc6accaa322b30c5533dc0417594b417e92436c4a8",
        "question": "What is allergy type of a cat allergy?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Predicate [ Allergy = 'Cat' ] Output [ AllergyType , Allergy ]"
    },
    {
        "id": "4516f14ef2c62aba91ee8419885f3b4a33499539363b05d297c483e1c2ae7034",
        "question": "How many allergies have type animal?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'animal' ] Output [ AllergyType ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f8bf358e2ff6d97e99fb568bbb82a09278dbba34490a71fd6a452ce06c821c17",
        "question": "How many animal type allergies exist?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'animal' ] Output [ AllergyType ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2b1d2d91d7b09144fb852f76b781ca7954e514ccd7af1db158eda3c91dbd1f0d",
        "question": "Show all allergy types and the number of allergies in each type.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Output [ AllergyType ] ; #2 = Aggregate [ #1 ] GroupBy [ AllergyType ] Output [ countstar AS Count_Star , AllergyType ]"
    },
    {
        "id": "64275b3bbfc16f9e5b51766ad0af1c934e147051b0647f115b09556fed23c94f",
        "question": "What are the allergy types and how many allergies correspond to each one?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Output [ AllergyType ] ; #2 = Aggregate [ #1 ] GroupBy [ AllergyType ] Output [ countstar AS Count_Star , AllergyType ]"
    },
    {
        "id": "c6947dee82cb8472c7416729507575dda548e47efd30914bc68ffca3900b1bb1",
        "question": "Which allergy type has most number of allergies?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Output [ AllergyType ] ; #2 = Aggregate [ #1 ] GroupBy [ AllergyType ] Output [ countstar AS Count_Star , AllergyType ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ AllergyType , Count_Star ]"
    },
    {
        "id": "10c0b8f5ea2236ee2a83344182186cb083fb2624b2d4d045e4227e4447a1f811",
        "question": "Which allergy type is most common?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Output [ AllergyType ] ; #2 = Aggregate [ #1 ] GroupBy [ AllergyType ] Output [ countstar AS Count_Star , AllergyType ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ AllergyType , Count_Star ]"
    },
    {
        "id": "2ce16597a36d4e967650dabb5c84aa88e417563b9e36c9a1f2ed69bd8057728c",
        "question": "Which allergy type has least number of allergies?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Output [ AllergyType ] ; #2 = Aggregate [ #1 ] GroupBy [ AllergyType ] Output [ countstar AS Count_Star , AllergyType ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ AllergyType , Count_Star ]"
    },
    {
        "id": "34d0de1ef6d7bf37a9036a5067a6bd320ad773b7e6b148188890ade506995123",
        "question": "Which allergy type is the least common?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Output [ AllergyType ] ; #2 = Aggregate [ #1 ] GroupBy [ AllergyType ] Output [ countstar AS Count_Star , AllergyType ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ AllergyType , Count_Star ]"
    },
    {
        "id": "52a1615a354911b4f8fd616b99c230f687db4f1495c65bfac0c5194569d463e9",
        "question": "How many students are there?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7a971ba8e76dfe1080d8f12c91443bddbc924a2ca28448733064a0ee167dbee3",
        "question": "What is the total number of students?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2354c42c1e0a19531f192751104c86a1db24abf0b9361b4bfb70bfc9bdc62e7d",
        "question": "Show first name and last name for all students.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ LName , Fname ]"
    },
    {
        "id": "eee2d75a9eec6d04f0ebe93a24e8b6e3c53d46d4d591782f5c66a6f1ede3ec7c",
        "question": "What are the full names of all students",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ LName , Fname ]"
    },
    {
        "id": "241360c67ab12d5fc01ac02cd7c0874050834045ed7a70daee69ca08ac7a3f4f",
        "question": "How many different advisors are listed?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Distinct [ true ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Advisor) AS Count_Dist_Advisor ]"
    },
    {
        "id": "df743c63e56bd3669ee40b046803e13df19c3125851ca231b608e154d38fed56",
        "question": "How many advisors are there?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Distinct [ true ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Advisor) AS Count_Dist_Advisor ]"
    },
    {
        "id": "6919ea8129366e88b393460822813862bcd0075763ecf17ad388f8e6d0bb2180",
        "question": "Show all majors.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Distinct [ true ] Output [ Major ]"
    },
    {
        "id": "75084b382750ec474b759ab40c9a1e41de21c0f13d96b45ca9830d082004b6f5",
        "question": "What are the different majors?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Distinct [ true ] Output [ Major ]"
    },
    {
        "id": "6f97584b020d3f5db85dfd175ebccb95c35cd3a5e1bde033c1dc9187e6daf380",
        "question": "Show all cities where students live.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Distinct [ true ] Output [ city_code ]"
    },
    {
        "id": "62b24ec6bbaecd36a3af82a42d70d1222588080b182237c9b2358615fa460d9a",
        "question": "What cities do students live in?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Distinct [ true ] Output [ city_code ]"
    },
    {
        "id": "a8b6c706e2af6fa9d9025ea31876a45e56c5be6c5a6cbfc0eef03ccc817a1dd4",
        "question": "Show first name, last name, age for all female students. Their sex is F.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , LName , Fname , Age ]"
    },
    {
        "id": "6605ce630f7243866e1de5564633186260c0f6695e13fc04cd253d36e5d35271",
        "question": "What are the full names and ages for all female students whose sex is F?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , LName , Fname , Age ]"
    },
    {
        "id": "ae43a25d519c6780d744f36847cbfb7e89793f91b542186663b4a32fcce3bad2",
        "question": "Show student ids for all male students.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ Sex = 'M' ] Output [ Sex , StuID ]"
    },
    {
        "id": "eed4d3cd9a0a3f3a3545b960158e214c5ff35410433ef0b3210fc6ee1a41c2d8",
        "question": "What are the student ids for all male students?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ Sex = 'M' ] Output [ Sex , StuID ]"
    },
    {
        "id": "cdea7d4f67aaee617aff8f841302e6f4bb8c3e6dc10fa2ec7aff3593c48a9645",
        "question": "How many students are age 18?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ Age = 18 ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "52ff631eb11abfc89d291f9eb3aaf9e3e5d767a4018134c4925d637afb5749e2",
        "question": "How many students are 18 years old?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ Age = 18 ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "21badbf7259efe636fc41afbd6ff611cea12ff93aaa2a93038111a6ab4c153af",
        "question": "Show all student ids who are older than 20.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ Age > 20 ] Output [ StuID , Age ]"
    },
    {
        "id": "98af9c8c0022555e5722bf98707d687dd5d585b682f5882b7d9f9d2a7e7124f7",
        "question": "What are the student ids for students over 20 years old?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ Age > 20 ] Output [ StuID , Age ]"
    },
    {
        "id": "a43d1efed4836e85bbdf78000bc81241866d2e3159b6621adb9ee360c5200303",
        "question": "Which city does the student whose last name is \"Kim\" live in?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ LName = 'Kim' ] Output [ LName , city_code ]"
    },
    {
        "id": "dfcf1122d07e203c4727808ccaf3f785d431f5338eafa152748398d57ef72607",
        "question": "Give the city that the student whose family name is Kim lives in.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ LName = 'Kim' ] Output [ LName , city_code ]"
    },
    {
        "id": "a86da8803d5f5cb9a3e45705790bdad7ebded91bc5a2999e139126a668142a44",
        "question": "Who is the advisor of student with ID 1004?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ StuID = 1004 ] Output [ Advisor , StuID ]"
    },
    {
        "id": "78154d33e5f1092b0439973d117769b8f33b995e6ab51b23cad84bd306be90ba",
        "question": "Who advises student 1004?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ StuID = 1004 ] Output [ Advisor , StuID ]"
    },
    {
        "id": "65330e9e4f6114dbf9bc80da608e20275cc3e8d1040b6d75de4fdc28ce2c7e6c",
        "question": "How many students live in HKG or CHI?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ city_code = 'CHI' OR city_code = 'HKG' ] Output [ city_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f6a61b436f25dc7ae916b3930593a9f3bbea016f940e7946a27ba7d65fa3351a",
        "question": "Give the number of students living in either HKG or CHI.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ city_code = 'CHI' OR city_code = 'HKG' ] Output [ city_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0c1956413738c15375905808dc656586b1a8faa70f6bc567e18f351b58137cd5",
        "question": "Show the minimum, average, and maximum age of all students.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ MAX(Age) AS Max_Age , AVG(Age) AS Avg_Age , MIN(Age) AS Min_Age ]"
    },
    {
        "id": "707b4d3e27d0709345ffce7b4c47f80f0d7037928560f3f5258c1e553fd9d61f",
        "question": "What is the minimum, mean, and maximum age across all students?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ MAX(Age) AS Max_Age , AVG(Age) AS Avg_Age , MIN(Age) AS Min_Age ]"
    },
    {
        "id": "e104aa4411d73e9ab5c2f1f33dd1b1c7bbfa410b1b78094738cd3704cedf091c",
        "question": "Show all majors and corresponding number of students.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Major ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ countstar AS Count_Star , Major ]"
    },
    {
        "id": "8f31c05ec642d1459bc5d7cd12e2dad05b406db3856e89814e71225935ad7e16",
        "question": "How many students are there for each major?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Major ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ countstar AS Count_Star , Major ]"
    },
    {
        "id": "505feed799fbc4bcb576c52cea5916c1484b42f9fe4919199a149a5be68cd5bf",
        "question": "Which major has most number of students?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Major ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ countstar AS Count_Star , Major ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Major ]"
    },
    {
        "id": "697d86e70d72cf77138d9542713fbb147935a1835cebc9c7b3a6b339bf21549d",
        "question": "What is the largest major?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Major ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ countstar AS Count_Star , Major ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Major ]"
    },
    {
        "id": "bb97a7fd49bcdb74b3449665b6f31e92949ab0865bd8e6187b8030181c0e3e1e",
        "question": "Show all ages and corresponding number of students.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Age ] ; #2 = Aggregate [ #1 ] GroupBy [ Age ] Output [ countstar AS Count_Star , Age ]"
    },
    {
        "id": "3f55520f1095963ef496e5215f1ca4469a328a81a4b711ab34bf64577266987f",
        "question": "How old is each student and how many students are each age?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Age ] ; #2 = Aggregate [ #1 ] GroupBy [ Age ] Output [ countstar AS Count_Star , Age ]"
    },
    {
        "id": "77d045aa703d0634b22191c546d4fcea40ffccfed87896fca52cde8b18fa8149",
        "question": "Show the average age for male and female students.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Sex , Age ] ; #2 = Aggregate [ #1 ] GroupBy [ Sex ] Output [ Sex , AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "dd411335e57077ba136bcade44b88caf5510a19621192029e065af2c76bc9c17",
        "question": "What are the average ages for male and female students?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Sex , Age ] ; #2 = Aggregate [ #1 ] GroupBy [ Sex ] Output [ Sex , AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "0e21e5c0202778b19335bdce59e97eaddb236b6b246192b697a6be4442148732",
        "question": "Show all cities and corresponding number of students.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ city_code ] ; #2 = Aggregate [ #1 ] GroupBy [ city_code ] Output [ countstar AS Count_Star , city_code ]"
    },
    {
        "id": "b1c0d94a7346f6ad4e63b3d7c0e530f951f6a5f78d7b0643f6d47decfe76a9c4",
        "question": "How many students live in each city?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ city_code ] ; #2 = Aggregate [ #1 ] GroupBy [ city_code ] Output [ countstar AS Count_Star , city_code ]"
    },
    {
        "id": "b7ee702655b2cedbb868b7aec39fd5ee6f0087c8a5daced3c51310efab77cc81",
        "question": "Show all advisors and corresponding number of students.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ]"
    },
    {
        "id": "c56e03c8fec402f97cdd49a745db47fb57539b3990769661bec92cff439bec81",
        "question": "How many students does each advisor have?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ]"
    },
    {
        "id": "f279b7ed31e95598a062a5bcc41d851f626bc1970223a75354c4e04602c11396",
        "question": "Which advisor has most number of students?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Advisor , Count_Star ]"
    },
    {
        "id": "2d1367af528e6a3fdd10529f77b7d78c158efa42823f9b53c60662b3ae93f9e6",
        "question": "Give the advisor with the most students.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Advisor , Count_Star ]"
    },
    {
        "id": "ce99ac6c7fb9daf837cb7984d575244c6cc75dff513c56c350d35b41bc40c72b",
        "question": "How many students have cat allergies?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Cat' ] Output [ Allergy ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ff779a0db3a64ca8bee03255d09f7ca5c00da88621d9e3530e8fe8f986e2fcb1",
        "question": "How many students are affected by cat allergies?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Cat' ] Output [ Allergy ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f886666343efb302d6c2f089c7c639face9dd8ad5fee01a9588974c0ce9c0248",
        "question": "Show all student IDs who have at least two allergies.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Has_Allergy ] Output [ StuID ] ; #2 = Aggregate [ #1 ] GroupBy [ StuID ] Output [ countstar AS Count_Star , StuID ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ StuID ]"
    },
    {
        "id": "f8d9bd06d33ceab01349bd74e5aa6297ae395f5965d42173e6a0dceb8d73a050",
        "question": "What are the students ids of students who have more than one allergy?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Has_Allergy ] Output [ StuID ] ; #2 = Aggregate [ #1 ] GroupBy [ StuID ] Output [ countstar AS Count_Star , StuID ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ StuID ]"
    },
    {
        "id": "5124869c3d00639c889d07f0c39f9e904f48ac98547bb72e45facb41480d148b",
        "question": "What are the student ids of students who don't have any allergies?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ StuID ] ; #2 = Scan Table [ Has_Allergy ] Output [ StuID ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.StuID ]"
    },
    {
        "id": "4ec87baf925d3ae42d47f1fff08d96165bed5caa8c41e12380ff8bcd3b2cc4a4",
        "question": "Which students are unaffected by allergies?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ StuID ] ; #2 = Scan Table [ Has_Allergy ] Output [ StuID ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.StuID ]"
    },
    {
        "id": "d6c052e482d0fea9f77f6354b17d50e12aa4c5e8c2754094eabdd5b2950a1a66",
        "question": "How many students have a food allergy?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'food' ] Output [ AllergyType , Allergy ] ; #2 = Scan Table [ Has_Allergy ] Output [ Allergy ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Allergy = #2.Allergy ] Output [ #1.Allergy , #1.AllergyType ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5171137b80fb8dcca14ebf6d676b7ff267ee7b80e2ee1c54f43d7535d882744b",
        "question": "How many students are affected by food related allergies?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'food' ] Output [ AllergyType , Allergy ] ; #2 = Scan Table [ Has_Allergy ] Output [ Allergy ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Allergy = #2.Allergy ] Output [ #1.Allergy , #1.AllergyType ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4e0fbe99ae90df23122b3588eb10380043c698e27de86eeb867cdce7a66b9f30",
        "question": "Which allergy has most number of students affected?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Has_Allergy ] Output [ Allergy ] ; #2 = Aggregate [ #1 ] GroupBy [ Allergy ] Output [ countstar AS Count_Star , Allergy ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Allergy ]"
    },
    {
        "id": "e6bb067d02875f4b8f164a37ff6875162d6383caa6f09f13914e46b454fa1369",
        "question": "Which allergy is the most common?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Has_Allergy ] Output [ Allergy ] ; #2 = Aggregate [ #1 ] GroupBy [ Allergy ] Output [ countstar AS Count_Star , Allergy ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Allergy ]"
    },
    {
        "id": "eb864b9acfac7d32a376f2ff3f673205feda478a17cefe970f9ca8ee84e674ba",
        "question": "Show all allergies with number of students affected.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Has_Allergy ] Output [ Allergy ] ; #2 = Aggregate [ #1 ] GroupBy [ Allergy ] Output [ countstar AS Count_Star , Allergy ]"
    },
    {
        "id": "d7009aca915792d720ad1c2afeb8b131d50be31829fa916f5282d97b4e7ef475",
        "question": "How many students have each different allergy?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Has_Allergy ] Output [ Allergy ] ; #2 = Aggregate [ #1 ] GroupBy [ Allergy ] Output [ countstar AS Count_Star , Allergy ]"
    },
    {
        "id": "56c7165b217c61b482c85359f3c59ad274d0a697e0df5d16eeea81716c33d9f0",
        "question": "Show all allergy type with number of students affected.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Output [ AllergyType , Allergy ] ; #2 = Scan Table [ Has_Allergy ] Output [ Allergy ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Allergy = #2.Allergy ] Output [ #1.AllergyType ] ; #4 = Aggregate [ #3 ] GroupBy [ AllergyType ] Output [ countstar AS Count_Star , AllergyType ]"
    },
    {
        "id": "b8ec2f9c338cbc0ce35b70a6e73bfdd43e7b9d7140cbe98d2da2c8a810e4e906",
        "question": "How many students are affected by each allergy type?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Output [ AllergyType , Allergy ] ; #2 = Scan Table [ Has_Allergy ] Output [ Allergy ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Allergy = #2.Allergy ] Output [ #1.AllergyType ] ; #4 = Aggregate [ #3 ] GroupBy [ AllergyType ] Output [ countstar AS Count_Star , AllergyType ]"
    },
    {
        "id": "6b827f965e51ea30877efdb339c66040c4ebcb10f9574552cd644818c0fecd60",
        "question": "Find the last name and age of the student who has allergy to both milk and cat.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Milk' ] Distinct [ true ] Output [ StuID , Allergy ] ; #2 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Cat' ] Output [ StuID , Allergy ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.StuID ] ; #4 = Scan Table [ Student ] Output [ LName , StuID , Age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Age , #4.LName ]"
    },
    {
        "id": "645b8c9ca6ec5a7fcdb7939e07232ddd2541a38ad3373c21c3b8cde0ac9660ae",
        "question": "What are the last names and ages of the students who are allergic to milk and cat?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Milk' ] Distinct [ true ] Output [ StuID , Allergy ] ; #2 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Cat' ] Output [ StuID , Allergy ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.StuID ] ; #4 = Scan Table [ Student ] Output [ LName , StuID , Age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Age , #4.LName ]"
    },
    {
        "id": "de38d7e5227ed4492c46392bcf05c56a1b32b09cb8fc660083fcdd0b9efeeae3",
        "question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Lisa' ] Output [ Fname , StuID ] ; #2 = Scan Table [ Has_Allergy ] Output [ StuID , Allergy ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.Allergy ] ; #4 = Scan Table [ Allergy_Type ] Output [ AllergyType , Allergy ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Allergy = #4.Allergy ] Output [ #4.Allergy , #4.AllergyType ] ; #6 = Sort [ #5 ] OrderBy [ Allergy ASC ] Output [ AllergyType , Allergy ]"
    },
    {
        "id": "d04cf5e5357d13bc2895ef6b61609b26ec22e07401d8eef1838cef333c42ad56",
        "question": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Lisa' ] Output [ Fname , StuID ] ; #2 = Scan Table [ Has_Allergy ] Output [ StuID , Allergy ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.Allergy ] ; #4 = Scan Table [ Allergy_Type ] Output [ AllergyType , Allergy ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Allergy = #4.Allergy ] Output [ #4.Allergy , #4.AllergyType ] ; #6 = Sort [ #5 ] OrderBy [ Allergy ASC ] Output [ AllergyType , Allergy ]"
    },
    {
        "id": "93c86d0d2551f02dfb9e0d5659997a238bb2763f7bca1b8363e8db4a2c490a49",
        "question": "Find the first name and gender of the student who has allergy to milk but not cat.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Milk' ] Distinct [ true ] Output [ StuID , Allergy ] ; #2 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Cat' ] Output [ StuID , Allergy ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.StuID ] ; #4 = Scan Table [ Student ] Output [ Fname , Sex , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.Sex ]"
    },
    {
        "id": "ea76539c18a05e27ad37a14eeb032a6c1937bf941c2be81e00cc9240c2ea9a1f",
        "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Milk' ] Distinct [ true ] Output [ StuID , Allergy ] ; #2 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Cat' ] Output [ StuID , Allergy ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.StuID ] ; #4 = Scan Table [ Student ] Output [ Fname , Sex , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.Sex ]"
    },
    {
        "id": "dce64a11453e80f117ccbe527e382a14f20e553d8cea19886fb96adacc774437",
        "question": "Find the average age of the students who have allergies with food and animal types.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'food' ] Output [ AllergyType , Allergy ] ; #2 = Scan Table [ Has_Allergy ] Output [ StuID , Allergy ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Allergy = #2.Allergy ] Distinct [ true ] Output [ #2.StuID ] ; #4 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'animal' ] Output [ AllergyType , Allergy ] ; #5 = Scan Table [ Has_Allergy ] Output [ StuID , Allergy ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Allergy = #5.Allergy ] Output [ #5.StuID ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.StuID = #6.StuID ] Output [ #3.StuID ] ; #8 = Scan Table [ Student ] Output [ StuID , Age ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.StuID = #8.StuID ] Output [ #8.Age ] ; #10 = Aggregate [ #9 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "6f33a8628f179a0610bf0b35cfa6e82f82728002c252b02465dea4d827f9c66c",
        "question": "How old are the students with allergies to food and animal types on average?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'food' ] Output [ AllergyType , Allergy ] ; #2 = Scan Table [ Has_Allergy ] Output [ StuID , Allergy ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Allergy = #2.Allergy ] Distinct [ true ] Output [ #2.StuID ] ; #4 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'animal' ] Output [ AllergyType , Allergy ] ; #5 = Scan Table [ Has_Allergy ] Output [ StuID , Allergy ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Allergy = #5.Allergy ] Output [ #5.StuID ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.StuID = #6.StuID ] Output [ #3.StuID ] ; #8 = Scan Table [ Student ] Output [ StuID , Age ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.StuID = #8.StuID ] Output [ #8.Age ] ; #10 = Aggregate [ #9 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "f8881fdbefd48654ef33b7e9d40aa3bcf9f83ccb57e1651697a369cf0161ee8d",
        "question": "List the first and last name of the students who do not have any food type allergy.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #2 = Scan Table [ Has_Allergy ] Predicate [ StuID IS NULL OR StuID = StuID ] Output [ StuID , Allergy ] ; #3 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'food' ] Output [ AllergyType , Allergy ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Allergy = #2.Allergy ] Output [ #2.Allergy , #3.AllergyType , #2.StuID ] ; #5 = Except [ #1 , #4 ] ExceptColumns [ #1.StuID ] Output [ #1.LName , #1.Fname ]"
    },
    {
        "id": "c3e14e628fb8ca356c01ab5917d021bcfecb99ac5498f49ed89d818fdfb3a598",
        "question": "What is the full name of each student who is not allergic to any type of food.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #2 = Scan Table [ Has_Allergy ] Predicate [ StuID IS NULL OR StuID = StuID ] Output [ StuID , Allergy ] ; #3 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'food' ] Output [ AllergyType , Allergy ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Allergy = #2.Allergy ] Output [ #2.Allergy , #3.AllergyType , #2.StuID ] ; #5 = Except [ #1 , #4 ] ExceptColumns [ #1.StuID ] Output [ #1.LName , #1.Fname ]"
    },
    {
        "id": "1b8d8b5e24f8871ed17e0c98d19a6d659d02cde7e99c2107f83d4cb2d220898b",
        "question": "Find the different first names and cities of the students who have allergy to milk or cat.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Cat' OR Allergy = 'Milk' ] Output [ StuID , Allergy ] ; #2 = Scan Table [ Student ] Output [ Fname , StuID , city_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Distinct [ true ] Output [ #2.city_code , #2.Fname ]"
    },
    {
        "id": "00b88dc55c544becc32c31d8dc074b9d2e679fc36581fe5d9530eb396838f51f",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Cat' OR Allergy = 'Milk' ] Output [ StuID , Allergy ] ; #2 = Scan Table [ Student ] Output [ Fname , StuID , city_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Distinct [ true ] Output [ #2.city_code , #2.Fname ]"
    },
    {
        "id": "03f52cdfe8301c278bc8299829a7f141aba7ce368dbdc19bc7d68257b8c2a654",
        "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ Age > 18 ] Output [ StuID , Age ] ; #2 = Scan Table [ Has_Allergy ] Predicate [ StuID IS NULL OR StuID = StuID ] Output [ StuID , Allergy ] ; #3 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'animal' OR AllergyType = 'food' ] Output [ AllergyType , Allergy ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Allergy = #2.Allergy ] Output [ #2.Allergy , #3.AllergyType , #2.StuID ] ; #5 = Except [ #1 , #4 ] ExceptColumns [ #1.StuID ] Output [ #1.Age , #1.StuID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4624b305e324ad86926e9c0cf7701c85cd0ac97ea094bc73ec2e204b4640fdaf",
        "question": "How many students are over 18 and do not have allergy to food type or animal type?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Predicate [ Age > 18 ] Output [ StuID , Age ] ; #2 = Scan Table [ Has_Allergy ] Predicate [ StuID IS NULL OR StuID = StuID ] Output [ StuID , Allergy ] ; #3 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'animal' OR AllergyType = 'food' ] Output [ AllergyType , Allergy ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Allergy = #2.Allergy ] Output [ #2.Allergy , #3.AllergyType , #2.StuID ] ; #5 = Except [ #1 , #4 ] ExceptColumns [ #1.StuID ] Output [ #1.Age , #1.StuID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1182e98bfffcf49483b80d7ea32bb977d6c34c26a528cb100a712623a525fabd",
        "question": "Find the first name and major of the students who are not allegry to soy.",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Fname , StuID , Major ] ; #2 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Soy' ] Output [ StuID , Allergy ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.StuID IS NULL OR #1.StuID = #2.StuID ] Output [ #1.Major , #1.Fname ]"
    },
    {
        "id": "70830e2b34feba3d84bd46808435dae06cacf7961c85489cb6c2c073aec5b0bf",
        "question": "What are the first name and major of the students who are able to consume soy?",
        "parsing_tree": "allergy_1 | #1 = Scan Table [ Student ] Output [ Fname , StuID , Major ] ; #2 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Soy' ] Output [ StuID , Allergy ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.StuID IS NULL OR #1.StuID = #2.StuID ] Output [ #1.Major , #1.Fname ]"
    },
    {
        "id": "166b66f9d8330ae58072369482e0000f1b6cd1fd92f50f0060f91a354c0a83c5",
        "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices.",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Output [ billing_country ] ; #2 = Aggregate [ #1 ] GroupBy [ billing_country ] Output [ countstar AS Count_Star , billing_country ] ; #3 = TopSort [ #2 ] Rows [ 5 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , billing_country ]"
    },
    {
        "id": "e6ee25c5defe4bad84de2f2399a5560ff696357cc564057a48c87212bb68574d",
        "question": "What are the top 5 countries by number of invoices and how many do they have?",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Output [ billing_country ] ; #2 = Aggregate [ #1 ] GroupBy [ billing_country ] Output [ countstar AS Count_Star , billing_country ] ; #3 = TopSort [ #2 ] Rows [ 5 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , billing_country ]"
    },
    {
        "id": "6769eb3a62d79d4b97ef4b0531eb59ec8eac41baa6bb89df6510ca7cbed5a0d4",
        "question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Output [ billing_country , total ] ; #2 = Aggregate [ #1 ] GroupBy [ billing_country ] Output [ billing_country , SUM(total) AS Sum_total ] ; #3 = TopSort [ #2 ] Rows [ 8 ] OrderBy [ Sum_total DESC ] Output [ billing_country , Sum_total ]"
    },
    {
        "id": "62b5ce382a9d71ff39690ff7a2b826e705e3b8c1210e31c4cfb7ca95d17389ad",
        "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Output [ billing_country , total ] ; #2 = Aggregate [ #1 ] GroupBy [ billing_country ] Output [ billing_country , SUM(total) AS Sum_total ] ; #3 = TopSort [ #2 ] Rows [ 8 ] OrderBy [ Sum_total DESC ] Output [ billing_country , Sum_total ]"
    },
    {
        "id": "c97c0b9b189d70a0d45d2fddafd8be7640c615e4a6ae69d520e54f9a42d64128",
        "question": "A list of the top 10 countries by average invoice size. List country name and average invoice size.",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Output [ billing_country , total ] ; #2 = Aggregate [ #1 ] GroupBy [ billing_country ] Output [ AVG(total) AS Avg_total , billing_country ] ; #3 = TopSort [ #2 ] Rows [ 10 ] OrderBy [ Avg_total DESC ] Output [ billing_country , Avg_total ]"
    },
    {
        "id": "984934c3b602347c18800c6dc49a10e33c3eec97cc99d4453fc223ef6a8224c7",
        "question": "What are the names of the countries and average invoice size of the top countries by size?",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Output [ billing_country , total ] ; #2 = Aggregate [ #1 ] GroupBy [ billing_country ] Output [ AVG(total) AS Avg_total , billing_country ] ; #3 = TopSort [ #2 ] Rows [ 10 ] OrderBy [ Avg_total DESC ] Output [ billing_country , Avg_total ]"
    },
    {
        "id": "b3e670fe20efe4a5567bfb45289b602ec7b4215560ee4c050b27f3b7e3577786",
        "question": "Find out 5 customers who most recently purchased something. List customers' first and last name.",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Output [ last_name , id , first_name ] ; #2 = Scan Table [ invoices ] Output [ invoice_date , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.customer_id ] Output [ #2.invoice_date , #1.last_name , #1.first_name ] ; #4 = TopSort [ #3 ] Rows [ 5 ] OrderBy [ invoice_date DESC ] Output [ last_name , invoice_date , first_name ]"
    },
    {
        "id": "19910630f02b77e67e7c26e32e272c4dc517aa4de02a47cb88436620438580ff",
        "question": "What are the first and last names of the 5 customers who purchased something most recently?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Output [ last_name , id , first_name ] ; #2 = Scan Table [ invoices ] Output [ invoice_date , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.customer_id ] Output [ #2.invoice_date , #1.last_name , #1.first_name ] ; #4 = TopSort [ #3 ] Rows [ 5 ] OrderBy [ invoice_date DESC ] Output [ last_name , invoice_date , first_name ]"
    },
    {
        "id": "53219e933484a5bf5326eea73f6a8f32af274ab3f3a9a5523151baf9045e3c9c",
        "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Output [ customer_id , total ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ customer_id , SUM(total) AS Sum_total ] ; #3 = Scan Table [ customers ] Output [ last_name , id , first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.id ] Output [ #3.last_name , #3.first_name , #2.Sum_total ] ; #5 = TopSort [ #4 ] Rows [ 10 ] OrderBy [ Sum_total DESC ] Output [ last_name , Sum_total , first_name ]"
    },
    {
        "id": "655b602caced76e524c59c83d5dc1f795ad458d94c72a8a8f1a266339675a18a",
        "question": "What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Output [ customer_id , total ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ customer_id , SUM(total) AS Sum_total ] ; #3 = Scan Table [ customers ] Output [ last_name , id , first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.id ] Output [ #3.last_name , #3.first_name , #2.Sum_total ] ; #5 = TopSort [ #4 ] Rows [ 10 ] OrderBy [ Sum_total DESC ] Output [ last_name , Sum_total , first_name ]"
    },
    {
        "id": "3daca02c9577c69a3a3d654d3f053256eaa3118ab34523243d3251428c42a969",
        "question": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "parsing_tree": "store_1 | #1 = Scan Table [ tracks ] Output [ genre_id ] ; #2 = Aggregate [ #1 ] GroupBy [ genre_id ] Output [ countstar AS Count_Star , genre_id ] ; #3 = Scan Table [ genres ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.genre_id = #3.id ] Output [ #3.name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 5 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "ddf55ee0077df1cb9bc95d1f44def616f6db29461a08415383d50136bfa45bd2",
        "question": "How many tracks does each genre have and what are the names of the top 5?",
        "parsing_tree": "store_1 | #1 = Scan Table [ tracks ] Output [ genre_id ] ; #2 = Aggregate [ #1 ] GroupBy [ genre_id ] Output [ countstar AS Count_Star , genre_id ] ; #3 = Scan Table [ genres ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.genre_id = #3.id ] Output [ #3.name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 5 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "603df219bb7cd23ab58f8d4419969c2c0f76a3451d741f85a53e31a6508dff83",
        "question": "List every album's title.",
        "parsing_tree": "store_1 | #1 = Scan Table [ albums ] Output [ title ]"
    },
    {
        "id": "3443b5a110af7c8affadf42037a6c6308a09ad5cf81820bf0fabd908fcb47813",
        "question": "What are the titles of all the albums?",
        "parsing_tree": "store_1 | #1 = Scan Table [ albums ] Output [ title ]"
    },
    {
        "id": "cf2e80f11461c267d50d3d8a3c937af45eee72d5b9e4a677ecae6835d1287b30",
        "question": "List every album ordered by album title in ascending order.",
        "parsing_tree": "store_1 | #1 = Scan Table [ albums ] Output [ title ] ; #2 = Sort [ #1 ] OrderBy [ title ASC ] Output [ title ]"
    },
    {
        "id": "b9dc0c3433e587c5c21f3026659133325fefe2b7ee85df60fff431cd8b19ca6b",
        "question": "What are the titles of all the albums alphabetically ascending?",
        "parsing_tree": "store_1 | #1 = Scan Table [ albums ] Output [ title ] ; #2 = Sort [ #1 ] OrderBy [ title ASC ] Output [ title ]"
    },
    {
        "id": "35c306c68ed94320385bdc87f26287f9dfc36ef17304c6b4ad7025ec12c65247",
        "question": "List every album whose title starts with A in alphabetical order.",
        "parsing_tree": "store_1 | #1 = Scan Table [ albums ] Predicate [ title like 'A%' ] Output [ title ] ; #2 = Sort [ #1 ] OrderBy [ title ASC ] Output [ title ]"
    },
    {
        "id": "499890fd531f979fe37e9dc1a2b4430a31b184ee60b1a44f12aee0cf84460547",
        "question": "What are the titles of all albums that start with A in alphabetical order?",
        "parsing_tree": "store_1 | #1 = Scan Table [ albums ] Predicate [ title like 'A%' ] Output [ title ] ; #2 = Sort [ #1 ] OrderBy [ title ASC ] Output [ title ]"
    },
    {
        "id": "44ef968f121b52367c06bed538943ea0e0201654d5ef37e64c32a064e13f502f",
        "question": "List the customers first and last name of 10 least expensive invoices.",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Output [ last_name , id , first_name ] ; #2 = Scan Table [ invoices ] Output [ customer_id , total ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.customer_id ] Output [ #2.total , #1.last_name , #1.first_name ] ; #4 = TopSort [ #3 ] Rows [ 10 ] OrderBy [ total ASC ] Output [ last_name , total , first_name ]"
    },
    {
        "id": "c828d7c76138a3f5353542fc76634e6077ff251ddc76b0a72019baae4020bc5e",
        "question": "What are the first and last names of the customers with the 10 cheapest invoices?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Output [ last_name , id , first_name ] ; #2 = Scan Table [ invoices ] Output [ customer_id , total ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.customer_id ] Output [ #2.total , #1.last_name , #1.first_name ] ; #4 = TopSort [ #3 ] Rows [ 10 ] OrderBy [ total ASC ] Output [ last_name , total , first_name ]"
    },
    {
        "id": "ed5dacd7992a5b241f836adc6c872281d8b0447e60c8a4e75741fd688a2f1835",
        "question": "List total amount of  invoice from Chicago, IL.",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Predicate [ billing_city = 'Chicago' AND billing_state = 'IL' ] Output [ billing_state , total , billing_city ] ; #2 = Aggregate [ #1 ] Output [ SUM(total) AS Sum_total ]"
    },
    {
        "id": "f4b6cdf20e746651c2c5d8f106155b1cf1bf9913099c889c2ec11f2b8a3b4b94",
        "question": "What are the total amount of money in the invoices billed from Chicago, Illinois?",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Predicate [ billing_city = 'Chicago' AND billing_state = 'IL' ] Output [ billing_state , total , billing_city ] ; #2 = Aggregate [ #1 ] Output [ SUM(total) AS Sum_total ]"
    },
    {
        "id": "7ec90e0f32af3a2a39d6c448ce29d16a7478a3b05efa80856a98ced47dd12375",
        "question": "List the number of invoices from Chicago, IL.",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Predicate [ billing_city = 'Chicago' AND billing_state = 'IL' ] Output [ billing_state , billing_city ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1da2e638c6bff76875e3b8b43b9a17af573257325c9b1683e3f4174429e6620e",
        "question": "How many invoices were billed from Chicago, IL?",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Predicate [ billing_city = 'Chicago' AND billing_state = 'IL' ] Output [ billing_state , billing_city ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d607c776ac799b7f13fc2d1ff59f67c46fa46c31ceee92b21ad9695eeb086509",
        "question": "List the number of invoices from the US, grouped by state.",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Predicate [ billing_country = 'USA' ] Output [ billing_country , billing_state ] ; #2 = Aggregate [ #1 ] GroupBy [ billing_state ] Output [ countstar AS Count_Star , billing_state ]"
    },
    {
        "id": "872e61cf022b4bc004c4767b8da3dd0a1cd69d819aed71de072320c5706a757d",
        "question": "How many invoices were billed from each state?",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Predicate [ billing_country = 'USA' ] Output [ billing_country , billing_state ] ; #2 = Aggregate [ #1 ] GroupBy [ billing_state ] Output [ countstar AS Count_Star , billing_state ]"
    },
    {
        "id": "0b88ffc178e91ba9a3eb4a375bc7251275825ef04fc88fe793217c6be88ce8d5",
        "question": "List the state in the US with the most invoices.",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Predicate [ billing_country = 'USA' ] Output [ billing_country , billing_state ] ; #2 = Aggregate [ #1 ] GroupBy [ billing_state ] Output [ countstar AS Count_Star , billing_state ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , billing_state ]"
    },
    {
        "id": "fcdc953e621654bf8cec65f3bf5362948eab191a54d6d882f05eda314880175f",
        "question": "What are the states with the most invoices?",
        "parsing_tree": "store_1 | #1 = Scan Table [ invoices ] Predicate [ billing_country = 'USA' ] Output [ billing_country , billing_state ] ; #2 = Aggregate [ #1 ] GroupBy [ billing_state ] Output [ countstar AS Count_Star , billing_state ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , billing_state ]"
    },
    {
        "id": "ef2080198200961eadbdf9d54b833eb57252e3278c292360ba78625d437ccf86",
        "question": "List Aerosmith's albums.",
        "parsing_tree": "store_1 | #1 = Scan Table [ artists ] Predicate [ name = 'Aerosmith' ] Output [ name , id ] ; #2 = Scan Table [ albums ] Output [ title , artist_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.artist_id ] Output [ #2.title ]"
    },
    {
        "id": "52a634656af222c07b66247e175228fd1c8dcec7d130820fe80625327a1b461c",
        "question": "What are the titles of all the Aerosmith albums?",
        "parsing_tree": "store_1 | #1 = Scan Table [ artists ] Predicate [ name = 'Aerosmith' ] Output [ name , id ] ; #2 = Scan Table [ albums ] Output [ title , artist_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.artist_id ] Output [ #2.title ]"
    },
    {
        "id": "4c1a5bd4ac4c0cf1f127f4fadb38ef9b700e7702c1ae8865633bc695174b071e",
        "question": "How many albums does Billy Cobham has?",
        "parsing_tree": "store_1 | #1 = Scan Table [ artists ] Predicate [ name = 'Billy Cobham' ] Output [ name , id ] ; #2 = Scan Table [ albums ] Output [ artist_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.artist_id ] Output [ #1.name , #1.id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "62e9aa53d2aad5ea99f298381d5ad4f9b171fa295ce2888211225ba0c55f2223",
        "question": "How many albums has Billy Cobam released?",
        "parsing_tree": "store_1 | #1 = Scan Table [ artists ] Predicate [ name = 'Billy Cobham' ] Output [ name , id ] ; #2 = Scan Table [ albums ] Output [ artist_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.artist_id ] Output [ #1.name , #1.id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7ae0e585498abae6faa80d3240d9e1f1fae9e006f1c2b7d32429aef5376f543f",
        "question": "Eduardo Martins is a customer at which company?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ first_name = 'Eduardo' AND last_name = 'Martins' ] Output [ last_name , company , first_name ]"
    },
    {
        "id": "4471c2382511a037be82bc3c9d0b4cad15ff97b3531ddb3e99f6b79ab18a6e4a",
        "question": "What is the company where Eduardo Martins is a customer?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ first_name = 'Eduardo' AND last_name = 'Martins' ] Output [ last_name , company , first_name ]"
    },
    {
        "id": "1075e63d5a3cc3d950e6ed4c04c6a64675dbd9d109829e92f569a0633f7fb78b",
        "question": "What is Astrid Gruber's email and phone number?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ first_name = 'Astrid' AND last_name = 'Gruber' ] Output [ last_name , phone , email , first_name ]"
    },
    {
        "id": "28b96c37fc660381f2f0ba2be0fc653d5f24a63f65da4739cf7dd8e7519e5a47",
        "question": "What is the email and phone number of Astrid Gruber the customer?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ first_name = 'Astrid' AND last_name = 'Gruber' ] Output [ last_name , phone , email , first_name ]"
    },
    {
        "id": "eb73ae97a2e995573d2df26acfcd3ad8ee68288c01a9620c8f88a74017075839",
        "question": "How many customers live in Prague city?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ city = 'Prague' ] Output [ city ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "70945a117837be4aa6b58002fc75352726251904db801a585d5bcd43925cc88a",
        "question": "How many customers live in the city of Prague?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ city = 'Prague' ] Output [ city ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7766d4d3a3a9782e2844f83379ea897ac2cdc0b98ce6c40b16d7ef3e18dc2796",
        "question": "How many customers in state of CA?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ state = 'CA' ] Output [ state ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "3dc57fd18778458a72c1a0b4e2b18adcb864833bfecd606e119cecae80d0c5ed",
        "question": "How many customers are from California?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ state = 'CA' ] Output [ state ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "212830559f75cb17b2edfda715a0f22fcde6eeca15222b6615690f882fdbdf9e",
        "question": "What country does Roberto Almeida live?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ first_name = 'Roberto' AND last_name = 'Almeida' ] Output [ last_name , country , first_name ]"
    },
    {
        "id": "47eaa6022e12e5790eec8af88f4e74abcd20ee87c2fe0a3445807aaaedb5f28d",
        "question": "In which country does Roberto Almeida?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ first_name = 'Roberto' AND last_name = 'Almeida' ] Output [ last_name , country , first_name ]"
    },
    {
        "id": "060cdc0023650c4aa6ee2e09606a874cf13e1911e6e529809b8bed5bc48e2078",
        "question": "List the name of albums that are released by aritist whose name has 'Led'",
        "parsing_tree": "store_1 | #1 = Scan Table [ artists ] Predicate [ name like '%Led%' ] Output [ name , id ] ; #2 = Scan Table [ albums ] Output [ title , artist_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.artist_id ] Output [ #2.title ]"
    },
    {
        "id": "8c99997f029886d25128ffc848cb116028b4c4105a2b308ab388b5bd25e91464",
        "question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?",
        "parsing_tree": "store_1 | #1 = Scan Table [ artists ] Predicate [ name like '%Led%' ] Output [ name , id ] ; #2 = Scan Table [ albums ] Output [ title , artist_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.artist_id ] Output [ #2.title ]"
    },
    {
        "id": "ede30e9cc379a5f1130f6cfc440b7460b5dfcb3b43edb9bdadd6d382552bd834",
        "question": "How many customers does Steve Johnson support?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Predicate [ first_name = 'Steve' AND last_name = 'Johnson' ] Output [ last_name , id , first_name ] ; #2 = Scan Table [ customers ] Output [ support_rep_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.support_rep_id ] Output [ #1.id , #1.last_name , #1.first_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "aecc05e27568e669c8fe6d1d814f9702b619b68a5107cee55a436f83a2edc6f8",
        "question": "What is the count of customers that Steve Johnson supports?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Predicate [ first_name = 'Steve' AND last_name = 'Johnson' ] Output [ last_name , id , first_name ] ; #2 = Scan Table [ customers ] Output [ support_rep_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.support_rep_id ] Output [ #1.id , #1.last_name , #1.first_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ca620d66759ee2087305524ca8fdcc0dc2db8b8ae062360d20219e41c6810a2f",
        "question": "What is the title, phone and hire date of Nancy Edwards?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Predicate [ first_name = 'Nancy' AND last_name = 'Edwards' ] Output [ phone , last_name , first_name , hire_date , title ]"
    },
    {
        "id": "4ee4bc52ccffea60ab0ca6090705ad8aafc49451338cbce0c4cc7606a62d2d3d",
        "question": "What is the title, phone number and hire date for the employee named Nancy Edwards?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Predicate [ first_name = 'Nancy' AND last_name = 'Edwards' ] Output [ phone , last_name , first_name , hire_date , title ]"
    },
    {
        "id": "dc6485d8d1c2890dec1a81836f3711cda195ba88e1bee8a040592a231b5319ec",
        "question": "What is the address of employee Nancy Edwards?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Predicate [ first_name = 'Nancy' AND last_name = 'Edwards' ] Output [ last_name , first_name , address ]"
    },
    {
        "id": "dc1effa6335b929112424fec55017a885b4a95c1433bc2a0a25cf95fcbdaede2",
        "question": "What is Nancy Edwards's address?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Predicate [ first_name = 'Nancy' AND last_name = 'Edwards' ] Output [ last_name , first_name , address ]"
    },
    {
        "id": "e0fd5b231dfbeaba26a5ed15f8396c8fe277b3c3ca0dcb94ec0a32d1e6b16a58",
        "question": "Find the full name of employee who supported the most number of customers.",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Output [ support_rep_id ] ; #2 = Aggregate [ #1 ] GroupBy [ support_rep_id ] Output [ countstar AS Count_Star , support_rep_id ] ; #3 = Scan Table [ employees ] Output [ last_name , id , first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.support_rep_id = #3.id ] Output [ #3.last_name , #3.first_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ last_name , Count_Star , first_name ]"
    },
    {
        "id": "eb2aec4f6341faa2aba9094577f870336c16360b79d3e5f68ed1e49ca904bbc3",
        "question": "What is the full name of the employee who has the most customers?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Output [ support_rep_id ] ; #2 = Aggregate [ #1 ] GroupBy [ support_rep_id ] Output [ countstar AS Count_Star , support_rep_id ] ; #3 = Scan Table [ employees ] Output [ last_name , id , first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.support_rep_id = #3.id ] Output [ #3.last_name , #3.first_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ last_name , Count_Star , first_name ]"
    },
    {
        "id": "ce903b5f85834911e737fa6f1515fa84fbaac983f0ba10cc37a5677c039fae51",
        "question": "How many employees are living in Canada?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Predicate [ country = 'Canada' ] Output [ country ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d645d0769f2095482b4ebcfeac5063cd5e3b44d41d76503071241764bac2a25c",
        "question": "How many employees live in Canada?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Predicate [ country = 'Canada' ] Output [ country ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "01058495ac29f42548366438af99d338e4e9095eb128395c0a80a047fa52e033",
        "question": "What is employee Nancy Edwards's phone number?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Predicate [ first_name = 'Nancy' AND last_name = 'Edwards' ] Output [ last_name , phone , first_name ]"
    },
    {
        "id": "24306fef33de4506b80ee365a4e9f3f5f5fb5e9adea40783a8854993751fdfe7",
        "question": "What is the the phone number of Nancy Edwards?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Predicate [ first_name = 'Nancy' AND last_name = 'Edwards' ] Output [ last_name , phone , first_name ]"
    },
    {
        "id": "fa34d91dc047861cf3555b13262af2749140b3ed36ed4ae81af87c8c79a3f15a",
        "question": "Who is the youngest employee in the company? List employee's first and last name.",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Output [ last_name , birth_date , first_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ birth_date DESC ] Output [ last_name , birth_date , first_name ]"
    },
    {
        "id": "9b538082d8b817eef1c3e4af0ea6b9323da394c76fe64ad22e61b7f98350c729",
        "question": "What si the youngest employee's first and last name?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Output [ last_name , birth_date , first_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ birth_date DESC ] Output [ last_name , birth_date , first_name ]"
    },
    {
        "id": "7f1ca52479f259ba83c8402ae22b32a81c453fb63b62f6d9fdea420d67d24d11",
        "question": "List top 10 employee work longest in the company. List employee's first and last name.",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Output [ last_name , hire_date , first_name ] ; #2 = TopSort [ #1 ] Rows [ 10 ] OrderBy [ hire_date ASC ] Output [ last_name , hire_date , first_name ]"
    },
    {
        "id": "15ee4b751aafc07b4b4862eed93e0feeed701644b25479b4862e2d7c18cef3e9",
        "question": "What are the first and last names of the top 10 longest-serving employees?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Output [ last_name , hire_date , first_name ] ; #2 = TopSort [ #1 ] Rows [ 10 ] OrderBy [ hire_date ASC ] Output [ last_name , hire_date , first_name ]"
    },
    {
        "id": "a72970a6fb5faf37aa73adf946aa04fb32e123ceead7cc3847756f0f93b38fa4",
        "question": "Find the number of employees whose title is IT Staff from each city?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Predicate [ title = 'IT Staff' ] Output [ title , city ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ]"
    },
    {
        "id": "2d3f188e1455550301531c5d6474ae5a16637290ba8428e838fa9ae6a215deef",
        "question": "How many employees who are IT staff are from each city?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Predicate [ title = 'IT Staff' ] Output [ title , city ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ]"
    },
    {
        "id": "205a7e859b9711f1a19863651906c23506976c518b2b54a71e2a8d4d6020cf08",
        "question": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Output [ reports_to ] ; #2 = Aggregate [ #1 ] GroupBy [ reports_to ] Output [ countstar AS Count_Star , reports_to ] ; #3 = Scan Table [ employees ] Output [ last_name , id , first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.reports_to = #3.id ] Output [ #3.last_name , #3.first_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ last_name , Count_Star , first_name ]"
    },
    {
        "id": "e7ea2ec282f849ced3d662c48044bb403bf7089c8632c8a524ad112dd8cda509",
        "question": "What are the first and last names of all the employees and how many people report to them?",
        "parsing_tree": "store_1 | #1 = Scan Table [ employees ] Output [ reports_to ] ; #2 = Aggregate [ #1 ] GroupBy [ reports_to ] Output [ countstar AS Count_Star , reports_to ] ; #3 = Scan Table [ employees ] Output [ last_name , id , first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.reports_to = #3.id ] Output [ #3.last_name , #3.first_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ last_name , Count_Star , first_name ]"
    },
    {
        "id": "24928efaef4938950cabf69481564fc600dd5653816c4ccd7f76b185c136f1dd",
        "question": "How many orders does Lucas Mancini has?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ first_name = 'Lucas' AND last_name = 'Mancini' ] Output [ last_name , id , first_name ] ; #2 = Scan Table [ invoices ] Output [ customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.customer_id ] Output [ #1.id , #1.last_name , #1.first_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "df36e20439a272426b95a100e0c3217ce063fd66d1a060eb618a1978d7d85675",
        "question": "How many orders does Luca Mancini have in his invoices?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ first_name = 'Lucas' AND last_name = 'Mancini' ] Output [ last_name , id , first_name ] ; #2 = Scan Table [ invoices ] Output [ customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.customer_id ] Output [ #1.id , #1.last_name , #1.first_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "524d76f929a8759ddde736c94b8851419449ea512df8da9d0450a30ce4f6fd6c",
        "question": "What is the total amount of money spent by Lucas Mancini?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ first_name = 'Lucas' AND last_name = 'Mancini' ] Output [ last_name , id , first_name ] ; #2 = Scan Table [ invoices ] Output [ customer_id , total ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.customer_id ] Output [ #2.total ] ; #4 = Aggregate [ #3 ] Output [ SUM(total) AS Sum_total ]"
    },
    {
        "id": "78af5fe2ac90e2e3d2c23e1e7a55887a8ed3df76f2bb2993cd83b9557b7f69d7",
        "question": "How much money did Lucas Mancini spend?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ first_name = 'Lucas' AND last_name = 'Mancini' ] Output [ last_name , id , first_name ] ; #2 = Scan Table [ invoices ] Output [ customer_id , total ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.customer_id ] Output [ #2.total ] ; #4 = Aggregate [ #3 ] Output [ SUM(total) AS Sum_total ]"
    },
    {
        "id": "0f9aa328ef658a55ed62894882bd046a938fd1c5e11df1e42729b249cd101d53",
        "question": "List all media types.",
        "parsing_tree": "store_1 | #1 = Scan Table [ media_types ] Output [ name ]"
    },
    {
        "id": "1b30515216a7bc1e3777ae6c42c3f85cc41ffd459eaa81fe654720439e362486",
        "question": "What are the names of all the media types?",
        "parsing_tree": "store_1 | #1 = Scan Table [ media_types ] Output [ name ]"
    },
    {
        "id": "210d962eeb6b4b73fb5c56ae647b724117c4301e2b9c5a7ddffe725856df1f34",
        "question": "List all different genre types.",
        "parsing_tree": "store_1 | #1 = Scan Table [ genres ] Distinct [ true ] Output [ name ]"
    },
    {
        "id": "d4f39c7b2c2b2a3e5784faeeedefcabb0cca388ba4fb4cb7558c98acd5ae031f",
        "question": "What are the different names of the genres?",
        "parsing_tree": "store_1 | #1 = Scan Table [ genres ] Distinct [ true ] Output [ name ]"
    },
    {
        "id": "54a495ce11303d8e60e948e9376e12833d46cf71a8322d0dbbb7857e6dd0006d",
        "question": "List the name of all playlist.",
        "parsing_tree": "store_1 | #1 = Scan Table [ playlists ] Output [ name ]"
    },
    {
        "id": "260890960b0f1f2272ace8e5ddae0e6b0fdf8ec0033f25c15365e902b7cb08fd",
        "question": "What are the names of all the playlists?",
        "parsing_tree": "store_1 | #1 = Scan Table [ playlists ] Output [ name ]"
    },
    {
        "id": "11f2c633c8357b7f8a0936580a744740f1c54951b37a8733b00fa50ae44db0c5",
        "question": "Who is the composer of track Fast As a Shark?",
        "parsing_tree": "store_1 | #1 = Scan Table [ tracks ] Predicate [ name = 'Fast As a Shark' ] Output [ composer , name ]"
    },
    {
        "id": "08f42be03704728742ad49c7ec52d1201360c00eb55c2a765e0d921e4a4a41c1",
        "question": "What is the composer who created the track \"Fast As a Shark\"?",
        "parsing_tree": "store_1 | #1 = Scan Table [ tracks ] Predicate [ name = 'Fast As a Shark' ] Output [ composer , name ]"
    },
    {
        "id": "02ce32a353af08ee263bb5586a1dd693bdf2cf6272d27c4c4fd2279be9bea25c",
        "question": "How long does track Fast As a Shark has?",
        "parsing_tree": "store_1 | #1 = Scan Table [ tracks ] Predicate [ name = 'Fast As a Shark' ] Output [ milliseconds , name ]"
    },
    {
        "id": "cc9570f71007aa1168a1ca0234863e4886d8e7e9f502850d4fe2036badf90c66",
        "question": "How many milliseconds long is Fast As a Shark?",
        "parsing_tree": "store_1 | #1 = Scan Table [ tracks ] Predicate [ name = 'Fast As a Shark' ] Output [ milliseconds , name ]"
    },
    {
        "id": "131de90b9d4c2c31f3d1ad31524786f1aac1444d37361217bcd149f0b7b01221",
        "question": "What is the name of tracks whose genre is Rock?",
        "parsing_tree": "store_1 | #1 = Scan Table [ genres ] Predicate [ name = 'Rock' ] Output [ name , id ] ; #2 = Scan Table [ tracks ] Output [ name , genre_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.genre_id ] Output [ #2.name ]"
    },
    {
        "id": "407551ad71cca58ee9035cb360a4e0c825d4a7c1abbfd64e6627190e830bb888",
        "question": "What is the name of all tracks in the Rock genre?",
        "parsing_tree": "store_1 | #1 = Scan Table [ genres ] Predicate [ name = 'Rock' ] Output [ name , id ] ; #2 = Scan Table [ tracks ] Output [ name , genre_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.genre_id ] Output [ #2.name ]"
    },
    {
        "id": "a1bb2f922c2d974b8e85b7dc0bc0ffce16dd160c68c82b9c5ca25a1a81c30309",
        "question": "What is title of album which track Balls to the Wall belongs to?",
        "parsing_tree": "store_1 | #1 = Scan Table [ tracks ] Predicate [ name = 'Balls to the Wall' ] Output [ name , genre_id ] ; #2 = Scan Table [ albums ] Output [ title , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.genre_id = #2.id ] Output [ #2.title ]"
    },
    {
        "id": "f8c564cef0bdcfae59726729ca41394f38c03d14e562bfb394328a3f60084351",
        "question": "What is the name of the album that has the track Ball to the Wall?",
        "parsing_tree": "store_1 | #1 = Scan Table [ tracks ] Predicate [ name = 'Balls to the Wall' ] Output [ name , genre_id ] ; #2 = Scan Table [ albums ] Output [ title , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.genre_id = #2.id ] Output [ #2.title ]"
    },
    {
        "id": "6311a36e124a4a3103cef5d93fae4e13607f2adeaa17ee0cac75a4e59e195b9e",
        "question": "List name of all tracks in Balls to the Wall.",
        "parsing_tree": "store_1 | #1 = Scan Table [ albums ] Predicate [ title = 'Balls to the Wall' ] Output [ title , id ] ; #2 = Scan Table [ tracks ] Output [ name , genre_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.genre_id ] Output [ #2.name ]"
    },
    {
        "id": "d255a8e6a7ce7f99c4e0a10f664667f57bed69490fabc19b0ec500eb85ef6cd7",
        "question": "What is the name of all tracks in the album named Balls to the Wall?",
        "parsing_tree": "store_1 | #1 = Scan Table [ albums ] Predicate [ title = 'Balls to the Wall' ] Output [ title , id ] ; #2 = Scan Table [ tracks ] Output [ name , genre_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.genre_id ] Output [ #2.name ]"
    },
    {
        "id": "97286dcb9a9b96878de13c698a6843ca54d5aa1ba223d315f46714f6ab447b99",
        "question": "List title of albums have the number of tracks greater than 10.",
        "parsing_tree": "store_1 | #1 = Scan Table [ albums ] Output [ title , id ] ; #2 = Scan Table [ tracks ] Output [ album_id ] ; #3 = Aggregate [ #2 ] GroupBy [ album_id ] Output [ countstar AS Count_Star , album_id ] ; #4 = Join [ #1 , #3 ] Predicate [ #1.id = #3.album_id ] Output [ #1.title , #3.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 10 ] Output [ title ]"
    },
    {
        "id": "b495c1823bedc9e6a53fe6bacbe6808d1ad50ec09af3b6c7b25204afb5c970d2",
        "question": "What are the names of the albums that have more than 10 tracks?",
        "parsing_tree": "store_1 | #1 = Scan Table [ albums ] Output [ title , id ] ; #2 = Scan Table [ tracks ] Output [ album_id ] ; #3 = Aggregate [ #2 ] GroupBy [ album_id ] Output [ countstar AS Count_Star , album_id ] ; #4 = Join [ #1 , #3 ] Predicate [ #1.id = #3.album_id ] Output [ #1.title , #3.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 10 ] Output [ title ]"
    },
    {
        "id": "23d272130b4273caf7be4785a23b6cd2ac1f60e4324bfa31d2be2e6b1f02acbe",
        "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.",
        "parsing_tree": "store_1 | #1 = Scan Table [ genres ] Predicate [ name = 'Rock' ] Output [ name , id ] ; #2 = Scan Table [ media_types ] Predicate [ name = 'MPEG audio file' ] Output [ name , id ] ; #3 = Scan Table [ tracks ] Output [ name , media_type_id , genre_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.id = #3.media_type_id ] Output [ #3.name , #3.genre_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.id = #4.genre_id ] Output [ #4.name ]"
    },
    {
        "id": "b65d41f44a520f3472f46775ce5f7143cb296d36ebc795bbf1688290e0daf14a",
        "question": "What are the names of all Rock tracks that are stored on MPEG audio files?",
        "parsing_tree": "store_1 | #1 = Scan Table [ genres ] Predicate [ name = 'Rock' ] Output [ name , id ] ; #2 = Scan Table [ media_types ] Predicate [ name = 'MPEG audio file' ] Output [ name , id ] ; #3 = Scan Table [ tracks ] Output [ name , media_type_id , genre_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.id = #3.media_type_id ] Output [ #3.name , #3.genre_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.id = #4.genre_id ] Output [ #4.name ]"
    },
    {
        "id": "aeee5d1de398b10a3622afcb95f19544ebcc9fb8206e2f23cc3f54c3261c4702",
        "question": "List the name of tracks belongs to genre Rock or genre Jazz.",
        "parsing_tree": "store_1 | #1 = Scan Table [ genres ] Predicate [ name = 'Jazz' OR name = 'Rock' ] Output [ name , id ] ; #2 = Scan Table [ tracks ] Output [ name , genre_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.genre_id ] Output [ #2.name ]"
    },
    {
        "id": "016dd26bd7a9fe4b881b797d6d0f2c1b2a2c45e6badb040c11c596cc3ea15ec8",
        "question": "What are the names of the tracks that are Rock or Jazz songs?",
        "parsing_tree": "store_1 | #1 = Scan Table [ genres ] Predicate [ name = 'Jazz' OR name = 'Rock' ] Output [ name , id ] ; #2 = Scan Table [ tracks ] Output [ name , genre_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.genre_id ] Output [ #2.name ]"
    },
    {
        "id": "a10062cfe041f8cc712f6e6579f4eb283b6583b83e3c24d6a0bf49878d5635aa",
        "question": "List the name of all tracks in the playlists of Movies.",
        "parsing_tree": "store_1 | #1 = Scan Table [ playlists ] Predicate [ name = 'Movies' ] Output [ name , id ] ; #2 = Scan Table [ playlist_tracks ] Output [ playlist_id , track_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.playlist_id ] Output [ #2.track_id ] ; #4 = Scan Table [ tracks ] Output [ name , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.track_id = #4.id ] Output [ #4.name ]"
    },
    {
        "id": "316a2ab7cd577b0e37afd8de0af22d96ee96d26766de08ed216e34ce6d94765c",
        "question": "What are the names of all tracks that are on playlists titled Movies?",
        "parsing_tree": "store_1 | #1 = Scan Table [ playlists ] Predicate [ name = 'Movies' ] Output [ name , id ] ; #2 = Scan Table [ playlist_tracks ] Output [ playlist_id , track_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.playlist_id ] Output [ #2.track_id ] ; #4 = Scan Table [ tracks ] Output [ name , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.track_id = #4.id ] Output [ #4.name ]"
    },
    {
        "id": "e498e3e34bba03417b3681c8aacf04b43980a4782d40658845cc5d699e47f4eb",
        "question": "List the name of playlist which has number of tracks greater than 100.",
        "parsing_tree": "store_1 | #1 = Scan Table [ playlist_tracks ] Output [ playlist_id ] ; #2 = Aggregate [ #1 ] GroupBy [ playlist_id ] Output [ playlist_id , countstar AS Count_Star ] ; #3 = Scan Table [ playlists ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.playlist_id = #3.id ] Output [ #3.name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 100 ] Output [ name ]"
    },
    {
        "id": "7bc31c4127e3afe99c0383f2e7a8bd9565f518bf845fb70a209436cbd697d61d",
        "question": "What are the names of all playlists that have more than 100 tracks?",
        "parsing_tree": "store_1 | #1 = Scan Table [ playlist_tracks ] Output [ playlist_id ] ; #2 = Aggregate [ #1 ] GroupBy [ playlist_id ] Output [ playlist_id , countstar AS Count_Star ] ; #3 = Scan Table [ playlists ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.playlist_id = #3.id ] Output [ #3.name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 100 ] Output [ name ]"
    },
    {
        "id": "c6846b63fd7d5889fe57b741915292e59a3ae74f4fda83b8b2bce08dbebf023c",
        "question": "List all tracks bought by customer Daan Peeters.",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ first_name = 'Daan' AND last_name = 'Peeters' ] Output [ last_name , id , first_name ] ; #2 = Scan Table [ invoices ] Output [ customer_id , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.customer_id ] Output [ #2.id ] ; #4 = Scan Table [ invoice_lines ] Output [ invoice_id , track_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.id = #4.invoice_id ] Output [ #4.track_id ] ; #6 = Scan Table [ tracks ] Output [ name , id ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.track_id = #6.id ] Output [ #6.name ]"
    },
    {
        "id": "bf7cd846dc76e951bc6a6183c067d007e1a60cfa5e5bd918693a14f836f435c9",
        "question": "What are the tracks that Dean Peeters bought?",
        "parsing_tree": "store_1 | #1 = Scan Table [ customers ] Predicate [ first_name = 'Daan' AND last_name = 'Peeters' ] Output [ last_name , id , first_name ] ; #2 = Scan Table [ invoices ] Output [ customer_id , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.customer_id ] Output [ #2.id ] ; #4 = Scan Table [ invoice_lines ] Output [ invoice_id , track_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.id = #4.invoice_id ] Output [ #4.track_id ] ; #6 = Scan Table [ tracks ] Output [ name , id ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.track_id = #6.id ] Output [ #6.name ]"
    },
    {
        "id": "a063bcf85fe87157cac4ef62cc744d2f7827d46ed1e19350b0a3de83c2af4b37",
        "question": "How much is the track Fast As a Shark?",
        "parsing_tree": "store_1 | #1 = Scan Table [ tracks ] Predicate [ name = 'Fast As a Shark' ] Output [ name , unit_price ]"
    },
    {
        "id": "cf5ea5f19d51d2ac3379231c78411d3e6e88132d209823c4bb564467b8ab4e5d",
        "question": "What is the unit price of the tune \"Fast As a Shark\"?",
        "parsing_tree": "store_1 | #1 = Scan Table [ tracks ] Predicate [ name = 'Fast As a Shark' ] Output [ name , unit_price ]"
    },
    {
        "id": "2ba63023d612e6403655e4ba168c9e1173081a36b4204a4b8274f03ebb19bfa4",
        "question": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "parsing_tree": "store_1 | #1 = Scan Table [ playlists ] Predicate [ name = 'Movies' ] Output [ name , id ] ; #2 = Scan Table [ playlist_tracks ] Output [ playlist_id , track_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.playlist_id ] Output [ #2.track_id ] ; #4 = Scan Table [ tracks ] Output [ name , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.track_id = #4.id ] Distinct [ true ] Output [ #4.name ] ; #6 = Scan Table [ playlists ] Predicate [ name = 'Music' ] Output [ name , id ] ; #7 = Scan Table [ playlist_tracks ] Output [ playlist_id , track_id ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.id = #7.playlist_id ] Output [ #7.track_id ] ; #9 = Scan Table [ tracks ] Output [ name , id ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.track_id = #9.id ] Output [ #9.name ] ; #11 = Except [ #5 , #10 ] Predicate [ #5.name = #10.name ] Output [ #5.name ]"
    },
    {
        "id": "91f997bb7aeb6feb2c86bb7d7a658a2486a1660e678224247dc21c7e56af8485",
        "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?",
        "parsing_tree": "store_1 | #1 = Scan Table [ playlists ] Predicate [ name = 'Movies' ] Output [ name , id ] ; #2 = Scan Table [ playlist_tracks ] Output [ playlist_id , track_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.playlist_id ] Output [ #2.track_id ] ; #4 = Scan Table [ tracks ] Output [ name , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.track_id = #4.id ] Distinct [ true ] Output [ #4.name ] ; #6 = Scan Table [ playlists ] Predicate [ name = 'Music' ] Output [ name , id ] ; #7 = Scan Table [ playlist_tracks ] Output [ playlist_id , track_id ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.id = #7.playlist_id ] Output [ #7.track_id ] ; #9 = Scan Table [ tracks ] Output [ name , id ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.track_id = #9.id ] Output [ #9.name ] ; #11 = Except [ #5 , #10 ] Predicate [ #5.name = #10.name ] Output [ #5.name ]"
    },
    {
        "id": "17407dd9d4faf2d64b54ebe7385318bd762e467fc757533a3bc7ed8d582e0979",
        "question": "Find the name of tracks which are in both Movies and music playlists.",
        "parsing_tree": "store_1 | #1 = Scan Table [ playlists ] Predicate [ name = 'Movies' ] Output [ name , id ] ; #2 = Scan Table [ playlist_tracks ] Output [ playlist_id , track_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.playlist_id ] Output [ #2.track_id ] ; #4 = Scan Table [ tracks ] Output [ name , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.track_id = #4.id ] Distinct [ true ] Output [ #4.name ] ; #6 = Scan Table [ playlists ] Predicate [ name = 'Music' ] Output [ name , id ] ; #7 = Scan Table [ playlist_tracks ] Output [ playlist_id , track_id ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.id = #7.playlist_id ] Output [ #7.track_id ] ; #9 = Scan Table [ tracks ] Output [ name , id ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.track_id = #9.id ] Output [ #9.name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.name = #10.name ] Output [ #5.name ]"
    },
    {
        "id": "9db5af12810fa145e05d808d3849f0edf173b9a0bbbd530516ea4b91f7dc2698",
        "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
        "parsing_tree": "store_1 | #1 = Scan Table [ playlists ] Predicate [ name = 'Movies' ] Output [ name , id ] ; #2 = Scan Table [ playlist_tracks ] Output [ playlist_id , track_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.playlist_id ] Output [ #2.track_id ] ; #4 = Scan Table [ tracks ] Output [ name , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.track_id = #4.id ] Distinct [ true ] Output [ #4.name ] ; #6 = Scan Table [ playlists ] Predicate [ name = 'Music' ] Output [ name , id ] ; #7 = Scan Table [ playlist_tracks ] Output [ playlist_id , track_id ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.id = #7.playlist_id ] Output [ #7.track_id ] ; #9 = Scan Table [ tracks ] Output [ name , id ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.track_id = #9.id ] Output [ #9.name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.name = #10.name ] Output [ #5.name ]"
    },
    {
        "id": "e08be7565bcb22380136e39146892460ae725e005bcefe12a62aaad32addf851",
        "question": "How many editors are there?",
        "parsing_tree": "journal_committee | #1 = Scan Table [ editor ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "8f5f905b61b0dff4a62d850558b5d4632f9fedd2fd72f6ecf5e28538674d43eb",
        "question": "List the names of editors in ascending order of age.",
        "parsing_tree": "journal_committee | #1 = Scan Table [ editor ] Output [ Name , Age ] ; #2 = Sort [ #1 ] OrderBy [ Age ASC ] Output [ Name , Age ]"
    },
    {
        "id": "8a196a9355a7f1fc0302cac61202834c39411012f7ba5460aae785d75783ba8d",
        "question": "What are the names and ages of editors?",
        "parsing_tree": "journal_committee | #1 = Scan Table [ editor ] Output [ Name , Age ]"
    },
    {
        "id": "744a7f53842dde140b7e80ca5d548e7dfa986813590a0f4805f05d65fe253907",
        "question": "List the names of editors who are older than 25.",
        "parsing_tree": "journal_committee | #1 = Scan Table [ editor ] Predicate [ Age > 25.0 ] Output [ Name , Age ]"
    },
    {
        "id": "a4bc116261919e63170ac95624aa0f212bd3b1d97f867c1f04863083325dd981",
        "question": "Show the names of editors of age either 24 or 25.",
        "parsing_tree": "journal_committee | #1 = Scan Table [ editor ] Predicate [ Age = 24.0 OR Age = 25.0 ] Output [ Name , Age ]"
    },
    {
        "id": "7ff423467b9ef409436f0ee880673b30f08cbafb4d85aa36d0e51f0142b15d28",
        "question": "What is the name of the youngest editor?",
        "parsing_tree": "journal_committee | #1 = Scan Table [ editor ] Output [ Name , Age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Age ASC ] Output [ Name , Age ]"
    },
    {
        "id": "8c0c000ba0e837c7d69ee75a0a7dad92f57f77d34c50151cf57d1bc9057b38a2",
        "question": "What are the different ages of editors? Show each age along with the number of editors of that age.",
        "parsing_tree": "journal_committee | #1 = Scan Table [ editor ] Output [ Age ] ; #2 = Aggregate [ #1 ] GroupBy [ Age ] Output [ countstar AS Count_Star , Age ]"
    },
    {
        "id": "2fa8584b5918b8c637e44d1edb53c19a542f59fc6b1e570aab1260a15d28e0b1",
        "question": "Please show the most common age of editors.",
        "parsing_tree": "journal_committee | #1 = Scan Table [ editor ] Output [ Age ] ; #2 = Aggregate [ #1 ] GroupBy [ Age ] Output [ countstar AS Count_Star , Age ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Age ]"
    },
    {
        "id": "4f066b317e28a26dcd65f4be48ab1c57b4aac2ea7512ac07c6f2b6f522c571e7",
        "question": "Show the distinct themes of journals.",
        "parsing_tree": "journal_committee | #1 = Scan Table [ journal ] Distinct [ true ] Output [ Theme ]"
    },
    {
        "id": "b8ba02fd66e9f929244be235026d4e62f5332d406fd32629ad51810826959dc7",
        "question": "Show the names of editors and the theme of journals for which they serve on committees.",
        "parsing_tree": "journal_committee | #1 = Scan Table [ journal_committee ] Output [ Journal_ID , Editor_ID ] ; #2 = Scan Table [ journal ] Output [ Journal_ID , Theme ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Journal_ID = #2.Journal_ID ] Output [ #1.Editor_ID , #2.Theme ] ; #4 = Scan Table [ editor ] Output [ Name , Editor_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Editor_ID = #4.Editor_ID ] Output [ #4.Name , #3.Theme ]"
    },
    {
        "id": "ea6a4c08941407e14011a435998f973455aea973aab96a0578f9de834d088d13",
        "question": "For each journal_committee, find the editor name and the journal theme.",
        "parsing_tree": "journal_committee | #1 = Scan Table [ journal_committee ] Output [ Journal_ID , Editor_ID ] ; #2 = Scan Table [ journal ] Output [ Journal_ID , Theme ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Journal_ID = #2.Journal_ID ] Output [ #1.Editor_ID , #2.Theme ] ; #4 = Scan Table [ editor ] Output [ Name , Editor_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Editor_ID = #4.Editor_ID ] Output [ #4.Name , #3.Theme ]"
    },
    {
        "id": "7425dd6296c4e9a92b4ce2f26471639b2c9b51fbb380d7f6d1faed1565e351b2",
        "question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.",
        "parsing_tree": "journal_committee | #1 = Scan Table [ journal_committee ] Output [ Journal_ID , Editor_ID ] ; #2 = Scan Table [ journal ] Output [ Journal_ID , Theme ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Journal_ID = #2.Journal_ID ] Output [ #1.Editor_ID , #2.Theme ] ; #4 = Scan Table [ editor ] Output [ Age , Name , Editor_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Editor_ID = #4.Editor_ID ] Output [ #4.Age , #4.Name , #3.Theme ] ; #6 = Sort [ #5 ] OrderBy [ Theme ASC ] Output [ Theme , Name , Age ]"
    },
    {
        "id": "eb39f41b5d243ec503e8f5838c733509da3c1804b7230e1428532bbc84c76382",
        "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000.",
        "parsing_tree": "journal_committee | #1 = Scan Table [ journal_committee ] Output [ Journal_ID , Editor_ID ] ; #2 = Scan Table [ journal ] Predicate [ Sales > 3000 ] Output [ Journal_ID , Sales ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Journal_ID = #2.Journal_ID ] Output [ #1.Editor_ID ] ; #4 = Scan Table [ editor ] Output [ Name , Editor_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Editor_ID = #4.Editor_ID ] Output [ #4.Name ]"
    },
    {
        "id": "2afdd49d3f76bb155c327172a37648d645dcacba8742fcb74587edc58f5d4f63",
        "question": "Show the id, name of each editor and the number of journal committees they are on.",
        "parsing_tree": "journal_committee | #1 = Scan Table [ journal_committee ] Output [ Editor_ID ] ; #2 = Scan Table [ editor ] Output [ Name , Editor_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Editor_ID = #2.Editor_ID ] Output [ #2.Name , #2.Editor_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Editor_ID ] Output [ countstar AS Count_Star , Name , Editor_ID ]"
    },
    {
        "id": "f2ccc60720d7f7edb33170938482a4569658ec59da60c5e438d06316b290b443",
        "question": "Show the names of editors that are on at least two journal committees.",
        "parsing_tree": "journal_committee | #1 = Scan Table [ journal_committee ] Output [ Editor_ID ] ; #2 = Scan Table [ editor ] Output [ Name , Editor_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Editor_ID = #2.Editor_ID ] Output [ #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Name ]"
    },
    {
        "id": "6486f619e4c73987e82ba411a6b12bd9cded1812fb1c922d9cb2e174fafa10e2",
        "question": "List the names of editors that are not on any journal committee.",
        "parsing_tree": "journal_committee | #1 = Scan Table [ editor ] Output [ Name , Editor_ID ] ; #2 = Scan Table [ journal_committee ] Output [ Editor_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Editor_ID ] Output [ Editor_ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Editor_ID = #1.Editor_ID ] Output [ #1.Name ]"
    },
    {
        "id": "a4a6c90413c416344c8d347dfde98dedca5b9615f3ea523530411b81a24cc91c",
        "question": "List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.",
        "parsing_tree": "journal_committee | #1 = Scan Table [ journal ] Distinct [ true ] Output [ Theme , Sales , Date ] ; #2 = Scan Table [ journal_committee ] Output [ Journal_ID ] ; #3 = Scan Table [ journal ] Output [ Journal_ID , Theme , Sales , Date ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Journal_ID = #3.Journal_ID ] Output [ #3.Date , #3.Sales , #3.Theme ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Date = #4.Date ] Output [ #1.Sales , #1.Theme , #1.Date ]"
    },
    {
        "id": "360ccaa28952ecb0bf0379067c3ead1f242634eb5963a49862422d66d10ec047",
        "question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?",
        "parsing_tree": "journal_committee | #1 = Scan Table [ journal_committee ] Predicate [ Work_Type = 'Photo' ] Output [ Work_Type , Journal_ID ] ; #2 = Scan Table [ journal ] Output [ Journal_ID , Sales ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Journal_ID = #2.Journal_ID ] Output [ #2.Sales ] ; #4 = Aggregate [ #3 ] Output [ AVG(Sales) AS Avg_Sales ]"
    },
    {
        "id": "f689ef7e06c12019f5c9a52b7087420da4a4905878ebf7cafb37b7e575399267",
        "question": "How many accounts do we have?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ad4b5b446092900c35bc555be200dbac7d0404c3f22529cb5448773065f688ba",
        "question": "Count the number of accounts.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c1e065fe5e68d4b1fdcfc165653e16b694741b8ac95cfa59ad6ed6410bbd72c3",
        "question": "Show ids, customer ids, names for all accounts.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Output [ account_id , customer_id , account_name ]"
    },
    {
        "id": "af60797221e354b10965145f5ee9db2e55b444a99874e4cac9cb68b31d7ec2d8",
        "question": "What are the account ids, customer ids, and account names for all the accounts?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Output [ account_id , customer_id , account_name ]"
    },
    {
        "id": "6af71497ef29b423096e0284040f2d20737c0d2515883370e196abfa493cf773",
        "question": "Show other account details for account with name 338.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Predicate [ account_name = '338' ] Output [ other_account_details , account_name ]"
    },
    {
        "id": "fd92fab2738927af3c519482cd9230b6544a242dc9416f0a567985e657e5f63d",
        "question": "What are the other account details for the account with the name 338?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Predicate [ account_name = '338' ] Output [ other_account_details , account_name ]"
    },
    {
        "id": "4529b1a0dc5f018ebff8b0e9ffa411abcefe6fcb79fe29a391c72f5aa5fe7b0e",
        "question": "What is the first name, last name, and phone of the customer with account name 162?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Predicate [ account_name = '162' ] Output [ customer_id , account_name ] ; #2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_phone , customer_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_phone , #2.customer_first_name , #2.customer_last_name ]"
    },
    {
        "id": "babe8d50c67038a51ea1d17dd81d7cde6eb3aaad108d4de63a21577f212ce5e1",
        "question": "Give the full name and phone of the customer who has the account name 162.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Predicate [ account_name = '162' ] Output [ customer_id , account_name ] ; #2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_phone , customer_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_phone , #2.customer_first_name , #2.customer_last_name ]"
    },
    {
        "id": "8a9ffdc70c6de5ba112b1c033e8f37cef16e5a2d0440ee9442af7a12b41ce20f",
        "question": "How many accounts does the customer with first name Art and last name Turcotte have?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Predicate [ customer_first_name = 'Art' AND customer_last_name = 'Turcotte' ] Output [ customer_last_name , customer_id , customer_first_name ] ; #2 = Scan Table [ Accounts ] Output [ customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.customer_first_name , #1.customer_last_name , #1.customer_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0ea5bb9deaa97390482b7330ea620de290f740b85f71f21ca7c3f8bdf502030d",
        "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Predicate [ customer_first_name = 'Art' AND customer_last_name = 'Turcotte' ] Output [ customer_last_name , customer_id , customer_first_name ] ; #2 = Scan Table [ Accounts ] Output [ customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.customer_first_name , #1.customer_last_name , #1.customer_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "744576ed45107d546c81db1557ea933a2592ca517aee13a13775c82f6a47e6e6",
        "question": "Show all customer ids and the number of accounts for each customer.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ]"
    },
    {
        "id": "f276c494008aa5d3eeb39871948bb768661737010f604627c198a4c943868bcb",
        "question": "How many accounts are there for each customer id?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ]"
    },
    {
        "id": "2ac31ab12fccef4aa1956a03f54b707a9e5739084912347d894982089e096653",
        "question": "Show the customer id and number of accounts with most accounts.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , customer_id ]"
    },
    {
        "id": "0340fd6dc45657c40bbdb120843cb99fc1efdffac49056bc542a22391d1fdf28",
        "question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , customer_id ]"
    },
    {
        "id": "498f6e338e0f9483221986934a1e70bb2505c32e1ab35292c64e6c496551d48e",
        "question": "What is the customer first, last name and id with least number of accounts.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.customer_id , #3.customer_last_name , #3.customer_first_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ customer_last_name , Count_Star , customer_id , customer_first_name ]"
    },
    {
        "id": "6d56d03f61bfb36b4ab4abc7485a700a0fb149b16b5d892a1b5c621b84c22151",
        "question": "Give the full name and customer id of the customer with the fewest accounts.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.customer_id , #3.customer_last_name , #3.customer_first_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ customer_last_name , Count_Star , customer_id , customer_first_name ]"
    },
    {
        "id": "0c805bb988cad39e76b9fd72503cfe84522212adb34d3214d8ba0e7c7c1d03b5",
        "question": "Show the number of all customers without an account.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Output [ customer_id ] ; #2 = Scan Table [ Accounts ] Output [ customer_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "47cd7d3c2d9b75ef1b918c7241e5740a5f8752803e6944309c3b27fefd8877ef",
        "question": "How many customers do not have an account?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Output [ customer_id ] ; #2 = Scan Table [ Accounts ] Output [ customer_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "19291102d603a0a9e6f0163792ebf91fa8bf6461d87eb9fad095a1c32c59b393",
        "question": "Show the first names and last names of customers without any account.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ customer_last_name , customer_first_name ] ; #2 = Scan Table [ Accounts ] Output [ customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_last_name , #3.customer_first_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.customer_first_name = #4.customer_first_name ] Output [ #1.customer_first_name , #1.customer_last_name ]"
    },
    {
        "id": "94d50a32c23fe936fd5be3c67b3d89e4baae28b466f57cef84f888bd826c3aae",
        "question": "What are the full names of customers who do not have any accounts?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ customer_last_name , customer_first_name ] ; #2 = Scan Table [ Accounts ] Output [ customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_last_name , #3.customer_first_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.customer_first_name = #4.customer_first_name ] Output [ #1.customer_first_name , #1.customer_last_name ]"
    },
    {
        "id": "a63db6caee7890aeaab5626e52b5c567d7a3e200835beb089399586c712352ba",
        "question": "Show distinct first and last names for all customers with an account.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Distinct [ true ] Output [ #2.customer_first_name , #2.customer_last_name ]"
    },
    {
        "id": "5eeef5db2202830541e37454e4b0095027d1f2a1fce7c2cebea7b52546fd047d",
        "question": "What are the full names of customers who have accounts?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Distinct [ true ] Output [ #2.customer_first_name , #2.customer_last_name ]"
    },
    {
        "id": "b8cc95ac6768eda0fdfe4371a29ed5d16a5c8b0c1cd76eefc7fdc0bed9d2906a",
        "question": "How many customers have an account?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Distinct [ true ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7520e8d48ef143aacc5adfb924ed6e3fe9170ea27f46e7b71efb1a8b8f58a0f0",
        "question": "Count the number of customers who hold an account.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Accounts ] Distinct [ true ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b55741289a25124f6768c5e1be93abce5173ce6a93a537c8f95e0276790b39af",
        "question": "How many customers do we have?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "98ad3ce8d997c9c6f8febbc75a522ee328e88a2a323b5028b74719db82978229",
        "question": "Count the number of customers.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9fce9249d1ccd3273a98de286dac6d6333e428f51291550670f6dd96f5c4ad65",
        "question": "Show ids, first names, last names, and phones for all customers.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_phone , customer_first_name ]"
    },
    {
        "id": "b457a6886ba6fee72834419cf9e4402ad3dc6503cfd1a5a543fbd4ce312060ef",
        "question": "What are the ids, full names, and phones of each customer?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_phone , customer_first_name ]"
    },
    {
        "id": "8d66f3b781e77dc5944ef615134c5b27f97e687af226c2f6039c58614ec33eb4",
        "question": "What is the phone and email for customer with first name Aniyah and last name Feest?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Predicate [ customer_first_name = 'Aniyah' AND customer_last_name = 'Feest' ] Output [ customer_last_name , customer_phone , customer_email , customer_first_name ]"
    },
    {
        "id": "71f99106ec3a4a5bbaaf050c1ec5c3bc4c70afa661c3b27cf3352efe025577ae",
        "question": "Return the phone and email of the customer with the first name Aniyah and last name Feest.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Predicate [ customer_first_name = 'Aniyah' AND customer_last_name = 'Feest' ] Output [ customer_last_name , customer_phone , customer_email , customer_first_name ]"
    },
    {
        "id": "22c7667787fdf4201a3db4906b120f26e391333c33a58e50c418d29a8bbaf723",
        "question": "Show the number of customer cards.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6a13e3543dde480fd57b79c2d02ad06f42244202c5c1ead633a6990cb66bc82c",
        "question": "How many customer cards are there?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "718865b4c31205dff409d6af626ef276bae565e7f3861bccf0d74e7166623650",
        "question": "Show ids, customer ids, card type codes, card numbers for all cards.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ card_number , customer_id , card_type_code , card_id ]"
    },
    {
        "id": "460cb0805b99e411eeef968fe2fa8aa8aa8803d05cb1444fa53e430cb45cb124",
        "question": "What are card ids, customer ids, card types, and card numbers for each customer card?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ card_number , customer_id , card_type_code , card_id ]"
    },
    {
        "id": "206efe9199809e1cd64f6dc4cabf278568d6c6b2bcf9ed88e99dfad6f382083b",
        "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Predicate [ card_number = '4560596484842' ] Output [ card_number , date_valid_to , date_valid_from ]"
    },
    {
        "id": "e526d44b71cfbbf0b2ac76f29c7daa6411cca08eb24c45f2267bf3979448e8b9",
        "question": "What are the valid from and valid to dates for the card with the number 4560596484842?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Predicate [ card_number = '4560596484842' ] Output [ card_number , date_valid_to , date_valid_from ]"
    },
    {
        "id": "704757551686fbec2f08a339a2e214b3f60421bbdf424e4a98b58176cfeb0d29",
        "question": "What is the first name, last name, and phone of the customer with card 4560596484842.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Predicate [ card_number = '4560596484842' ] Output [ customer_id , card_number ] ; #2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_phone , customer_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_phone , #2.customer_first_name , #2.customer_last_name ]"
    },
    {
        "id": "e948384a5fc1962c5382a5d2abe3f6ef3e2d0093a5ee32203ce03903ca298905",
        "question": "Return the full name and phone of the customer who has card number 4560596484842.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Predicate [ card_number = '4560596484842' ] Output [ customer_id , card_number ] ; #2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_phone , customer_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_phone , #2.customer_first_name , #2.customer_last_name ]"
    },
    {
        "id": "74ffc5518357afdcaa5343f94877ef0fb8442a9401fd54581aaad8984948e90c",
        "question": "How many cards does customer Art Turcotte have?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Predicate [ customer_first_name = 'Art' AND customer_last_name = 'Turcotte' ] Output [ customer_last_name , customer_id , customer_first_name ] ; #2 = Scan Table [ Customers_Cards ] Output [ customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.customer_first_name , #1.customer_last_name , #1.customer_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4ed2339628ca3ea26109be2c29efb179ba8ee83c2ddcdc619753221e79b5648f",
        "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Predicate [ customer_first_name = 'Art' AND customer_last_name = 'Turcotte' ] Output [ customer_last_name , customer_id , customer_first_name ] ; #2 = Scan Table [ Customers_Cards ] Output [ customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.customer_first_name , #1.customer_last_name , #1.customer_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "559544ccb03820f9a3d64aaf664c06e9dfe3512f050fdde0fd2da9b25ed75386",
        "question": "How many debit cards do we have?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Predicate [ card_type_code = 'Debit' ] Output [ card_type_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c32eecaa684f3f8130b9b3993490a2e997c3fe69be40d36df8b17e9258c91e98",
        "question": "Count the number of customer cards of the type Debit.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Predicate [ card_type_code = 'Debit' ] Output [ card_type_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "dac3c0abef5051e77708581639b72bffd23afcf4bce6abf97be9ceed666c75a6",
        "question": "How many credit cards does customer Blanche Huels have?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Predicate [ customer_first_name = 'Blanche' AND customer_last_name = 'Huels' ] Output [ customer_last_name , customer_id , customer_first_name ] ; #2 = Scan Table [ Customers_Cards ] Predicate [ card_type_code = 'Credit' ] Output [ customer_id , card_type_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.customer_first_name , #1.customer_last_name , #1.customer_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6fbd0688708f0a994648f28fb576ef646b49a6ad5827aba265339456879a9991",
        "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers ] Predicate [ customer_first_name = 'Blanche' AND customer_last_name = 'Huels' ] Output [ customer_last_name , customer_id , customer_first_name ] ; #2 = Scan Table [ Customers_Cards ] Predicate [ card_type_code = 'Credit' ] Output [ customer_id , card_type_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.customer_first_name , #1.customer_last_name , #1.customer_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4f6fb2ffae8fe8cae69c480169c8966b6fd021ea548be963891a82e3b22f3e65",
        "question": "Show all customer ids and the number of cards owned by each customer.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ]"
    },
    {
        "id": "60265750d9348799fe433d5b9c7ef0c1130774f646260ea6762c06fc3d7abee6",
        "question": "What are the different customer ids, and how many cards does each one hold?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ]"
    },
    {
        "id": "3d31eb11e407706aacb11120c46b1c1545659d3dfc4d7d17b7e6edef4402b8da",
        "question": "What is the customer id with most number of cards, and how many does he have?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , customer_id ]"
    },
    {
        "id": "bcd7eed255e3d5c71cd0bbf642297e88fcadefec62230bf1339d616d17804e02",
        "question": "Return the id of the customer who has the most cards, as well as the number of cards.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , customer_id ]"
    },
    {
        "id": "c499e3dfe9dca515fdfe20e3481538f6e6d458da2f270be381cafa72b970ac2d",
        "question": "Show id, first and last names for all customers with at least two cards.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_first_name , #1.customer_id , #2.customer_last_name ] ; #4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_last_name , customer_id , customer_first_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ customer_last_name , customer_id , customer_first_name ]"
    },
    {
        "id": "63eecdf76a274627b62d1d2c10d559c8486968c74fc959f03eb8c653defe7be0",
        "question": "What are the ids and full names of customers who hold two or more cards?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_first_name , #1.customer_id , #2.customer_last_name ] ; #4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_last_name , customer_id , customer_first_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ customer_last_name , customer_id , customer_first_name ]"
    },
    {
        "id": "6c8321a07c7f4f2a5b0172030af3ee22984e3eeeea095deffe6a167b63d10457",
        "question": "What is the customer id, first and last name with least number of accounts.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.customer_id , #3.customer_last_name , #3.customer_first_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ customer_last_name , Count_Star , customer_id , customer_first_name ]"
    },
    {
        "id": "19ad5f8fa68e64b1b83753b3198f08c1a010c0d0c0a40b2dc6e6e1b3c3461f8d",
        "question": "Return the id and full name of the customer who has the fewest accounts.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.customer_id , #3.customer_last_name , #3.customer_first_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ customer_last_name , Count_Star , customer_id , customer_first_name ]"
    },
    {
        "id": "42064fec85beacb1e6e66d17e84024cafc2fa2bf8008bd33959de1a4febf22b8",
        "question": "Show all card type codes and the number of cards in each type.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ card_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ card_type_code ] Output [ countstar AS Count_Star , card_type_code ]"
    },
    {
        "id": "6cb2f0fe53d023396011b8be37ab63ba9f4dcfc5e932b98322c1a6e1cfb5c25e",
        "question": "What are the different card types, and how many cards are there of each?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ card_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ card_type_code ] Output [ countstar AS Count_Star , card_type_code ]"
    },
    {
        "id": "5ccf3eeed01a863af6ece9af43acdc38a11c5f56f90a217a17701d88cb075bb9",
        "question": "What is the card type code with most number of cards?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ card_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ card_type_code ] Output [ countstar AS Count_Star , card_type_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , card_type_code ]"
    },
    {
        "id": "746de84f14685a54ab64a84e03f41816b03fc0e4692b9ad61a267e5dea6a4de6",
        "question": "Return the code of the card type that is most common.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ card_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ card_type_code ] Output [ countstar AS Count_Star , card_type_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , card_type_code ]"
    },
    {
        "id": "77cbd9ed4e5065e61e12d94e06a14404329bcd4c2dddf37904885021b3d562df",
        "question": "Show card type codes with at least 5 cards.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ card_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ card_type_code ] Output [ countstar AS Count_Star , card_type_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 5 ] Output [ card_type_code ]"
    },
    {
        "id": "61cf5c7d210e9ccf3eb3cb2d4eeef73e2dfbd3ee188415a05b3e01153d682020",
        "question": "What are the codes of card types that have 5 or more cards?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Output [ card_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ card_type_code ] Output [ countstar AS Count_Star , card_type_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 5 ] Output [ card_type_code ]"
    },
    {
        "id": "80aa6eedc21ca7eb80753a01a57383daae842cdf9e05e337c2a2bc767f991c10",
        "question": "Show all card type codes and the number of customers holding cards in each type.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Distinct [ true ] Output [ customer_id , card_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ card_type_code ] Output [ countstar AS Count_Star , card_type_code ]"
    },
    {
        "id": "445afa529ed2215cadf4a38b711b2f939d18fc446aec15976e5cbcfd6883c4fd",
        "question": "What are the different card type codes, and how many different customers hold each type?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Distinct [ true ] Output [ customer_id , card_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ card_type_code ] Output [ countstar AS Count_Star , card_type_code ]"
    },
    {
        "id": "f14294d870086eb2dff01c144e7d5c66f712d9830a76098f107a8e3c30d583a3",
        "question": "Show all card type codes.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Distinct [ true ] Output [ card_type_code ]"
    },
    {
        "id": "221a0d2cebfe6401301ed39d641615993ad7ae91eab3b37a98365ad5869a4098",
        "question": "What are the different card type codes?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Distinct [ true ] Output [ card_type_code ]"
    },
    {
        "id": "b4f669677e1214dc1d866a7e8b6a9d7ff63dac11cb1812896d416ca34f28b301",
        "question": "Show the number of card types.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Distinct [ true ] Output [ card_type_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0adf105b3f34907c4f1719d8c2cee03ee6ebcbc89ed596188578f163e8b5340b",
        "question": "How many different card types are there?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Customers_Cards ] Distinct [ true ] Output [ card_type_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a77fd2d17c2f7b12307fb1ebf5be3e88801dae95334e86e5c7f4c096dd0913d1",
        "question": "Show all transaction types.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Financial_Transactions ] Distinct [ true ] Output [ transaction_type ]"
    },
    {
        "id": "e36cde630f92a4e3b5f9787bc0f96274549056bfc32680291ad3bdcdcb0d92a8",
        "question": "What are the different types of transactions?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Financial_Transactions ] Distinct [ true ] Output [ transaction_type ]"
    },
    {
        "id": "4adc92ea93e92562521c0365cada64c5347aa16f047f3f8a11a0fb9731ae2670",
        "question": "Show the number of transaction types.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Financial_Transactions ] Distinct [ true ] Output [ transaction_type ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "319294ae2c397b2d417ca8de57cd2a1b086a1e61e591d52e3b9099cd0e0c867e",
        "question": "How many different types of transactions are there?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Financial_Transactions ] Distinct [ true ] Output [ transaction_type ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "558940ac1b61a702bcfa7258d282b1b9b53d572b6e95fc41c60ad94277541496",
        "question": "What is the average and total transaction amount?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Financial_Transactions ] Output [ transaction_amount ] ; #2 = Aggregate [ #1 ] Output [ SUM(transaction_amount) AS Sum_transaction_amount , AVG(transaction_amount) AS Avg_transaction_amount ]"
    },
    {
        "id": "197db8bf92c3e3b796b59928ce33d9b981202767e981b7a8b2bdc89adbe7b4dd",
        "question": "Return the average transaction amount, as well as the total amount of all transactions.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Financial_Transactions ] Output [ transaction_amount ] ; #2 = Aggregate [ #1 ] Output [ SUM(transaction_amount) AS Sum_transaction_amount , AVG(transaction_amount) AS Avg_transaction_amount ]"
    },
    {
        "id": "868a113ada1741fe0920aeb2a1837fe948335a6dc83a9467f8d7f9b59fcf3e87",
        "question": "Show the card type codes and the number of transactions.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Financial_Transactions ] Output [ card_id ] ; #2 = Scan Table [ Customers_Cards ] Output [ card_type_code , card_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.card_id = #2.card_id ] Output [ #2.card_type_code ] ; #4 = Aggregate [ #3 ] GroupBy [ card_type_code ] Output [ countstar AS Count_Star , card_type_code ]"
    },
    {
        "id": "7f795b611209994e5fab372c3b8f15deae2b26b2940ea2a89137252f85b9af4c",
        "question": "What are the different card types, and how many transactions have been made with each?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Financial_Transactions ] Output [ card_id ] ; #2 = Scan Table [ Customers_Cards ] Output [ card_type_code , card_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.card_id = #2.card_id ] Output [ #2.card_type_code ] ; #4 = Aggregate [ #3 ] GroupBy [ card_type_code ] Output [ countstar AS Count_Star , card_type_code ]"
    },
    {
        "id": "2f04d7670a7463480143fe82496b2c8a5dcbe7ab912fc900e5d00d2990ad4380",
        "question": "Show the transaction type and the number of transactions.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Financial_Transactions ] Output [ transaction_type ] ; #2 = Aggregate [ #1 ] GroupBy [ transaction_type ] Output [ countstar AS Count_Star , transaction_type ]"
    },
    {
        "id": "47f0c8ccaf4860f50b7dfa41b5d563cd6b049ca5f16a47c2f9b931c262dc693a",
        "question": "What are the different transaction types, and how many transactions of each have taken place?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Financial_Transactions ] Output [ transaction_type ] ; #2 = Aggregate [ #1 ] GroupBy [ transaction_type ] Output [ countstar AS Count_Star , transaction_type ]"
    },
    {
        "id": "605e1ce996f2e7745ace4340cf2ad9a8b6678574fd1b0ef43899ac02c4e708c4",
        "question": "What is the transaction type that has processed the greatest total amount in transactions?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Financial_Transactions ] Output [ transaction_amount , transaction_type ] ; #2 = Aggregate [ #1 ] GroupBy [ transaction_type ] Output [ SUM(transaction_amount) AS Sum_transaction_amount , transaction_type ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_transaction_amount DESC ] Output [ Sum_transaction_amount , transaction_type ]"
    },
    {
        "id": "5664656805cb9e248ae3056af4c0aaff07e8ad8b01730bb7f39b6d342f43eab4",
        "question": "Return the type of transaction with the highest total amount.",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Financial_Transactions ] Output [ transaction_amount , transaction_type ] ; #2 = Aggregate [ #1 ] GroupBy [ transaction_type ] Output [ SUM(transaction_amount) AS Sum_transaction_amount , transaction_type ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_transaction_amount DESC ] Output [ Sum_transaction_amount , transaction_type ]"
    },
    {
        "id": "a231297f82087c4e07e875cbc64628747d5baa1b58c04396bc01713be48da267",
        "question": "Show the account id and the number of transactions for each account",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Financial_Transactions ] Output [ account_id ] ; #2 = Aggregate [ #1 ] GroupBy [ account_id ] Output [ countstar AS Count_Star , account_id ]"
    },
    {
        "id": "5c6d6149f8602fd16f3377acfd29a12314f6c1d6967e867f1525f6b9983fe4ea",
        "question": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?",
        "parsing_tree": "customers_card_transactions | #1 = Scan Table [ Financial_Transactions ] Output [ account_id ] ; #2 = Aggregate [ #1 ] GroupBy [ account_id ] Output [ countstar AS Count_Star , account_id ]"
    },
    {
        "id": "5d2278b1adad217d301c40243eddd70da35e884d1db3ce340cc56dbe479527b4",
        "question": "How many tracks do we have?",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "65587279c4e498da4251843bb00a8a7642a437406c8c11f809a854236b705ceb",
        "question": "Count the number of tracks.",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b90e85164293a3f4900a29b92a3031b91e9fc4011c98d0d059138c5f1b5f1e46",
        "question": "Show the name and location for all tracks.",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Output [ Location , Name ]"
    },
    {
        "id": "b4964d495628204653c459189553a76ffcae3da8bd701711427e60b3cd9e788a",
        "question": "What are the names and locations of all tracks?",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Output [ Location , Name ]"
    },
    {
        "id": "7c2469363b9bc877710c332f4b9fbad97a085409ec7ec9785c71b9b50aa9dea1",
        "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Predicate [ Year_Opened > 2000.0 ] Output [ Name , Year_Opened , Seating ] ; #2 = Sort [ #1 ] OrderBy [ Seating ASC ] Output [ Name , Seating ]"
    },
    {
        "id": "c902c89ff86f71d926540f9c49d10ac2e8c6965558c63ad6d5664f5326dab16f",
        "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Predicate [ Year_Opened > 2000.0 ] Output [ Name , Year_Opened , Seating ] ; #2 = Sort [ #1 ] OrderBy [ Seating ASC ] Output [ Name , Seating ]"
    },
    {
        "id": "0725957e2692220b0ead9da6520fa75cf5bf7e007b995b96c8e63a1c22e28501",
        "question": "What is the name, location and seating for the most recently opened track?",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Output [ Location , Name , Year_Opened , Seating ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Year_Opened DESC ] Output [ Location , Name , Year_Opened , Seating ]"
    },
    {
        "id": "ec0696d01ee592e52a7d43dd9fdae0e13c1070b7417307ef841f256cfd24cc37",
        "question": "Return the name, location, and seating of the track that was opened in the most recent year.",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Output [ Location , Name , Year_Opened , Seating ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Year_Opened DESC ] Output [ Location , Name , Year_Opened , Seating ]"
    },
    {
        "id": "ab7298fad6c9f8c341f79458cd5299f8341733f213c8f22747e90ec7b58a4ce8",
        "question": "What is the minimum, maximum, and average seating for all tracks.",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Output [ Seating ] ; #2 = Aggregate [ #1 ] Output [ MIN(Seating) AS Min_Seating , MAX(Seating) AS Max_Seating , AVG(Seating) AS Avg_Seating ]"
    },
    {
        "id": "5d4a9402214943e8643f3257ab6ebccc26cf0382fe44fe09d8236ab00967eaf5",
        "question": "Return the minimum, maximum, and average seating across all tracks.",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Output [ Seating ] ; #2 = Aggregate [ #1 ] Output [ MIN(Seating) AS Min_Seating , MAX(Seating) AS Max_Seating , AVG(Seating) AS Avg_Seating ]"
    },
    {
        "id": "b6bbed4f684313f42b1f8165705a7d8ae30cafcefb7da2e4c6b9d4d81d533c36",
        "question": "Show the name, location, open year for all tracks with a seating higher than the average.",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Output [ Seating ] ; #2 = Aggregate [ #1 ] Output [ AVG(Seating) AS Avg_Seating ] ; #3 = Scan Table [ track ] Output [ Location , Name , Year_Opened , Seating ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Seating > #2.Avg_Seating ] Output [ #3.Name , #3.Year_Opened , #3.Location ]"
    },
    {
        "id": "22bf079843949a50d235a1d0358b8c4597258ecb955d36899134c2ad42cf0598",
        "question": "What are the names, locations, and years of opening for tracks with seating higher than average?",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Output [ Seating ] ; #2 = Aggregate [ #1 ] Output [ AVG(Seating) AS Avg_Seating ] ; #3 = Scan Table [ track ] Output [ Location , Name , Year_Opened , Seating ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Seating > #2.Avg_Seating ] Output [ #3.Name , #3.Year_Opened , #3.Location ]"
    },
    {
        "id": "94c02d701532223fb8f5697e4c262d72bd5e4f236f6f22c37a4d53349faeb128",
        "question": "What are distinct locations where tracks are located?",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Distinct [ true ] Output [ Location ]"
    },
    {
        "id": "32004c8c6941cf2f84cc4405c48d37f6abf74653fc31bc9ac97afe7c8663c504",
        "question": "Give the different locations of tracks.",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Distinct [ true ] Output [ Location ]"
    },
    {
        "id": "7b742d257c67e2f745677aa8c2cb9fc7bf4de1ebe46003aa66b908905388ed71",
        "question": "How many races are there?",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "95b18a86eca80e015453dc55744863e6d8cd7973c7724bd17102c713fec22598",
        "question": "Count the number of races.",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f1ff0bbb363c61baedb1b1bb1936bdfec751c594143e53e2125fe8c358776c7b",
        "question": "What are the distinct classes that races can have?",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Distinct [ true ] Output [ Class ]"
    },
    {
        "id": "8e9f0968919a7bcb37c2b7bcb1963d03c68aa2f55d40a88b99c97423c0bd36ac",
        "question": "Return the different classes of races.",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Distinct [ true ] Output [ Class ]"
    },
    {
        "id": "b62ad03502b2427062af5c5cde27bfd72ed29780905d133df6ac3a6d69e9a06d",
        "question": "Show name, class, and date for all races.",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ Name , Date , Class ]"
    },
    {
        "id": "6786e42221041a2c32ca485b1b089cdbfa79ffee54211a2355e570bd9fd19eb8",
        "question": "What are the names, classes, and dates for all races?",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ Name , Date , Class ]"
    },
    {
        "id": "cfa32c133c5345f869b1a2d0719d08ced2fa4f223e7a924259ba46fe6e9466d4",
        "question": "Show the race class and number of races in each class.",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ Class ] ; #2 = Aggregate [ #1 ] GroupBy [ Class ] Output [ countstar AS Count_Star , Class ]"
    },
    {
        "id": "43fe8a32a4edc7ef5bfda605096f88d88b87f536e36daf79f318e14672374107",
        "question": "What are the different classes of races, and how many races correspond to each?",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ Class ] ; #2 = Aggregate [ #1 ] GroupBy [ Class ] Output [ countstar AS Count_Star , Class ]"
    },
    {
        "id": "18ecdbd98eaecfbc4bed6801ac7543cc8702bdf94644a49fac8c69dd568d511c",
        "question": "What is the race class with most number of races.",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ Class ] ; #2 = Aggregate [ #1 ] GroupBy [ Class ] Output [ countstar AS Count_Star , Class ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Class ]"
    },
    {
        "id": "e6cdbfdfc3450a46e885e8c0a54c59004e9485c018a8e8b951d08290b64771c0",
        "question": "Give the class of races that is most common.",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ Class ] ; #2 = Aggregate [ #1 ] GroupBy [ Class ] Output [ countstar AS Count_Star , Class ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Class ]"
    },
    {
        "id": "c2df082920890efeb5487ef5ca32e261ba54498b1abf8256f432a7a39e3d27d4",
        "question": "List the race class with at least two races.",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ Class ] ; #2 = Aggregate [ #1 ] GroupBy [ Class ] Output [ countstar AS Count_Star , Class ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Class ]"
    },
    {
        "id": "86e832947b37076e2bf605247e8a586ad7ec04cb28da09d0036859a1fe7a2790",
        "question": "What are the classes of races that have two or more corresponding races?",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ Class ] ; #2 = Aggregate [ #1 ] GroupBy [ Class ] Output [ countstar AS Count_Star , Class ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Class ]"
    },
    {
        "id": "e2beda9af8a89cb3d6c359efc4326f7598c456a65f19d2b26e8451352f2f79ed",
        "question": "What are the names for tracks without a race in class 'GT'.",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ race ] Predicate [ Class = 'GT' ] Output [ Track_ID , Class ] ; #3 = Scan Table [ track ] Output [ Track_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Track_ID = #3.Track_ID ] Output [ #3.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Name ]"
    },
    {
        "id": "ee5b18d13ff4cec1aa1f483ab2420adc02970048c869a868359ca59ac94b39cf",
        "question": "Give the names of tracks that do not have a race in the class 'GT'.",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ race ] Predicate [ Class = 'GT' ] Output [ Track_ID , Class ] ; #3 = Scan Table [ track ] Output [ Track_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Track_ID = #3.Track_ID ] Output [ #3.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Name ]"
    },
    {
        "id": "113e9e402f80a6f0bad34ef1dea6894f24282a93e6fc1ad332709eb21e7bea25",
        "question": "Show all track names that have had no races.",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Output [ Track_ID , Name ] ; #2 = Scan Table [ race ] Output [ Track_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Track_ID IS NULL OR #1.Track_ID = #2.Track_ID ] Output [ #1.Name ]"
    },
    {
        "id": "24ea3095159abf0bbc4ca6b76665ad239ad788764896e8694803c0bab58bdce4",
        "question": "Return the names of tracks that have no had any races.",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Output [ Track_ID , Name ] ; #2 = Scan Table [ race ] Output [ Track_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Track_ID IS NULL OR #1.Track_ID = #2.Track_ID ] Output [ #1.Name ]"
    },
    {
        "id": "e735e52c5e56a0dc05e01695fa2e8f41348cb3ddc49fc347595bddb9b34ee5a8",
        "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Predicate [ Seating >= 4000.0 AND Seating <= 5000.0 ] Output [ Year_Opened , Seating ]"
    },
    {
        "id": "d4965d443b8589f5edccbcd38cd12e541c3a4dda211628e9e587517b759d36e2",
        "question": "What are the years of opening for tracks with seating between 4000 and 5000?",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Predicate [ Seating >= 4000.0 AND Seating <= 5000.0 ] Output [ Year_Opened , Seating ]"
    },
    {
        "id": "d6023c094f9e8aa269c68d19a57cb83c8174886d55d4dd7995d78e42e71b2d7f",
        "question": "Show the name of track and the number of races in each track.",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ Track_ID ] ; #2 = Scan Table [ track ] Output [ Track_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "54f068f9d233d9ad457e2987c0150825f73c7d3e50de9a2c05ceea57895d9056",
        "question": "What are the names of different tracks, and how many races has each had?",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ Track_ID ] ; #2 = Scan Table [ track ] Output [ Track_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "eb872becf6033bfa2acda414aa4da0c9762d87e57c24f097ae94cfe0e0b33092",
        "question": "Show the name of track with most number of races.",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ Track_ID ] ; #2 = Scan Table [ track ] Output [ Track_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]"
    },
    {
        "id": "8bf1546e334cfbedfc2529703a548d80994f4d7ad2a5230f7b47e80a1374d09d",
        "question": "What is the name of the track that has had the greatest number of races?",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ Track_ID ] ; #2 = Scan Table [ track ] Output [ Track_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]"
    },
    {
        "id": "50f8ff8512b3c5b2433736dab0b0103db09cfba879c73102edb8c3891a494ce1",
        "question": "Show the name and location of track with 1 race.",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ Track_ID ] ; #2 = Scan Table [ track ] Output [ Track_ID , Location , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID , #2.Location ] ; #4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Location , Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star = 1 ] Output [ Location , Name ]"
    },
    {
        "id": "8b322e62a5375cd432fd1b9db12a521df1fd3fffcaec563e167f0f16ad2a564f",
        "question": "What are the names and locations of tracks that have had exactly 1 race?",
        "parsing_tree": "race_track | #1 = Scan Table [ race ] Output [ Track_ID ] ; #2 = Scan Table [ track ] Output [ Track_ID , Location , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID , #2.Location ] ; #4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Location , Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star = 1 ] Output [ Location , Name ]"
    },
    {
        "id": "4c4911a5fd666fd1501f1e0029e8935566eaf3ffe440fbe200afab0161914219",
        "question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Predicate [ Seating > 90000.0 ] Distinct [ true ] Output [ Location , Seating ] ; #2 = Scan Table [ track ] Predicate [ Seating < 70000.0 ] Output [ Location , Seating ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Location = #2.Location ] Output [ #1.Location ]"
    },
    {
        "id": "18e1af03984388cdc1cf6eebd27e02413f15b487142052e2004e3f5ac03d83d9",
        "question": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?",
        "parsing_tree": "race_track | #1 = Scan Table [ track ] Predicate [ Seating > 90000.0 ] Distinct [ true ] Output [ Location , Seating ] ; #2 = Scan Table [ track ] Predicate [ Seating < 70000.0 ] Output [ Location , Seating ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Location = #2.Location ] Output [ #1.Location ]"
    },
    {
        "id": "ec487e28fc37cb42703d6891611cbb7f9f86e18e48a09a4d5af568202c051f73",
        "question": "How many members have the black membership card?",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ member ] Predicate [ Membership_card = 'Black' ] Output [ Membership_card ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0668a7543bece43f2bdf6a319a48d624c5b5fc2c1d673c3c765c13ef5034b219",
        "question": "Find the number of members living in each address.",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ member ] Output [ Address ] ; #2 = Aggregate [ #1 ] GroupBy [ Address ] Output [ countstar AS Count_Star , Address ]"
    },
    {
        "id": "7b7bbfb4ed12fcf784fa9c7429278173fd9734571af5a4d72e6d5f2f72f1ade4",
        "question": "Give me the names of members whose address is in Harford or Waterbury.",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ member ] Predicate [ Address = 'Harford' OR Address = 'Waterbury' ] Output [ Name , Address ]"
    },
    {
        "id": "806a8fe63f5781779c8e24c484199644c7d842349b2f81e646fe671b6eb5117a",
        "question": "Find the ids and names of members who are under age 30 or with black membership card.",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ member ] Predicate [ Membership_card = 'Black' OR Age < 30 ] Output [ Membership_card , Name , Age , Member_ID ]"
    },
    {
        "id": "2774017e3b7c25d9cb5c83b1ac4543edad6420849039256c2495fe94084f132b",
        "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ member ] Output [ Time_of_purchase , Address , Age ] ; #2 = Sort [ #1 ] OrderBy [ Time_of_purchase ASC ] Output [ Time_of_purchase , Address , Age ]"
    },
    {
        "id": "ad50d1bd3ade95b02c5241fc64593c4a001e0be585cbe2110fc10b0eab8c96ff",
        "question": "Which membership card has more than 5 members?",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ member ] Output [ Membership_card ] ; #2 = Aggregate [ #1 ] GroupBy [ Membership_card ] Output [ Membership_card , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 5 ] Output [ Membership_card ]"
    },
    {
        "id": "e88c0eaae017534adc983aca44b185d49f99c76419106b9bd696bd85e9bfff1f",
        "question": "Which address has both members younger than 30 and members older than 40?",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ member ] Predicate [ Age < 30 ] Distinct [ true ] Output [ Address , Age ] ; #2 = Scan Table [ member ] Predicate [ Age > 40 ] Output [ Address , Age ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Address = #2.Address ] Output [ #1.Address ]"
    },
    {
        "id": "82a2cc5b08c4c64639fe92d3c186b853de65b2deb2ad333afe575140aaabf695",
        "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ member ] Predicate [ Address = 'Hartford' ] Distinct [ true ] Output [ Membership_card , Address ] ; #2 = Scan Table [ member ] Predicate [ Address = 'Waterbury' ] Output [ Membership_card , Address ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Membership_card = #2.Membership_card ] Output [ #1.Membership_card ]"
    },
    {
        "id": "9c51a8f2101a435a661f5518b44cc2ea1e5161f110524f2fdfc45526fc9a0898",
        "question": "How many members are not living in Hartford?",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ member ] Predicate [ Address <> 'Hartford' ] Output [ Address ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "25031e3365b08800c52e315e6633b6410cdc1475706001b5fb63f86a38a2f6f5",
        "question": "Which address do not have any member with the black membership card?",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ member ] Distinct [ true ] Output [ Address ] ; #2 = Scan Table [ member ] Predicate [ Membership_card = 'Black' ] Output [ Membership_card , Address ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Address = #2.Address ] Output [ #1.Address ]"
    },
    {
        "id": "b718110026369583594b336cc2d43951fcdf9cf9a7770433b053a9f602b9de14",
        "question": "Show the shop addresses ordered by their opening year.",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ shop ] Output [ Open_Year , Address ] ; #2 = Sort [ #1 ] OrderBy [ Open_Year ASC ] Output [ Open_Year , Address ]"
    },
    {
        "id": "b276067a74939acd27ff4b9df3a6a48d79285f9939e42d04234e10e9ffd67544",
        "question": "What are the average score and average staff number of all shops?",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ shop ] Output [ Score , Num_of_staff ] ; #2 = Aggregate [ #1 ] Output [ AVG(Num_of_staff) AS Avg_Num_of_staff , AVG(Score) AS Avg_Score ]"
    },
    {
        "id": "742f542131e86fc7b8475593355a48077d6d2f6242b70c5f439728bcde89a2fb",
        "question": "Find the id and address of the shops whose score is below the average score.",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ shop ] Output [ Score ] ; #2 = Aggregate [ #1 ] Output [ AVG(Score) AS Avg_Score ] ; #3 = Scan Table [ shop ] Output [ Score , Shop_ID , Address ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Score < #2.Avg_Score ] Output [ #3.Shop_ID , #3.Address ]"
    },
    {
        "id": "e8ffa1f7cb1e9d67283b5172663e3753ce329382ccf39c4988c94ea4cdad0061",
        "question": "Find the address and staff number of the shops that do not have any happy hour.",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ shop ] Output [ Shop_ID , Address , Num_of_staff ] ; #2 = Scan Table [ happy_hour ] Output [ Shop_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Shop_ID = #1.Shop_ID ] Output [ #1.Address , #1.Num_of_staff ]"
    },
    {
        "id": "855bba14ce22d1531d57241dd68786196ed843321163cdb7f29cb92619819374",
        "question": "What are the id and address of the shops which have a happy hour in May?",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ happy_hour ] Predicate [ Month = 'May' ] Output [ Shop_ID , Month ] ; #2 = Scan Table [ shop ] Output [ Shop_ID , Address ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Shop_ID = #2.Shop_ID ] Output [ #2.Shop_ID , #2.Address ]"
    },
    {
        "id": "5f70b4a63916f3afbcb9a6520aad1612544b5cd07bada36f0b96ec69ee62dc7a",
        "question": "which shop has happy hour most frequently? List its id and number of happy hours.",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ happy_hour ] Output [ Shop_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Shop_ID ] Output [ countstar AS Count_Star , Shop_ID ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Shop_ID ]"
    },
    {
        "id": "fca4740e11610e6fbc06208c4efa2e17bc8619e7cc706fbfb0ffcb33d3ce20e9",
        "question": "Which month has the most happy hours?",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ happy_hour ] Output [ Month ] ; #2 = Aggregate [ #1 ] GroupBy [ Month ] Output [ countstar AS Count_Star , Month ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Month ]"
    },
    {
        "id": "10bcf5d1fde57f4c8b18d5c3bda3857f3a91e2d2c0784a2ffc2aa50aa83562d8",
        "question": "Which months have more than 2 happy hours?",
        "parsing_tree": "coffee_shop | #1 = Scan Table [ happy_hour ] Output [ Month ] ; #2 = Aggregate [ #1 ] GroupBy [ Month ] Output [ countstar AS Count_Star , Month ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Month ]"
    },
    {
        "id": "334e69804e0f624552adfa36f7d711b95642f39800de124f2550db10b7962d03",
        "question": "How many albums are there?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Album ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f5998d83641c0c0c0c226cb3ab23fb12d274701f7efb8f5cb4680fbb706963d5",
        "question": "Find the number of albums.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Album ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "eeb0ef929720d2f32399d8b7ba1fe02c5c43b4e4837be9d0d25a017ca0d27c61",
        "question": "List the names of all music genres.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Genre ] Output [ Name ]"
    },
    {
        "id": "041c9197e8a264a3c5a9e76c673623e5425871b1498ae9d763477b8629215a2d",
        "question": "What are the names of different music genres?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Genre ] Output [ Name ]"
    },
    {
        "id": "351f28c59236fd11f42820f73a29e85db0e0e2d6586033efe9c7badb4d5c4cbd",
        "question": "Find all the customer information in state NY.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Customer ] Predicate [ State = 'NY' ] Output [ Country , Fax , Email , Address , SupportRepId , CustomerId , PostalCode , Company , LastName , State , City , FirstName , Phone ]"
    },
    {
        "id": "a1e0a67850b24c479a350b68900fe4b7efbf4c258c7eca85baa173f9a910f208",
        "question": "What is all the customer information for customers in NY state?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Customer ] Predicate [ State = 'NY' ] Output [ Country , Fax , Email , Address , SupportRepId , CustomerId , PostalCode , Company , LastName , State , City , FirstName , Phone ]"
    },
    {
        "id": "ae3c4ab4dd5734591e511dd09c01646a858ca9369b444f677bed3de4ec8a0049",
        "question": "What are the first names and last names of the employees who live in Calgary city.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Employee ] Predicate [ City = 'Calgary' ] Output [ City , LastName , FirstName ]"
    },
    {
        "id": "18acffc1393809f11b592826b79e72dfaac0c3251280559a1fd76771c498d843",
        "question": "Find the full names of employees living in the city of Calgary.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Employee ] Predicate [ City = 'Calgary' ] Output [ City , LastName , FirstName ]"
    },
    {
        "id": "f6cb5f79e6b2f6fab9011993eb0ff4674ce4c33c771da9aa2b90352402dc03d6",
        "question": "What are the distinct billing countries of the invoices?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Invoice ] Distinct [ true ] Output [ BillingCountry ]"
    },
    {
        "id": "128a6be417d50bf73808260b1fa213fd6cc216c5f57b055e8285175e7e9733fe",
        "question": "Find the different billing countries for all invoices.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Invoice ] Distinct [ true ] Output [ BillingCountry ]"
    },
    {
        "id": "8f72e72c9399f296e2d12a84370dbe4864b804c3c8064944ddc84718a89d26a1",
        "question": "Find the names of all artists that have \"a\" in their names.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Artist ] Predicate [ Name like '%a%' ] Output [ Name ]"
    },
    {
        "id": "e40ab33bb0e959e80c5c1b4504d47ca32bf493face7475c4ab80d27fac8d1ce9",
        "question": "What are the names of artist who have the letter 'a' in their names?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Artist ] Predicate [ Name like '%a%' ] Output [ Name ]"
    },
    {
        "id": "3c0ad34c1d145c2788c615b2dad2d75c4242e5022d327f6be55b6987595ed457",
        "question": "Find the title of all the albums of the artist \"AC/DC\".",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Artist ] Predicate [ Name = 'AC/DC' ] Output [ ArtistId , Name ] ; #2 = Scan Table [ Album ] Output [ ArtistId , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ArtistId = #2.ArtistId ] Output [ #2.Title ]"
    },
    {
        "id": "56ee2463c799b98970d18e5cd0b77d53aef951711cc506d2e47a4ed5ebd681fd",
        "question": "What are the titles of albums by the artist \"AC/DC\"?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Artist ] Predicate [ Name = 'AC/DC' ] Output [ ArtistId , Name ] ; #2 = Scan Table [ Album ] Output [ ArtistId , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ArtistId = #2.ArtistId ] Output [ #2.Title ]"
    },
    {
        "id": "8ee78eeb16f8f3024d5ac1cf4fac75215a876543e5f44426ba3690d91de5f50a",
        "question": "Hom many albums does the artist \"Metallica\" have?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Artist ] Predicate [ Name = 'Metallica' ] Output [ ArtistId , Name ] ; #2 = Scan Table [ Album ] Output [ ArtistId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ArtistId = #2.ArtistId ] Output [ #1.Name , #1.ArtistId ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9dff98bdfabe57de0e538680719c0c850ad7fbbe204f245bb0446eaaebb45f13",
        "question": "Find the number of albums by the artist \"Metallica\".",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Artist ] Predicate [ Name = 'Metallica' ] Output [ ArtistId , Name ] ; #2 = Scan Table [ Album ] Output [ ArtistId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ArtistId = #2.ArtistId ] Output [ #1.Name , #1.ArtistId ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b27c7eab7e057c6441d863ae89eaae5f63976b0f659d1f5de7b246f275965aec",
        "question": "Which artist does the album \"Balls to the Wall\" belong to?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Album ] Predicate [ Title = 'Balls to the Wall' ] Output [ ArtistId , Title ] ; #2 = Scan Table [ Artist ] Output [ ArtistId , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ArtistId = #2.ArtistId ] Output [ #2.Name ]"
    },
    {
        "id": "ac26b106ad718b210864c4afee6139f1902f1f402e814f132bf62ab92ecc2ec0",
        "question": "Find the name of the artist who made the album \"Balls to the Wall\".",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Album ] Predicate [ Title = 'Balls to the Wall' ] Output [ ArtistId , Title ] ; #2 = Scan Table [ Artist ] Output [ ArtistId , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ArtistId = #2.ArtistId ] Output [ #2.Name ]"
    },
    {
        "id": "32e39b77b783cc0fe9e36e5768a437e6fc1fbae4e725d3578d19c7d92e0c3e7d",
        "question": "Which artist has the most albums?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Artist ] Output [ ArtistId , Name ] ; #2 = Scan Table [ Album ] Output [ ArtistId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ArtistId = #2.ArtistId ] Output [ #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]"
    },
    {
        "id": "c78c9fc6a53e98d6b24d9502056abc7f47c1906d1ae2447bc5a7ca3080d6786e",
        "question": "What is the name of the artist with the greatest number of albums?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Artist ] Output [ ArtistId , Name ] ; #2 = Scan Table [ Album ] Output [ ArtistId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ArtistId = #2.ArtistId ] Output [ #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]"
    },
    {
        "id": "e2d3b6833b25347794e41b991b99d8161d309f471d27a3506180acc590d2230d",
        "question": "Find the names of all the tracks that contain the word \"you\".",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Track ] Predicate [ Name like '%you%' ] Output [ Name ]"
    },
    {
        "id": "8692db643c580bdf2bd42e089e18e5559e4f3c99eea5442738b2266073e59e67",
        "question": "What are the names of tracks that contain the the word you in them?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Track ] Predicate [ Name like '%you%' ] Output [ Name ]"
    },
    {
        "id": "c01bd726e885e9664d80c091dc7479a2868cec9d6d362e5ddbb5fe9f90e0fb95",
        "question": "What is the average unit price of all the tracks?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Track ] Output [ UnitPrice ] ; #2 = Aggregate [ #1 ] Output [ AVG(UnitPrice) AS Avg_UnitPrice ]"
    },
    {
        "id": "b3723843539ce7f581f92789676ea55e80a8d3922a235132fc949c1792358095",
        "question": "Find the average unit price for a track.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Track ] Output [ UnitPrice ] ; #2 = Aggregate [ #1 ] Output [ AVG(UnitPrice) AS Avg_UnitPrice ]"
    },
    {
        "id": "b49bc0db109d83ced163a81b0148ca11066e3e28dfcf828c1a115ee59d33a24e",
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Track ] Output [ Milliseconds ] ; #2 = Aggregate [ #1 ] Output [ MAX(Milliseconds) AS Max_Milliseconds , MIN(Milliseconds) AS Min_Milliseconds ]"
    },
    {
        "id": "421d080d5fef6c2d88920187b929dffc384d1254b071e8e337892137b5f85d35",
        "question": "Find the maximum and minimum durations of tracks in milliseconds.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Track ] Output [ Milliseconds ] ; #2 = Aggregate [ #1 ] Output [ MAX(Milliseconds) AS Max_Milliseconds , MIN(Milliseconds) AS Min_Milliseconds ]"
    },
    {
        "id": "c5e54d735c8d27f3215433670de39b2d9d75f30674220652761a931f8a3b18a1",
        "question": "Show the album names, ids and the number of tracks for each album.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Album ] Output [ Title , AlbumId ] ; #2 = Scan Table [ Track ] Output [ AlbumId ] ; #3 = Aggregate [ #2 ] GroupBy [ AlbumId ] Output [ countstar AS Count_Star , AlbumId ] ; #4 = Join [ #1 , #3 ] Predicate [ #1.AlbumId = #3.AlbumId ] Output [ #1.Title , #3.Count_Star , #3.AlbumId ]"
    },
    {
        "id": "45e089ecf7d95661f0b395b6463a548a760398503e3dc9f6cf21136e972ea284",
        "question": "What are the names and ids of the different albums, and how many tracks are on each?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Album ] Output [ Title , AlbumId ] ; #2 = Scan Table [ Track ] Output [ AlbumId ] ; #3 = Aggregate [ #2 ] GroupBy [ AlbumId ] Output [ countstar AS Count_Star , AlbumId ] ; #4 = Join [ #1 , #3 ] Predicate [ #1.AlbumId = #3.AlbumId ] Output [ #1.Title , #3.Count_Star , #3.AlbumId ]"
    },
    {
        "id": "3e38aeeb36193375c2fcc9deaf4ce8bec4d4a8475fa77e93aaafb78e7c789aed",
        "question": "What is the name of the most common genre in all tracks?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Track ] Output [ GenreId ] ; #2 = Aggregate [ #1 ] GroupBy [ GenreId ] Output [ countstar AS Count_Star , GenreId ] ; #3 = Scan Table [ Genre ] Output [ GenreId , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.GenreId = #3.GenreId ] Output [ #3.Name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]"
    },
    {
        "id": "75862559cbffe701fdecf742909bebebb19cb05426d1ebb31db1a63799af8fbb",
        "question": "Find the name of the genre that is most frequent across all tracks.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Track ] Output [ GenreId ] ; #2 = Aggregate [ #1 ] GroupBy [ GenreId ] Output [ countstar AS Count_Star , GenreId ] ; #3 = Scan Table [ Genre ] Output [ GenreId , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.GenreId = #3.GenreId ] Output [ #3.Name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]"
    },
    {
        "id": "82cb82b77fb8a71c94aaf93f1722027713d964efa0892f9b4e7592a7ca9dc58f",
        "question": "What is the least common media type in all tracks?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Track ] Output [ MediaTypeId ] ; #2 = Aggregate [ #1 ] GroupBy [ MediaTypeId ] Output [ countstar AS Count_Star , MediaTypeId ] ; #3 = Scan Table [ MediaType ] Output [ MediaTypeId , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.MediaTypeId = #3.MediaTypeId ] Output [ #3.Name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Name ]"
    },
    {
        "id": "739bc035154de6e6d0a598e55516c30536c171764caa19a203e987a8cc80c93f",
        "question": "What is the name of the media type that is least common across all tracks?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Track ] Output [ MediaTypeId ] ; #2 = Aggregate [ #1 ] GroupBy [ MediaTypeId ] Output [ countstar AS Count_Star , MediaTypeId ] ; #3 = Scan Table [ MediaType ] Output [ MediaTypeId , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.MediaTypeId = #3.MediaTypeId ] Output [ #3.Name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Name ]"
    },
    {
        "id": "012d9d0caa73bcb36628b2cb1982fca616ffdce7b3e25eeecdccb9438ef272d0",
        "question": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Track ] Predicate [ UnitPrice > 1.0 ] Output [ UnitPrice , AlbumId ] ; #2 = Scan Table [ Album ] Output [ Title , AlbumId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.AlbumId = #2.AlbumId ] Distinct [ true ] Output [ #1.AlbumId , #2.Title ]"
    },
    {
        "id": "9f23d0654536340243553e82d277d0eff2d52670fe48c85349b97f8ecc73fcda",
        "question": "What are the titles and ids for albums containing tracks with unit price greater than 1?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Track ] Predicate [ UnitPrice > 1.0 ] Output [ UnitPrice , AlbumId ] ; #2 = Scan Table [ Album ] Output [ Title , AlbumId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.AlbumId = #2.AlbumId ] Distinct [ true ] Output [ #1.AlbumId , #2.Title ]"
    },
    {
        "id": "f7eec174b193dc193e2868618421bb0c7ad2feaf43764d2bb64a4a7e2bcbd51a",
        "question": "How many tracks belong to rock genre?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Genre ] Predicate [ Name = 'Rock' ] Output [ GenreId , Name ] ; #2 = Scan Table [ Track ] Output [ GenreId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.GenreId = #2.GenreId ] Output [ #1.Name , #1.GenreId ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "fbd690cd26256e94aa18d2f48260fce813d96492f9ce0d28b4237580cb02ced0",
        "question": "Count the number of tracks that are part of the rock genre.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Genre ] Predicate [ Name = 'Rock' ] Output [ GenreId , Name ] ; #2 = Scan Table [ Track ] Output [ GenreId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.GenreId = #2.GenreId ] Output [ #1.Name , #1.GenreId ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cdeae4cde76c8f6d41731980b1e8ceb45e30c533501e53785c0060cfcecdaf74",
        "question": "What is the average unit price of tracks that belong to Jazz genre?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Genre ] Predicate [ Name = 'Jazz' ] Output [ GenreId , Name ] ; #2 = Scan Table [ Track ] Output [ GenreId , UnitPrice ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.GenreId = #2.GenreId ] Output [ #2.UnitPrice ] ; #4 = Aggregate [ #3 ] Output [ AVG(UnitPrice) AS Avg_UnitPrice ]"
    },
    {
        "id": "8b3d56cffa9f29243bcb0402e9a93c983cbf16258a07afc3f44c73eff2855c2e",
        "question": "Find the average unit price of jazz tracks.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Genre ] Predicate [ Name = 'Jazz' ] Output [ GenreId , Name ] ; #2 = Scan Table [ Track ] Output [ GenreId , UnitPrice ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.GenreId = #2.GenreId ] Output [ #2.UnitPrice ] ; #4 = Aggregate [ #3 ] Output [ AVG(UnitPrice) AS Avg_UnitPrice ]"
    },
    {
        "id": "d2f0ad44e384dde31829173b4df544193f7c1d67bbc7f659693b7c7d2dff9fcd",
        "question": "What is the first name and last name employee helps the customer with first name Leonie?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Customer ] Predicate [ FirstName = 'Leonie' ] Output [ FirstName , SupportRepId ] ; #2 = Scan Table [ Employee ] Output [ EmployeeId , LastName , FirstName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SupportRepId = #2.EmployeeId ] Output [ #2.FirstName , #2.LastName ]"
    },
    {
        "id": "282bfb20024682a4e75db49f1fb0ae1f91086ec1bf6317b0f541299272d50073",
        "question": "Find the full names of employees who help customers with the first name Leonie.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Customer ] Predicate [ FirstName = 'Leonie' ] Output [ FirstName , SupportRepId ] ; #2 = Scan Table [ Employee ] Output [ EmployeeId , LastName , FirstName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SupportRepId = #2.EmployeeId ] Output [ #2.FirstName , #2.LastName ]"
    },
    {
        "id": "2d347a21731c9708f4fccd994155dd339c2e4d98429540248f6c5066ee732a4a",
        "question": "What city does the employee who helps the customer with postal code 70174 live in?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Customer ] Predicate [ PostalCode = '70174' ] Output [ PostalCode , SupportRepId ] ; #2 = Scan Table [ Employee ] Output [ EmployeeId , City ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SupportRepId = #2.EmployeeId ] Output [ #2.City ]"
    },
    {
        "id": "99539deeca3db176f65dd7b13697ef938c817c590a4f916a007fae9e4a30789d",
        "question": "Find the cities corresponding to employees who help customers with the postal code 70174.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Customer ] Predicate [ PostalCode = '70174' ] Output [ PostalCode , SupportRepId ] ; #2 = Scan Table [ Employee ] Output [ EmployeeId , City ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SupportRepId = #2.EmployeeId ] Output [ #2.City ]"
    },
    {
        "id": "4138d87acbac688bf2dbdcbe19b2a2584db59b7c3f20777ac8a94eb392f3a4b4",
        "question": "How many distinct cities does the employees live in?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Employee ] Distinct [ true ] Output [ City ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT City) AS Count_Dist_City ]"
    },
    {
        "id": "c0961188ad281a15437418a5c8f6822f2da8b53140923066310aca861ceffef3",
        "question": "Find the number of different cities that employees live in.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Employee ] Distinct [ true ] Output [ City ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT City) AS Count_Dist_City ]"
    },
    {
        "id": "26fc1c0de60f4f1815d3b6018649e05e21d343ca882acb0af30b500fe31656cf",
        "question": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Customer ] Predicate [ FirstName = 'Astrid' AND LastName = 'Gruber' ] Output [ CustomerId , LastName , FirstName ] ; #2 = Scan Table [ Invoice ] Output [ CustomerId , InvoiceDate ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CustomerId = #2.CustomerId ] Output [ #2.InvoiceDate ]"
    },
    {
        "id": "e501b500f93a50b4da49426c7e79e266b8d83e4808499765d4cba62e2e4d6058",
        "question": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Customer ] Predicate [ FirstName = 'Astrid' AND LastName = 'Gruber' ] Output [ CustomerId , LastName , FirstName ] ; #2 = Scan Table [ Invoice ] Output [ CustomerId , InvoiceDate ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CustomerId = #2.CustomerId ] Output [ #2.InvoiceDate ]"
    },
    {
        "id": "930e2084a128f72828e28fe6f51ca46d406a35302014b9d360005ac27d6c6903",
        "question": "Find all the customer last names that do not have invoice totals larger than 20.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Customer ] Distinct [ true ] Output [ LastName ] ; #2 = Scan Table [ Invoice ] Predicate [ Total > 20.0 ] Output [ CustomerId , Total ] ; #3 = Scan Table [ Customer ] Output [ CustomerId , LastName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.CustomerId = #3.CustomerId ] Output [ #3.LastName ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.LastName = #4.LastName ] Output [ #1.LastName ]"
    },
    {
        "id": "6bcfcc6bd061d8be3b59ad63830658b68da408bed39b773326e8ac0014cbd737",
        "question": "What are the last names of customers without invoice totals exceeding 20?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Customer ] Distinct [ true ] Output [ LastName ] ; #2 = Scan Table [ Invoice ] Predicate [ Total > 20.0 ] Output [ CustomerId , Total ] ; #3 = Scan Table [ Customer ] Output [ CustomerId , LastName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.CustomerId = #3.CustomerId ] Output [ #3.LastName ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.LastName = #4.LastName ] Output [ #1.LastName ]"
    },
    {
        "id": "5fb3d06e0250590311a1186fcb55b963607cd8b117ae0f400c8aaeb8c9835a55",
        "question": "Find the first names of all customers that live in Brazil and have an invoice.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Customer ] Predicate [ Country = 'Brazil' ] Output [ CustomerId , Country , FirstName ] ; #2 = Scan Table [ Invoice ] Output [ CustomerId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CustomerId = #2.CustomerId ] Distinct [ true ] Output [ #1.FirstName ]"
    },
    {
        "id": "b73d2a0a3449da2bb09ef709d2d61e79e9d774fd895e7bd1d510ad8109867a67",
        "question": "What are the different first names for customers from Brazil who have also had an invoice?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Customer ] Predicate [ Country = 'Brazil' ] Output [ CustomerId , Country , FirstName ] ; #2 = Scan Table [ Invoice ] Output [ CustomerId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CustomerId = #2.CustomerId ] Distinct [ true ] Output [ #1.FirstName ]"
    },
    {
        "id": "5a33f0672bff5e317d1d7b29948c3c9ac691598d0bff898e13d4a6032703beba",
        "question": "Find the address of all customers that live in Germany and have invoice.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Customer ] Predicate [ Country = 'Germany' ] Output [ CustomerId , Country , Address ] ; #2 = Scan Table [ Invoice ] Output [ CustomerId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CustomerId = #2.CustomerId ] Distinct [ true ] Output [ #1.Address ]"
    },
    {
        "id": "883802753671108381036d06860cd5bbe3a731ad6d555766501c1350efffca92",
        "question": "What are the addresses of customers living in Germany who have had an invoice?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Customer ] Predicate [ Country = 'Germany' ] Output [ CustomerId , Country , Address ] ; #2 = Scan Table [ Invoice ] Output [ CustomerId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CustomerId = #2.CustomerId ] Distinct [ true ] Output [ #1.Address ]"
    },
    {
        "id": "e384c3d6792efc56282e7ae172217dde3dad86a08cdb0c380ec5bc8dfeb9bd8c",
        "question": "List the phone numbers of all employees.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Employee ] Output [ Phone ]"
    },
    {
        "id": "4a7fde872c57bbb44108301a39e0849c6bfa98eb1585827fd256201a7059518c",
        "question": "What are the phone numbers for each employee?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Employee ] Output [ Phone ]"
    },
    {
        "id": "6c3fc5207b7ed9b8ab3d4f39b5839397c89fde65382a684cf1c02b09c570f0e3",
        "question": "How many tracks are in the AAC audio file media type?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ MediaType ] Predicate [ Name = 'AAC audio file' ] Output [ MediaTypeId , Name ] ; #2 = Scan Table [ Track ] Output [ MediaTypeId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.MediaTypeId = #2.MediaTypeId ] Output [ #1.MediaTypeId , #1.Name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2ecc4b977b000ce8898b49dad656ef7534687b311e80a9b5d979482a143c77eb",
        "question": "Count the number of tracks that are of the media type \"AAC audio file\".",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ MediaType ] Predicate [ Name = 'AAC audio file' ] Output [ MediaTypeId , Name ] ; #2 = Scan Table [ Track ] Output [ MediaTypeId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.MediaTypeId = #2.MediaTypeId ] Output [ #1.MediaTypeId , #1.Name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "46191c987297ce4aa7254f88cd2f8b201558b8f2aa9f0db316d1788ecd472b3b",
        "question": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Genre ] Predicate [ Name = 'Latin' OR Name = 'Pop' ] Output [ GenreId , Name ] ; #2 = Scan Table [ Track ] Output [ GenreId , Milliseconds ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.GenreId = #2.GenreId ] Output [ #2.Milliseconds ] ; #4 = Aggregate [ #3 ] Output [ AVG(Milliseconds) AS Avg_Milliseconds ]"
    },
    {
        "id": "32c177d301d9c334b309e578f9d19e107891d8489f57a876700ade68cc33e21c",
        "question": "Find the average millisecond length of Latin and Pop tracks.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Genre ] Predicate [ Name = 'Latin' OR Name = 'Pop' ] Output [ GenreId , Name ] ; #2 = Scan Table [ Track ] Output [ GenreId , Milliseconds ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.GenreId = #2.GenreId ] Output [ #2.Milliseconds ] ; #4 = Aggregate [ #3 ] Output [ AVG(Milliseconds) AS Avg_Milliseconds ]"
    },
    {
        "id": "76009ea15cd524cce49c67f341ffff5a7269731e326daa347122b96fe04ea391",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Employee ] Output [ EmployeeId ] ; #2 = Scan Table [ Customer ] Output [ LastName , SupportRepId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeId = #2.SupportRepId ] Output [ #2.LastName , #2.SupportRepId ] ; #4 = Aggregate [ #3 ] GroupBy [ SupportRepId , LastName ] Output [ countstar AS Count_Star , LastName ] ; #5 = Filter [ #4 ] Predicate [ Count_Star <= 20 ] Output [ LastName ]"
    },
    {
        "id": "fa985f49ff8092fc1169b1903c92d8b5d12665822a9a13759618cecb5f89c618",
        "question": "What are the last names of employees who serve at most 20 customers?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Employee ] Output [ EmployeeId ] ; #2 = Scan Table [ Customer ] Output [ LastName , SupportRepId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeId = #2.SupportRepId ] Output [ #2.LastName , #2.SupportRepId ] ; #4 = Aggregate [ #3 ] GroupBy [ SupportRepId , LastName ] Output [ countstar AS Count_Star , LastName ] ; #5 = Filter [ #4 ] Predicate [ Count_Star <= 20 ] Output [ LastName ]"
    },
    {
        "id": "a37da397f778b8cee6d386675ca52de4fb5bcb4d2083466ac265b9d5d293134b",
        "question": "Please list all album titles in alphabetical order.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Album ] Output [ Title ] ; #2 = Sort [ #1 ] OrderBy [ Title ASC ] Output [ Title ]"
    },
    {
        "id": "97aa362386677108f5d753e202b7063fd0d92d456edf34c7c0825c63d08220d1",
        "question": "What are all the album titles, in alphabetical order?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Album ] Output [ Title ] ; #2 = Sort [ #1 ] OrderBy [ Title ASC ] Output [ Title ]"
    },
    {
        "id": "6a5f856e3ce46673fdae607a4ff6265b4df44083e90bbbe03b0fd373b7b47313",
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Album ] Output [ ArtistId ] ; #2 = Aggregate [ #1 ] GroupBy [ ArtistId ] Output [ countstar AS Count_Star , ArtistId ] ; #3 = Scan Table [ Artist ] Output [ ArtistId , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ArtistId = #3.ArtistId ] Output [ #2.ArtistId , #3.Name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ ArtistId , Name ] ; #6 = Sort [ #5 ] OrderBy [ Name ASC ] Output [ ArtistId , Name ]"
    },
    {
        "id": "e91c59373674dc24eb4435166f6e284dd2af3f752539a35fdee89cbcf66aa151",
        "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Album ] Output [ ArtistId ] ; #2 = Aggregate [ #1 ] GroupBy [ ArtistId ] Output [ countstar AS Count_Star , ArtistId ] ; #3 = Scan Table [ Artist ] Output [ ArtistId , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ArtistId = #3.ArtistId ] Output [ #2.ArtistId , #3.Name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ ArtistId , Name ] ; #6 = Sort [ #5 ] OrderBy [ Name ASC ] Output [ ArtistId , Name ]"
    },
    {
        "id": "b78eff5b5a36951a120e4ec6924c2cc542a279596236a2db5df2057c2b4e5dd0",
        "question": "Find the names of artists that do not have any albums.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Artist ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ Artist ] Output [ ArtistId , Name ] ; #3 = Scan Table [ Album ] Output [ ArtistId ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ArtistId = #3.ArtistId ] Output [ #2.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Name ]"
    },
    {
        "id": "277ec6d4ff1466165c2ac0be86fefa249c4452d54d9d309fc982d8a8f74b2c17",
        "question": "What are the names of artists who have not released any albums?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Artist ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ Artist ] Output [ ArtistId , Name ] ; #3 = Scan Table [ Album ] Output [ ArtistId ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ArtistId = #3.ArtistId ] Output [ #2.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Name ]"
    },
    {
        "id": "b290db853a089991bfd4b2ab1702a5c47dddceaa6074ab4fa2e15784aff97822",
        "question": "What is the average unit price of rock tracks?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Genre ] Predicate [ Name = 'Rock' ] Output [ GenreId , Name ] ; #2 = Scan Table [ Track ] Output [ GenreId , UnitPrice ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.GenreId = #2.GenreId ] Output [ #2.UnitPrice ] ; #4 = Aggregate [ #3 ] Output [ AVG(UnitPrice) AS Avg_UnitPrice ]"
    },
    {
        "id": "5804990306585b9b7d53a021e84dfd91d584d1735af469e71e0a073b66fedaa9",
        "question": "Find the average unit price of tracks from the Rock genre.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Genre ] Predicate [ Name = 'Rock' ] Output [ GenreId , Name ] ; #2 = Scan Table [ Track ] Output [ GenreId , UnitPrice ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.GenreId = #2.GenreId ] Output [ #2.UnitPrice ] ; #4 = Aggregate [ #3 ] Output [ AVG(UnitPrice) AS Avg_UnitPrice ]"
    },
    {
        "id": "5949a71c19001889f11414ea264d7bddfaa007c5b274762f559850cb7ef948cb",
        "question": "What are the duration of the longest and shortest pop tracks in milliseconds?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Genre ] Predicate [ Name = 'Pop' ] Output [ GenreId , Name ] ; #2 = Scan Table [ Track ] Output [ GenreId , Milliseconds ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.GenreId = #2.GenreId ] Output [ #2.Milliseconds ] ; #4 = Aggregate [ #3 ] Output [ MAX(Milliseconds) AS Max_Milliseconds , MIN(Milliseconds) AS Min_Milliseconds ]"
    },
    {
        "id": "3b7f5276c36187d139ac3f3703507773b5b0affbe01aa0c0ee3f1d5b2480af4a",
        "question": "Find the maximum and minimum millisecond lengths of pop tracks.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Genre ] Predicate [ Name = 'Pop' ] Output [ GenreId , Name ] ; #2 = Scan Table [ Track ] Output [ GenreId , Milliseconds ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.GenreId = #2.GenreId ] Output [ #2.Milliseconds ] ; #4 = Aggregate [ #3 ] Output [ MAX(Milliseconds) AS Max_Milliseconds , MIN(Milliseconds) AS Min_Milliseconds ]"
    },
    {
        "id": "6dc9d48a7ece1aa3887338f84618dc18107cc9e845a7164ce4d8f6dc9d1b2cdb",
        "question": "What are the birth dates of employees living in Edmonton?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Employee ] Predicate [ City = 'Edmonton' ] Output [ BirthDate , City ]"
    },
    {
        "id": "be5e71b9a831c4d2c765389317581115aa6bd55457eda585b4402d71f71090ec",
        "question": "Find the birth dates corresponding to employees who live in the city of Edmonton.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Employee ] Predicate [ City = 'Edmonton' ] Output [ BirthDate , City ]"
    },
    {
        "id": "beaac31ad5a0c8cb23b51f230b4d64416b75f2f2bb2eea778e0437dd12f75d3d",
        "question": "What are the distinct unit prices of all tracks?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Track ] Distinct [ true ] Output [ UnitPrice ]"
    },
    {
        "id": "1d3a73b441a36aff17810d10c238294b98f367521f02bfdeb526b0dafc07b9be",
        "question": "Find the distinct unit prices for tracks.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Track ] Distinct [ true ] Output [ UnitPrice ]"
    },
    {
        "id": "4f6201f5fdffa733ef08f97826db7b05764eb3159a94784fdd9e223229e564e7",
        "question": "How many artists do not have any album?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Artist ] Output [ ArtistId ] ; #2 = Scan Table [ Album ] Output [ ArtistId ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.ArtistId = #2.ArtistId ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0e4a3b9338bf820251e6ae2da15849196df714a0bfc25b699c87dbdda1261c30",
        "question": "Cound the number of artists who have not released an album.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Artist ] Output [ ArtistId ] ; #2 = Scan Table [ Album ] Output [ ArtistId ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.ArtistId = #2.ArtistId ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6f84fd37392fec97352b85b97d1c2185c84dc9434348e5db8b7ede40182c9773",
        "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Genre ] Predicate [ Name = 'Reggae' ] Output [ GenreId , Name ] ; #2 = Scan Table [ Track ] Output [ GenreId , AlbumId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.GenreId = #2.GenreId ] Output [ #2.AlbumId ] ; #4 = Scan Table [ Album ] Output [ Title , AlbumId ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.AlbumId = #4.AlbumId ] Distinct [ true ] Output [ #4.Title ] ; #6 = Scan Table [ Genre ] Predicate [ Name = 'Rock' ] Output [ GenreId , Name ] ; #7 = Scan Table [ Track ] Output [ GenreId , AlbumId ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.GenreId = #7.GenreId ] Output [ #7.AlbumId ] ; #9 = Scan Table [ Album ] Output [ Title , AlbumId ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.AlbumId = #9.AlbumId ] Output [ #9.Title ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.Title = #10.Title ] Output [ #5.Title ]"
    },
    {
        "id": "0680857cf42466c0b07c41f150108610e65d489303fb1c79422f375de5e799ab",
        "question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.",
        "parsing_tree": "chinook_1 | #1 = Scan Table [ Genre ] Predicate [ Name = 'Reggae' ] Output [ GenreId , Name ] ; #2 = Scan Table [ Track ] Output [ GenreId , AlbumId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.GenreId = #2.GenreId ] Output [ #2.AlbumId ] ; #4 = Scan Table [ Album ] Output [ Title , AlbumId ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.AlbumId = #4.AlbumId ] Distinct [ true ] Output [ #4.Title ] ; #6 = Scan Table [ Genre ] Predicate [ Name = 'Rock' ] Output [ GenreId , Name ] ; #7 = Scan Table [ Track ] Output [ GenreId , AlbumId ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.GenreId = #7.GenreId ] Output [ #7.AlbumId ] ; #9 = Scan Table [ Album ] Output [ Title , AlbumId ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.AlbumId = #9.AlbumId ] Output [ #9.Title ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.Title = #10.Title ] Output [ #5.Title ]"
    },
    {
        "id": "67d43cb30fd68488cf5094906abd2da25861752449c0e5b8831871b1f2c5e26c",
        "question": "Find all the phone numbers.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Available_Policies ] Output [ Customer_Phone ]"
    },
    {
        "id": "2d36cb5778b0b5d81e769c63cac68a83bca3a8298c7ce15a1b336828752d6030",
        "question": "What are all the phone numbers?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Available_Policies ] Output [ Customer_Phone ]"
    },
    {
        "id": "f8b01842dd746f56c88b13339f6c33146ca8f2fd5d92a684af084ee6b4b4ba0a",
        "question": "What are the customer phone numbers under the policy \"Life Insurance\"?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Available_Policies ] Predicate [ policy_type_code = 'Life Insurance' ] Output [ Customer_Phone , policy_type_code ]"
    },
    {
        "id": "ce5be11842858e2f32b3e233eae2531d7199e8edea1686325577681e2ee6aaeb",
        "question": "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Available_Policies ] Predicate [ policy_type_code = 'Life Insurance' ] Output [ Customer_Phone , policy_type_code ]"
    },
    {
        "id": "1cadea2d18864b4828ccb3e4cfc5f979ccd28f169b0bb505a186215a7570f500",
        "question": "Which policy type has the most records in the database?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Available_Policies ] Output [ policy_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ policy_type_code ] Output [ countstar AS Count_Star , policy_type_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , policy_type_code ]"
    },
    {
        "id": "f15648000bb4887ccb39619b2eedeb8dde24a66b830e92cb023313f1516e8715",
        "question": "Which policy type appears most frequently in the available policies?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Available_Policies ] Output [ policy_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ policy_type_code ] Output [ countstar AS Count_Star , policy_type_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , policy_type_code ]"
    },
    {
        "id": "83996c161501bec8d7c226573eca0e468c2fe6be24cc1fb16ec68e6496c7189b",
        "question": "What are all the customer phone numbers under the most popular policy type?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Available_Policies ] Output [ policy_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ policy_type_code ] Output [ countstar AS Count_Star , policy_type_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , policy_type_code ] ; #4 = Scan Table [ Available_Policies ] Output [ Customer_Phone , policy_type_code ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.policy_type_code = #4.policy_type_code ] Output [ #4.Customer_Phone ]"
    },
    {
        "id": "c2fa007d5cc2139a1ba6ddd58c3f0289cc886e75fd33206e475f0d87a5b8123a",
        "question": "Find the phone numbers of customers using the most common policy type among the available policies.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Available_Policies ] Output [ policy_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ policy_type_code ] Output [ countstar AS Count_Star , policy_type_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , policy_type_code ] ; #4 = Scan Table [ Available_Policies ] Output [ Customer_Phone , policy_type_code ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.policy_type_code = #4.policy_type_code ] Output [ #4.Customer_Phone ]"
    },
    {
        "id": "e2be1255024ecaa44fdc85004b7036ae3848003f006de340d270b7d230131025",
        "question": "Find the policy type used by more than 4 customers.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Available_Policies ] Output [ policy_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ policy_type_code ] Output [ countstar AS Count_Star , policy_type_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 4 ] Output [ policy_type_code ]"
    },
    {
        "id": "918a4d24ebf7ed1935af96e988deae6239bdd42a684d9c3be1c9d127fa1bf9dd",
        "question": "Find the policy types more than 4 customers use. Show their type code.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Available_Policies ] Output [ policy_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ policy_type_code ] Output [ countstar AS Count_Star , policy_type_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 4 ] Output [ policy_type_code ]"
    },
    {
        "id": "ca9cc9c7bbc633af808974cccf3bd8cbabb39a49e8fad56bff121ec6a78f1a25",
        "question": "Find the total and average amount of settlements.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Settlements ] Output [ Settlement_Amount ] ; #2 = Aggregate [ #1 ] Output [ AVG(Settlement_Amount) AS Avg_Settlement_Amount , SUM(Settlement_Amount) AS Sum_Settlement_Amount ]"
    },
    {
        "id": "48681fa450b8cc95aee1ae046d2e564b038f1672dc72b9fd8ac78b00838ab247",
        "question": "Return the sum and average of all settlement amounts.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Settlements ] Output [ Settlement_Amount ] ; #2 = Aggregate [ #1 ] Output [ AVG(Settlement_Amount) AS Avg_Settlement_Amount , SUM(Settlement_Amount) AS Sum_Settlement_Amount ]"
    },
    {
        "id": "597b806fe8e8fb5523db09119d1ce8225d7d8ab42ed8ec349c1d1ae54727d4dc",
        "question": "Find the name of services that have been used for more than 2 times in first notification of loss.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ First_Notification_of_Loss ] Output [ Service_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Service_ID ] Output [ countstar AS Count_Star , Service_ID ] ; #3 = Scan Table [ Services ] Output [ Service_name , Service_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Service_ID = #3.Service_ID ] Output [ #3.Service_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ Service_name ]"
    },
    {
        "id": "41acaba9276cdbc44e20d6cd78381d68d9101143475f88355df3a92fc75de3df",
        "question": "Which services have been used more than twice in first notification of loss? Return the service name.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ First_Notification_of_Loss ] Output [ Service_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Service_ID ] Output [ countstar AS Count_Star , Service_ID ] ; #3 = Scan Table [ Services ] Output [ Service_name , Service_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Service_ID = #3.Service_ID ] Output [ #3.Service_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ Service_name ]"
    },
    {
        "id": "a9d60d34fd7b73e0c2fd8df5d5c049e88f3e8b04b590aba57792d66c14082152",
        "question": "What is the effective date of the claim that has the largest amount of total settlement?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Claims ] Output [ Effective_Date , Claim_ID ] ; #2 = Scan Table [ Settlements ] Output [ Settlement_Amount , Claim_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Claim_ID ] Output [ Claim_ID , SUM(Settlement_Amount) AS Sum_Settlement_Amount ] ; #4 = Join [ #1 , #3 ] Predicate [ #1.Claim_ID = #3.Claim_ID ] Output [ #1.Effective_Date , #3.Sum_Settlement_Amount ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_Settlement_Amount DESC ] Output [ Sum_Settlement_Amount , Effective_Date ]"
    },
    {
        "id": "955185a994dad8743f27241a13b778d87892ce35d8d14a41083c9bbef34d2531",
        "question": "Find the claim that has the largest total settlement amount. Return the effective date of the claim.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Claims ] Output [ Effective_Date , Claim_ID ] ; #2 = Scan Table [ Settlements ] Output [ Settlement_Amount , Claim_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Claim_ID ] Output [ Claim_ID , SUM(Settlement_Amount) AS Sum_Settlement_Amount ] ; #4 = Join [ #1 , #3 ] Predicate [ #1.Claim_ID = #3.Claim_ID ] Output [ #1.Effective_Date , #3.Sum_Settlement_Amount ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_Settlement_Amount DESC ] Output [ Sum_Settlement_Amount , Effective_Date ]"
    },
    {
        "id": "a1d4645988d263c15f3d0079ed13e821d84277eb4bb269f4f246554bafe7bee8",
        "question": "How many policies are listed for the customer named \"Dayana Robel\"?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Customers ] Predicate [ Customer_name = 'Dayana Robel' ] Output [ Customer_ID , Customer_name ] ; #2 = Scan Table [ Customers_Policies ] Output [ Customer_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #1.Customer_ID , #1.Customer_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a1deed5d77aec27a692373083df04f11fa7fa4b23c4d4ce9329cf5e6efb8b94f",
        "question": "Count the total number of policies used by the customer named \"Dayana Robel\".",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Customers ] Predicate [ Customer_name = 'Dayana Robel' ] Output [ Customer_ID , Customer_name ] ; #2 = Scan Table [ Customers_Policies ] Output [ Customer_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #1.Customer_ID , #1.Customer_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e8f1b246574396c02f7e1564d1a7b2e14f112a876e691fbbbad33d81d2c389dd",
        "question": "What is the name of the customer who has the most policies listed?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Customers_Policies ] Output [ Customer_ID ] ; #2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_name ] ; #4 = Aggregate [ #3 ] GroupBy [ Customer_name ] Output [ countstar AS Count_Star , Customer_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Customer_name ]"
    },
    {
        "id": "e82552d7ec9b69133572de1267c3f952370c215bf81e4caf716e56509351aaff",
        "question": "Which customer uses the most policies? Give me the customer name.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Customers_Policies ] Output [ Customer_ID ] ; #2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_name ] ; #4 = Aggregate [ #3 ] GroupBy [ Customer_name ] Output [ countstar AS Count_Star , Customer_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Customer_name ]"
    },
    {
        "id": "bd6fc1c3032a2695696b0c9ea8f0a9bc33dcd1c2547975bc2d44116c669d26d0",
        "question": "What are all the policy types of the customer named \"Dayana Robel\"?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Customers ] Predicate [ Customer_name = 'Dayana Robel' ] Output [ Customer_ID , Customer_name ] ; #2 = Scan Table [ Customers_Policies ] Output [ Policy_ID , Customer_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Policy_ID ] ; #4 = Scan Table [ Available_Policies ] Output [ Policy_ID , policy_type_code ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Policy_ID = #4.Policy_ID ] Distinct [ true ] Output [ #4.policy_type_code ]"
    },
    {
        "id": "fe2f4b5a8d3c50ce1fb9ecffb0c1ba1a28e92c73b7c57869ce23dddba33ab13e",
        "question": "Tell me the types of the policy used by the customer named \"Dayana Robel\".",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Customers ] Predicate [ Customer_name = 'Dayana Robel' ] Output [ Customer_ID , Customer_name ] ; #2 = Scan Table [ Customers_Policies ] Output [ Policy_ID , Customer_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Policy_ID ] ; #4 = Scan Table [ Available_Policies ] Output [ Policy_ID , policy_type_code ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Policy_ID = #4.Policy_ID ] Distinct [ true ] Output [ #4.policy_type_code ]"
    },
    {
        "id": "0ed82d0591baa84e90aedb6aa769a4bc432d2877643d7ae4a252384a056506cf",
        "question": "List all the services in the alphabetical order.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Services ] Output [ Service_name ] ; #2 = Sort [ #1 ] OrderBy [ Service_name ASC ] Output [ Service_name ]"
    },
    {
        "id": "9e5c5f363c08ac4f74fc080a17d2ed1a4fa03e2c14d3467bdcada89d5bcb6dd3",
        "question": "Give me a list of all the service names sorted alphabetically.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Services ] Output [ Service_name ] ; #2 = Sort [ #1 ] OrderBy [ Service_name ASC ] Output [ Service_name ]"
    },
    {
        "id": "9589eb2808b9dc3c3107f77517cfe8adeb02ee4f81ae409a8e133a285b578c9f",
        "question": "How many services are there?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Services ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2bc382d192395a72a8fc8034b5c46a911d5443edff70e4c7f730410e1aecce98",
        "question": "Count the total number of available services.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Services ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a48d33d4b74edffd642961e2bc3042ac79d5083839f424348cdf984129240865",
        "question": "Find the names of users who do not have a first notification of loss record.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ Customer_name ] ; #2 = Scan Table [ First_Notification_of_Loss ] Output [ Customer_ID ] ; #3 = Scan Table [ Customers ] Output [ Customer_ID , Customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Customer_ID = #3.Customer_ID ] Output [ #3.Customer_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Customer_name = #4.Customer_name ] Output [ #1.Customer_name ]"
    },
    {
        "id": "ea09284424841ff743174d26b3c653ec9cba20ffeec88a1c9877bffd326c3912",
        "question": "Which customers do not have a first notification of loss record? Give me the customer names.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ Customer_name ] ; #2 = Scan Table [ First_Notification_of_Loss ] Output [ Customer_ID ] ; #3 = Scan Table [ Customers ] Output [ Customer_ID , Customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Customer_ID = #3.Customer_ID ] Output [ #3.Customer_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Customer_name = #4.Customer_name ] Output [ #1.Customer_name ]"
    },
    {
        "id": "6d52d73c8accb62104a69ef5193d0db80f8eb24096921d010bbff77a08c22fdc",
        "question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Services ] Predicate [ Service_name = 'Close a policy' OR Service_name = 'Upgrade a policy' ] Output [ Service_name , Service_ID ] ; #2 = Scan Table [ First_Notification_of_Loss ] Output [ Customer_ID , Service_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Service_ID = #2.Service_ID ] Output [ #2.Customer_ID ] ; #4 = Scan Table [ Customers ] Output [ Customer_ID , Customer_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Customer_ID = #4.Customer_ID ] Output [ #4.Customer_name ]"
    },
    {
        "id": "daed1f92cb931d5e1d949bb5ee729aefe106667e5e06985c402b0ee7e6ba5a72",
        "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Services ] Predicate [ Service_name = 'Close a policy' OR Service_name = 'Upgrade a policy' ] Output [ Service_name , Service_ID ] ; #2 = Scan Table [ First_Notification_of_Loss ] Output [ Customer_ID , Service_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Service_ID = #2.Service_ID ] Output [ #2.Customer_ID ] ; #4 = Scan Table [ Customers ] Output [ Customer_ID , Customer_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Customer_ID = #4.Customer_ID ] Output [ #4.Customer_name ]"
    },
    {
        "id": "ceb8f7f9de42f85ff4f6596a5285563be075ad8d83e36a562849d788f865dbb4",
        "question": "Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Services ] Predicate [ Service_name = 'Close a policy' ] Output [ Service_name , Service_ID ] ; #2 = Scan Table [ First_Notification_of_Loss ] Output [ Customer_ID , Service_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Service_ID = #2.Service_ID ] Output [ #2.Customer_ID ] ; #4 = Scan Table [ Customers ] Output [ Customer_ID , Customer_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Customer_ID = #4.Customer_ID ] Distinct [ true ] Output [ #4.Customer_name ] ; #6 = Scan Table [ Services ] Predicate [ Service_name = 'New policy application' ] Output [ Service_name , Service_ID ] ; #7 = Scan Table [ First_Notification_of_Loss ] Output [ Customer_ID , Service_ID ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.Service_ID = #7.Service_ID ] Output [ #7.Customer_ID ] ; #9 = Scan Table [ Customers ] Output [ Customer_ID , Customer_name ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.Customer_ID = #9.Customer_ID ] Output [ #9.Customer_name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.Customer_name = #10.Customer_name ] Output [ #5.Customer_name ]"
    },
    {
        "id": "aee534800bd6c8e7ffc2f468ec60797ad814488ce17412d409d78477a14397dc",
        "question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Services ] Predicate [ Service_name = 'Close a policy' ] Output [ Service_name , Service_ID ] ; #2 = Scan Table [ First_Notification_of_Loss ] Output [ Customer_ID , Service_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Service_ID = #2.Service_ID ] Output [ #2.Customer_ID ] ; #4 = Scan Table [ Customers ] Output [ Customer_ID , Customer_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Customer_ID = #4.Customer_ID ] Distinct [ true ] Output [ #4.Customer_name ] ; #6 = Scan Table [ Services ] Predicate [ Service_name = 'Upgrade a policy' ] Output [ Service_name , Service_ID ] ; #7 = Scan Table [ First_Notification_of_Loss ] Output [ Customer_ID , Service_ID ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.Service_ID = #7.Service_ID ] Output [ #7.Customer_ID ] ; #9 = Scan Table [ Customers ] Output [ Customer_ID , Customer_name ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.Customer_ID = #9.Customer_ID ] Output [ #9.Customer_name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.Customer_name = #10.Customer_name ] Output [ #5.Customer_name ]"
    },
    {
        "id": "4170871dba76a9b8e161af1e84224aed72dea6997347523f2575ad25c34393a8",
        "question": "Find the IDs of customers whose name contains \"Diana\".",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Customers ] Predicate [ Customer_name like '%Diana%' ] Output [ Customer_ID , Customer_name ]"
    },
    {
        "id": "719b3fa208df5f140bad97aa1067fbf44a53e6f3e49ef82f2e127248f96cb8b3",
        "question": "What are the IDs of customers who have \"Diana\" in part of their names?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Customers ] Predicate [ Customer_name like '%Diana%' ] Output [ Customer_ID , Customer_name ]"
    },
    {
        "id": "31a7ee7cd85f955c9afd387b072c7702ea6bdd5043778bb8ee7c88db7ed5191b",
        "question": "What are the maximum and minimum settlement amount on record?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Settlements ] Output [ Settlement_Amount ] ; #2 = Aggregate [ #1 ] Output [ MIN(Settlement_Amount) AS Min_Settlement_Amount , MAX(Settlement_Amount) AS Max_Settlement_Amount ]"
    },
    {
        "id": "c64db8cc7db9b5f8bf38f983b3e34207875613ac026a70a8214d31bbc027333e",
        "question": "Find the maximum and minimum settlement amount.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Settlements ] Output [ Settlement_Amount ] ; #2 = Aggregate [ #1 ] Output [ MIN(Settlement_Amount) AS Min_Settlement_Amount , MAX(Settlement_Amount) AS Max_Settlement_Amount ]"
    },
    {
        "id": "82bffa04173d51c0a8eacc9465a5a92369037fdf00bdc5588b729e8aab6f80b8",
        "question": "List all the customers in increasing order of IDs.",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Customers ] Output [ Customer_ID , Customer_name ] ; #2 = Sort [ #1 ] OrderBy [ Customer_ID ASC ] Output [ Customer_ID , Customer_name ]"
    },
    {
        "id": "decb8da9739e13d320b0eaf760ad406440475679242faf9e7ade9b553a8a6f1a",
        "question": "What is the ordered list of customer ids?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Customers ] Output [ Customer_ID , Customer_name ] ; #2 = Sort [ #1 ] OrderBy [ Customer_ID ASC ] Output [ Customer_ID , Customer_name ]"
    },
    {
        "id": "290eec8cadd2528a5ed2cc154d963a7fefceeab9b082cd3db478ef69ce176c82",
        "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Customers ] Predicate [ Customer_name like '%Diana%' ] Output [ Customer_ID , Customer_name ] ; #2 = Scan Table [ Customers_Policies ] Output [ Date_Opened , Date_Closed , Customer_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Date_Closed , #2.Date_Opened ]"
    },
    {
        "id": "d6f2aec19c2de00919adeca1b9e36ffe984c905bfd6977abd99ed800bc8f8e11",
        "question": "What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?",
        "parsing_tree": "insurance_fnol | #1 = Scan Table [ Customers ] Predicate [ Customer_name like '%Diana%' ] Output [ Customer_ID , Customer_name ] ; #2 = Scan Table [ Customers_Policies ] Output [ Date_Opened , Date_Closed , Customer_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Date_Closed , #2.Date_Opened ]"
    },
    {
        "id": "9875c07bf6869f0ee21988b7f527bcee1cd71c920ba2ddfd59092c1a73e17d53",
        "question": "How many kinds of enzymes are there?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "edf3e119fa2ebfa50f9318b33fb60d1d9fedf7b1aa07f257afa712560b7cc419",
        "question": "What is the total count of enzymes?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "decc04fef549a947855892fe122258555c3481801579dd5dfce45e560a50826b",
        "question": "List the name of enzymes in descending lexicographical order.",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Output [ name ] ; #2 = Sort [ #1 ] OrderBy [ name DESC ] Output [ name ]"
    },
    {
        "id": "014442491513152361a7e8910753773962ffcda8053b7b36588440d766eb3b42",
        "question": "What are the names of enzymes in descending order?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Output [ name ] ; #2 = Sort [ #1 ] OrderBy [ name DESC ] Output [ name ]"
    },
    {
        "id": "282427d5eacdb6b7d38ed89ec8326c80a516949693251bda463f3301dd9e069c",
        "question": "List the names and the locations that the enzymes can make an effect.",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Output [ name , Location ]"
    },
    {
        "id": "248ddc38b59ab90a87ea86513b767672d8844299205bdeb8dda0fe42628b01df",
        "question": "What are the names and locations of all enzymes listed?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Output [ name , Location ]"
    },
    {
        "id": "4f4e46e5fc0f85265b22cae141cc3a179fd8f35703655c2c4f384e9d449c78c7",
        "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Output [ OMIM ] ; #2 = Aggregate [ #1 ] Output [ MAX(OMIM) AS Max_OMIM ]"
    },
    {
        "id": "60eb44b51aee6e4bfea0813abdd4724ddfeb33be3eb6efaedd181b3d65733465",
        "question": "What is the maximum OMIM value in the database?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Output [ OMIM ] ; #2 = Aggregate [ #1 ] Output [ MAX(OMIM) AS Max_OMIM ]"
    },
    {
        "id": "4bc500910c48a1566873a21ab0281a2204b1aa02e87aa4c47dd40c0cccb4060d",
        "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Predicate [ Location = 'Cytosol' ] Output [ Location , Porphyria , Product , Chromosome ]"
    },
    {
        "id": "dfe15bbc3cba0974a537f67fb20cfefd2b32ea92f3be18ee70ecaa78f24e0b5a",
        "question": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Predicate [ Location = 'Cytosol' ] Output [ Location , Porphyria , Product , Chromosome ]"
    },
    {
        "id": "1943f91ad9da86cafda5d82c0335a1ab71eb9c4e6c6a6d24086b005e8b38dc54",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Predicate [ Product <> 'Heme' ] Output [ name , Product ]"
    },
    {
        "id": "66453268a4e46dbd32df366c929f273d9ade72ac53c99c33e6741c02909102bd",
        "question": "What are the names of enzymes whose product is not 'Heme'?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Predicate [ Product <> 'Heme' ] Output [ name , Product ]"
    },
    {
        "id": "9aa424065a0823b1122b42a4f3684e4c6072853b5d0f494398c66a402b4a0f20",
        "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine ] Predicate [ FDA_approved = 'Yes' ] Output [ name , FDA_approved , Trade_Name ]"
    },
    {
        "id": "a9535751efbfadb9dbaddb7b4750598c8fb2dd988fa6d0e25070970de36c79ff",
        "question": "What are the names and trade names of the medcines that are FDA approved?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine ] Predicate [ FDA_approved = 'Yes' ] Output [ name , FDA_approved , Trade_Name ]"
    },
    {
        "id": "d8b38315304134d0bf365cb635fdbff64dade0c5ad400af626c52b60271b1f67",
        "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine ] Predicate [ name = 'Amisulpride' ] Output [ name , id ] ; #2 = Scan Table [ medicine_enzyme_interaction ] Predicate [ interaction_type = 'inhibitor' ] Output [ medicine_id , interaction_type , enzyme_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.medicine_id ] Output [ #2.enzyme_id ] ; #4 = Scan Table [ enzyme ] Output [ name , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.enzyme_id = #4.id ] Output [ #4.name ]"
    },
    {
        "id": "e051c16ff913a8dd1f4c53a939fc258cb1a3fdbccb07e057d96d0edd1d539158",
        "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine ] Predicate [ name = 'Amisulpride' ] Output [ name , id ] ; #2 = Scan Table [ medicine_enzyme_interaction ] Predicate [ interaction_type = 'inhibitor' ] Output [ medicine_id , interaction_type , enzyme_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.medicine_id ] Output [ #2.enzyme_id ] ; #4 = Scan Table [ enzyme ] Output [ name , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.enzyme_id = #4.id ] Output [ #4.name ]"
    },
    {
        "id": "be7287cc5f2aa1200e6cacb2785281fd186bbd469a19a9016b8f96cd4cc6a6dd",
        "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ] ; #2 = Scan Table [ medicine ] Output [ name , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.id , #2.name ] ; #4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name , id ]"
    },
    {
        "id": "8ea9a4bacf02d514fa823ff5169b9763e7eb7ad782f6066ba8a8c6d22ad0e72a",
        "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ] ; #2 = Scan Table [ medicine ] Output [ name , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.id , #2.name ] ; #4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name , id ]"
    },
    {
        "id": "8c0970285f82b4ec887d7e24ba4309567c684951eb74d2cb7aa5204577dadd9d",
        "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ] ; #2 = Scan Table [ medicine ] Output [ name , FDA_approved , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.FDA_approved , #2.id , #2.name ] ; #4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , FDA_approved , countstar AS Count_Star , id ] ; #5 = Sort [ #4 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , FDA_approved , id ]"
    },
    {
        "id": "167598aec2528d3462a94f4a708d66c0cdb837d937ea0991e8a680821ea9910e",
        "question": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ] ; #2 = Scan Table [ medicine ] Output [ name , FDA_approved , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.FDA_approved , #2.id , #2.name ] ; #4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , FDA_approved , countstar AS Count_Star , id ] ; #5 = Sort [ #4 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , FDA_approved , id ]"
    },
    {
        "id": "bf53a8332436c10249488c0701c61bc174824d8899552f6a34a8d7ee2d12cb86",
        "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine_enzyme_interaction ] Predicate [ interaction_type = 'activitor' ] Output [ interaction_type , enzyme_id ] ; #2 = Aggregate [ #1 ] GroupBy [ enzyme_id ] Output [ countstar AS Count_Star , enzyme_id ] ; #3 = Scan Table [ enzyme ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.enzyme_id = #3.id ] Output [ #3.name , #3.id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , id ]"
    },
    {
        "id": "999b62cfce5f02d8b47e12e55348bcc5812a4dcc2f540d9c877289c460d854f2",
        "question": "What is the id and name of the enzyme that can interact with the most medicines as an activator?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine_enzyme_interaction ] Predicate [ interaction_type = 'activitor' ] Output [ interaction_type , enzyme_id ] ; #2 = Aggregate [ #1 ] GroupBy [ enzyme_id ] Output [ countstar AS Count_Star , enzyme_id ] ; #3 = Scan Table [ enzyme ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.enzyme_id = #3.id ] Output [ #3.name , #3.id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , id ]"
    },
    {
        "id": "e0e2de67c92c9d5c0a27383ee0a841dce960911dc5ac391cf98b1ddf01f3c8dd",
        "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Predicate [ name = 'ALA synthase' ] Output [ name , id ] ; #2 = Scan Table [ medicine ] Predicate [ name = 'Aripiprazole' ] Output [ name , id ] ; #3 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id , interaction_type , enzyme_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.id = #3.medicine_id ] Output [ #3.enzyme_id , #3.interaction_type ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.id = #4.enzyme_id ] Output [ #4.interaction_type ]"
    },
    {
        "id": "7857c5f529a1b4ba0754dabaeda0bd10b45676fc7798cf4344bac09b9145e84d",
        "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Predicate [ name = 'ALA synthase' ] Output [ name , id ] ; #2 = Scan Table [ medicine ] Predicate [ name = 'Aripiprazole' ] Output [ name , id ] ; #3 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id , interaction_type , enzyme_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.id = #3.medicine_id ] Output [ #3.enzyme_id , #3.interaction_type ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.id = #4.enzyme_id ] Output [ #4.interaction_type ]"
    },
    {
        "id": "054b5b90407a5e58663a031d5cd16414d74dd61e08ca964d288f672e5962ba17",
        "question": "What is the most common interaction type between enzymes and medicine? And how many are there?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine_enzyme_interaction ] Output [ interaction_type ] ; #2 = Aggregate [ #1 ] GroupBy [ interaction_type ] Output [ countstar AS Count_Star , interaction_type ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , interaction_type ]"
    },
    {
        "id": "b066bd3ae0c3a2090e7f3f8c3337318317ecc822afdaf140ce568427e5a6455f",
        "question": "What are the most common types of interactions between enzymes and medicine, and how many types are there?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine_enzyme_interaction ] Output [ interaction_type ] ; #2 = Aggregate [ #1 ] GroupBy [ interaction_type ] Output [ countstar AS Count_Star , interaction_type ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , interaction_type ]"
    },
    {
        "id": "cbbbed9c123604995b564862ad9fae490a4f70fbd9ec750af450b36ca215d081",
        "question": "How many medicines have the FDA approval status 'No' ?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine ] Predicate [ FDA_approved = 'No' ] Output [ FDA_approved ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c2319db333fb42ed7dceb20b2da896bc39fbd900bf2c676b082c9c71dc40e307",
        "question": "How many medicines were not approved by the FDA?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine ] Predicate [ FDA_approved = 'No' ] Output [ FDA_approved ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "beaea5b0a3d42ea6b8a8079e4342560423097286a9d58ce5206e14e56a9d5254",
        "question": "How many enzymes do not have any interactions?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Output [ id ] ; #2 = Scan Table [ medicine_enzyme_interaction ] Output [ enzyme_id ] ; #3 = Aggregate [ #2 ] GroupBy [ enzyme_id ] Output [ enzyme_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.enzyme_id = #1.id ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "bab2bc0114caab73052e73fd074bcddcbccc1db6c874d741009709e8ac0e9233",
        "question": "What is the count of enzymes without any interactions?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Output [ id ] ; #2 = Scan Table [ medicine_enzyme_interaction ] Output [ enzyme_id ] ; #3 = Aggregate [ #2 ] GroupBy [ enzyme_id ] Output [ enzyme_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.enzyme_id = #1.id ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "40a1291cb536645681bf5735e2fc96c1764194263467b225a4186847cfcd6ba6",
        "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ] ; #2 = Scan Table [ medicine ] Output [ Trade_Name , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.id , #2.Trade_Name ] ; #4 = Aggregate [ #3 ] GroupBy [ id ] Output [ countstar AS Count_Star , Trade_Name , id ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ Trade_Name , id ]"
    },
    {
        "id": "85f9167cee8c33a80700ff09b062adf3504cd188d44b6c896f8b21d134f4e18b",
        "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ] ; #2 = Scan Table [ medicine ] Output [ Trade_Name , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.id , #2.Trade_Name ] ; #4 = Aggregate [ #3 ] GroupBy [ id ] Output [ countstar AS Count_Star , Trade_Name , id ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ Trade_Name , id ]"
    },
    {
        "id": "6caf04a722505f50b307376a08eabd17b690adbb7b0b897f2ca79396c45f6762",
        "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Output [ name , Location , id , Product ] ; #2 = Scan Table [ medicine_enzyme_interaction ] Predicate [ interaction_type = 'inhibitor' ] Output [ interaction_type , enzyme_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.enzyme_id ] Distinct [ true ] Output [ #1.Product , #1.name , #1.Location ]"
    },
    {
        "id": "50e956f4ffcbcf9419c4de012204156951f512edf38ed1b5fb46454643352b5d",
        "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Output [ name , Location , id , Product ] ; #2 = Scan Table [ medicine_enzyme_interaction ] Predicate [ interaction_type = 'inhibitor' ] Output [ interaction_type , enzyme_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.enzyme_id ] Distinct [ true ] Output [ #1.Product , #1.name , #1.Location ]"
    },
    {
        "id": "b963fb2eb0e8c099fc3f3463832ca12ad0b571554a9676454e2a8955e28d0e3e",
        "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine_enzyme_interaction ] Predicate [ interaction_type = 'inhibitor' ] Output [ medicine_id , interaction_type ] ; #2 = Scan Table [ medicine ] Output [ name , Trade_Name , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Distinct [ true ] Output [ #2.Trade_Name , #2.name ] ; #4 = Scan Table [ medicine_enzyme_interaction ] Predicate [ interaction_type = 'activitor' ] Output [ medicine_id , interaction_type ] ; #5 = Scan Table [ medicine ] Output [ name , Trade_Name , id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.medicine_id = #5.id ] Output [ #5.Trade_Name , #5.name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.name = #6.name ] Output [ #3.name , #3.Trade_Name ]"
    },
    {
        "id": "a6eafab79e3febaa82f9207f912c1d46c386f8071bc97da23c85c95d2288f848",
        "question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine_enzyme_interaction ] Predicate [ interaction_type = 'inhibitor' ] Output [ medicine_id , interaction_type ] ; #2 = Scan Table [ medicine ] Output [ name , Trade_Name , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Distinct [ true ] Output [ #2.Trade_Name , #2.name ] ; #4 = Scan Table [ medicine_enzyme_interaction ] Predicate [ interaction_type = 'activitor' ] Output [ medicine_id , interaction_type ] ; #5 = Scan Table [ medicine ] Output [ name , Trade_Name , id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.medicine_id = #5.id ] Output [ #5.Trade_Name , #5.name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.name = #6.name ] Output [ #3.name , #3.Trade_Name ]"
    },
    {
        "id": "6f5bbf1472e55fbe98e55048d0982f600a278ed1b6551c8d972a741f766c9127",
        "question": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine ] Distinct [ true ] Output [ name , Trade_Name ] ; #2 = Scan Table [ enzyme ] Predicate [ Product = 'Protoporphyrinogen IX' ] Output [ Product , id ] ; #3 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id , enzyme_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.id = #3.enzyme_id ] Output [ #3.medicine_id ] ; #5 = Scan Table [ medicine ] Output [ name , Trade_Name , id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.medicine_id = #5.id ] Output [ #5.Trade_Name , #5.name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.name = #6.name ] Output [ #1.name , #1.Trade_Name ]"
    },
    {
        "id": "b60504b6ba9c728db62bb37fc056add9eee481d2552489e5448d0234e5940df7",
        "question": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine ] Distinct [ true ] Output [ name , Trade_Name ] ; #2 = Scan Table [ enzyme ] Predicate [ Product = 'Protoporphyrinogen IX' ] Output [ Product , id ] ; #3 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id , enzyme_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.id = #3.enzyme_id ] Output [ #3.medicine_id ] ; #5 = Scan Table [ medicine ] Output [ name , Trade_Name , id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.medicine_id = #5.id ] Output [ #5.Trade_Name , #5.name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.name = #6.name ] Output [ #1.name , #1.Trade_Name ]"
    },
    {
        "id": "1b80d6e5023a8f745f531b5da573ae7d3e88391fc91df62e0d28be96fd4827e6",
        "question": "How many distinct FDA approval statuses are there for the medicines?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine ] Distinct [ true ] Output [ FDA_approved ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT FDA_approved) AS Count_Dist_FDA_approved ]"
    },
    {
        "id": "3f6b1c445eebada8459d615e92a2a242871b4ca8414a06b3f140accc55889966",
        "question": "How many different FDA approval statuses exist for medicines?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine ] Distinct [ true ] Output [ FDA_approved ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT FDA_approved) AS Count_Dist_FDA_approved ]"
    },
    {
        "id": "b581fc223113e5584ba47f951a0877bd9b7a7f88cdd0e10fb76e4817501e30f2",
        "question": "Which enzyme names have the substring \"ALA\"?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Predicate [ name like '%ALA%' ] Output [ name ]"
    },
    {
        "id": "b4c3c9641d6398edebd1963b44455aef859dc3d5c4b6fd076fe79a70ab98543a",
        "question": "What are the names of enzymes that include the string 'ALA'?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ enzyme ] Predicate [ name like '%ALA%' ] Output [ name ]"
    },
    {
        "id": "8e26ceb09e42aab5dbc021d4c72bb9e38bc997263836e3caa7ab560f3eeb89af",
        "question": "find the number of medicines offered by each trade.",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine ] Output [ Trade_Name ] ; #2 = Aggregate [ #1 ] GroupBy [ Trade_Name ] Output [ countstar AS Count_Star , Trade_Name ]"
    },
    {
        "id": "c9109d1a7627d82446e3fc3891601bb36943edcb5afc79ff301c1f633d3a3b53",
        "question": "How many medicines are offered by each trade name?",
        "parsing_tree": "medicine_enzyme_interaction | #1 = Scan Table [ medicine ] Output [ Trade_Name ] ; #2 = Aggregate [ #1 ] GroupBy [ Trade_Name ] Output [ countstar AS Count_Star , Trade_Name ]"
    },
    {
        "id": "cc133b40ddd3d2537b2b7ae632988951b57b064af7dfa9b84b47bca4b943628e",
        "question": "List all schools and their nicknames in the order of founded year.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ School , Nickname , Founded ] ; #2 = Sort [ #1 ] OrderBy [ Founded ASC ] Output [ School , Nickname , Founded ]"
    },
    {
        "id": "c463732bbd8da08c8e918f690f71f8082ac1349b7abef370bde2aa5f739c7d95",
        "question": "What are the different schools and their nicknames, ordered by their founding years?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ School , Nickname , Founded ] ; #2 = Sort [ #1 ] OrderBy [ Founded ASC ] Output [ School , Nickname , Founded ]"
    },
    {
        "id": "53942689765cd8d32571a369ccd6e57926e024e9e43bf6923706479060ab27a0",
        "question": "List all public schools and their locations.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Predicate [ Affiliation = 'Public' ] Output [ Location , School , Affiliation ]"
    },
    {
        "id": "82b29acb9aba1f23528cb90e4e09be5066a1804a5466e52fe0754e9b335f02f9",
        "question": "What are the public schools and what are their locations?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Predicate [ Affiliation = 'Public' ] Output [ Location , School , Affiliation ]"
    },
    {
        "id": "fd169b5d2e37b74b22333b9792b3ec767f61085dd626ee08de5e27cd401d8312",
        "question": "When was the school with the largest enrollment founded?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ Enrollment , Founded ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Enrollment DESC ] Output [ Enrollment , Founded ]"
    },
    {
        "id": "51f2fd1f2bb880f1f23c2282bff904295cbad3736d8d98b5aeab747c20b1b9e4",
        "question": "Return the founded year for the school with the largest enrollment.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ Enrollment , Founded ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Enrollment DESC ] Output [ Enrollment , Founded ]"
    },
    {
        "id": "020572b2aca0ee88356eea08d56e0a0243880727bb71b70b29ca3fffc2661e2f",
        "question": "Find the founded year of the newest non public school.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Predicate [ Affiliation <> 'Public' ] Output [ Affiliation , Founded ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Founded DESC ] Output [ Founded ]"
    },
    {
        "id": "cb5ac131e167293b8c7b58ac072ab54e93ed5f87049a9f034de0ed730ef5aed8",
        "question": "What is the founded year of the non public school that was founded most recently?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Predicate [ Affiliation <> 'Public' ] Output [ Affiliation , Founded ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Founded DESC ] Output [ Founded ]"
    },
    {
        "id": "b3e54885f12551c91302011be6699390a4e6b6c0d200c1ab93be051b62c2e824",
        "question": "How many schools are in the basketball match?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ basketball_match ] Distinct [ true ] Output [ School_ID ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT School_ID) AS Count_Dist_School_ID ]"
    },
    {
        "id": "86b44ae0a29e064759ce14089db631203e2d647fed91138208a306d175cd26d6",
        "question": "Count the number of schools that have had basketball matches.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ basketball_match ] Distinct [ true ] Output [ School_ID ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT School_ID) AS Count_Dist_School_ID ]"
    },
    {
        "id": "471e9aafdafb5d549092299e8a889c388fa825b46d1f55d8c76a9b1d24bb63b0",
        "question": "What is the highest acc percent score in the competition?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ basketball_match ] Output [ ACC_Percent ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ ACC_Percent DESC ] Output [ ACC_Percent ]"
    },
    {
        "id": "bcb580bdb81b8584db9f49e866d9de8bbb13e47f5397b0b0b04262562686aecb",
        "question": "Return the highest acc percent across all basketball matches.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ basketball_match ] Output [ ACC_Percent ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ ACC_Percent DESC ] Output [ ACC_Percent ]"
    },
    {
        "id": "b86214441c9f212dbedc051aaf570f541ef5cb44b1d4427f7a0e250fa11bbaed",
        "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ basketball_match ] Output [ ACC_Percent , School_ID ] ; #2 = Scan Table [ university ] Output [ School_ID , Primary_conference ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_ID = #2.School_ID ] Output [ #1.ACC_Percent , #2.Primary_conference ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ ACC_Percent ASC ] Output [ ACC_Percent , Primary_conference ]"
    },
    {
        "id": "e15c6e06ff8429dd46f74396e9c1d07854cba232c225c1483e0f68d9f90a2331",
        "question": "Return the primary conference of the school with the lowest acc percentage score.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ basketball_match ] Output [ ACC_Percent , School_ID ] ; #2 = Scan Table [ university ] Output [ School_ID , Primary_conference ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_ID = #2.School_ID ] Output [ #1.ACC_Percent , #2.Primary_conference ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ ACC_Percent ASC ] Output [ ACC_Percent , Primary_conference ]"
    },
    {
        "id": "a482a3809c84f85b5406a0ea88274d47f144feb6c1d5b6187e3bfa3b5c5e53e6",
        "question": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ basketball_match ] Output [ ACC_Regular_Season , Team_Name , School_ID ] ; #2 = Scan Table [ university ] Output [ School_ID , Founded ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_ID = #2.School_ID ] Output [ #1.Team_Name , #1.ACC_Regular_Season , #2.Founded ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Founded ASC ] Output [ ACC_Regular_Season , Team_Name , Founded ]"
    },
    {
        "id": "2c8180c0a25b5ed9cd5921837a1d73bb934dbdd256c10f972a3088361453aa99",
        "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ basketball_match ] Output [ ACC_Regular_Season , Team_Name , School_ID ] ; #2 = Scan Table [ university ] Output [ School_ID , Founded ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_ID = #2.School_ID ] Output [ #1.Team_Name , #1.ACC_Regular_Season , #2.Founded ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Founded ASC ] Output [ ACC_Regular_Season , Team_Name , Founded ]"
    },
    {
        "id": "4aa61393650eb0c2c7f3ba4f2803cbccee78d05f776be47a1275e078b413895c",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ basketball_match ] Predicate [ Team_Name = 'Clemson' ] Output [ Team_Name , School_ID , All_Games ] ; #2 = Scan Table [ university ] Output [ Location , School_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_ID = #2.School_ID ] Output [ #1.All_Games , #2.Location ]"
    },
    {
        "id": "030a628c4dcef7c5f0495989054e95dff6c793e5e132ee89b03f55456aa9ef34",
        "question": "What are the all games score and location of the school called Clemson?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ basketball_match ] Predicate [ Team_Name = 'Clemson' ] Output [ Team_Name , School_ID , All_Games ] ; #2 = Scan Table [ university ] Output [ Location , School_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_ID = #2.School_ID ] Output [ #1.All_Games , #2.Location ]"
    },
    {
        "id": "215440400f2a448b68762b4876b6e70ef73cf4f0db0e4509fe714c55c0d1b1b4",
        "question": "What are the average enrollment size of the universities that are founded before 1850?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Predicate [ Founded < 1850.0 ] Output [ Enrollment , Founded ] ; #2 = Aggregate [ #1 ] Output [ AVG(Enrollment) AS Avg_Enrollment ]"
    },
    {
        "id": "f9b07cc05b1ee59e45fff73f6225e4d583887405b71ba6844e4f3884c7792904",
        "question": "Return the average enrollment of universities founded before 1850.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Predicate [ Founded < 1850.0 ] Output [ Enrollment , Founded ] ; #2 = Aggregate [ #1 ] Output [ AVG(Enrollment) AS Avg_Enrollment ]"
    },
    {
        "id": "c5cb68599ca416b56816da50aa38fc1a542182189e299c00e8c10944ba0ae3ae",
        "question": "Show the enrollment and primary_conference of the oldest college.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ Primary_conference , Enrollment , Founded ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Founded ASC ] Output [ Primary_conference , Enrollment , Founded ]"
    },
    {
        "id": "56e409bcba5720971e919c1552c06ea76ee1e9807ac61242d741ce0dd79356de",
        "question": "What are the enrollment and primary conference for the university which was founded the earliest?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ Primary_conference , Enrollment , Founded ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Founded ASC ] Output [ Primary_conference , Enrollment , Founded ]"
    },
    {
        "id": "2539961a5346085b250b9986bd47c10d64aab24010e79a3401f884117339ffb9",
        "question": "What is the total and minimum enrollment of all schools?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ Enrollment ] ; #2 = Aggregate [ #1 ] Output [ MIN(Enrollment) AS Min_Enrollment , SUM(Enrollment) AS Sum_Enrollment ]"
    },
    {
        "id": "a7c37afc0795b26ad8c0578b31eba0bb42289a60b6769c1179e5241244d2b699",
        "question": "Return the total and minimum enrollments across all schools.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ Enrollment ] ; #2 = Aggregate [ #1 ] Output [ MIN(Enrollment) AS Min_Enrollment , SUM(Enrollment) AS Sum_Enrollment ]"
    },
    {
        "id": "128c60953cce72ffae4310319e941492a613b8acd13092e452ed1ef26e1d27c9",
        "question": "Find the total student enrollment for different affiliation type schools.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ Enrollment , Affiliation ] ; #2 = Aggregate [ #1 ] GroupBy [ Affiliation ] Output [ Affiliation , SUM(Enrollment) AS Sum_Enrollment ]"
    },
    {
        "id": "315aeea767afff69603639c6befb2d630c7b4d98e03ffdc6e89de0cd15c6df7b",
        "question": "What are the total enrollments of universities of each affiliation type?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ Enrollment , Affiliation ] ; #2 = Aggregate [ #1 ] GroupBy [ Affiliation ] Output [ Affiliation , SUM(Enrollment) AS Sum_Enrollment ]"
    },
    {
        "id": "34c14c4902c95f65424fe2307636363536705d3226571ffce88e25596384b4d1",
        "question": "How many schools do not participate in the basketball match?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ School_ID ] ; #2 = Scan Table [ basketball_match ] Output [ School_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.School_ID IS NULL OR #1.School_ID = #2.School_ID ] Output [ #1.School_ID ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cb7d78551bae2143896c62ee155d409c9fbb37992a03e15caab31ce6bded0a1b",
        "question": "Count the number of universities that do not participate in the baketball match.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ School_ID ] ; #2 = Scan Table [ basketball_match ] Output [ School_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.School_ID IS NULL OR #1.School_ID = #2.School_ID ] Output [ #1.School_ID ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d1bb79c46ebef4225ecaa8021377f75aca311ff51af112a0a8b5d093a2763ca6",
        "question": "Find the schools that were either founded after 1850 or public.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Predicate [ Founded > 1850.0 OR Affiliation = 'Public' ] Output [ School , Affiliation , Founded ]"
    },
    {
        "id": "9c519dd201b44c2425d7178c05fb408907800ef594f6767c7521a60ea90deb95",
        "question": "What are the schools that were either founded before 1850 or are public?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Predicate [ Founded > 1850.0 OR Affiliation = 'Public' ] Output [ School , Affiliation , Founded ]"
    },
    {
        "id": "6f965a613b2bd483154ed99831b2951591da09929ef9d50ec0b5932132d46566",
        "question": "Find how many different affiliation types there are.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Distinct [ true ] Output [ Affiliation ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Affiliation) AS Count_Dist_Affiliation ]"
    },
    {
        "id": "6df932a8739015c065edc7ccb828d3d2f367965039165c0ca2f839f2fde79f17",
        "question": "Count the number of different affiliation types.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Distinct [ true ] Output [ Affiliation ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Affiliation) AS Count_Dist_Affiliation ]"
    },
    {
        "id": "5a5202c7310fd5ab7b8fa1a977768dc4a6d5040d8bab76cc3dfdef92de7c4a25",
        "question": "Find how many school locations have the word 'NY'.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Predicate [ Location like '%NY%' ] Output [ Location ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e4dfa8dccb6439f02f59215b611f6eb9a9b2349a186b0d560344e00133f74228",
        "question": "How many universities have a location that contains NY?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Predicate [ Location like '%NY%' ] Output [ Location ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d3bfee5a71af1a78a5cc9a6f19901d938f4c764335836b4055ed06500f152c04",
        "question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ Enrollment ] ; #2 = Aggregate [ #1 ] Output [ AVG(Enrollment) AS Avg_Enrollment ] ; #3 = Scan Table [ university ] Output [ Enrollment , School_ID ] ; #4 = Scan Table [ basketball_match ] Output [ Team_Name , School_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.School_ID = #3.School_ID ] Output [ #3.Enrollment , #4.Team_Name ] ; #6 = Join [ #2 , #5 ] Predicate [ #5.Enrollment < #2.Avg_Enrollment ] Output [ #5.Team_Name ]"
    },
    {
        "id": "aee80cf1d06b314ef35dd3b035a40342b99a0ba77ba8d1f8b790fc3fb2edad30",
        "question": "What are the names of teams from universities that have a below average enrollment?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ Enrollment ] ; #2 = Aggregate [ #1 ] Output [ AVG(Enrollment) AS Avg_Enrollment ] ; #3 = Scan Table [ university ] Output [ Enrollment , School_ID ] ; #4 = Scan Table [ basketball_match ] Output [ Team_Name , School_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.School_ID = #3.School_ID ] Output [ #3.Enrollment , #4.Team_Name ] ; #6 = Join [ #2 , #5 ] Predicate [ #5.Enrollment < #2.Avg_Enrollment ] Output [ #5.Team_Name ]"
    },
    {
        "id": "b6f7aabaf3fcd22398eeae94ddfbf32c9dc3be419fb688a98137f46f8bf0e9ed",
        "question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Predicate [ Enrollment > 20000.0 ] Output [ Enrollment , Affiliation ] ; #2 = Aggregate [ #1 ] GroupBy [ Affiliation ] Output [ countstar AS Count_Star , Affiliation ]"
    },
    {
        "id": "42d71302b1f7df7661d15bdf63b93768a4ad23f7936ac1cebd064af9a286ca7b",
        "question": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Predicate [ Enrollment > 20000.0 ] Output [ Enrollment , Affiliation ] ; #2 = Aggregate [ #1 ] GroupBy [ Affiliation ] Output [ countstar AS Count_Star , Affiliation ]"
    },
    {
        "id": "548a67dec552348ddd13abd34abd401e507676114246980c9323df76c0afbd86",
        "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Predicate [ Founded > 1850.0 ] Output [ Enrollment , Affiliation , Founded ] ; #2 = Aggregate [ #1 ] GroupBy [ Affiliation ] Output [ Affiliation , SUM(Enrollment) AS Sum_Enrollment ]"
    },
    {
        "id": "fd691d72cd7b4228630210f5fdb98306cec69a71c2a4cf0a3bc6e4567f22e987",
        "question": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Predicate [ Founded > 1850.0 ] Output [ Enrollment , Affiliation , Founded ] ; #2 = Aggregate [ #1 ] GroupBy [ Affiliation ] Output [ Affiliation , SUM(Enrollment) AS Sum_Enrollment ]"
    },
    {
        "id": "3ce5633e4d2b6e41af815e8e25d291a95f838c068eecdfa6356febcea8ba5e99",
        "question": "What is the maximum enrollment across all schools?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ Enrollment ] ; #2 = Aggregate [ #1 ] Output [ MAX(Enrollment) AS Max_Enrollment ]"
    },
    {
        "id": "0856da8e580458555be9e2673b2e5e6cfa3df302534e0b163a28a8de7aed3425",
        "question": "Return the maximum enrollment across all schools.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ university ] Output [ Enrollment ] ; #2 = Aggregate [ #1 ] Output [ MAX(Enrollment) AS Max_Enrollment ]"
    },
    {
        "id": "8704e948cf8825b900e5baeee69285aee7678550608ba045802142ed0e107f83",
        "question": "List all information regarding the basketball match.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ basketball_match ] Output [ Team_Name , All_Home , All_Games , ACC_Home , School_ID , ACC_Regular_Season , All_Games_Percent , ACC_Road , All_Road , Team_ID , All_Neutral , ACC_Percent ]"
    },
    {
        "id": "63b5ac1c433590075d19a145e82ac9b66f0070ab0217a5ddb6e9f217b63b5199",
        "question": "What is all the information about the basketball match?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ basketball_match ] Output [ Team_Name , All_Home , All_Games , ACC_Home , School_ID , ACC_Regular_Season , All_Games_Percent , ACC_Road , All_Road , Team_ID , All_Neutral , ACC_Percent ]"
    },
    {
        "id": "a81d082328ac14342f6840e199aca22f1d529c76472fb2ba1e52baa5d2a32ca5",
        "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
        "parsing_tree": "university_basketball | #1 = Scan Table [ basketball_match ] Output [ All_Home , Team_Name ] ; #2 = Sort [ #1 ] OrderBy [ All_Home DESC ] Output [ Team_Name , All_Home ]"
    },
    {
        "id": "ffec1bbe090e67cce0e826e5fee7d84304fe4ebc23356009dfb1cca94613ac7a",
        "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
        "parsing_tree": "university_basketball | #1 = Scan Table [ basketball_match ] Output [ All_Home , Team_Name ] ; #2 = Sort [ #1 ] OrderBy [ All_Home DESC ] Output [ Team_Name , All_Home ]"
    },
    {
        "id": "448bed5ce28d60ee1765c6f77b95a934be1c7cf3a2b4a982b5c71f34f5f0151c",
        "question": "the names of models that launched between 2002 and 2004.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ chip_model ] Predicate [ Launch_year >= 2002.0 AND Launch_year <= 2004.0 ] Output [ Launch_year , Model_name ]"
    },
    {
        "id": "bbea2bf5760d1c5c9c3c5df9043c61b07f6017655e0d041c03b17ff34a3669ed",
        "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ chip_model ] Output [ RAM_MiB , Model_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ RAM_MiB ASC ] Output [ RAM_MiB , Model_name ]"
    },
    {
        "id": "da508fac4bff69e92f0b8a72aadb9628dac66a4c7eb2fde1c55de2eee08101cc",
        "question": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Predicate [ Hardware_Model_name = 'LG-P760' ] Output [ Hardware_Model_name , chip_model , screen_mode ]"
    },
    {
        "id": "afd4478b6528fc6d28e1f6fd65536f33b7cd701a4c503bad5be5a2ca2891530a",
        "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Predicate [ Company_name = 'Nokia Corporation' ] Output [ Company_name ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7d52df5e82028aebe88569b2fe0dceeda622c228b5f99895777ad134d5c8cdf6",
        "question": "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Predicate [ Company_name = 'Nokia Corporation' ] Output [ Company_name , chip_model ] ; #2 = Scan Table [ chip_model ] Output [ RAM_MiB , Model_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.chip_model = #2.Model_name ] Output [ #2.RAM_MiB ] ; #4 = Aggregate [ #3 ] Output [ MAX(RAM_MiB) AS Max_RAM_MiB , MIN(RAM_MiB) AS Min_RAM_MiB ]"
    },
    {
        "id": "c313a0faf12ef628a5869bf6cf00720607503c07db7144091bec52f71b171621",
        "question": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Predicate [ Company_name = 'Nokia Corporation' ] Output [ Company_name , chip_model ] ; #2 = Scan Table [ chip_model ] Output [ ROM_MiB , Model_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.chip_model = #2.Model_name ] Output [ #2.ROM_MiB ] ; #4 = Aggregate [ #3 ] Output [ AVG(ROM_MiB) AS Avg_ROM_MiB ]"
    },
    {
        "id": "b2447c51984d82e7dda566c396379640f96c6acdebd056950413666562b643e2",
        "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Output [ Company_name , Hardware_Model_name , chip_model ] ; #2 = Scan Table [ chip_model ] Predicate [ Launch_year = 2002.0 OR RAM_MiB > 32.0 ] Output [ RAM_MiB , Launch_year , Model_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.chip_model = #2.Model_name ] Output [ #1.Company_name , #1.Hardware_Model_name ]"
    },
    {
        "id": "2fc05e2343805df7554de4b662c415d6c889d656d2f72108e990898884f3cca3",
        "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Predicate [ Accreditation_type like 'Full' ] Output [ Accreditation_type , Company_name , Hardware_Model_name ]"
    },
    {
        "id": "ec3390ff1d0245babb163cda9c8857b8d2422f746636f3003bbfa7a0a42e9a40",
        "question": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Predicate [ Hardware_Model_name = 'LG-P760' ] Output [ Hardware_Model_name , screen_mode ] ; #2 = Scan Table [ screen_mode ] Output [ Graphics_mode , Char_cells , Pixels , Hardware_colours ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.screen_mode = #2.Graphics_mode ] Output [ #2.Pixels , #2.Char_cells , #2.Hardware_colours ]"
    },
    {
        "id": "74132ce316988e11e39140f4f1f8a83af57953959ffa2fd0751eed6bf5559e9b",
        "question": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"",
        "parsing_tree": "phone_1 | #1 = Scan Table [ screen_mode ] Predicate [ Type = 'Graphics' ] Output [ Graphics_mode , Type ] ; #2 = Scan Table [ phone ] Output [ Company_name , Hardware_Model_name , screen_mode ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Graphics_mode = #2.screen_mode ] Output [ #2.Company_name , #2.Hardware_Model_name ]"
    },
    {
        "id": "33011865cda8355fed3abac55965e889849d39780eda01d6269d4e0fa71120e2",
        "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Output [ Company_name ] ; #2 = Aggregate [ #1 ] GroupBy [ Company_name ] Output [ countstar AS Count_Star , Company_name ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Company_name ]"
    },
    {
        "id": "016c53913b20a8e0cf569f00dec69fa85093ba7c1ef336ff944167c0e57c7486",
        "question": "List the name of the company that produced more than one phone model.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Output [ Company_name ] ; #2 = Aggregate [ #1 ] GroupBy [ Company_name ] Output [ countstar AS Count_Star , Company_name ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Company_name ]"
    },
    {
        "id": "24ef673f35c384901206244dccca35e614ed20683c86a7d96108637c0224a4a4",
        "question": "List the maximum, minimum and average number of used kb in screen mode.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ screen_mode ] Output [ used_kb ] ; #2 = Aggregate [ #1 ] Output [ MAX(used_kb) AS Max_used_kb , MIN(used_kb) AS Min_used_kb , AVG(used_kb) AS Avg_used_kb ]"
    },
    {
        "id": "ad74d1741e9d3d3d5a81865dd9b0abfbf5a4da0f8228763facac28d17b07ffa5",
        "question": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Predicate [ Hardware_Model_name = 'LG-P760' ] Output [ Hardware_Model_name , chip_model , screen_mode ] ; #2 = Scan Table [ chip_model ] Output [ WiFi , Model_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.chip_model = #2.Model_name ] Output [ #2.WiFi , #1.screen_mode ] ; #4 = Scan Table [ screen_mode ] Output [ Graphics_mode , Type ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.screen_mode = #4.Graphics_mode ] Output [ #4.Type , #3.WiFi ]"
    },
    {
        "id": "4ef6b25e632249b53a1db13ce44f40f79feba1893f4a5d54708054f9b0c30e80",
        "question": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Predicate [ Company_name = 'Nokia Corporation' ] Output [ Hardware_Model_name , Company_name , screen_mode ] ; #2 = Scan Table [ screen_mode ] Predicate [ Type <> 'Text' ] Output [ Graphics_mode , Type ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.screen_mode = #2.Graphics_mode ] Output [ #1.Hardware_Model_name ]"
    },
    {
        "id": "53ececf096a69103f39b472f75f768e236545c1a44e8dbc4b6acd751538da852",
        "question": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ screen_mode ] Predicate [ used_kb >= 10.0 AND used_kb <= 15.0 ] Output [ Graphics_mode , used_kb ] ; #2 = Scan Table [ phone ] Output [ Company_name , Hardware_Model_name , screen_mode ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Graphics_mode = #2.screen_mode ] Output [ #2.Company_name , #2.Hardware_Model_name ]"
    },
    {
        "id": "c0b9b18bc2342c9feeb2605fa634c2dfda859bafe476b98c38524f70fd53fff3",
        "question": "Find the number of phones for each accreditation type.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Output [ Accreditation_type ] ; #2 = Aggregate [ #1 ] GroupBy [ Accreditation_type ] Output [ countstar AS Count_Star , Accreditation_type ]"
    },
    {
        "id": "f56905a70e37a1a50283a03cb59f27bc15ae5e931a0cf3035cb19a905ca32b0f",
        "question": "How many phones belongs to each accreditation type?",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Output [ Accreditation_type ] ; #2 = Aggregate [ #1 ] GroupBy [ Accreditation_type ] Output [ countstar AS Count_Star , Accreditation_type ]"
    },
    {
        "id": "3fc4ec80ef08125c2de51dc84e80961e14b7182e228c4e283a1792784e3858eb",
        "question": "Find the accreditation level that more than 3 phones use.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Output [ Accreditation_level ] ; #2 = Aggregate [ #1 ] GroupBy [ Accreditation_level ] Output [ countstar AS Count_Star , Accreditation_level ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ Accreditation_level ]"
    },
    {
        "id": "d4a2e2d9a3bad0674afc152e977174cc13bd7902bd0484502e64a07998a6aef6",
        "question": "Find the details for all chip models.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ chip_model ] Output [ Launch_year , WiFi , Model_name , ROM_MiB , Slots , Bluetooth , RAM_MiB ]"
    },
    {
        "id": "3a191f519fb125a48b8c0c644d2cbd37222b047a47180fec7a7e4c5eb194a43c",
        "question": "How many models do not have the wifi function?",
        "parsing_tree": "phone_1 | #1 = Scan Table [ chip_model ] Predicate [ WiFi = 'No' ] Output [ WiFi ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cc2015ba4414409cd19fa82549f065268dfd602d7fb9d8ebb3a990b5f317fc57",
        "question": "Count the number of chip model that do not have wifi.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ chip_model ] Predicate [ WiFi = 'No' ] Output [ WiFi ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "742689655d46967918750cd452dcf44d692846025236f160de1a02116ef32afc",
        "question": "List all the model names sorted by their launch year.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ chip_model ] Output [ Launch_year , Model_name ] ; #2 = Sort [ #1 ] OrderBy [ Launch_year ASC ] Output [ Launch_year , Model_name ]"
    },
    {
        "id": "bcc8c25297f31c98f47939c6212984097cf3b21f069a7a2067a42f8b81c3a713",
        "question": "Find the average ram mib size of the chip models that are never used by any phone.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ chip_model ] Output [ RAM_MiB , Model_name ] ; #2 = Scan Table [ phone ] Output [ chip_model ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.chip_model IS NULL OR #1.Model_name = #2.chip_model ] Output [ #1.RAM_MiB ] ; #4 = Aggregate [ #3 ] Output [ AVG(RAM_MiB) AS Avg_RAM_MiB ]"
    },
    {
        "id": "6bce4ed1f259fa1f14d393df5f6b1557083b0cb72f53ad3b7ddde87bf8cd0d53",
        "question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.",
        "parsing_tree": "phone_1 | #1 = Scan Table [ phone ] Predicate [ Accreditation_type = 'Provisional' ] Output [ Accreditation_type , screen_mode ] ; #2 = Scan Table [ screen_mode ] Output [ Graphics_mode , Pixels ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.screen_mode = #2.Graphics_mode ] Distinct [ true ] Output [ #2.Pixels ] ; #4 = Scan Table [ phone ] Predicate [ Accreditation_type = 'Full' ] Output [ Accreditation_type , screen_mode ] ; #5 = Scan Table [ screen_mode ] Output [ Graphics_mode , Pixels ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.screen_mode = #5.Graphics_mode ] Output [ #5.Pixels ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Pixels = #6.Pixels ] Output [ #3.Pixels ]"
    },
    {
        "id": "fa931b187dd7cb74548c6c9ae5043985c3f07c59cf95be4c7dda90e4802e3010",
        "question": "How many countries are there in total?",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e84e511145a9ce52772005a99a7f7f930db1ca32731ac9ed3f543e1b8f5fd0a1",
        "question": "Count the number of countries.",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c262cb77dc36019750097001e9f67f39417f4381a48e30a701d65725f0f535d5",
        "question": "Show the country name and capital of all countries.",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Output [ Country_name , Capital ]"
    },
    {
        "id": "2a5737df77b362c3ba2e89f4cbe4b5d6179c54a9e44171616dd53964d42ce484",
        "question": "What are the names and capitals of each country?",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Output [ Country_name , Capital ]"
    },
    {
        "id": "d17938d547380115a01cf66ab2ab3710849c86efa1eb451dfb1701771a992998",
        "question": "Show all official native languages that contain the word \"English\".",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Predicate [ Official_native_language like '%English%' ] Output [ Official_native_language ]"
    },
    {
        "id": "fcf215bbff10db23337e89de5410c968381704704ebaecfeac9dc244a115bbf5",
        "question": "What are the official native languages that contain the string \"English\".",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Predicate [ Official_native_language like '%English%' ] Output [ Official_native_language ]"
    },
    {
        "id": "738a07c25255464ab4bd5fec25ee3dd8005c81c3388c524fecbf1c2bc31e64ec",
        "question": "Show all distinct positions of matches.",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Distinct [ true ] Output [ Position ]"
    },
    {
        "id": "d3b730ec553c1c488eb05b291061a235753254b664dd0b7becf176a508041a63",
        "question": "What are the different positions for match season?",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Distinct [ true ] Output [ Position ]"
    },
    {
        "id": "c81df96cbfac98270456b9b3237a064e12717f84c1166fc65c447de7eed2d818",
        "question": "Show the players from college UCLA.",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Predicate [ College = 'UCLA' ] Output [ Player , College ]"
    },
    {
        "id": "00a1472a31df7d463c4c3805dbcd3045da1ba617dfd8e58d6d749da9d4c30877",
        "question": "Who are the players from UCLA?",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Predicate [ College = 'UCLA' ] Output [ Player , College ]"
    },
    {
        "id": "6aac21dd65fd2faafd0a0f7b7be4b27e7aa3842647a5ba805884e7c656512f42",
        "question": "Show the distinct position of players from college UCLA or Duke.",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Predicate [ College = 'Duke' OR College = 'UCLA' ] Distinct [ true ] Output [ Position ]"
    },
    {
        "id": "84c2595d048e9f7f7bb8db9df17dfd75ebda2ab48c08286b094ba1aec1a7fd57",
        "question": "What are the different positions of players from UCLA or Duke colleges?",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Predicate [ College = 'Duke' OR College = 'UCLA' ] Distinct [ true ] Output [ Position ]"
    },
    {
        "id": "6428428d9157d3f55d3d5cd551ed55c17d4199656d5dafd933ce20c7195181ad",
        "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Predicate [ Position = 'Defender' ] Output [ Draft_Class , Draft_Pick_Number , Position ]"
    },
    {
        "id": "0c8d91e83cd41420dd41167ff2c893dacb02c80e7b67e06f17530412f2653b01",
        "question": "What are the draft pick numbers and draft classes for players who play the Defender position?",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Predicate [ Position = 'Defender' ] Output [ Draft_Class , Draft_Pick_Number , Position ]"
    },
    {
        "id": "d079a4f02f46acb20e35dc1fc35cbeaa89a5386ed0c4bbc2cf04aeab1b6fc56e",
        "question": "How many distinct teams are involved in match seasons?",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Distinct [ true ] Output [ Team ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Team) AS Count_Dist_Team ]"
    },
    {
        "id": "34d6ff7eee799ae9541459b18964a916ddfd8c3024a41ab8019256fbd859b757",
        "question": "Count the number of different teams involved in match season.",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Distinct [ true ] Output [ Team ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Team) AS Count_Dist_Team ]"
    },
    {
        "id": "2ae1863ea1db9cd977a87085ca280ccb6020c2cccb3c661b13c12b3fe67bda51",
        "question": "Show the players and the years played.",
        "parsing_tree": "match_season | #1 = Scan Table [ player ] Output [ Years_Played , Player ]"
    },
    {
        "id": "41511607a09c580bfe75a71d488d81b62c9044525d40c133ec0ecdc34253fdef",
        "question": "Who are the different players and how many years has each played?",
        "parsing_tree": "match_season | #1 = Scan Table [ player ] Output [ Years_Played , Player ]"
    },
    {
        "id": "d5103f27a05c9ffa761815e5b4cec8b7bdb68b9a21554824d4add76eb71a06bb",
        "question": "Show all team names.",
        "parsing_tree": "match_season | #1 = Scan Table [ team ] Output [ Name ]"
    },
    {
        "id": "176d56be1807b0df55f0f9f4302f42dc5f54155f725e1f8f3aed5f188fbc6ee6",
        "question": "What are the names of all teams?",
        "parsing_tree": "match_season | #1 = Scan Table [ team ] Output [ Name ]"
    },
    {
        "id": "62d9e5e5f290826b220a329b2d74b726a53f0d6a1697387d4a567cf1f8a907b7",
        "question": "Show the season, the player, and the name of the country that player belongs to.",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Output [ Country_name , Country_id ] ; #2 = Scan Table [ match_season ] Output [ Season , Player , Country ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country_id = #2.Country ] Output [ #2.Season , #1.Country_name , #2.Player ]"
    },
    {
        "id": "677cb4ab984610dab647ccd70b60b80b11f7bc0780f843e8232c0068fe8935ae",
        "question": "For each player, what are their name, season, and country that they belong to?",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Output [ Country_name , Country_id ] ; #2 = Scan Table [ match_season ] Output [ Season , Player , Country ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country_id = #2.Country ] Output [ #2.Season , #1.Country_name , #2.Player ]"
    },
    {
        "id": "6bcc78da20aa9dea434af0d78cb3d590c11210df80cad55247ff27a0946a4b97",
        "question": "Which players are from Indonesia?",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Predicate [ Country_name = 'Indonesia' ] Output [ Country_name , Country_id ] ; #2 = Scan Table [ match_season ] Output [ Player , Country ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country_id = #2.Country ] Output [ #2.Player ]"
    },
    {
        "id": "399b15b4307ab8b1472b4cfd73fad7eeac89ef54bf183dd5aec697948f4e7a3c",
        "question": "Who are the players from Indonesia?",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Predicate [ Country_name = 'Indonesia' ] Output [ Country_name , Country_id ] ; #2 = Scan Table [ match_season ] Output [ Player , Country ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country_id = #2.Country ] Output [ #2.Player ]"
    },
    {
        "id": "a56db38c612c0dafd95d8933b10cab3e07bb1321d7bee144a51d3b99673c8985",
        "question": "What are the distinct positions of the players from a country whose capital is Dublin?",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Predicate [ Capital = 'Dublin' ] Output [ Capital , Country_id ] ; #2 = Scan Table [ match_season ] Output [ Position , Country ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country_id = #2.Country ] Distinct [ true ] Output [ #2.Position ]"
    },
    {
        "id": "da0495cae54e620ba3c3ff6bb17b359b8a6b37aedf39556fa8ae4043abe7acd0",
        "question": "Give the different positions of players who play for the country with the capital Dublin.",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Predicate [ Capital = 'Dublin' ] Output [ Capital , Country_id ] ; #2 = Scan Table [ match_season ] Output [ Position , Country ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country_id = #2.Country ] Distinct [ true ] Output [ #2.Position ]"
    },
    {
        "id": "e7b800cfa61401a2745e09aeda6b995ebf28bd630c1c40703bef388fe9387c47",
        "question": "What are the official languages of the countries of players from Maryland or Duke college?",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Predicate [ College = 'Duke' OR College = 'Maryland' ] Output [ College , Country ] ; #2 = Scan Table [ country ] Output [ Official_native_language , Country_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country = #2.Country_id ] Output [ #2.Official_native_language ]"
    },
    {
        "id": "ccb45b444bfafab5b2802cc3244dc3dc32629071b0585a0ecbab8dc477040ef1",
        "question": "Return the official native languages of countries who have players from Maryland or Duke colleges.",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Predicate [ College = 'Duke' OR College = 'Maryland' ] Output [ College , Country ] ; #2 = Scan Table [ country ] Output [ Official_native_language , Country_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country = #2.Country_id ] Output [ #2.Official_native_language ]"
    },
    {
        "id": "be16ade36e875d6d7b97b7fef793d97d3fb49655c2ee4644bf74d26d0b0b0fa4",
        "question": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Output [ Official_native_language , Country_id ] ; #2 = Scan Table [ match_season ] Predicate [ Position = 'Defender' ] Output [ Position , Country ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country_id = #2.Country ] Distinct [ true ] Output [ #1.Official_native_language ] ; #4 = Aggregate [ #3 ] Output [ COUNT(Official_native_language) AS Count_Official_native_language ]"
    },
    {
        "id": "a752d97f17d953e411e82b8addd3a3fc2bceb8aa8d17cb6d664caa8860304821",
        "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Output [ Official_native_language , Country_id ] ; #2 = Scan Table [ match_season ] Predicate [ Position = 'Defender' ] Output [ Position , Country ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country_id = #2.Country ] Distinct [ true ] Output [ #1.Official_native_language ] ; #4 = Aggregate [ #3 ] Output [ COUNT(Official_native_language) AS Count_Official_native_language ]"
    },
    {
        "id": "65e66b8aa4d1ae6c06330b086bfe7dc6d885a9d45a5d647ae0e325adff7e0d5b",
        "question": "Show the season, the player, and the name of the team that players belong to.",
        "parsing_tree": "match_season | #1 = Scan Table [ team ] Output [ Name , Team_id ] ; #2 = Scan Table [ match_season ] Output [ Season , Player , Team ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Team_id = #2.Team ] Output [ #2.Season , #2.Player , #1.Name ]"
    },
    {
        "id": "3ef33feb60dbd355e9b3c1ac8b2ec3a182a1309dc36bc9deb983feb489cd44c2",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "parsing_tree": "match_season | #1 = Scan Table [ team ] Output [ Name , Team_id ] ; #2 = Scan Table [ match_season ] Output [ Season , Player , Team ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Team_id = #2.Team ] Output [ #2.Season , #2.Player , #1.Name ]"
    },
    {
        "id": "a21753ab17b2da3c6d4c47f653c6ce92d673ee665eb53ab61734ad0b462e1c26",
        "question": "Show the positions of the players from the team with name \"Ryley Goldner\".",
        "parsing_tree": "match_season | #1 = Scan Table [ team ] Predicate [ Name = 'Ryley Goldner' ] Output [ Name , Team_id ] ; #2 = Scan Table [ match_season ] Output [ Position , Team ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Team_id = #2.Team ] Output [ #2.Position ]"
    },
    {
        "id": "58ea9e29a73262cc51b388ae8165e4c78b84fb142ec3cd4d37928d1a09fd9652",
        "question": "Return the positions of players on the team Ryley Goldner.",
        "parsing_tree": "match_season | #1 = Scan Table [ team ] Predicate [ Name = 'Ryley Goldner' ] Output [ Name , Team_id ] ; #2 = Scan Table [ match_season ] Output [ Position , Team ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Team_id = #2.Team ] Output [ #2.Position ]"
    },
    {
        "id": "45412454d2e1aae60bd6498b53deda1f36f0486c87ad547959aa994982077afa",
        "question": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\".",
        "parsing_tree": "match_season | #1 = Scan Table [ team ] Predicate [ Name = 'Columbus Crew' ] Output [ Name , Team_id ] ; #2 = Scan Table [ match_season ] Output [ College , Team ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Team_id = #2.Team ] Distinct [ true ] Output [ #2.College ] ; #4 = Aggregate [ #3 ] Output [ COUNT(College) AS Count_College ]"
    },
    {
        "id": "8554fb2a623d8be3122bc4a93c7d41c97b194dfc521b83324fa52f130309cd09",
        "question": "Count the number of different colleges that players who play for Columbus Crew are from.",
        "parsing_tree": "match_season | #1 = Scan Table [ team ] Predicate [ Name = 'Columbus Crew' ] Output [ Name , Team_id ] ; #2 = Scan Table [ match_season ] Output [ College , Team ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Team_id = #2.Team ] Distinct [ true ] Output [ #2.College ] ; #4 = Aggregate [ #3 ] Output [ COUNT(College) AS Count_College ]"
    },
    {
        "id": "abd6da6d2d488474003aa848c982e67dd0c7cdf8e9dd1d3f880b9939f7f71948",
        "question": "Show the players and years played for players from team \"Columbus Crew\".",
        "parsing_tree": "match_season | #1 = Scan Table [ team ] Predicate [ Name = 'Columbus Crew' ] Output [ Name , Team_id ] ; #2 = Scan Table [ player ] Output [ Years_Played , Player , Team ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Team_id = #2.Team ] Output [ #2.Player , #2.Years_Played ]"
    },
    {
        "id": "18fabc8dad7ba23ed727e9055302d6ef82d7f913aed1fcc7723cc51743241761",
        "question": "What are the players who played for Columbus Crew, and how many years did each play for?",
        "parsing_tree": "match_season | #1 = Scan Table [ team ] Predicate [ Name = 'Columbus Crew' ] Output [ Name , Team_id ] ; #2 = Scan Table [ player ] Output [ Years_Played , Player , Team ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Team_id = #2.Team ] Output [ #2.Player , #2.Years_Played ]"
    },
    {
        "id": "00f600c632c212317a70274d8176f0d13402e8c880753094eee73c7aed936a2e",
        "question": "Show the position of players and the corresponding number of players.",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Output [ Position ] ; #2 = Aggregate [ #1 ] GroupBy [ Position ] Output [ countstar AS Count_Star , Position ]"
    },
    {
        "id": "4bad9ff187810fa7a443118446b7d56f1b774db4109a5876864b35db57c398c4",
        "question": "How many players played each position?",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Output [ Position ] ; #2 = Aggregate [ #1 ] GroupBy [ Position ] Output [ countstar AS Count_Star , Position ]"
    },
    {
        "id": "f6ab56784db67ad2912e53900b9ee4d7f7f0c1b73cd856947977ac2a4db3cb82",
        "question": "Show the country names and the corresponding number of players.",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Output [ Country_name , Country_id ] ; #2 = Scan Table [ match_season ] Output [ Country ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country_id = #2.Country ] Output [ #1.Country_name ] ; #4 = Aggregate [ #3 ] GroupBy [ Country_name ] Output [ countstar AS Count_Star , Country_name ]"
    },
    {
        "id": "aa2a86305f046a7d8bdcdf1d3a306a4be0f94200ce47fe8ec0ee696eec375ccc",
        "question": "How many players are from each country?",
        "parsing_tree": "match_season | #1 = Scan Table [ country ] Output [ Country_name , Country_id ] ; #2 = Scan Table [ match_season ] Output [ Country ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country_id = #2.Country ] Output [ #1.Country_name ] ; #4 = Aggregate [ #3 ] GroupBy [ Country_name ] Output [ countstar AS Count_Star , Country_name ]"
    },
    {
        "id": "ecdc90d5ffeb8ad52c3608712a1329c8408f1d7fed867a6e6d643e8b55806b8d",
        "question": "Return all players sorted by college in ascending alphabetical order.",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Output [ Player , College ] ; #2 = Sort [ #1 ] OrderBy [ College ASC ] Output [ Player , College ]"
    },
    {
        "id": "b32127f72d0e7e7984e265293e79101a630ca499b989d1015c1c2815025c11b0",
        "question": "What are all the players who played in match season, sorted by college in ascending alphabetical order?",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Output [ Player , College ] ; #2 = Sort [ #1 ] OrderBy [ College ASC ] Output [ Player , College ]"
    },
    {
        "id": "f9195f9d3238f789c522c942a07508299a6365ed438e145546ec175e8ade3c56",
        "question": "Show the most common position of players in match seasons.",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Output [ Position ] ; #2 = Aggregate [ #1 ] GroupBy [ Position ] Output [ countstar AS Count_Star , Position ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Position , Count_Star ]"
    },
    {
        "id": "75d2314384f722f08871b496d9acda667f13eff1f639e8be1a580c54d4c4afe8",
        "question": "What is the position that is most common among players in match seasons?",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Output [ Position ] ; #2 = Aggregate [ #1 ] GroupBy [ Position ] Output [ countstar AS Count_Star , Position ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Position , Count_Star ]"
    },
    {
        "id": "2b122cfa3354d340c06adadf6684d979eda90071d06fb81a99db2970426b5484",
        "question": "Show the top 3 most common colleges of players in match seasons.",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Output [ College ] ; #2 = Aggregate [ #1 ] GroupBy [ College ] Output [ countstar AS Count_Star , College ] ; #3 = TopSort [ #2 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , College ]"
    },
    {
        "id": "6f4e01fe9c4c3566d5d538afd2dca375fc8a5e14bbac57e927d99865b16edac5",
        "question": "What are the three colleges from which the most players are from?",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Output [ College ] ; #2 = Aggregate [ #1 ] GroupBy [ College ] Output [ countstar AS Count_Star , College ] ; #3 = TopSort [ #2 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , College ]"
    },
    {
        "id": "19f9e6b14bfa0adda7bc42f472aa993617fb74f01aaf0091e8d4de1eef514bed",
        "question": "Show the name of colleges that have at least two players.",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Output [ College ] ; #2 = Aggregate [ #1 ] GroupBy [ College ] Output [ countstar AS Count_Star , College ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ College ]"
    },
    {
        "id": "d7133cc5ecfb79701dcaf2436f08707e031c0472b3266f871638a665ae3dc169",
        "question": "What are the names of all colleges that have two or more players?",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Output [ College ] ; #2 = Aggregate [ #1 ] GroupBy [ College ] Output [ countstar AS Count_Star , College ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ College ]"
    },
    {
        "id": "7c36ae587b4a40a42a6d337de2efa714dc3b5c7872df2ecd78fe1e9a6a403d30",
        "question": "Show the name of colleges that have at least two players in descending alphabetical order.",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Output [ College ] ; #2 = Aggregate [ #1 ] GroupBy [ College ] Output [ countstar AS Count_Star , College ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ College ] ; #4 = Sort [ #3 ] OrderBy [ College DESC ] Output [ College ]"
    },
    {
        "id": "44a09def78c519b97ea0c3637d414dc3fcc580812cd28cf4bbaddb4bc0c70286",
        "question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Output [ College ] ; #2 = Aggregate [ #1 ] GroupBy [ College ] Output [ countstar AS Count_Star , College ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ College ] ; #4 = Sort [ #3 ] OrderBy [ College DESC ] Output [ College ]"
    },
    {
        "id": "66dd9ae92216100289c4530f3ace300217abcf2753d5665958422d1a3b700c45",
        "question": "What are the names of teams that do no have match season record?",
        "parsing_tree": "match_season | #1 = Scan Table [ team ] Output [ Name , Team_id ] ; #2 = Scan Table [ match_season ] Output [ Team ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Team IS NULL OR #1.Team_id = #2.Team ] Output [ #1.Name ]"
    },
    {
        "id": "756289c8e9ae70e56703a9d48124f416e49aed4b1f5d6cc86e3e63e984a4b701",
        "question": "Return the names of teams that have no match season record.",
        "parsing_tree": "match_season | #1 = Scan Table [ team ] Output [ Name , Team_id ] ; #2 = Scan Table [ match_season ] Output [ Team ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Team IS NULL OR #1.Team_id = #2.Team ] Output [ #1.Name ]"
    },
    {
        "id": "a8299a4cc5b357f17873b88a2733d156792a49b9ada06fbc1b8db2fddf7153f7",
        "question": "What are the names of countries that have both players with position forward and players with position defender?",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Predicate [ Position = 'Forward' ] Output [ Position , Country ] ; #2 = Scan Table [ country ] Output [ Country_name , Country_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country = #2.Country_id ] Distinct [ true ] Output [ #2.Country_name ] ; #4 = Scan Table [ country ] Output [ Country_name , Country_id ] ; #5 = Scan Table [ match_season ] Predicate [ Position = 'Defender' ] Output [ Position , Country ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Country_id = #5.Country ] Output [ #4.Country_name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Country_name = #6.Country_name ] Output [ #3.Country_name ]"
    },
    {
        "id": "eb75bbf24ca2cfb1330e6a2461f0f3d0a1cdf12d8f2623ab949165472d4cb4eb",
        "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Predicate [ Position = 'Forward' ] Output [ Position , Country ] ; #2 = Scan Table [ country ] Output [ Country_name , Country_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country = #2.Country_id ] Distinct [ true ] Output [ #2.Country_name ] ; #4 = Scan Table [ country ] Output [ Country_name , Country_id ] ; #5 = Scan Table [ match_season ] Predicate [ Position = 'Defender' ] Output [ Position , Country ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Country_id = #5.Country ] Output [ #4.Country_name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Country_name = #6.Country_name ] Output [ #3.Country_name ]"
    },
    {
        "id": "dd17e975be2d9cc135fe1acbd8c6ef39bfacce381e5a294f021c5aa5e1faa46a",
        "question": "Which college have both players with position midfielder and players with position defender?",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Predicate [ Position = 'Midfielder' ] Distinct [ true ] Output [ Position , College ] ; #2 = Scan Table [ match_season ] Predicate [ Position = 'Defender' ] Output [ Position , College ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.College = #2.College ] Output [ #1.College ]"
    },
    {
        "id": "abffd5f1a4788e8a94ff27bc794d49120792ab80ccbc0fa22e7500107e592b64",
        "question": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.",
        "parsing_tree": "match_season | #1 = Scan Table [ match_season ] Predicate [ Position = 'Midfielder' ] Distinct [ true ] Output [ Position , College ] ; #2 = Scan Table [ match_season ] Predicate [ Position = 'Defender' ] Output [ Position , College ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.College = #2.College ] Output [ #1.College ]"
    },
    {
        "id": "612796e94ae1978717e7bbfe0ddb175571739d68dc17a438ea0031913d55c3ef",
        "question": "How many climbers are there?",
        "parsing_tree": "climbing | #1 = Scan Table [ climber ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f8f20b7c262a2afd0a4a310221d953bec9ea0a0cf9d07f5aaf96dfa3bd983c71",
        "question": "Count the number of climbers.",
        "parsing_tree": "climbing | #1 = Scan Table [ climber ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5bd32a7b44fd93ee3b2f30aeca5d1d7cb2d82c6b1f8b59e52eb74dde067e72fd",
        "question": "List the names of climbers in descending order of points.",
        "parsing_tree": "climbing | #1 = Scan Table [ climber ] Output [ Name , Points ] ; #2 = Sort [ #1 ] OrderBy [ Points DESC ] Output [ Name , Points ]"
    },
    {
        "id": "57a4d390ea395cd6ded416e1e25ac3cb34620a271768e41273a56e061893abcf",
        "question": "What are the names of the climbers, ordered by points descending?",
        "parsing_tree": "climbing | #1 = Scan Table [ climber ] Output [ Name , Points ] ; #2 = Sort [ #1 ] OrderBy [ Points DESC ] Output [ Name , Points ]"
    },
    {
        "id": "4dc50054fd280a4842827e73941b3a666a307dabbfc97fbc888c02e3c335d7c3",
        "question": "List the names of climbers whose country is not Switzerland.",
        "parsing_tree": "climbing | #1 = Scan Table [ climber ] Predicate [ Country <> 'Switzerland' ] Output [ Country , Name ]"
    },
    {
        "id": "e7216aeebdccbe854d2b57018cafb317e90a94342320daa71fd71c5af42bd86b",
        "question": "What are the names of climbers who are not from the country of Switzerland?",
        "parsing_tree": "climbing | #1 = Scan Table [ climber ] Predicate [ Country <> 'Switzerland' ] Output [ Country , Name ]"
    },
    {
        "id": "b0cc12d4cd5ebd0a028e605c4dc8339cda1d308b456e4a43fedbf3529870e950",
        "question": "What is the maximum point for climbers whose country is United Kingdom?",
        "parsing_tree": "climbing | #1 = Scan Table [ climber ] Predicate [ Country = 'United Kingdom' ] Output [ Country , Points ] ; #2 = Aggregate [ #1 ] Output [ MAX(Points) AS Max_Points ]"
    },
    {
        "id": "53edc64e0a5d42c064320b41fa155846746a48f7a01fa5d7bd3008eb15df9e13",
        "question": "Return the maximum number of points for climbers from the United Kingdom.",
        "parsing_tree": "climbing | #1 = Scan Table [ climber ] Predicate [ Country = 'United Kingdom' ] Output [ Country , Points ] ; #2 = Aggregate [ #1 ] Output [ MAX(Points) AS Max_Points ]"
    },
    {
        "id": "f79457b64805b495c94c04349eb26720dcabcabff6a1c29528f1ad85f3037add",
        "question": "How many distinct countries are the climbers from?",
        "parsing_tree": "climbing | #1 = Scan Table [ climber ] Distinct [ true ] Output [ Country ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Country) AS Count_Dist_Country ]"
    },
    {
        "id": "1fe1ad6777ddfa03d61771f55cf9ed1cd644795141a64ee9149c0dda3ea1ef68",
        "question": "Count the number of different countries that climbers are from.",
        "parsing_tree": "climbing | #1 = Scan Table [ climber ] Distinct [ true ] Output [ Country ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Country) AS Count_Dist_Country ]"
    },
    {
        "id": "cf9e33ff0b03d1b599fbb0a0dc20fc7fbe07e7f138077049da662dfe964cf62e",
        "question": "What are the names of mountains in ascending alphabetical order?",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "351f2d0abc63ba127a7cbc0499f81c0534c16d09fbe234092a6b7a40df609008",
        "question": "Give the names of mountains in alphabetical order.",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "68a76f666fc0487fc98ed87f90af5357bc6e39648ff4b69799fee5111abd40e9",
        "question": "What are the countries of mountains with height bigger than 5000?",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Predicate [ Height > 5000.0 ] Output [ Country , Height ]"
    },
    {
        "id": "9382c80e55a4302a03679eb5cd6672448e58553625c77d191a52df7fb54b9a8b",
        "question": "Return the countries of the mountains that have a height larger than 5000.",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Predicate [ Height > 5000.0 ] Output [ Country , Height ]"
    },
    {
        "id": "0ee400d5eee3948c9536cbae684564c9402f186ca66f06fd94e3563b13d30fd2",
        "question": "What is the name of the highest mountain?",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Output [ Name , Height ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Height DESC ] Output [ Name , Height ]"
    },
    {
        "id": "7fa8c73dfad9e24a1768d30fa3a9d20a234a36d559e1961091e261476adf9eb2",
        "question": "Return the name of the mountain with the greatest height.",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Output [ Name , Height ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Height DESC ] Output [ Name , Height ]"
    },
    {
        "id": "5d7eec57352d1cb3c9a7c601c1e59884385e93b844404c441bc71bf008379d9a",
        "question": "Show the names of climbers and the heights of mountains they climb.",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Output [ Mountain_ID , Height ] ; #2 = Scan Table [ climber ] Output [ Name , Mountain_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Mountain_ID = #2.Mountain_ID ] Output [ #2.Name , #1.Height ]"
    },
    {
        "id": "59edb7c20f347f6feba6c12d408977a4a6d1a6310d4780c77d1f245752f9e2f4",
        "question": "What are the names of climbers and the corresponding heights of the mountains that they climb?",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Output [ Mountain_ID , Height ] ; #2 = Scan Table [ climber ] Output [ Name , Mountain_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Mountain_ID = #2.Mountain_ID ] Output [ #2.Name , #1.Height ]"
    },
    {
        "id": "ecb54de82dee05d2a0aa8490b451039c5f835181d4a423adeff2c1f341e340b5",
        "question": "Show the height of the mountain climbed by the climber with the maximum points.",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Output [ Mountain_ID , Height ] ; #2 = Scan Table [ climber ] Output [ Mountain_ID , Points ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Mountain_ID = #2.Mountain_ID ] Output [ #2.Points , #1.Height ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Points DESC ] Output [ Height , Points ]"
    },
    {
        "id": "331029633a7bf74f53f35d4f1576d66fdabd657957c2581617d455318038950f",
        "question": "What is the height of the mountain climbined by the climbing who had the most points?",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Output [ Mountain_ID , Height ] ; #2 = Scan Table [ climber ] Output [ Mountain_ID , Points ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Mountain_ID = #2.Mountain_ID ] Output [ #2.Points , #1.Height ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Points DESC ] Output [ Height , Points ]"
    },
    {
        "id": "c92805beab6c40856b22b7f3bf618adbfcfd166d53c35774bc8abdb5c63608d5",
        "question": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
        "parsing_tree": "climbing | #1 = Scan Table [ climber ] Predicate [ Country = 'West Germany' ] Output [ Country , Mountain_ID ] ; #2 = Scan Table [ mountain ] Output [ Name , Mountain_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Mountain_ID = #2.Mountain_ID ] Distinct [ true ] Output [ #2.Name ]"
    },
    {
        "id": "b3af8ed4952cbdbb45679be5fc282f0c34c1a308dc6376a0f6e6e970a515e5d3",
        "question": "What are the different names of mountains ascended by climbers from the country of West Germany?",
        "parsing_tree": "climbing | #1 = Scan Table [ climber ] Predicate [ Country = 'West Germany' ] Output [ Country , Mountain_ID ] ; #2 = Scan Table [ mountain ] Output [ Name , Mountain_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Mountain_ID = #2.Mountain_ID ] Distinct [ true ] Output [ #2.Name ]"
    },
    {
        "id": "8079396b4112a12600bfadb1f46b472ccbf43bb46edd1804e5ece9e3cb2d75f4",
        "question": "Show the times used by climbers to climb mountains in Country Uganda.",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Predicate [ Country = 'Uganda' ] Output [ Country , Mountain_ID ] ; #2 = Scan Table [ climber ] Output [ Time , Mountain_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Mountain_ID = #2.Mountain_ID ] Output [ #2.Time ]"
    },
    {
        "id": "4720a68601b3380963326a45e610f647ab66128abd31397dc9328b18309b4701",
        "question": "What are the times used by climbers who climbed mountains in the country of Uganda?",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Predicate [ Country = 'Uganda' ] Output [ Country , Mountain_ID ] ; #2 = Scan Table [ climber ] Output [ Time , Mountain_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Mountain_ID = #2.Mountain_ID ] Output [ #2.Time ]"
    },
    {
        "id": "a4260fba7a4c3b0ebb0bd188399171d83931f1bbb3cc762df9a80c49e4cc8362",
        "question": "Please show the countries and the number of climbers from each country.",
        "parsing_tree": "climbing | #1 = Scan Table [ climber ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]"
    },
    {
        "id": "44bf2bb228fc66c1d43518f2ae8a717042dbe3b4acd40b000003a1c7ae03992a",
        "question": "How many climbers are from each country?",
        "parsing_tree": "climbing | #1 = Scan Table [ climber ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]"
    },
    {
        "id": "fc4115db9be992b25b2e3c3bdefdc78bc242488ae1fed686040a3d3e8d8964da",
        "question": "List the countries that have more than one mountain.",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Country ]"
    },
    {
        "id": "f9033f35f3e543e0fa91c503f2ba845c27c663e2e54bd7d653df54bcc1dfee08",
        "question": "Which countries have more than one mountain?",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Country ]"
    },
    {
        "id": "e4c3cedb0fef87a4697298919e6d701ff075a51134f2d7cda4e78160e20ce650",
        "question": "List the names of mountains that do not have any climber.",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Output [ Name , Mountain_ID ] ; #2 = Scan Table [ climber ] Output [ Mountain_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Mountain_ID IS NULL OR #1.Mountain_ID = #2.Mountain_ID ] Output [ #1.Name ]"
    },
    {
        "id": "4e872dfb6bb02872fb7d385a8cc838d0bccdc805a9f9b2b5da87e7ef88abc44f",
        "question": "What are the names of countains that no climber has climbed?",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Output [ Name , Mountain_ID ] ; #2 = Scan Table [ climber ] Output [ Mountain_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Mountain_ID IS NULL OR #1.Mountain_ID = #2.Mountain_ID ] Output [ #1.Name ]"
    },
    {
        "id": "6178755019856714a353f91cb01adcab00bf43d8d35a0c8148eab7f1ced08a44",
        "question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Predicate [ Height > 5600.0 ] Distinct [ true ] Output [ Country , Height ] ; #2 = Scan Table [ mountain ] Predicate [ Height < 5200.0 ] Output [ Country , Height ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Country = #2.Country ] Output [ #1.Country ]"
    },
    {
        "id": "88af366caf7a1fd63025eba7682faddd8ae57a5f95900550159ad964055a4ee4",
        "question": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Predicate [ Height > 5600.0 ] Distinct [ true ] Output [ Country , Height ] ; #2 = Scan Table [ mountain ] Predicate [ Height < 5200.0 ] Output [ Country , Height ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Country = #2.Country ] Output [ #1.Country ]"
    },
    {
        "id": "b5328688fa1f2c22a40f5292eed4fc899e706257a67c6724ff5ae51af5f9cc17",
        "question": "Show the range that has the most number of mountains.",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Output [ Range ] ; #2 = Aggregate [ #1 ] GroupBy [ Range ] Output [ countstar AS Count_Star , Range ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Range ]"
    },
    {
        "id": "cef0f13281b00f0e10f467bc8882c2b6d5069dd83525aec93d0ad1c27139a8ce",
        "question": "Which range contains the most mountains?",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Output [ Range ] ; #2 = Aggregate [ #1 ] GroupBy [ Range ] Output [ countstar AS Count_Star , Range ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Range ]"
    },
    {
        "id": "c0ca3ce6ceb8ad0f58f66d4484f97797536f6dc4954acf70ab749b9c1633b2ac",
        "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Predicate [ Height > 5000.0 OR Prominence > 1000.0 ] Output [ Prominence , Name , Height ]"
    },
    {
        "id": "16fe2a3c0452d1298b8fda57022b6c17399f6176f60a253e345b8fec9505d816",
        "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?",
        "parsing_tree": "climbing | #1 = Scan Table [ mountain ] Predicate [ Height > 5000.0 OR Prominence > 1000.0 ] Output [ Prominence , Name , Height ]"
    },
    {
        "id": "fc9d1ec685d2f544b95cfbc140a2ab7be44906b463da55fc7ef5b277c85f7bab",
        "question": "How many body builders are there?",
        "parsing_tree": "body_builder | #1 = Scan Table [ body_builder ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2bf4ae99f49f64a1a6c97042d25a617a023b48025a20415d3848a23b0ab24a9a",
        "question": "List the total scores of body builders in ascending order.",
        "parsing_tree": "body_builder | #1 = Scan Table [ body_builder ] Output [ Total ] ; #2 = Sort [ #1 ] OrderBy [ Total ASC ] Output [ Total ]"
    },
    {
        "id": "0d718190b7b042ffc258c7b2776c1228662195845d45f8cde270f8b95bef2038",
        "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.",
        "parsing_tree": "body_builder | #1 = Scan Table [ body_builder ] Output [ Snatch , Clean_Jerk ] ; #2 = Sort [ #1 ] OrderBy [ Snatch ASC ] Output [ Snatch , Clean_Jerk ]"
    },
    {
        "id": "c94cfd8a1a7c1ac4b34faf6867fc70305d17262857724be43fa24c9c0a69859c",
        "question": "What is the average snatch score of body builders?",
        "parsing_tree": "body_builder | #1 = Scan Table [ body_builder ] Output [ Snatch ] ; #2 = Aggregate [ #1 ] Output [ AVG(Snatch) AS Avg_Snatch ]"
    },
    {
        "id": "54131cd2258a173386ad5aa00a3b9febba7c32038df1767444b6097b4d90efb0",
        "question": "What are the clean and jerk score of the body builder with the highest total score?",
        "parsing_tree": "body_builder | #1 = Scan Table [ body_builder ] Output [ Clean_Jerk , Total ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Total DESC ] Output [ Clean_Jerk , Total ]"
    },
    {
        "id": "b57ea8728d8fbb61cc454e863a683f2afad4d5099abfbea59c83a48c35ae9348",
        "question": "What are the birthdays of people in ascending order of height?",
        "parsing_tree": "body_builder | #1 = Scan Table [ people ] Output [ Birth_Date , Height ] ; #2 = Sort [ #1 ] OrderBy [ Height ASC ] Output [ Birth_Date , Height ]"
    },
    {
        "id": "cdc39eb9225979eeee32a1a3e868efd7e2da24cb13802289c6ca1f41b7cefaa2",
        "question": "What are the names of body builders?",
        "parsing_tree": "body_builder | #1 = Scan Table [ body_builder ] Output [ People_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name ]"
    },
    {
        "id": "a0d313c9d190db6557ed0a8242ad06ff14063e422654aaa75e03bc255b61dd4d",
        "question": "What are the names of body builders whose total score is higher than 300?",
        "parsing_tree": "body_builder | #1 = Scan Table [ body_builder ] Predicate [ Total > 300.0 ] Output [ People_ID , Total ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name ]"
    },
    {
        "id": "0248ab82cc426f3f2a995ad4caeaca72fbfe960c57faffcc44db8be15bea22fc",
        "question": "What is the name of the body builder with the greatest body weight?",
        "parsing_tree": "body_builder | #1 = Scan Table [ body_builder ] Output [ People_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Weight , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name , #2.Weight ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Weight DESC ] Output [ Weight , Name ]"
    },
    {
        "id": "c2335dfa31da319e4214a29ce6fd505ce95ad1f0e3af75b12202bcaf4520237e",
        "question": "What are the birth date and birth place of the body builder with the highest total points?",
        "parsing_tree": "body_builder | #1 = Scan Table [ body_builder ] Output [ People_ID , Total ] ; #2 = Scan Table [ people ] Output [ People_ID , Birth_Place , Birth_Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #1.Total , #2.Birth_Place , #2.Birth_Date ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total DESC ] Output [ Birth_Place , Birth_Date , Total ]"
    },
    {
        "id": "a7e3125564189139614b7c01f233fcca433aef081a80764302491baa29bd9619",
        "question": "What are the heights of body builders with total score smaller than 315?",
        "parsing_tree": "body_builder | #1 = Scan Table [ body_builder ] Predicate [ Total < 315.0 ] Output [ People_ID , Total ] ; #2 = Scan Table [ people ] Output [ People_ID , Height ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Height ]"
    },
    {
        "id": "aac0f2e132f215eeb4dd9b0bb0183509c345b33eb8bc6e9def30c24b85a5e5f4",
        "question": "What is the average total score of body builders with height bigger than 200?",
        "parsing_tree": "body_builder | #1 = Scan Table [ people ] Predicate [ Height > 200.0 ] Output [ People_ID , Height ] ; #2 = Scan Table [ body_builder ] Output [ People_ID , Total ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Total ] ; #4 = Aggregate [ #3 ] Output [ AVG(Total) AS Avg_Total ]"
    },
    {
        "id": "ee95a7ab995aa1d87dd8524b2400efc1a39b8f26dc153187ee464856e9ce06bb",
        "question": "What are the names of body builders in descending order of total scores?",
        "parsing_tree": "body_builder | #1 = Scan Table [ body_builder ] Output [ People_ID , Total ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name , #1.Total ] ; #4 = Sort [ #3 ] OrderBy [ Total DESC ] Output [ Name , Total ]"
    },
    {
        "id": "35ba43983cc59b9a6d85809d460f7f594c693909c24a593911d96177482fac11",
        "question": "List each birth place along with the number of people from there.",
        "parsing_tree": "body_builder | #1 = Scan Table [ people ] Output [ Birth_Place ] ; #2 = Aggregate [ #1 ] GroupBy [ Birth_Place ] Output [ countstar AS Count_Star , Birth_Place ]"
    },
    {
        "id": "bdb49eadfeeca6779d1a1df30d18927358a7b080e8cab27a32a1bb14713ec54f",
        "question": "What is the most common birth place of people?",
        "parsing_tree": "body_builder | #1 = Scan Table [ people ] Output [ Birth_Place ] ; #2 = Aggregate [ #1 ] GroupBy [ Birth_Place ] Output [ countstar AS Count_Star , Birth_Place ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Birth_Place ]"
    },
    {
        "id": "0d709a6d32f3583b6724f30117c6a4529abd0b931ad4fa0f2493be697353a001",
        "question": "What are the birth places that are shared by at least two people?",
        "parsing_tree": "body_builder | #1 = Scan Table [ people ] Output [ Birth_Place ] ; #2 = Aggregate [ #1 ] GroupBy [ Birth_Place ] Output [ countstar AS Count_Star , Birth_Place ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Birth_Place ]"
    },
    {
        "id": "862e0d789a8331d5923265a25b8912de2d39ef1035498fe3ec3bc5035ff4d0c8",
        "question": "List the height and weight of people in descending order of height.",
        "parsing_tree": "body_builder | #1 = Scan Table [ people ] Output [ Weight , Height ] ; #2 = Sort [ #1 ] OrderBy [ Height DESC ] Output [ Weight , Height ]"
    },
    {
        "id": "62692d9a0684780325f74d3c39c458e8f2adb66fb854db43aa54281268869057",
        "question": "Show all information about each body builder.",
        "parsing_tree": "body_builder | #1 = Scan Table [ body_builder ] Output [ Snatch , People_ID , Total , Clean_Jerk , Body_Builder_ID ]"
    },
    {
        "id": "41631c22bb979581c29f9a59867cd099f3a9303f0da949e8c8f2372cde36bfad",
        "question": "List the names and origins of people who are not body builders.",
        "parsing_tree": "body_builder | #1 = Scan Table [ people ] Distinct [ true ] Output [ Birth_Place , Name ] ; #2 = Scan Table [ body_builder ] Output [ People_ID ] ; #3 = Scan Table [ people ] Output [ Birth_Place , People_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.People_ID = #3.People_ID ] Output [ #3.Name , #3.Birth_Place ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Birth_Place , #1.Name ]"
    },
    {
        "id": "54827063c9db6c5981943479758feab7765bc1dae947cd812367849d0101ebfe",
        "question": "How many distinct birth places are there?",
        "parsing_tree": "body_builder | #1 = Scan Table [ people ] Distinct [ true ] Output [ Birth_Place ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Birth_Place) AS Count_Dist_Birth_Place ]"
    },
    {
        "id": "3e4ac58848b89cea8fa250719c12aa4150ab90ec292afbcf77aec0528259868e",
        "question": "How many persons are not body builders?",
        "parsing_tree": "body_builder | #1 = Scan Table [ people ] Output [ People_ID ] ; #2 = Scan Table [ body_builder ] Output [ People_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.People_ID IS NULL OR #1.People_ID = #2.People_ID ] Output [ #1.People_ID ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ffebc5f8e654f8d181121f9d06310b23855cd80909a33c0b4f7840c2cca3b68a",
        "question": "What are the total scores of the body builders whose birthday contains the string \"January\" ?",
        "parsing_tree": "body_builder | #1 = Scan Table [ people ] Predicate [ Birth_Date like '%January%' ] Output [ People_ID , Birth_Date ] ; #2 = Scan Table [ body_builder ] Output [ People_ID , Total ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Total ]"
    },
    {
        "id": "7a7cc69040a9c7f46a56b2f081baf204ec91f4e72c4accddee093babdece8fb5",
        "question": "What is the minimum snatch score?",
        "parsing_tree": "body_builder | #1 = Scan Table [ body_builder ] Output [ Snatch ] ; #2 = Aggregate [ #1 ] Output [ MIN(Snatch) AS Min_Snatch ]"
    },
    {
        "id": "788ea221e41bb39a78aceac2035e56024d0b56f0d6a9cc500192cd7ddbd1ca5d",
        "question": "How many elections are there?",
        "parsing_tree": "election_representative | #1 = Scan Table [ election ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9ff50eb6fec0ea42c3ba04648450b337decb14ef6aef107bdcf72d7ae13b754c",
        "question": "List the votes of elections in descending order.",
        "parsing_tree": "election_representative | #1 = Scan Table [ election ] Output [ Votes ] ; #2 = Sort [ #1 ] OrderBy [ Votes DESC ] Output [ Votes ]"
    },
    {
        "id": "fbb5c94c76a273108e04333aa2c5d4de087fdc32ddc4ff2798edf46da2d0ced7",
        "question": "List the dates and vote percents of elections.",
        "parsing_tree": "election_representative | #1 = Scan Table [ election ] Output [ Vote_Percent , Date ]"
    },
    {
        "id": "85d583260ceaa756fef0136a95ece6dbb971ca3795fd627763c18053e2cd4156",
        "question": "What are the minimum and maximum vote percents of elections?",
        "parsing_tree": "election_representative | #1 = Scan Table [ election ] Output [ Vote_Percent ] ; #2 = Aggregate [ #1 ] Output [ MAX(Vote_Percent) AS Max_Vote_Percent , MIN(Vote_Percent) AS Min_Vote_Percent ]"
    },
    {
        "id": "0a9a8b6bc7bc50f07270d5809a5659670592a386494a748e0c73409596e5a022",
        "question": "What are the names and parties of representatives?",
        "parsing_tree": "election_representative | #1 = Scan Table [ representative ] Output [ Party , Name ]"
    },
    {
        "id": "3a0118361f659bc473214ef54a36a449ea02d040680110dc98629ef6ab142ec0",
        "question": "What are the names of representatives whose party is not \"Republican\"?",
        "parsing_tree": "election_representative | #1 = Scan Table [ representative ] Predicate [ Party <> 'Republican' ] Output [ Party , Name ]"
    },
    {
        "id": "2d0c7f25d0aec37bd5883ccee994cde2c02cb6c59585397e18899d5ef6778365",
        "question": "What are the life spans of representatives from New York state or Indiana state?",
        "parsing_tree": "election_representative | #1 = Scan Table [ representative ] Predicate [ State = 'Indiana' OR State = 'New York' ] Output [ Lifespan , State ]"
    },
    {
        "id": "0a2ef3377919d9a1aca6fccf7ac87bda3effa102744db2c9a8a1bb980ee2ae2b",
        "question": "What are the names of representatives and the dates of elections they participated in.",
        "parsing_tree": "election_representative | #1 = Scan Table [ election ] Output [ Representative_ID , Date ] ; #2 = Scan Table [ representative ] Output [ Representative_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Representative_ID = #2.Representative_ID ] Output [ #2.Name , #1.Date ]"
    },
    {
        "id": "10d33eece4d75b3f5ed40aee58c64ac61e8962dd6a63f4068b81555de9dd2942",
        "question": "What are the names of representatives with more than 10000 votes in election?",
        "parsing_tree": "election_representative | #1 = Scan Table [ election ] Predicate [ Votes > 10000.0 ] Output [ Representative_ID , Votes ] ; #2 = Scan Table [ representative ] Output [ Representative_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Representative_ID = #2.Representative_ID ] Output [ #2.Name ]"
    },
    {
        "id": "f9667fd79dc3de1277f86375888fa433b2f7c7f83d63c098938b94c39a9f1ce7",
        "question": "What are the names of representatives in descending order of votes?",
        "parsing_tree": "election_representative | #1 = Scan Table [ election ] Output [ Representative_ID , Votes ] ; #2 = Scan Table [ representative ] Output [ Representative_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Representative_ID = #2.Representative_ID ] Output [ #2.Name , #1.Votes ] ; #4 = Sort [ #3 ] OrderBy [ Votes DESC ] Output [ Votes , Name ]"
    },
    {
        "id": "23355dffeee90364c6ebd947588f8e7ecc9d76e3e58d16116881e70a14eed473",
        "question": "What is the party of the representative that has the smallest number of votes.",
        "parsing_tree": "election_representative | #1 = Scan Table [ election ] Output [ Representative_ID , Votes ] ; #2 = Scan Table [ representative ] Output [ Representative_ID , Party ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Representative_ID = #2.Representative_ID ] Output [ #1.Votes , #2.Party ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Votes ASC ] Output [ Votes , Party ]"
    },
    {
        "id": "52213cd5c033206fd4c718641af1b366ab56a01fcdc2edc87dcb8358d1050af1",
        "question": "What are the lifespans of representatives in descending order of vote percent?",
        "parsing_tree": "election_representative | #1 = Scan Table [ election ] Output [ Representative_ID , Vote_Percent ] ; #2 = Scan Table [ representative ] Output [ Representative_ID , Lifespan ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Representative_ID = #2.Representative_ID ] Output [ #2.Lifespan , #1.Vote_Percent ] ; #4 = Sort [ #3 ] OrderBy [ Vote_Percent DESC ] Output [ Vote_Percent , Lifespan ]"
    },
    {
        "id": "3ee9d02195a65d7e55395cbc2ff6e6d8c99a8856f0f2636ef411037b378000b7",
        "question": "What is the average number of votes of representatives from party \"Republican\"?",
        "parsing_tree": "election_representative | #1 = Scan Table [ representative ] Predicate [ Party = 'Republican' ] Output [ Representative_ID , Party ] ; #2 = Scan Table [ election ] Output [ Representative_ID , Votes ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Representative_ID = #2.Representative_ID ] Output [ #2.Votes ] ; #4 = Aggregate [ #3 ] Output [ AVG(Votes) AS Avg_Votes ]"
    },
    {
        "id": "404a063b6266d3433389130c45f9157431aaf42d1fd0289f1950684b5e792dcb",
        "question": "What are the different parties of representative? Show the party name and the number of representatives in each party.",
        "parsing_tree": "election_representative | #1 = Scan Table [ representative ] Output [ Party ] ; #2 = Aggregate [ #1 ] GroupBy [ Party ] Output [ countstar AS Count_Star , Party ]"
    },
    {
        "id": "aa20c85a0ebf67c149ca2b6ea02bcc8bfe79d167ff8ef503cea968673ab244c0",
        "question": "What is the party that has the largest number of representatives?",
        "parsing_tree": "election_representative | #1 = Scan Table [ representative ] Output [ Party ] ; #2 = Aggregate [ #1 ] GroupBy [ Party ] Output [ countstar AS Count_Star , Party ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Party ]"
    },
    {
        "id": "0d1f1f710779598caa1670fab7f22ae90123c0db10d9a2ab3f32e1d0f3866857",
        "question": "What parties have at least three representatives?",
        "parsing_tree": "election_representative | #1 = Scan Table [ representative ] Output [ Party ] ; #2 = Aggregate [ #1 ] GroupBy [ Party ] Output [ countstar AS Count_Star , Party ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 3 ] Output [ Party ]"
    },
    {
        "id": "d1258c1d20e4329b4dfbc3a7c49b43125c73f1928ade52f2decfb0b24faa1ac6",
        "question": "What states have at least two representatives?",
        "parsing_tree": "election_representative | #1 = Scan Table [ representative ] Output [ State ] ; #2 = Aggregate [ #1 ] GroupBy [ State ] Output [ countstar AS Count_Star , State ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ State ]"
    },
    {
        "id": "fff430a5071fae0d98170ecffdcb0e5a13da7786213eed2c1daf475888b9060c",
        "question": "List the names of representatives that have not participated in elections listed here.",
        "parsing_tree": "election_representative | #1 = Scan Table [ representative ] Output [ Representative_ID , Name ] ; #2 = Scan Table [ election ] Output [ Representative_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Representative_ID IS NULL OR #1.Representative_ID = #2.Representative_ID ] Output [ #1.Name ]"
    },
    {
        "id": "75a7cab12bc82dfe0a92b5105855e65a1a2b215c4e69c8c41afcaf3c3a3240dc",
        "question": "Show the parties that have both representatives in New York state and representatives in Pennsylvania state.",
        "parsing_tree": "election_representative | #1 = Scan Table [ representative ] Predicate [ State = 'New York' ] Distinct [ true ] Output [ Party , State ] ; #2 = Scan Table [ representative ] Predicate [ State = 'Pennsylvania' ] Output [ Party , State ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Party = #2.Party ] Output [ #1.Party ]"
    },
    {
        "id": "7ec5aace04f65b8ffd0e50019be4d1de5d0ac5dd7dd2d4eda967618a49d67486",
        "question": "How many distinct parties are there for representatives?",
        "parsing_tree": "election_representative | #1 = Scan Table [ representative ] Distinct [ true ] Output [ Party ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Party) AS Count_Dist_Party ]"
    },
    {
        "id": "4a85a50e099dcb6429a2d953b768783c98cc8e11604d5ce980cd9b331d321ad8",
        "question": "How many apartment bookings are there in total?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6337eb1026d6ac348d54b49ee4f3311ac5604434738c09aa10d7b62587763d24",
        "question": "Count the total number of apartment bookings.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0d68fb9634114acd2aa18ecb5d265f2712ca43cf428d1ec86768f3f683e8d30b",
        "question": "Show the start dates and end dates of all the apartment bookings.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Output [ booking_end_date , booking_start_date ]"
    },
    {
        "id": "4fcd0815426e97e1dae620aa1e84ac82fe05dbaea56ac4db6a9ca1e2d01dfe17",
        "question": "What are the start date and end date of each apartment booking?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Output [ booking_end_date , booking_start_date ]"
    },
    {
        "id": "283e7cc6635436f745104f4d1b61e94f89e6d0a3180179d95946abcae8f81936",
        "question": "Show all distinct building descriptions.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Buildings ] Distinct [ true ] Output [ building_description ]"
    },
    {
        "id": "a3b4c18ae8e36d0bc1ae24546171ca62e1e9880a2c2f0abb1bcff4d537bd1fdd",
        "question": "Give me a list of all the distinct building descriptions.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Buildings ] Distinct [ true ] Output [ building_description ]"
    },
    {
        "id": "53ef1a08cdcd10915c43639de41da43553631ce515ebf73b76c3df2b60655da8",
        "question": "Show the short names of the buildings managed by \"Emma\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Buildings ] Predicate [ building_manager = 'Emma' ] Output [ building_manager , building_short_name ]"
    },
    {
        "id": "9373a2bb176f4aa113b165f5dcd8b4da7c70d738ba920c22488c14cda136aecb",
        "question": "Which buildings does \"Emma\" manage? Give me the short names of the buildings.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Buildings ] Predicate [ building_manager = 'Emma' ] Output [ building_manager , building_short_name ]"
    },
    {
        "id": "e87fa99180bf1d6e3d3b0dbb44d5d38f9296a9439efdeee68ad7edbe23f4c456",
        "question": "Show the addresses and phones of all the buildings managed by \"Brenden\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Buildings ] Predicate [ building_manager = 'Brenden' ] Output [ building_manager , building_address , building_phone ]"
    },
    {
        "id": "abd36da6dc28528357277bee94664ae6aec508521b0089123cb603838e5eafef",
        "question": "What are the address and phone number of the buildings managed by \"Brenden\"?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Buildings ] Predicate [ building_manager = 'Brenden' ] Output [ building_manager , building_address , building_phone ]"
    },
    {
        "id": "23d98450723c02a1e7a72b8ade412f7728ce57cd9ae36415d1cf6ab0bd3a561f",
        "question": "What are the building full names that contain the word \"court\"?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Buildings ] Predicate [ building_full_name like '%court%' ] Output [ building_full_name ]"
    },
    {
        "id": "95d75e35c0fc5e783c6551bc8fcb720cdd1d98c3054ed5336ed67b0114a84305",
        "question": "Find all the building full names containing the word \"court\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Buildings ] Predicate [ building_full_name like '%court%' ] Output [ building_full_name ]"
    },
    {
        "id": "41b143662ba9a13970d1a096fdf319af4c47ee6dde2070ad032460618192debd",
        "question": "What is the minimum and maximum number of bathrooms of all the apartments?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ bathroom_count ] ; #2 = Aggregate [ #1 ] Output [ MAX(bathroom_count) AS Max_bathroom_count , MIN(bathroom_count) AS Min_bathroom_count ]"
    },
    {
        "id": "00644672c87c7f1ebd2f4ec470c717f307078a5b0db822a80859149bc7eda2d9",
        "question": "Give me the minimum and maximum bathroom count among all the apartments.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ bathroom_count ] ; #2 = Aggregate [ #1 ] Output [ MAX(bathroom_count) AS Max_bathroom_count , MIN(bathroom_count) AS Min_bathroom_count ]"
    },
    {
        "id": "125b7e74aa8191c2619917fec8c2163880cf86f09b352b8e7cf5d5c88ac1e6b8",
        "question": "What is the average number of bedrooms of all apartments?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ bedroom_count ] ; #2 = Aggregate [ #1 ] Output [ AVG(bedroom_count) AS Avg_bedroom_count ]"
    },
    {
        "id": "498f4fe41e66174293f341dfd1ceed5b725228595c5aa6674b5adc4e57f585ed",
        "question": "Find the average number of bedrooms of all the apartments.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ bedroom_count ] ; #2 = Aggregate [ #1 ] Output [ AVG(bedroom_count) AS Avg_bedroom_count ]"
    },
    {
        "id": "22b33abec8455e3d5e557737ba1a33393b43905b10987449945e21a722f0d2a3",
        "question": "Return the apartment number and the number of rooms for each apartment.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_number , room_count ]"
    },
    {
        "id": "2d8aec20d87135199b6ed84f01ccce55d870f9471e34dbdfa2658daf5441c1d5",
        "question": "What are the apartment number and the room count of each apartment?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_number , room_count ]"
    },
    {
        "id": "77d47b6b3596f71d4530de9362b55b4a7702427dd54d7067c8a1dfc9520956c6",
        "question": "What is the average number of rooms of apartments with type code \"Studio\"?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ apt_type_code = 'Studio' ] Output [ apt_type_code , room_count ] ; #2 = Aggregate [ #1 ] Output [ AVG(room_count) AS Avg_room_count ]"
    },
    {
        "id": "b9693fbb5edcb078e4ab081c87c5eef712435e22405e76a29c51132c3ab17a8e",
        "question": "Find the average room count of the apartments that have the \"Studio\" type code.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ apt_type_code = 'Studio' ] Output [ apt_type_code , room_count ] ; #2 = Aggregate [ #1 ] Output [ AVG(room_count) AS Avg_room_count ]"
    },
    {
        "id": "c971d8d4a4663e78649d2b613efc872c0bb121933fc0431f7e743e45c9483171",
        "question": "Return the apartment numbers of the apartments with type code \"Flat\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ apt_type_code = 'Flat' ] Output [ apt_number , apt_type_code ]"
    },
    {
        "id": "d73603d3c62702aa6a81ae0fea851357035fabce8392c4d313843bf41831beab",
        "question": "Which apartments have type code \"Flat\"? Give me their apartment numbers.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ apt_type_code = 'Flat' ] Output [ apt_number , apt_type_code ]"
    },
    {
        "id": "e96ed2b48a5dd32b065ba0ed4e9301b698e31d381a2d4a94d18801fb8237059d",
        "question": "Return the first names and last names of all guests",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Guests ] Output [ guest_first_name , guest_last_name ]"
    },
    {
        "id": "91b3b262aef346062fb22284f72d737adfc478b2ca4641e74079e5649dc9b84b",
        "question": "What are the first names and last names of all the guests?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Guests ] Output [ guest_first_name , guest_last_name ]"
    },
    {
        "id": "bf82d49d05804044c33c9db304efee0cf82d7c2b8f184e0f17ecf267adc16d8b",
        "question": "Return the date of birth for all the guests with gender code \"Male\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Guests ] Predicate [ gender_code = 'Male' ] Output [ date_of_birth , gender_code ]"
    },
    {
        "id": "9f4e41ac8a6b0c8339d5f5fb84c464c6d89d87d1aac3781b43c8c3e2d3853982",
        "question": "What are dates of birth of all the guests whose gender is \"Male\"?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Guests ] Predicate [ gender_code = 'Male' ] Output [ date_of_birth , gender_code ]"
    },
    {
        "id": "fce59c7303b79bf89e944fe12e0e3706298e0761e1b8fd98441cf8f2094b5386",
        "question": "Show the apartment numbers, start dates, and end dates of all the apartment bookings.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Output [ apt_id , booking_start_date ] ; #2 = Scan Table [ Apartments ] Output [ apt_id , apt_number ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Output [ #1.booking_start_date , #2.apt_number ]"
    },
    {
        "id": "cce82da58160f615fb78b1565e5092a5af4a85abce3ca5dce311ade9e9f0315c",
        "question": "What are the apartment number, start date, and end date of each apartment booking?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Output [ apt_id , booking_start_date ] ; #2 = Scan Table [ Apartments ] Output [ apt_id , apt_number ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Output [ #1.booking_start_date , #2.apt_number ]"
    },
    {
        "id": "030f136c8fa30537b91be3eb7348bf77f5cfddf1e32a6a33ec7b0c36d63cdb30",
        "question": "What are the booking start and end dates of the apartments with type code \"Duplex\"?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ apt_type_code = 'Duplex' ] Output [ apt_id , apt_type_code ] ; #2 = Scan Table [ Apartment_Bookings ] Output [ apt_id , booking_start_date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Output [ #2.booking_start_date ]"
    },
    {
        "id": "a5504bcf217cbde538bfc2ea0aad113417f229f4dc558f6a3305d997e6f23945",
        "question": "Return the booking start date and end date for the apartments that have type code \"Duplex\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ apt_type_code = 'Duplex' ] Output [ apt_id , apt_type_code ] ; #2 = Scan Table [ Apartment_Bookings ] Output [ apt_id , booking_start_date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Output [ #2.booking_start_date ]"
    },
    {
        "id": "cd59eed6010ac4ba3f887cbd9750c780a947f7342631fba064d7d7316caf54c5",
        "question": "What are the booking start and end dates of the apartments with more than 2 bedrooms?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ bedroom_count > 2 ] Output [ apt_id , bedroom_count ] ; #2 = Scan Table [ Apartment_Bookings ] Output [ apt_id , booking_start_date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Output [ #2.booking_start_date ]"
    },
    {
        "id": "46a32cb86aaf34698b94f0708c08d77e8236ffc317ad86ce24875ad00dc59e4e",
        "question": "Find the booking start date and end date for the apartments that have more than two bedrooms.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ bedroom_count > 2 ] Output [ apt_id , bedroom_count ] ; #2 = Scan Table [ Apartment_Bookings ] Output [ apt_id , booking_start_date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Output [ #2.booking_start_date ]"
    },
    {
        "id": "587524c5abdf8450d884f9a47fddc96e797265e72d50beca52d5718d36576990",
        "question": "What is the booking status code of the apartment with apartment number \"Suite 634\"?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ apt_number = 'Suite 634' ] Output [ apt_id , apt_number ] ; #2 = Scan Table [ Apartment_Bookings ] Output [ apt_id , booking_status_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Output [ #2.booking_status_code ]"
    },
    {
        "id": "4804b787b7f9cc9749f1ca31468a75b40915d3ffe425ae368931b4c67f70a383",
        "question": "Tell me the booking status code for the apartment with number \"Suite 634\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ apt_number = 'Suite 634' ] Output [ apt_id , apt_number ] ; #2 = Scan Table [ Apartment_Bookings ] Output [ apt_id , booking_status_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Output [ #2.booking_status_code ]"
    },
    {
        "id": "99bf6493d037d59d1e6d34f9f05fe756bda132d6e1e784f1b14eb66797c57583",
        "question": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Predicate [ booking_status_code = 'Confirmed' ] Output [ apt_id , booking_status_code ] ; #2 = Scan Table [ Apartments ] Output [ apt_id , apt_number ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Distinct [ true ] Output [ #2.apt_number ]"
    },
    {
        "id": "1d75ccdabbb2198de5188b113ddb1c6f547b848e72cd1ffeda9a06bab091511c",
        "question": "Which apartments have bookings with status code \"Confirmed\"? Return their apartment numbers.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Predicate [ booking_status_code = 'Confirmed' ] Output [ apt_id , booking_status_code ] ; #2 = Scan Table [ Apartments ] Output [ apt_id , apt_number ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Distinct [ true ] Output [ #2.apt_number ]"
    },
    {
        "id": "ebe916ed3dbe8cd670f62c67ac56b3a51db895a8f90314a782f6769f59a7b16d",
        "question": "Show the average room count of the apartments that have booking status code \"Provisional\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Predicate [ booking_status_code = 'Provisional' ] Output [ apt_id , booking_status_code ] ; #2 = Scan Table [ Apartments ] Output [ apt_id , room_count ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Output [ #2.room_count ] ; #4 = Aggregate [ #3 ] Output [ AVG(room_count) AS Avg_room_count ]"
    },
    {
        "id": "4550414150d17e8d30405666427c5ee637de4f39aedf3a3af741891f258efec2",
        "question": "What is the average room count of the apartments whose booking status code is \"Provisional\"?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Predicate [ booking_status_code = 'Provisional' ] Output [ apt_id , booking_status_code ] ; #2 = Scan Table [ Apartments ] Output [ apt_id , room_count ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Output [ #2.room_count ] ; #4 = Aggregate [ #3 ] Output [ AVG(room_count) AS Avg_room_count ]"
    },
    {
        "id": "f192016080a1272ebc3afe4193af414f6fa8af1d7d17c1418d6016533a8ef94a",
        "question": "Show the guest first names, start dates, and end dates of all the apartment bookings.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Output [ guest_id , booking_start_date ] ; #2 = Scan Table [ Guests ] Output [ guest_id , guest_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.guest_id = #2.guest_id ] Output [ #1.booking_start_date , #2.guest_first_name ]"
    },
    {
        "id": "40d1a89436e3f2cd5a264b117e120243d081deacf746bb4dcb15176b4a39f8b0",
        "question": "What are the guest first name, start date, and end date of each apartment booking?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Output [ guest_id , booking_start_date ] ; #2 = Scan Table [ Guests ] Output [ guest_id , guest_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.guest_id = #2.guest_id ] Output [ #1.booking_start_date , #2.guest_first_name ]"
    },
    {
        "id": "1dc35b26b042a216f51a24c645fc325b5f81a433f1dc6cd9b86dd9aeff8b7c12",
        "question": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Guests ] Predicate [ gender_code = 'Female' ] Output [ guest_id , gender_code ] ; #2 = Scan Table [ Apartment_Bookings ] Output [ guest_id , booking_start_date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.guest_id = #2.guest_id ] Output [ #2.booking_start_date ]"
    },
    {
        "id": "53c01f36fa09b132d3b8b88d4cbe99a5c98cf79253e5dce89bbe52e89f19eb16",
        "question": "What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Guests ] Predicate [ gender_code = 'Female' ] Output [ guest_id , gender_code ] ; #2 = Scan Table [ Apartment_Bookings ] Output [ guest_id , booking_start_date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.guest_id = #2.guest_id ] Output [ #2.booking_start_date ]"
    },
    {
        "id": "94273ea6b9771844608cdefc43bc34734ea944e4d5be2ec3d5a931fc911dac00",
        "question": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Predicate [ booking_status_code = 'Confirmed' ] Output [ guest_id , booking_status_code ] ; #2 = Scan Table [ Guests ] Output [ guest_id , guest_last_name , guest_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.guest_id = #2.guest_id ] Output [ #2.guest_first_name , #2.guest_last_name ]"
    },
    {
        "id": "92e07e730ac995818c673b08b3db6afef33315de6223ce94325fba5f70a541eb",
        "question": "Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Predicate [ booking_status_code = 'Confirmed' ] Output [ guest_id , booking_status_code ] ; #2 = Scan Table [ Guests ] Output [ guest_id , guest_last_name , guest_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.guest_id = #2.guest_id ] Output [ #2.guest_first_name , #2.guest_last_name ]"
    },
    {
        "id": "15f614e853dc90340f158f36ae1e78d2800d797310e2e28d2254d60bb3bf385a",
        "question": "Show the facility codes of apartments with more than 4 bedrooms.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ bedroom_count > 4 ] Output [ apt_id , bedroom_count ] ; #2 = Scan Table [ Apartment_Facilities ] Output [ apt_id , facility_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Output [ #2.facility_code ]"
    },
    {
        "id": "21288eface5545b9a15c9cfd6913b0077764f50e4d543374528f3f0647837bc1",
        "question": "What are the facility codes of the apartments with more than four bedrooms?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ bedroom_count > 4 ] Output [ apt_id , bedroom_count ] ; #2 = Scan Table [ Apartment_Facilities ] Output [ apt_id , facility_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Output [ #2.facility_code ]"
    },
    {
        "id": "a6095975d44e3528feca420b52ca79b06a2463d4f2b2d14c2a037138555dc4f6",
        "question": "Show the total number of rooms of all apartments with facility code \"Gym\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Facilities ] Predicate [ facility_code = 'Gym' ] Output [ apt_id , facility_code ] ; #2 = Scan Table [ Apartments ] Output [ apt_id , room_count ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Output [ #2.room_count ] ; #4 = Aggregate [ #3 ] Output [ SUM(room_count) AS Sum_room_count ]"
    },
    {
        "id": "d8a9366506c0ab946086ad58b6b68c41905f264726473c9811ced73bd7ead352",
        "question": "Find the total number of rooms in the apartments that have facility code \"Gym\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Facilities ] Predicate [ facility_code = 'Gym' ] Output [ apt_id , facility_code ] ; #2 = Scan Table [ Apartments ] Output [ apt_id , room_count ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Output [ #2.room_count ] ; #4 = Aggregate [ #3 ] Output [ SUM(room_count) AS Sum_room_count ]"
    },
    {
        "id": "f80db538241804c0ac366b1cff3217e594732a07e1b1497cb3708e1e30e11985",
        "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Buildings ] Predicate [ building_short_name = 'Columbus Square' ] Output [ building_short_name , building_id ] ; #2 = Scan Table [ Apartments ] Output [ room_count , building_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.building_id = #2.building_id ] Output [ #2.room_count ] ; #4 = Aggregate [ #3 ] Output [ SUM(room_count) AS Sum_room_count ]"
    },
    {
        "id": "75ee850b404a1878401d1b92c5fc5c4c5ffc2c56b3db10294c7839be70b77e53",
        "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Buildings ] Predicate [ building_short_name = 'Columbus Square' ] Output [ building_short_name , building_id ] ; #2 = Scan Table [ Apartments ] Output [ room_count , building_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.building_id = #2.building_id ] Output [ #2.room_count ] ; #4 = Aggregate [ #3 ] Output [ SUM(room_count) AS Sum_room_count ]"
    },
    {
        "id": "24654d7dd60da12387000305ac17fc8ced8d7dbffff84648c654b88a701fb66b",
        "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ bathroom_count > 2 ] Output [ bathroom_count , building_id ] ; #2 = Scan Table [ Apartment_Buildings ] Output [ building_address , building_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.building_id = #2.building_id ] Output [ #2.building_address ]"
    },
    {
        "id": "771cbed9f788baa2b131ed1314a2a8b35db0e402ff95c3cc95397fa322c84f7f",
        "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ bathroom_count > 2 ] Output [ bathroom_count , building_id ] ; #2 = Scan Table [ Apartment_Buildings ] Output [ building_address , building_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.building_id = #2.building_id ] Output [ #2.building_address ]"
    },
    {
        "id": "a6ccd3e9c3bcd035eee4e5db03ad72f2e002e10bf75c54de1f4e708bfafa5582",
        "question": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Buildings ] Predicate [ building_manager = 'Kyle' ] Output [ building_manager , building_id ] ; #2 = Scan Table [ Apartments ] Output [ apt_type_code , apt_number , building_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.building_id = #2.building_id ] Output [ #2.apt_number , #2.apt_type_code ]"
    },
    {
        "id": "2c24f1f77bec2542711c868aaf93e1fa9b2e0200255a6f168fe2c0143819d2a8",
        "question": "What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Buildings ] Predicate [ building_manager = 'Kyle' ] Output [ building_manager , building_id ] ; #2 = Scan Table [ Apartments ] Output [ apt_type_code , apt_number , building_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.building_id = #2.building_id ] Output [ #2.apt_number , #2.apt_type_code ]"
    },
    {
        "id": "d4062e9bec10fb00b86fa38595f218930962a5b1a455fe36b801d96c63e50d73",
        "question": "Show the booking status code and the corresponding number of bookings.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Output [ booking_status_code ] ; #2 = Aggregate [ #1 ] GroupBy [ booking_status_code ] Output [ countstar AS Count_Star , booking_status_code ]"
    },
    {
        "id": "adcba99da0480a584705371621caf9de910703c89e12664512fbfb895dcbcc30",
        "question": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Output [ booking_status_code ] ; #2 = Aggregate [ #1 ] GroupBy [ booking_status_code ] Output [ countstar AS Count_Star , booking_status_code ]"
    },
    {
        "id": "1e96375babede1413214b0b5731eea224dae2598767bf7f4f46d7d62a9d84235",
        "question": "Return all the apartment numbers sorted by the room count in ascending order.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_number , room_count ] ; #2 = Sort [ #1 ] OrderBy [ room_count ASC ] Output [ apt_number , room_count ]"
    },
    {
        "id": "c83a28aa9b21222ceaf09109d8d9e6b84204e6fca9312d4866b8370067178a5c",
        "question": "Sort the apartment numbers in ascending order of room count.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_number , room_count ] ; #2 = Sort [ #1 ] OrderBy [ room_count ASC ] Output [ apt_number , room_count ]"
    },
    {
        "id": "d8a1d938d52db369c39ba7b34a2abcefd3ffc02dc463e6ef46fbf6d9311e3164",
        "question": "Return the apartment number with the largest number of bedrooms.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_number , bedroom_count ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ bedroom_count DESC ] Output [ apt_number , bedroom_count ]"
    },
    {
        "id": "08e20739c9e6c8e6097680a9f06cc4e5f388a342730789d8d8e87204b707485e",
        "question": "What is the apartment number of the apartment with the most beds?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_number , bedroom_count ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ bedroom_count DESC ] Output [ apt_number , bedroom_count ]"
    },
    {
        "id": "3cad884d5291bd5c5a86196a102ce72e00feaff2805d0c1011f7ef4137180cda",
        "question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ apt_type_code ] Output [ countstar AS Count_Star , apt_type_code ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , apt_type_code ]"
    },
    {
        "id": "17560a70760715c13545c75963c8d175d56dc1b10cbd525bb53855cd13d7b7c4",
        "question": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ apt_type_code ] Output [ countstar AS Count_Star , apt_type_code ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , apt_type_code ]"
    },
    {
        "id": "f50131b6457e696c0a3a40d5829cbf3261b9fcd7af97ce548356258de9ef1218",
        "question": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_type_code , room_count ] ; #2 = Aggregate [ #1 ] GroupBy [ apt_type_code ] Output [ apt_type_code , AVG(room_count) AS Avg_room_count ] ; #3 = TopSort [ #2 ] Rows [ 3 ] OrderBy [ Avg_room_count DESC ] Output [ Avg_room_count , apt_type_code ]"
    },
    {
        "id": "b5851ebb97e42abaaff09463742f9e32476fae23ba5936a11d604695dcb2d52c",
        "question": "What are the top three apartment types in terms of the average room count? Give me the",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_type_code , room_count ] ; #2 = Aggregate [ #1 ] GroupBy [ apt_type_code ] Output [ apt_type_code , AVG(room_count) AS Avg_room_count ] ; #3 = TopSort [ #2 ] Rows [ 3 ] OrderBy [ Avg_room_count DESC ] Output [ Avg_room_count , apt_type_code ]"
    },
    {
        "id": "1fc7572b6af0f8ea712e4dbec8c5473ecb06bcc31b536dfc4770fe5421b8a4cd",
        "question": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ bathroom_count , apt_type_code , bedroom_count , room_count ] ; #2 = Aggregate [ #1 ] GroupBy [ apt_type_code , bathroom_count , bedroom_count ] Output [ bathroom_count , apt_type_code , bedroom_count , SUM(room_count) AS Sum_room_count ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_room_count DESC ] Output [ bathroom_count , apt_type_code , bedroom_count , Sum_room_count ]"
    },
    {
        "id": "e3b73316f2921fb9b948957031de7af146124ab4e4c89861d88db0fe89b4c7d6",
        "question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ bathroom_count , apt_type_code , bedroom_count , room_count ] ; #2 = Aggregate [ #1 ] GroupBy [ apt_type_code , bathroom_count , bedroom_count ] Output [ bathroom_count , apt_type_code , bedroom_count , SUM(room_count) AS Sum_room_count ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_room_count DESC ] Output [ bathroom_count , apt_type_code , bedroom_count , Sum_room_count ]"
    },
    {
        "id": "a62a647cac9c8b1e4bc8aeabfb9a137e83238c12ce20354e4bb12643f93f1c13",
        "question": "Show the most common apartment type code.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ apt_type_code ] Output [ countstar AS Count_Star , apt_type_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , apt_type_code ]"
    },
    {
        "id": "8386d8306b529ee24536b40890b9a6d01e5024d28502113765762a2798506d3a",
        "question": "Which apartment type code appears the most often?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ apt_type_code ] Output [ countstar AS Count_Star , apt_type_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , apt_type_code ]"
    },
    {
        "id": "ffb31fd73cce04362f62b1c8278c27c39ac3f8bab1b076653ffb2d4d45895fe9",
        "question": "Show the most common apartment type code among apartments with more than 1 bathroom.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ bathroom_count > 1 ] Output [ bathroom_count , apt_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ apt_type_code ] Output [ countstar AS Count_Star , apt_type_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , apt_type_code ]"
    },
    {
        "id": "32f709a49d75419599d6427de07e8ee4351c2a9dc5900f989b762c9041b313c3",
        "question": "Which apartment type code is the most common among apartments with more than one bathroom?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Predicate [ bathroom_count > 1 ] Output [ bathroom_count , apt_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ apt_type_code ] Output [ countstar AS Count_Star , apt_type_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , apt_type_code ]"
    },
    {
        "id": "9052926b29a6df732726f275b6eea9ea2fefaec96beae8fea8806627acd950f4",
        "question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_type_code , room_count ] ; #2 = Aggregate [ #1 ] GroupBy [ apt_type_code ] Output [ apt_type_code , MAX(room_count) AS Max_room_count , MIN(room_count) AS Min_room_count ]"
    },
    {
        "id": "f6a156f02cc0c509a816f5896038604ddaab0012a902889ee31b0bad83559b97",
        "question": "Return each apartment type code along with the maximum and minimum number of rooms among each type.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_type_code , room_count ] ; #2 = Aggregate [ #1 ] GroupBy [ apt_type_code ] Output [ apt_type_code , MAX(room_count) AS Max_room_count , MIN(room_count) AS Min_room_count ]"
    },
    {
        "id": "d2ac59f48d4e5ff4a3441bbd5c3ed5772194d0fe6366cb4d6ed66351f9f62d80",
        "question": "Show each gender code and the corresponding count of guests sorted by the count in descending order.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Guests ] Output [ gender_code ] ; #2 = Aggregate [ #1 ] GroupBy [ gender_code ] Output [ countstar AS Count_Star , gender_code ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , gender_code ]"
    },
    {
        "id": "78272e31de5494922ada18a92ec0c174eb848baef40c895d64f4bc0224c7aefe",
        "question": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Guests ] Output [ gender_code ] ; #2 = Aggregate [ #1 ] GroupBy [ gender_code ] Output [ countstar AS Count_Star , gender_code ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , gender_code ]"
    },
    {
        "id": "5d8b4cfdc9d121f3b7f2e19e86d0d673e522a830c8c088ed9fccb633f82cacc4",
        "question": "How many apartments do not have any facility?",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_id ] ; #2 = Scan Table [ Apartment_Facilities ] Output [ apt_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.apt_id = #1.apt_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "783284ff80a7ace8292f088955d16d3f6598a2d192611ebf4845b55b8b3b07ff",
        "question": "Find the number of apartments that have no facility.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartments ] Output [ apt_id ] ; #2 = Scan Table [ Apartment_Facilities ] Output [ apt_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.apt_id = #1.apt_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "14f9d31baaf29c337ea2b2a927e45dc505a1309b99b1debd6caa425730bf246b",
        "question": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Predicate [ booking_status_code = 'Confirmed' ] Output [ apt_id , booking_status_code ] ; #2 = Scan Table [ Apartments ] Output [ apt_id , apt_number ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Distinct [ true ] Output [ #2.apt_number ] ; #4 = Scan Table [ Apartment_Bookings ] Predicate [ booking_status_code = 'Provisional' ] Output [ apt_id , booking_status_code ] ; #5 = Scan Table [ Apartments ] Output [ apt_id , apt_number ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.apt_id = #5.apt_id ] Output [ #5.apt_number ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.apt_number = #6.apt_number ] Output [ #3.apt_number ]"
    },
    {
        "id": "4c4c6fbed57383ff5c66bf5c2820903c7fb5058b98abc0ce468eb3b3374b9e9d",
        "question": "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ Apartment_Bookings ] Predicate [ booking_status_code = 'Confirmed' ] Output [ apt_id , booking_status_code ] ; #2 = Scan Table [ Apartments ] Output [ apt_id , apt_number ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Distinct [ true ] Output [ #2.apt_number ] ; #4 = Scan Table [ Apartment_Bookings ] Predicate [ booking_status_code = 'Provisional' ] Output [ apt_id , booking_status_code ] ; #5 = Scan Table [ Apartments ] Output [ apt_id , apt_number ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.apt_id = #5.apt_id ] Output [ #5.apt_number ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.apt_number = #6.apt_number ] Output [ #3.apt_number ]"
    },
    {
        "id": "2ae07a42a7dc092ab51b1348cdbf6157864339cc14cfe67233cd7878bec6f409",
        "question": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ View_Unit_Status ] Predicate [ available_yn = 0 ] Output [ apt_id , available_yn ] ; #2 = Scan Table [ Apartments ] Output [ apt_id , apt_number ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Distinct [ true ] Output [ #2.apt_number ] ; #4 = Scan Table [ Apartments ] Output [ apt_id , apt_number ] ; #5 = Scan Table [ View_Unit_Status ] Predicate [ available_yn = 1 ] Output [ apt_id , available_yn ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.apt_id = #5.apt_id ] Output [ #4.apt_number ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.apt_number = #6.apt_number ] Output [ #3.apt_number ]"
    },
    {
        "id": "20bd3e62c1d370ea2d7898d99dfaac28845b2da7f76c01e3fa71e8ff308ffb4b",
        "question": "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.",
        "parsing_tree": "apartment_rentals | #1 = Scan Table [ View_Unit_Status ] Predicate [ available_yn = 0 ] Output [ apt_id , available_yn ] ; #2 = Scan Table [ Apartments ] Output [ apt_id , apt_number ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.apt_id = #2.apt_id ] Distinct [ true ] Output [ #2.apt_number ] ; #4 = Scan Table [ Apartments ] Output [ apt_id , apt_number ] ; #5 = Scan Table [ View_Unit_Status ] Predicate [ available_yn = 1 ] Output [ apt_id , available_yn ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.apt_id = #5.apt_id ] Output [ #4.apt_number ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.apt_number = #6.apt_number ] Output [ #3.apt_number ]"
    },
    {
        "id": "f5b13083e22d6741335d2a793cb0f4c9040793ed523ec12f6db2394d9d6bffd9",
        "question": "How many games are held after season 2007?",
        "parsing_tree": "game_injury | #1 = Scan Table [ game ] Predicate [ Season > 2007 ] Output [ Season ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b03998f814124857e4c8c49c6d95edb3d656c78538779c7b7c10d0a435a39a74",
        "question": "List the dates of games by the home team name in descending order.",
        "parsing_tree": "game_injury | #1 = Scan Table [ game ] Output [ Home_team , Date ] ; #2 = Sort [ #1 ] OrderBy [ Home_team DESC ] Output [ Date , Home_team ]"
    },
    {
        "id": "c2dc37e3e3f06f73404abe38597c9cf3396fa71d1cda3e53d6c75f86bc9e25e8",
        "question": "List the season, home team, away team of all the games.",
        "parsing_tree": "game_injury | #1 = Scan Table [ game ] Output [ Season , Away_team , Home_team ]"
    },
    {
        "id": "4af12377dcbbef833233494d79e7916c56acdd06791f6c1501dcded84e2a4b1f",
        "question": "What are the maximum, minimum and average home games each stadium held?",
        "parsing_tree": "game_injury | #1 = Scan Table [ stadium ] Output [ Home_Games ] ; #2 = Aggregate [ #1 ] Output [ AVG(Home_Games) AS Avg_Home_Games , MIN(Home_Games) AS Min_Home_Games , MAX(Home_Games) AS Max_Home_Games ]"
    },
    {
        "id": "d00953f29a0970e9eb52c3b712ce7ffb6a5997e96ab4fb9392f4976a5c51893c",
        "question": "What is the average attendance of stadiums with capacity percentage higher than 100%?",
        "parsing_tree": "game_injury | #1 = Scan Table [ stadium ] Predicate [ Capacity_Percentage > 100.0 ] Output [ Average_Attendance , Capacity_Percentage ]"
    },
    {
        "id": "3ea7f7570fb5f26ce94ec849d8f06c3901b3c6a9065a2cb6237588a9550d89c8",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "parsing_tree": "game_injury | #1 = Scan Table [ injury_accident ] Predicate [ Injury <> 'Knee problem' ] Output [ Number_of_matches , Player , Injury , Source ]"
    },
    {
        "id": "21380e557f0929a44c3ecc19f6c22817a8d28681af22e54405cd0c508ea6de02",
        "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
        "parsing_tree": "game_injury | #1 = Scan Table [ injury_accident ] Predicate [ Player = 'Walter Samuel' ] Output [ Player , game_id ] ; #2 = Scan Table [ game ] Output [ Season , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.game_id = #2.id ] Output [ #2.Season ]"
    },
    {
        "id": "5446a250be9ea0ffb4fe17889ff183319a66c3dbde32f651c5e0ba89d9133e61",
        "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "parsing_tree": "game_injury | #1 = Scan Table [ injury_accident ] Output [ game_id ] ; #2 = Scan Table [ game ] Output [ Score , id , Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.game_id = #2.id ] Output [ #2.id , #2.Score , #2.Date ] ; #4 = Aggregate [ #3 ] GroupBy [ id ] Output [ countstar AS Count_Star , Score , id , Date ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Score , id , Date ]"
    },
    {
        "id": "348da2eb8e2206959dbc3a45ee81f92cb1ebf30ef286687f1e9d6c18edb7edec",
        "question": "What are the id and name of the stadium where the most injury accidents happened?",
        "parsing_tree": "game_injury | #1 = Scan Table [ stadium ] Output [ name , id ] ; #2 = Scan Table [ injury_accident ] Output [ game_id ] ; #3 = Scan Table [ game ] Output [ stadium_id , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.game_id = #3.id ] Output [ #3.stadium_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.id = #4.stadium_id ] Output [ #1.name , #1.id ] ; #6 = Aggregate [ #5 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , id ]"
    },
    {
        "id": "e88fc82c0e2c87762cd78668dc4357ead023458037751a840bad5690f4eceab2",
        "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
        "parsing_tree": "game_injury | #1 = Scan Table [ stadium ] Output [ name , id ] ; #2 = Scan Table [ injury_accident ] Output [ game_id ] ; #3 = Scan Table [ game ] Output [ stadium_id , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.game_id = #3.id ] Output [ #3.stadium_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.id = #4.stadium_id ] Output [ #1.name , #1.id ] ; #6 = Aggregate [ #5 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , id ]"
    },
    {
        "id": "93b159c4e5d05f9f7c87737eb3c48be1dbc8e65d5a5292e09cb4a2b2f2cab893",
        "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
        "parsing_tree": "game_injury | #1 = Scan Table [ injury_accident ] Predicate [ Injury = 'Foot injury' OR Injury = 'Knee problem' ] Output [ Injury , game_id ] ; #2 = Scan Table [ game ] Output [ Season , stadium_id , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.game_id = #2.id ] Output [ #2.Season , #2.stadium_id ] ; #4 = Scan Table [ stadium ] Output [ name , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.stadium_id = #4.id ] Output [ #3.Season , #4.name ]"
    },
    {
        "id": "74c24b10c324ee3a8185883df915195b31e34dd3a700ddbde1103743c65bcaee",
        "question": "How many different kinds of information sources are there for injury accidents?",
        "parsing_tree": "game_injury | #1 = Scan Table [ injury_accident ] Distinct [ true ] Output [ Source ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Source) AS Count_Dist_Source ]"
    },
    {
        "id": "69e66d777b9a23cf9fa5e1dae8e97cb4825c581862238dd9b2d1c3a69841bc78",
        "question": "How many games are free of injury accidents?",
        "parsing_tree": "game_injury | #1 = Scan Table [ game ] Output [ id ] ; #2 = Scan Table [ injury_accident ] Output [ game_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.game_id IS NULL OR #1.id = #2.game_id ] Output [ #1.id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "99cf3a130f833917f34469f0d82da5e8f69bfd2608208d37bccfcad10356ce34",
        "question": "How many distinct kinds of injuries happened after season 2010?",
        "parsing_tree": "game_injury | #1 = Scan Table [ game ] Predicate [ Season > 2010 ] Output [ Season , id ] ; #2 = Scan Table [ injury_accident ] Output [ Injury , game_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.game_id ] Distinct [ true ] Output [ #2.Injury ] ; #4 = Aggregate [ #3 ] Output [ COUNT(Injury) AS Count_Injury ]"
    },
    {
        "id": "ba86e9b4134fdb57a2e7f0ad85ebe5216d0be75152bcd666ff0ece431e82716d",
        "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
        "parsing_tree": "game_injury | #1 = Scan Table [ injury_accident ] Predicate [ Player = 'Walter Samuel' ] Output [ Player , game_id ] ; #2 = Scan Table [ game ] Output [ stadium_id , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.game_id = #2.id ] Output [ #2.stadium_id ] ; #4 = Scan Table [ stadium ] Output [ name , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.stadium_id = #4.id ] Distinct [ true ] Output [ #4.name ] ; #6 = Scan Table [ injury_accident ] Predicate [ Player = 'Thiago Motta' ] Output [ Player , game_id ] ; #7 = Scan Table [ game ] Output [ stadium_id , id ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.game_id = #7.id ] Output [ #7.stadium_id ] ; #9 = Scan Table [ stadium ] Output [ name , id ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.stadium_id = #9.id ] Output [ #9.name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.name = #10.name ] Output [ #5.name ]"
    },
    {
        "id": "0161e0686de034ba4fb6b442d94ca01c173cdbece1e328d6ac623da3f5cafd01",
        "question": "Show the name, average attendance, total attendance for stadiums where no accidents happened.",
        "parsing_tree": "game_injury | #1 = Scan Table [ stadium ] Distinct [ true ] Output [ name , Average_Attendance , Total_Attendance ] ; #2 = Scan Table [ stadium ] Output [ name , Total_Attendance , Average_Attendance , id ] ; #3 = Scan Table [ injury_accident ] Output [ game_id ] ; #4 = Scan Table [ game ] Output [ stadium_id , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.game_id = #4.id ] Output [ #4.stadium_id ] ; #6 = Join [ #2 , #5 ] Predicate [ #2.id = #5.stadium_id ] Output [ #2.Average_Attendance , #2.Total_Attendance , #2.name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.name = #6.name ] Output [ #1.Total_Attendance , #1.name , #1.Average_Attendance ]"
    },
    {
        "id": "e06cc98ea680d1eaf3a284e5921cb342d49646fed2fd1000ad46860c557b07d4",
        "question": "Which stadium name contains the substring \"Bank\"?",
        "parsing_tree": "game_injury | #1 = Scan Table [ stadium ] Predicate [ name like '%Bank%' ] Output [ name ]"
    },
    {
        "id": "92ee3bcff067e2224067105ac747e0d5936a7fab6c7d0f110280ae45ae4d88ab",
        "question": "How many games has each stadium held?",
        "parsing_tree": "game_injury | #1 = Scan Table [ game ] Output [ stadium_id ] ; #2 = Aggregate [ #1 ] GroupBy [ stadium_id ] Output [ countstar AS Count_Star , stadium_id ] ; #3 = Scan Table [ stadium ] Output [ id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.stadium_id = #3.id ] Output [ #3.id , #2.Count_Star ]"
    },
    {
        "id": "f329da68df89394186cff76312263e1bf6786602044cc1017d957b360e99a344",
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "parsing_tree": "game_injury | #1 = Scan Table [ injury_accident ] Output [ Player , game_id ] ; #2 = Scan Table [ game ] Output [ Season , id , Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.game_id = #2.id ] Output [ #1.Player , #2.Season , #2.Date ] ; #4 = Sort [ #3 ] OrderBy [ Season DESC ] Output [ Season , Player , Date ]"
    },
    {
        "id": "5b60a6fa5be63d1a9ca578ff964520d9ced325d73e9d87114cbd8eced2db733b",
        "question": "How many leagues are there in England?",
        "parsing_tree": "soccer_1 | #1 = Scan Table [ Country ] Predicate [ name = 'England' ] Output [ name , id ] ; #2 = Scan Table [ League ] Output [ country_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.country_id ] Output [ #1.name , #1.id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7d71b0036a86ba74d3389af8a03db1a2ad6a25c4f0bd18b1df2fd32dfaa675ad",
        "question": "What is the average weight of all players?",
        "parsing_tree": "soccer_1 | #1 = Scan Table [ Player ] Output [ weight ] ; #2 = Aggregate [ #1 ] Output [ AVG(weight) AS Avg_weight ]"
    },
    {
        "id": "60f0f73841cbb839e5bd6947f424cef2a08163a971ecbcac0f05084dd52c1460",
        "question": "What is the maximum and minimum height of all players?",
        "parsing_tree": "soccer_1 | #1 = Scan Table [ Player ] Output [ weight ] ; #2 = Aggregate [ #1 ] Output [ MAX(weight) AS Max_weight , MIN(weight) AS Min_weight ]"
    },
    {
        "id": "759f08c3c252b37035de0a05b432029fad89544b096f524aa74d686cfd56a0a6",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "parsing_tree": "soccer_1 | #1 = Scan Table [ Player ] Predicate [ height >= 180 ] Output [ player_api_id , height ] ; #2 = Scan Table [ Player_Attributes ] Predicate [ overall_rating > 85 ] Output [ player_api_id , overall_rating ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.player_api_id = #1.player_api_id ] Output [ #1.player_api_id ]"
    },
    {
        "id": "26301a3cb57e3d6b301fa84a8ee64651f9c389a0e1d023981f0002d618a02a7b",
        "question": "How many performances are there?",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ performance ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "131582441733dded3bc64fd0dff657f6ec1dd5626b51c648d5d614fa4446a629",
        "question": "List the hosts of performances in ascending order of attendance.",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ performance ] Output [ Host , Attendance ] ; #2 = Sort [ #1 ] OrderBy [ Attendance ASC ] Output [ Host , Attendance ]"
    },
    {
        "id": "fe830ec83dc2f4b63120efa465a6275e226df66e5389e5e567fcb0d44c4c6f35",
        "question": "What are the dates and locations of performances?",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ performance ] Output [ Location , Date ]"
    },
    {
        "id": "a401a7faf667bc666be1edd4caeec840e0ab350c0ed6b5caaa19d1203e3d35d4",
        "question": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ performance ] Predicate [ Location = 'Bell Centre' OR Location = 'TD Garden' ] Output [ Attendance , Location ]"
    },
    {
        "id": "ea1e501c415e6b510fe8879d562f61676a68307dfd92f7805323413ecdbbdb29",
        "question": "What is the average number of attendees for performances?",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ performance ] Output [ Attendance ] ; #2 = Aggregate [ #1 ] Output [ AVG(Attendance) AS Avg_Attendance ]"
    },
    {
        "id": "5bf925fb6a8dad31e66bd56a71f3c3f9d948e2e19ac5fdbbc572af5e48e98bab",
        "question": "What is the date of the performance with the highest number of attendees?",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ performance ] Output [ Attendance , Date ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Attendance DESC ] Output [ Attendance , Date ]"
    },
    {
        "id": "fe504b2c9ef4c9bcc132f1b58b16759484dc11dcd4546ce1bb7ac3bacd6d49fe",
        "question": "Show different locations and the number of performances at each location.",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ performance ] Output [ Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ]"
    },
    {
        "id": "6bd855e41f70419c07f83e7e3e00d308bbc6f4a918a3122928cba2e3fac89280",
        "question": "Show the most common location of performances.",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ performance ] Output [ Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Location ]"
    },
    {
        "id": "64cb726e9ed0a4b1d42bddf70c585ecc30f02fe4ba760a1b3a55aae4060d35cb",
        "question": "Show the locations that have at least two performances.",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ performance ] Output [ Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Location ]"
    },
    {
        "id": "8088d47750455b6b7f661acdd273e3e73a1ee804c8962f975f6999a7efa0c0c1",
        "question": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ performance ] Predicate [ Attendance > 2000 ] Distinct [ true ] Output [ Attendance , Location ] ; #2 = Scan Table [ performance ] Predicate [ Attendance < 1000 ] Output [ Attendance , Location ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Location = #2.Location ] Output [ #1.Location ]"
    },
    {
        "id": "f0bff93e53f66e4a83d8cd2b2e9e190f229c7d944f827714a264b61fc49aec93",
        "question": "Show the names of members and the location of the performances they attended.",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ performance ] Output [ Performance_ID , Location ] ; #2 = Scan Table [ member_attendance ] Output [ Performance_ID , Member_ID ] ; #3 = Scan Table [ member ] Output [ Name , Member_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Member_ID = #3.Member_ID ] Output [ #3.Name , #2.Performance_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.Performance_ID = #4.Performance_ID ] Output [ #4.Name , #1.Location ]"
    },
    {
        "id": "56c98dca11a47b29e09169fa14354562abee770282ae77d6e3e3d92573cc025a",
        "question": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names.",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ performance ] Output [ Performance_ID , Location ] ; #2 = Scan Table [ member_attendance ] Output [ Performance_ID , Member_ID ] ; #3 = Scan Table [ member ] Output [ Name , Member_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Member_ID = #3.Member_ID ] Output [ #3.Name , #2.Performance_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.Performance_ID = #4.Performance_ID ] Output [ #4.Name , #1.Location ] ; #6 = Sort [ #5 ] OrderBy [ Name ASC ] Output [ Location , Name ]"
    },
    {
        "id": "c00914a991e52d6127e4c54d4c73733f3d8837700e54707e608e6ae27f97265d",
        "question": "Show the dates of performances with attending members whose roles are \"Violin\".",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ member ] Predicate [ Role = 'Violin' ] Output [ Role , Member_ID ] ; #2 = Scan Table [ member_attendance ] Output [ Performance_ID , Member_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Member_ID = #2.Member_ID ] Output [ #2.Performance_ID ] ; #4 = Scan Table [ performance ] Output [ Performance_ID , Date ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Performance_ID = #4.Performance_ID ] Output [ #4.Date ]"
    },
    {
        "id": "1751ed21b48f44550b6c15f685fdc1f218ae4f4ec73a591202f9e5632fa59977",
        "question": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ performance ] Output [ Performance_ID , Attendance , Date ] ; #2 = Scan Table [ member_attendance ] Output [ Performance_ID , Member_ID ] ; #3 = Scan Table [ member ] Output [ Name , Member_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Member_ID = #3.Member_ID ] Output [ #3.Name , #2.Performance_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.Performance_ID = #4.Performance_ID ] Output [ #1.Attendance , #4.Name , #1.Date ] ; #6 = Sort [ #5 ] OrderBy [ Attendance DESC ] Output [ Attendance , Name , Date ]"
    },
    {
        "id": "93d771cf1ac18c59af09246e54c5cda119f723eb62e1aafd72e7b828481c2f66",
        "question": "List the names of members who did not attend any performance.",
        "parsing_tree": "performance_attendance | #1 = Scan Table [ member ] Output [ Name , Member_ID ] ; #2 = Scan Table [ member_attendance ] Output [ Member_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Member_ID ] Output [ Member_ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Member_ID = #1.Member_ID ] Output [ #1.Name ]"
    },
    {
        "id": "52e2abe6f6cc4b42add213d9b6ab897e3d1a83094e003349c6ca62c1826748c1",
        "question": "Find the buildings which have rooms with capacity more than 50.",
        "parsing_tree": "college_2 | #1 = Scan Table [ classroom ] Predicate [ capacity > 50.0 ] Output [ capacity , building ] ; #2 = Aggregate [ #1 ] GroupBy [ building ] Output [ building ]"
    },
    {
        "id": "af050e3a8aca9f5ac143bbb2add4908334a617d2ac41ed39e85023bbc0023d6d",
        "question": "What are the distinct buildings with capacities of greater than 50?",
        "parsing_tree": "college_2 | #1 = Scan Table [ classroom ] Predicate [ capacity > 50.0 ] Output [ capacity , building ] ; #2 = Aggregate [ #1 ] GroupBy [ building ] Output [ building ]"
    },
    {
        "id": "a8afc5df83689691200d2613c8f7b5e5c773c1605d58f49827f37f077cdc9c06",
        "question": "Count the number of rooms that are not in the Lamberton building.",
        "parsing_tree": "college_2 | #1 = Scan Table [ classroom ] Predicate [ building <> 'Lamberton' ] Output [ building ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c7ea290b2dde0e78cccbf181eccee6fdee0369069c6cdb2bd6562145289ba1e0",
        "question": "How many classrooms are not in Lamberton?",
        "parsing_tree": "college_2 | #1 = Scan Table [ classroom ] Predicate [ building <> 'Lamberton' ] Output [ building ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "17e26b933aa78e9d5714efc4aaac5167b671f3a79b04e639aad2555808da19bd",
        "question": "What is the name and building of the departments whose budget is more than the average budget?",
        "parsing_tree": "college_2 | #1 = Scan Table [ department ] Output [ budget ] ; #2 = Aggregate [ #1 ] Output [ AVG(budget) AS Avg_budget ] ; #3 = Scan Table [ department ] Output [ dept_name , budget , building ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.budget > #2.Avg_budget ] Output [ #3.dept_name , #3.building ]"
    },
    {
        "id": "fb74a6a850afb2afb1722956adaced591564d8f2dc993f6b81c80255ff3e35e2",
        "question": "Give the name and building of the departments with greater than average budget.",
        "parsing_tree": "college_2 | #1 = Scan Table [ department ] Output [ budget ] ; #2 = Aggregate [ #1 ] Output [ AVG(budget) AS Avg_budget ] ; #3 = Scan Table [ department ] Output [ dept_name , budget , building ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.budget > #2.Avg_budget ] Output [ #3.dept_name , #3.building ]"
    },
    {
        "id": "df7c55b78134d5075fa290a9035a25741644634ea00f690386e7cc258fa96c6d",
        "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
        "parsing_tree": "college_2 | #1 = Scan Table [ classroom ] Predicate [ capacity >= 50.0 AND capacity <= 100.0 ] Output [ room_number , capacity , building ]"
    },
    {
        "id": "c53ee061cdf15b5b1aef19db14f1aa761d89bda54b6200c7dc91c6e97f76727f",
        "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?",
        "parsing_tree": "college_2 | #1 = Scan Table [ classroom ] Predicate [ capacity >= 50.0 AND capacity <= 100.0 ] Output [ room_number , capacity , building ]"
    },
    {
        "id": "ed160c0605977cd002e313cfe4be780905193f4199c6c4203580299b86430125",
        "question": "Find the name and building of the department with the highest budget.",
        "parsing_tree": "college_2 | #1 = Scan Table [ department ] Output [ dept_name , budget , building ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ budget DESC ] Output [ dept_name , budget , building ]"
    },
    {
        "id": "40af84a48168224a1c115b5e65eb3e81c82d92e34cb54dd58e1bbf9ff8b01aa0",
        "question": "What is the department name and corresponding building for the department with the greatest budget?",
        "parsing_tree": "college_2 | #1 = Scan Table [ department ] Output [ dept_name , budget , building ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ budget DESC ] Output [ dept_name , budget , building ]"
    },
    {
        "id": "8b19330f906a5bf1d17ed80ff18775752835ae86ef22e5ac13a7cf0811298328",
        "question": "What is the name of the student who has the highest total credits in the History department.",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Predicate [ dept_name = 'History' ] Output [ name , dept_name , tot_cred ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ tot_cred DESC ] Output [ name , tot_cred ]"
    },
    {
        "id": "651280d9ba58b5766226d9b4d20172fba7b8e37953199a87c580278d8e879fe5",
        "question": "Give the name of the student in the History department with the most credits.",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Predicate [ dept_name = 'History' ] Output [ name , dept_name , tot_cred ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ tot_cred DESC ] Output [ name , tot_cred ]"
    },
    {
        "id": "3c9aa1f664ef9553cfb7625c835567b9256ce19d9362986c9480b4ef7cc50a05",
        "question": "How many rooms does the Lamberton building have?",
        "parsing_tree": "college_2 | #1 = Scan Table [ classroom ] Predicate [ building = 'Lamberton' ] Output [ building ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "fdc99dc54c2c54eeb7c1060b57d2993a0e1dcfc320e7ac30ae70ef5004d9df6b",
        "question": "Count the number of classrooms in Lamberton.",
        "parsing_tree": "college_2 | #1 = Scan Table [ classroom ] Predicate [ building = 'Lamberton' ] Output [ building ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a1909f9f24a56afb9896ca44cad9df3d95f5e0d710f827edfd0b48605a263e09",
        "question": "How many students have advisors?",
        "parsing_tree": "college_2 | #1 = Scan Table [ advisor ] Output [ s_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ s_ID ] Output [ s_ID ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d0c373c20d269b5c77b445db31021bf81c47f31e48ce2e390f49997f345ab6d8",
        "question": "Count the number of students who have advisors.",
        "parsing_tree": "college_2 | #1 = Scan Table [ advisor ] Output [ s_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ s_ID ] Output [ s_ID ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "3f1207532e7b5735177c4afb3d252921b00ccdc04745a615570f2570249ecbb7",
        "question": "How many departments offer courses?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Distinct [ true ] Output [ dept_name ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT dept_name) AS Count_Dist_dept_name ]"
    },
    {
        "id": "456be632257ad87baac60e73d72d966ce7b751ac5d43357776c1bb8f2265ee72",
        "question": "Count the number of departments which offer courses.",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Distinct [ true ] Output [ dept_name ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT dept_name) AS Count_Dist_dept_name ]"
    },
    {
        "id": "6024cc864e807724e6641493b4906b7e2c4d14b5810e58f3d16cfdc0a953de18",
        "question": "How many different courses offered by Physics department?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Predicate [ dept_name = 'Physics' ] Output [ dept_name ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ec716837eebedf60cbd610959dbb639d8a0b57c3da72d82985ac8f5e300c300e",
        "question": "Count the number of courses in the Physics department.",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Predicate [ dept_name = 'Physics' ] Output [ dept_name ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5d27945f3d64063c1c7a64e3d7eff164544f9a23126857d622546ef88985bbcd",
        "question": "How many courses that do not have prerequisite?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ course_id ] ; #2 = Scan Table [ prereq ] Output [ course_id ] ; #3 = Aggregate [ #2 ] GroupBy [ course_id ] Output [ course_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.course_id = #1.course_id ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "24d51d819fc3dea6e70e82fbd44f7092e1866d103a1a51e720d77b7c165fb06c",
        "question": "Count the number of courses without prerequisites.",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ course_id ] ; #2 = Scan Table [ prereq ] Output [ course_id ] ; #3 = Aggregate [ #2 ] GroupBy [ course_id ] Output [ course_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.course_id = #1.course_id ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0c0e41bd5be77a77fc2bc7c39fb833f810885e60b78be52829563fce1d194f2a",
        "question": "Find the name of the courses that do not have any prerequisite?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ course_id , title ] ; #2 = Scan Table [ prereq ] Output [ course_id ] ; #3 = Aggregate [ #2 ] GroupBy [ course_id ] Output [ course_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.course_id = #1.course_id ] Output [ #1.title ]"
    },
    {
        "id": "194d0ffa06fe2f6c6f52025dfc98d829a92d8e494d2590eec69751925826309a",
        "question": "What are the titles of courses without prerequisites?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ course_id , title ] ; #2 = Scan Table [ prereq ] Output [ course_id ] ; #3 = Aggregate [ #2 ] GroupBy [ course_id ] Output [ course_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.course_id = #1.course_id ] Output [ #1.title ]"
    },
    {
        "id": "52e61e6ab1f7f0cf1e0bbda2ab14c444edb29c284474efa9abb50c79dc322106",
        "question": "How many different instructors have taught some course?",
        "parsing_tree": "college_2 | #1 = Scan Table [ teaches ] Output [ ID ] ; #2 = Aggregate [ #1 ] GroupBy [ ID ] Output [ ID ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7f972db0b076633fe7dd0e8b3b31ba6e63134b2d3319febb41bbbd1794f78ea1",
        "question": "Count the number of distinct instructors who have taught a course.",
        "parsing_tree": "college_2 | #1 = Scan Table [ teaches ] Output [ ID ] ; #2 = Aggregate [ #1 ] GroupBy [ ID ] Output [ ID ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1a893dc7fb944a8ce7ba310de10d7a2d9cc74d0d865b76eeb0798232cd08adf2",
        "question": "Find the total budgets of the Marketing or Finance department.",
        "parsing_tree": "college_2 | #1 = Scan Table [ department ] Predicate [ dept_name = 'Finance' OR dept_name = 'Marketing' ] Output [ dept_name , budget ] ; #2 = Aggregate [ #1 ] Output [ SUM(budget) AS Sum_budget ]"
    },
    {
        "id": "1bc102538460623e2297603e383feb2eec301739fa46be568854cbe469986b26",
        "question": "What is the sum of budgets of the Marketing and Finance departments?",
        "parsing_tree": "college_2 | #1 = Scan Table [ department ] Predicate [ dept_name = 'Finance' OR dept_name = 'Marketing' ] Output [ dept_name , budget ] ; #2 = Aggregate [ #1 ] Output [ SUM(budget) AS Sum_budget ]"
    },
    {
        "id": "9780baa9d307ad456abc2e56df4ad3969026835d7e3610f45287cf14fefcbd01",
        "question": "Find the department name of the instructor whose name contains 'Soisalon'.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Predicate [ name like '%Soisalon%' ] Output [ name , dept_name ]"
    },
    {
        "id": "948c2953c2ce3341ea550490fd74f6feb3251176700901c32a8181f97f16da33",
        "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Predicate [ name like '%Soisalon%' ] Output [ name , dept_name ]"
    },
    {
        "id": "6c120be94db4bb0f0fe348d18f2af0b0399ffd5f97e2d2571788398997afd3e9",
        "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?",
        "parsing_tree": "college_2 | #1 = Scan Table [ classroom ] Predicate [ capacity < 50.0 AND building = 'Lamberton' ] Output [ building , capacity ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "96138f7caf8fb6c7f00a066379985ef1174bb4153d1a0af67185b32ceb76cf98",
        "question": "Count the number of rooms in Lamberton with capacity lower than 50.",
        "parsing_tree": "college_2 | #1 = Scan Table [ classroom ] Predicate [ capacity < 50.0 AND building = 'Lamberton' ] Output [ building , capacity ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "394adb74e7211e385258755b63aad2cb12245817228757152c9a431f46302fdf",
        "question": "Find the name and budget of departments whose budgets are more than the average budget.",
        "parsing_tree": "college_2 | #1 = Scan Table [ department ] Output [ budget ] ; #2 = Aggregate [ #1 ] Output [ AVG(budget) AS Avg_budget ] ; #3 = Scan Table [ department ] Output [ dept_name , budget ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.budget > #2.Avg_budget ] Output [ #3.dept_name , #3.budget ]"
    },
    {
        "id": "57bdbeb3db51aa168742f956f3cbaa8932f4e65f214e2abd6d7d64e882d04292",
        "question": "What are the names and budgets of departments with budgets greater than the average?",
        "parsing_tree": "college_2 | #1 = Scan Table [ department ] Output [ budget ] ; #2 = Aggregate [ #1 ] Output [ AVG(budget) AS Avg_budget ] ; #3 = Scan Table [ department ] Output [ dept_name , budget ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.budget > #2.Avg_budget ] Output [ #3.dept_name , #3.budget ]"
    },
    {
        "id": "8f35cdd0d2d93e2833524f58f8a710f94d197ca5e8f23e5c505a2a0dbcac480f",
        "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Predicate [ dept_name = 'Statistics' ] Output [ name , dept_name , salary ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ salary ASC ] Output [ name , salary ]"
    },
    {
        "id": "84695d4454ad9ad78d14dcd6cf7cb298ca8e6fc7d7c70270a7d7816e1a297cc8",
        "question": "Give the name of the lowest earning instructor in the Statistics department.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Predicate [ dept_name = 'Statistics' ] Output [ name , dept_name , salary ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ salary ASC ] Output [ name , salary ]"
    },
    {
        "id": "d28af572f3775b55553091efb2080cfcef91c47cdd8ab3481ec8023acc15627e",
        "question": "Find the title of course that is provided by both Statistics and Psychology departments.",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Predicate [ dept_name = 'Statistics' ] Output [ dept_name , title ] ; #2 = Scan Table [ course ] Predicate [ dept_name = 'Psychology' ] Output [ dept_name , course_id , title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.title = #2.title ] Distinct [ true ] Output [ #1.title , #2.course_id ] ; #4 = Aggregate [ #3 ] GroupBy [ title ] Output [ title ]"
    },
    {
        "id": "10c0ab16acf669bd4768f34a68f318897532f47a26f2c4ba2ec522518929eb49",
        "question": "What is the title of a course that is listed in both the Statistics and Psychology departments?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Predicate [ dept_name = 'Statistics' ] Output [ dept_name , title ] ; #2 = Scan Table [ course ] Predicate [ dept_name = 'Psychology' ] Output [ dept_name , course_id , title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.title = #2.title ] Distinct [ true ] Output [ #1.title , #2.course_id ] ; #4 = Aggregate [ #3 ] GroupBy [ title ] Output [ title ]"
    },
    {
        "id": "7829c2291aeac84d9f303f1ad81808cf2f231e4861f59829bb7dc8d65b78b597",
        "question": "Find the title of course that is provided by Statistics but not Psychology departments.",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Predicate [ dept_name = 'Statistics' ] Distinct [ true ] Output [ dept_name , title ] ; #2 = Scan Table [ course ] Predicate [ dept_name = 'Psychology' ] Output [ dept_name , title ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.title = #2.title ] Output [ #1.title ]"
    },
    {
        "id": "706ea2f3046dfd607e06548e6380381a6b79c472cce63495ec079560b490e208",
        "question": "What are the titles of courses that are in the Statistics department but not the Psychology department?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Predicate [ dept_name = 'Statistics' ] Distinct [ true ] Output [ dept_name , title ] ; #2 = Scan Table [ course ] Predicate [ dept_name = 'Psychology' ] Output [ dept_name , title ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.title = #2.title ] Output [ #1.title ]"
    },
    {
        "id": "b36742f0fc3fa1373c9d4d348e272a8bdd0ac619b803f33344200649bcece549",
        "question": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.",
        "parsing_tree": "college_2 | #1 = Scan Table [ teaches ] Predicate [ year = 2009 AND semester = 'Fall' ] Output [ semester , ID , year ] ; #2 = Aggregate [ #1 ] GroupBy [ ID ] Output [ ID ] ; #3 = Scan Table [ teaches ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ semester , ID , year ] ; #4 = Aggregate [ #3 ] GroupBy [ ID ] Output [ ID ] ; #5 = Except [ #2 , #4 ] Predicate [ #2.ID = #4.ID ] Output [ #2.ID ]"
    },
    {
        "id": "ada763906f075e725e3ab8622aad33ba76d10a4b3fa05705b5ef32bf955996d1",
        "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?",
        "parsing_tree": "college_2 | #1 = Scan Table [ teaches ] Predicate [ year = 2009 AND semester = 'Fall' ] Output [ semester , ID , year ] ; #2 = Aggregate [ #1 ] GroupBy [ ID ] Output [ ID ] ; #3 = Scan Table [ teaches ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ semester , ID , year ] ; #4 = Aggregate [ #3 ] GroupBy [ ID ] Output [ ID ] ; #5 = Except [ #2 , #4 ] Predicate [ #2.ID = #4.ID ] Output [ #2.ID ]"
    },
    {
        "id": "ae0d2760ff52a36f4cc91b7a0c3338a1b71910e30afe8788a0a708fb5b5e7601",
        "question": "Find the name of students who took any class in the years of 2009 and 2010.",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ name , ID ] ; #2 = Scan Table [ takes ] Predicate [ year = 2009 OR year = 2010 ] Output [ ID , year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.ID ] Distinct [ true ] Output [ #1.name ]"
    },
    {
        "id": "049430e0a509614b9d63c5b07f21174de3b2fbc37006638865a8b1e9d4bde728",
        "question": "What are the names of the students who took classes in 2009 or 2010?",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ name , ID ] ; #2 = Scan Table [ takes ] Predicate [ year = 2009 OR year = 2010 ] Output [ ID , year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.ID ] Distinct [ true ] Output [ #1.name ]"
    },
    {
        "id": "a518eefaf59cfce56a8a5f8ace30928d607fbb76e8debe10c784770f107aeaa3",
        "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ dept_name ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_name ] Output [ countstar AS Count_Star , dept_name ] ; #3 = TopSort [ #2 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ dept_name , Count_Star ]"
    },
    {
        "id": "aca289bbe3b4910d9b520da39301784394ac6f9f9faed5a453c52180805e4efa",
        "question": "What are the names of the 3 departments with the most courses?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ dept_name ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_name ] Output [ countstar AS Count_Star , dept_name ] ; #3 = TopSort [ #2 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ dept_name , Count_Star ]"
    },
    {
        "id": "99af4f0fc1d31ff81dd8318236652326bd76bb5498fe502d038005329dadc194",
        "question": "Find the name of the department that offers the highest total credits?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ dept_name , credits ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_name ] Output [ dept_name , SUM(credits) AS Sum_credits ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_credits DESC ] Output [ dept_name , Sum_credits ]"
    },
    {
        "id": "b9fab3255c1757c0dc64e1d9b69e644d283177321da1f7882ac6cab6d65ce2ca",
        "question": "What is the name of the department with the most credits?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ dept_name , credits ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_name ] Output [ dept_name , SUM(credits) AS Sum_credits ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_credits DESC ] Output [ dept_name , Sum_credits ]"
    },
    {
        "id": "13d1df1ad9b19d41adce8ca4cb1cefb72342de33385ad75a3cf0af0706cdcf89",
        "question": "List the names of all courses ordered by their titles and credits.",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ credits , title ] ; #2 = Sort [ #1 ] OrderBy [ title ASC , credits ASC ] Output [ title , credits ]"
    },
    {
        "id": "f77471d199442cc5867c5f144fa44064569c59299ebfe7f847fcfd89a9bdf5c9",
        "question": "Given the titles of all courses, in order of titles and credits.",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ credits , title ] ; #2 = Sort [ #1 ] OrderBy [ title ASC , credits ASC ] Output [ title , credits ]"
    },
    {
        "id": "802bae8fe7b000bf9732ce87776cb43a2d6de86bebc043f045eff023b2794e61",
        "question": "Which department has the lowest budget?",
        "parsing_tree": "college_2 | #1 = Scan Table [ department ] Output [ dept_name , budget ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ budget ASC ] Output [ dept_name , budget ]"
    },
    {
        "id": "11a8749b9d66bd4f10b60c7f33fffe8476b30c597a200b0dec1b3c0896351cfa",
        "question": "Give the name of the department with the lowest budget.",
        "parsing_tree": "college_2 | #1 = Scan Table [ department ] Output [ dept_name , budget ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ budget ASC ] Output [ dept_name , budget ]"
    },
    {
        "id": "312883ee21605917270078c6f06e1575609eaeebf76e8322854724b3c968e114",
        "question": "List the names and buildings of all departments sorted by the budget from large to small.",
        "parsing_tree": "college_2 | #1 = Scan Table [ department ] Output [ dept_name , budget , building ] ; #2 = Sort [ #1 ] OrderBy [ budget DESC ] Output [ dept_name , budget , building ]"
    },
    {
        "id": "3659d47b5d30f10188b7ccf9d35168137516cd95c93dd4fcca00cbbd6fd8c675",
        "question": "What are the names and buildings of the deparments, sorted by budget descending?",
        "parsing_tree": "college_2 | #1 = Scan Table [ department ] Output [ dept_name , budget , building ] ; #2 = Sort [ #1 ] OrderBy [ budget DESC ] Output [ dept_name , budget , building ]"
    },
    {
        "id": "2481cffb76f81323f20074dc69bf7298400592465ed0d7a09004e8f77e2b9495",
        "question": "Who is the instructor with the highest salary?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , salary ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ salary DESC ] Output [ name , salary ]"
    },
    {
        "id": "38510126579bd161a29ad88b1acb176f8d79ba069ab86e12697a7360e45ca02f",
        "question": "Give the name of the highest paid instructor.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , salary ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ salary DESC ] Output [ name , salary ]"
    },
    {
        "id": "e7e42678576cddfcbfcc4cf74cd4113f905bde242bb6ad6a93b595de0167b78d",
        "question": "List the information of all instructors ordered by their salary in ascending order.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , dept_name , salary , ID ] ; #2 = Sort [ #1 ] OrderBy [ salary ASC ] Output [ name , dept_name , salary , ID ]"
    },
    {
        "id": "1eae0480e1de02ff73ad89167c795a7225c160da4e83b33fa07d530641a6ccc7",
        "question": "Give all information regarding instructors, in order of salary from least to greatest.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , dept_name , salary , ID ] ; #2 = Sort [ #1 ] OrderBy [ salary ASC ] Output [ name , dept_name , salary , ID ]"
    },
    {
        "id": "a4e1a27ee28f1091d801a5a8aae44a78a1619047fcb20c026b2793f5164c84c5",
        "question": "Find the name of the students and their department names sorted by their total credits in ascending order.",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ name , dept_name , tot_cred ] ; #2 = Sort [ #1 ] OrderBy [ tot_cred ASC ] Output [ name , dept_name , tot_cred ]"
    },
    {
        "id": "d8e8a1d03cd11ad8ec7851708639327f5f5f429e5abaae2661b157632454ef12",
        "question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ name , dept_name , tot_cred ] ; #2 = Sort [ #1 ] OrderBy [ tot_cred ASC ] Output [ name , dept_name , tot_cred ]"
    },
    {
        "id": "e5113fbd3069523758691a66581a2ce850c1b376b8fbf78353c9eef3d46be3eb",
        "question": "list in alphabetic order all course names and their instructors' names in year 2008.",
        "parsing_tree": "college_2 | #1 = Scan Table [ teaches ] Predicate [ year = 2008 ] Output [ course_id , ID , year ] ; #2 = Scan Table [ instructor ] Output [ name , ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.ID ] Output [ #1.course_id , #2.name ] ; #4 = Scan Table [ course ] Output [ course_id , title ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.course_id = #4.course_id ] Output [ #3.name , #4.title ] ; #6 = Sort [ #5 ] OrderBy [ title ASC ] Output [ name , title ]"
    },
    {
        "id": "809c575ea603701b98d6d7adc978cf4fbf5bac6676af626f4ec8294e67498bc6",
        "question": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.",
        "parsing_tree": "college_2 | #1 = Scan Table [ teaches ] Predicate [ year = 2008 ] Output [ course_id , ID , year ] ; #2 = Scan Table [ instructor ] Output [ name , ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.ID ] Output [ #1.course_id , #2.name ] ; #4 = Scan Table [ course ] Output [ course_id , title ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.course_id = #4.course_id ] Output [ #3.name , #4.title ] ; #6 = Sort [ #5 ] OrderBy [ title ASC ] Output [ name , title ]"
    },
    {
        "id": "cd76d60a28c540eadeae2450f76925538c0b27a011f2b46cb2745fd7d5a36494",
        "question": "Find the name of instructors who are advising more than one student.",
        "parsing_tree": "college_2 | #1 = Scan Table [ advisor ] Output [ i_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ i_ID ] Output [ countstar AS Count_Star , i_ID ] ; #3 = Scan Table [ instructor ] Output [ name , ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.i_ID = #3.ID ] Output [ #3.name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]"
    },
    {
        "id": "18c1f7cef0887db6610a937cd9caa85d45f0444faa40f12128dcf13a0fb6abba",
        "question": "What are the names of instructors who advise more than one student?",
        "parsing_tree": "college_2 | #1 = Scan Table [ advisor ] Output [ i_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ i_ID ] Output [ countstar AS Count_Star , i_ID ] ; #3 = Scan Table [ instructor ] Output [ name , ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.i_ID = #3.ID ] Output [ #3.name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]"
    },
    {
        "id": "ff0bbd0378557514b80bc721cab4143c85aedce768a915880f1aea57de098fb9",
        "question": "Find the name of the students who have more than one advisor?",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ name , ID ] ; #2 = Scan Table [ advisor ] Output [ s_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.s_ID ] Output [ #1.ID , #1.name , #2.s_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ s_ID ] Output [ name , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]"
    },
    {
        "id": "9562eec88f5b7f1042223c06c7cc97aa9d3b25f2b137d8bf7968e999f04de119",
        "question": "What are the names of students who have more than one advisor?",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ name , ID ] ; #2 = Scan Table [ advisor ] Output [ s_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.s_ID ] Output [ #1.ID , #1.name , #2.s_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ s_ID ] Output [ name , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]"
    },
    {
        "id": "a06dbb3888e29a2162f0be1dfee38bf90824bd2b7edf3af90c871feb69a249ba",
        "question": "Find the number of rooms with more than 50 capacity for each building.",
        "parsing_tree": "college_2 | #1 = Scan Table [ classroom ] Predicate [ capacity > 50.0 ] Output [ capacity , building ] ; #2 = Aggregate [ #1 ] GroupBy [ building ] Output [ countstar AS Count_Star , building ]"
    },
    {
        "id": "3e1653432907af07740810a45bd5986d4e26dedad406749a6c8b8deaa6a1e386",
        "question": "How many rooms in each building have a capacity of over 50?",
        "parsing_tree": "college_2 | #1 = Scan Table [ classroom ] Predicate [ capacity > 50.0 ] Output [ capacity , building ] ; #2 = Aggregate [ #1 ] GroupBy [ building ] Output [ countstar AS Count_Star , building ]"
    },
    {
        "id": "03396dbf98b47cf7577f6d6887ca6a7d1211efec75803ccc85948877bcac791a",
        "question": "Find the maximum and average capacity among rooms in each building.",
        "parsing_tree": "college_2 | #1 = Scan Table [ classroom ] Output [ capacity , building ] ; #2 = Aggregate [ #1 ] GroupBy [ building ] Output [ MAX(capacity) AS Max_capacity , building , AVG(capacity) AS Avg_capacity ]"
    },
    {
        "id": "af96112b5c7bcab81306feac8c2a974a6d483400c3ccc0e708fd8e9db878e86a",
        "question": "What are the greatest and average capacity for rooms in each building?",
        "parsing_tree": "college_2 | #1 = Scan Table [ classroom ] Output [ capacity , building ] ; #2 = Aggregate [ #1 ] GroupBy [ building ] Output [ MAX(capacity) AS Max_capacity , building , AVG(capacity) AS Avg_capacity ]"
    },
    {
        "id": "d3566ed33d6631ea071d4ca274e9fe427f3cbb3f11a3f0fd2cb66eab16052ac7",
        "question": "Find the title of the course that is offered by more than one department.",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ title ] ; #2 = Aggregate [ #1 ] GroupBy [ title ] Output [ countstar AS Count_Star , title ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ title ]"
    },
    {
        "id": "9f691317aa369e2f795610e69d1120f6838d190294d1c0d0169fc890f913c9f0",
        "question": "What are the titles of courses that are offered in more than one department?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ title ] ; #2 = Aggregate [ #1 ] GroupBy [ title ] Output [ countstar AS Count_Star , title ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ title ]"
    },
    {
        "id": "ee648e7f02184d3b663f2ebb41fca5d9b442b72586560081084f7f3909e30a56",
        "question": "Find the total credits of courses provided by different department.",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ dept_name , credits ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_name ] Output [ dept_name , SUM(credits) AS Sum_credits ]"
    },
    {
        "id": "e6f32927a881998fce5564d767462ca2eea5740600d147ac77cbfc14c77abddb",
        "question": "How many total credits are offered by each department?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ dept_name , credits ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_name ] Output [ dept_name , SUM(credits) AS Sum_credits ]"
    },
    {
        "id": "1acd5afe5bd02317ec0a80552c2d6ff7d859f715eb259004d31cdbbce5c26521",
        "question": "Find the number of courses provided in each semester and year.",
        "parsing_tree": "college_2 | #1 = Scan Table [ section ] Output [ semester , year ] ; #2 = Aggregate [ #1 ] GroupBy [ year , semester ] Output [ countstar AS Count_Star , semester , year ]"
    },
    {
        "id": "37446f77b814d610c0534aeb33f66cfaf3059c391eb430b6c190e5f8c8eb3cc7",
        "question": "How many courses are provided in each semester and year?",
        "parsing_tree": "college_2 | #1 = Scan Table [ section ] Output [ semester , year ] ; #2 = Aggregate [ #1 ] GroupBy [ year , semester ] Output [ countstar AS Count_Star , semester , year ]"
    },
    {
        "id": "8635fe0e7aac102a2e793ce132518812d461c59392526461f5c14ce072988164",
        "question": "Find the year which offers the largest number of courses.",
        "parsing_tree": "college_2 | #1 = Scan Table [ section ] Output [ year ] ; #2 = Aggregate [ #1 ] GroupBy [ year ] Output [ countstar AS Count_Star , year ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , year ]"
    },
    {
        "id": "2420321da85ca70864eb7e50c27ec41c101e068b1227b4edcce3435ea0273547",
        "question": "Which year had the greatest number of courses?",
        "parsing_tree": "college_2 | #1 = Scan Table [ section ] Output [ year ] ; #2 = Aggregate [ #1 ] GroupBy [ year ] Output [ countstar AS Count_Star , year ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , year ]"
    },
    {
        "id": "4961294c0402089dd3d2d9612d7b190bbe3453a3056c8c412ac7334d5b242a61",
        "question": "Find the year and semester when offers the largest number of courses.",
        "parsing_tree": "college_2 | #1 = Scan Table [ section ] Output [ semester , year ] ; #2 = Aggregate [ #1 ] GroupBy [ year , semester ] Output [ countstar AS Count_Star , semester , year ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , semester , year ]"
    },
    {
        "id": "80d0dd2cec4538dfa285f1a14b5fa7850525a46316f8b8a07e8adcc3696bfbb8",
        "question": "What is the year and semester with the most courses?",
        "parsing_tree": "college_2 | #1 = Scan Table [ section ] Output [ semester , year ] ; #2 = Aggregate [ #1 ] GroupBy [ year , semester ] Output [ countstar AS Count_Star , semester , year ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , semester , year ]"
    },
    {
        "id": "ee36e6db4da647ec34f822b7782254373f08a26df4a0f77cc2178a3a1b5885c4",
        "question": "Find the name of department has the highest amount of students?",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ dept_name ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_name ] Output [ countstar AS Count_Star , dept_name ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ dept_name , Count_Star ]"
    },
    {
        "id": "cd9bd482ae6a02f62aecac4bf91971aafc8456a371fe3c30f91baaac8400afb6",
        "question": "What is the name of the deparment with the highest enrollment?",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ dept_name ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_name ] Output [ countstar AS Count_Star , dept_name ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ dept_name , Count_Star ]"
    },
    {
        "id": "cc06ce1a7f8c59392fae783e1c7850c0a28018a235bf7a2f36d5ab095953aede",
        "question": "Find the total number of students in each department.",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ dept_name ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_name ] Output [ countstar AS Count_Star , dept_name ]"
    },
    {
        "id": "091c006b7f93a14d741316adb496a65bb2014e18a9e7c4dbc36f127a60db7fa7",
        "question": "How many students are in each department?",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ dept_name ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_name ] Output [ countstar AS Count_Star , dept_name ]"
    },
    {
        "id": "9bb31e3449cc5e4b146999bdd39004beb7ab521c80d7ea3f38f00a9f9bd6fd43",
        "question": "Find the semester and year which has the least number of student taking any class.",
        "parsing_tree": "college_2 | #1 = Scan Table [ takes ] Output [ semester , year ] ; #2 = Aggregate [ #1 ] GroupBy [ year , semester ] Output [ countstar AS Count_Star , semester , year ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , semester , year ]"
    },
    {
        "id": "174adeacc1ee2fdf41a97c479fc0b9ef6e2244ca8f6320e37cc89148b3abd7b9",
        "question": "Which semeseter and year had the fewest students?",
        "parsing_tree": "college_2 | #1 = Scan Table [ takes ] Output [ semester , year ] ; #2 = Aggregate [ #1 ] GroupBy [ year , semester ] Output [ countstar AS Count_Star , semester , year ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , semester , year ]"
    },
    {
        "id": "e892af4abe16185ae4f99c99a71d59c4a1ffdd5c06f1db09323f557424885bf9",
        "question": "What is the id of the instructor who advises of all students from History department?",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Predicate [ dept_name = 'History' ] Output [ dept_name , ID ] ; #2 = Scan Table [ advisor ] Output [ s_ID , i_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.s_ID ] Output [ #2.i_ID ]"
    },
    {
        "id": "3050602b187dbcd4ffbe185ac3f13332d5cc7b0f5903614ffa98f18251543b7b",
        "question": "Give id of the instructor who advises students in the History department.",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Predicate [ dept_name = 'History' ] Output [ dept_name , ID ] ; #2 = Scan Table [ advisor ] Output [ s_ID , i_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.s_ID ] Output [ #2.i_ID ]"
    },
    {
        "id": "2cc342be53aaca06ab258a771cc27116d4f6f207f668ad11634c47852661cff9",
        "question": "Find the name and salary of the instructors who are advisors of any student from History department?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , salary , ID ] ; #2 = Scan Table [ student ] Predicate [ dept_name = 'History' ] Output [ dept_name , ID ] ; #3 = Scan Table [ advisor ] Output [ s_ID , i_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ID = #3.s_ID ] Output [ #3.i_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.ID = #4.i_ID ] Output [ #1.name , #1.salary ]"
    },
    {
        "id": "cbcffb8f62999694847c5b97207d88e048214c232f372cf0dc99113add327a74",
        "question": "What are the names and salaries of instructors who advises students in the History department?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , salary , ID ] ; #2 = Scan Table [ student ] Predicate [ dept_name = 'History' ] Output [ dept_name , ID ] ; #3 = Scan Table [ advisor ] Output [ s_ID , i_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ID = #3.s_ID ] Output [ #3.i_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.ID = #4.i_ID ] Output [ #1.name , #1.salary ]"
    },
    {
        "id": "39ca430aebf323837f2f0b2d4515599e715933ff001ceecaebbbbb91d20a2ac7",
        "question": "Find the id of the courses that do not have any prerequisite?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ course_id ] ; #2 = Scan Table [ prereq ] Output [ course_id ] ; #3 = Aggregate [ #2 ] GroupBy [ course_id ] Output [ course_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.course_id = #1.course_id ] Output [ #1.course_id ]"
    },
    {
        "id": "cfdb5f32a9cbc152793da2160207825c1d43e52cfb0a85b37de4a434568e0187",
        "question": "What are the ids of courses without prerequisites?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ course_id ] ; #2 = Scan Table [ prereq ] Output [ course_id ] ; #3 = Aggregate [ #2 ] GroupBy [ course_id ] Output [ course_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.course_id = #1.course_id ] Output [ #1.course_id ]"
    },
    {
        "id": "8692ae8722d1252e07b24afeb129d5fb93d9e7fa973240fbd530def77529ceff",
        "question": "What are the names of courses without prerequisites?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ course_id , title ] ; #2 = Scan Table [ prereq ] Output [ course_id ] ; #3 = Aggregate [ #2 ] GroupBy [ course_id ] Output [ course_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.course_id = #1.course_id ] Output [ #1.title ]"
    },
    {
        "id": "b3309c1201c2f93718c6dd2dc79071564053f1cff0accf92e61e57832eba8c1a",
        "question": "What is the title of the prerequisite class of International Finance course?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ course_id , title ] ; #2 = Scan Table [ course ] Predicate [ title = 'International Finance' ] Output [ course_id , title ] ; #3 = Scan Table [ prereq ] Output [ prereq_id , course_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.prereq_id ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #4.prereq_id = #1.course_id ] Output [ #1.title ]"
    },
    {
        "id": "09ccd4f3c0dc5979d6c9438836b33158dbab2118ad41caf008f6d2ef5afc17a5",
        "question": "Give the title of the prerequisite to the course International Finance.",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ course_id , title ] ; #2 = Scan Table [ course ] Predicate [ title = 'International Finance' ] Output [ course_id , title ] ; #3 = Scan Table [ prereq ] Output [ prereq_id , course_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.prereq_id ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #4.prereq_id = #1.course_id ] Output [ #1.title ]"
    },
    {
        "id": "aa5700ad155d9b62f1686401fc510f121eace152b20b7e5d311ad748a1a14bb7",
        "question": "Find the title of course whose prerequisite is course Differential Geometry.",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ course_id , title ] ; #2 = Scan Table [ course ] Predicate [ title = 'Differential Geometry' ] Output [ course_id , title ] ; #3 = Scan Table [ prereq ] Output [ prereq_id , course_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.prereq_id ] Output [ #3.course_id ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #4.course_id = #1.course_id ] Output [ #1.title ]"
    },
    {
        "id": "f092e03b0dbbf9696cf619f28507c3e3d4fc51e4d58686f73f21dd5733c7237d",
        "question": "What is the title of the course with Differential Geometry as a prerequisite?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ course_id , title ] ; #2 = Scan Table [ course ] Predicate [ title = 'Differential Geometry' ] Output [ course_id , title ] ; #3 = Scan Table [ prereq ] Output [ prereq_id , course_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.prereq_id ] Output [ #3.course_id ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #4.course_id = #1.course_id ] Output [ #1.title ]"
    },
    {
        "id": "7567d23aa5bc957c33d63a737dd5b8e666217b3e41a06498abb0056c9a28aa80",
        "question": "Find the names of students who have taken any course in the fall semester of year 2003.",
        "parsing_tree": "college_2 | #1 = Scan Table [ takes ] Predicate [ year = 2003 AND semester = 'Fall' ] Output [ semester , ID , year ] ; #2 = Aggregate [ #1 ] GroupBy [ ID ] Output [ ID ] ; #3 = Scan Table [ student ] Output [ name , ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ID = #3.ID ] Output [ #3.name ]"
    },
    {
        "id": "f1db21f6fc6b49c12ebaad55bd3270f0bfe8ed6923fcb41bd88fb7e8692c5251",
        "question": "What are the names of students who took a course in the Fall of 2003?",
        "parsing_tree": "college_2 | #1 = Scan Table [ takes ] Predicate [ year = 2003 AND semester = 'Fall' ] Output [ semester , ID , year ] ; #2 = Aggregate [ #1 ] GroupBy [ ID ] Output [ ID ] ; #3 = Scan Table [ student ] Output [ name , ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ID = #3.ID ] Output [ #3.name ]"
    },
    {
        "id": "85e71596f267dccbc73172309fa109481327de3fc7f2f73fd06be95dad8582bc",
        "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?",
        "parsing_tree": "college_2 | #1 = Scan Table [ section ] Predicate [ year = 2010 AND building = 'Chandler' ] Output [ course_id , semester , building , year ] ; #2 = Scan Table [ course ] Output [ course_id , title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.title ]"
    },
    {
        "id": "726355ff28629ef9b6c0e8fc7dbdbc5ef6e8b51ac49c21aecb53176e0aa06ec2",
        "question": "Give the title of the course offered in Chandler during the Fall of 2010.",
        "parsing_tree": "college_2 | #1 = Scan Table [ section ] Predicate [ year = 2010 AND building = 'Chandler' ] Output [ course_id , semester , building , year ] ; #2 = Scan Table [ course ] Output [ course_id , title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.title ]"
    },
    {
        "id": "add52aafaaee4b0b6e3cb99622ff540dd9241f1932573d9befc25d5ad8377390",
        "question": "Find the name of the instructors who taught C Programming course before.",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Predicate [ title = 'C Programming' ] Output [ course_id , title ] ; #2 = Scan Table [ teaches ] Output [ course_id , ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.ID ] ; #4 = Scan Table [ instructor ] Output [ name , ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ID = #4.ID ] Output [ #4.name ]"
    },
    {
        "id": "7db7bf3e429bd27e0bcdadd2a656df0e68f31e7f0dc6d0454e4aade56653c69a",
        "question": "What are the names of instructors who have taught C Programming courses?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Predicate [ title = 'C Programming' ] Output [ course_id , title ] ; #2 = Scan Table [ teaches ] Output [ course_id , ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.ID ] ; #4 = Scan Table [ instructor ] Output [ name , ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ID = #4.ID ] Output [ #4.name ]"
    },
    {
        "id": "e3e258947ccb26dd531392e1adf17fe49b33c3166f825c6f2485d2f513c9b87f",
        "question": "Find the name and salary of instructors who are advisors of the students from the Math department.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , salary , ID ] ; #2 = Scan Table [ student ] Predicate [ dept_name = 'Math' ] Output [ dept_name , ID ] ; #3 = Scan Table [ advisor ] Output [ s_ID , i_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ID = #3.s_ID ] Output [ #3.i_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.ID = #4.i_ID ] Output [ #1.name , #1.salary ]"
    },
    {
        "id": "36ddcb57f91caeb99de1679ae7da0aa309b3a6fc7924014270b3a39425a3ba4b",
        "question": "What are the names and salaries of instructors who advise students in the Math department?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , salary , ID ] ; #2 = Scan Table [ student ] Predicate [ dept_name = 'Math' ] Output [ dept_name , ID ] ; #3 = Scan Table [ advisor ] Output [ s_ID , i_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ID = #3.s_ID ] Output [ #3.i_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.ID = #4.i_ID ] Output [ #1.name , #1.salary ]"
    },
    {
        "id": "0ef2f0b7ea8f73c1e54f96b58c214d8838fe8229aef51c6088d38d2508427178",
        "question": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , ID ] ; #2 = Scan Table [ student ] Predicate [ dept_name = 'Math' ] Output [ tot_cred , dept_name , ID ] ; #3 = Scan Table [ advisor ] Output [ s_ID , i_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ID = #3.s_ID ] Output [ #2.tot_cred , #3.i_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.ID = #4.i_ID ] Output [ #1.name , #4.tot_cred ] ; #6 = Sort [ #5 ] OrderBy [ tot_cred ASC ] Output [ name , tot_cred ]"
    },
    {
        "id": "d904dfecd2d26cf91cf8b658c53112d21408bf5d969cd180d57182c8fc2ebbdb",
        "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , ID ] ; #2 = Scan Table [ student ] Predicate [ dept_name = 'Math' ] Output [ tot_cred , dept_name , ID ] ; #3 = Scan Table [ advisor ] Output [ s_ID , i_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ID = #3.s_ID ] Output [ #2.tot_cred , #3.i_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.ID = #4.i_ID ] Output [ #1.name , #4.tot_cred ] ; #6 = Sort [ #5 ] OrderBy [ tot_cred ASC ] Output [ name , tot_cred ]"
    },
    {
        "id": "983afbcd38087e5e1359dc12f9794020d6ac9b0e1bf481e3219f865ece712bcd",
        "question": "What is the course title of the prerequisite of course Mobile Computing?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ course_id , title ] ; #2 = Scan Table [ course ] Predicate [ title = 'Mobile Computing' ] Output [ course_id , title ] ; #3 = Scan Table [ prereq ] Output [ prereq_id , course_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.prereq_id ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #4.prereq_id = #1.course_id ] Output [ #1.title ]"
    },
    {
        "id": "3d1d265c4b746df75e80eefa3a598d7cb5f8f79c7e1cefbb6ca2f03a2a2a54af",
        "question": "What is the title of the course that is a prerequisite for Mobile Computing?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Output [ course_id , title ] ; #2 = Scan Table [ course ] Predicate [ title = 'Mobile Computing' ] Output [ course_id , title ] ; #3 = Scan Table [ prereq ] Output [ prereq_id , course_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.prereq_id ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #4.prereq_id = #1.course_id ] Output [ #1.title ]"
    },
    {
        "id": "8632d7a53827f5a014c7f26557e48a831e1a9b0155ca9417b66d77f7cc0eb3e7",
        "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ tot_cred , ID ] ; #2 = Scan Table [ instructor ] Output [ name , ID ] ; #3 = Scan Table [ advisor ] Output [ s_ID , i_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ID = #3.i_ID ] Output [ #2.name , #3.s_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.ID = #4.s_ID ] Output [ #4.name , #1.tot_cred ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ tot_cred DESC ] Output [ name , tot_cred ]"
    },
    {
        "id": "a0205e0ec4a9e2ddc5817b96115fc29c87de35e7aefa2c3c1ee376dcf7434f8b",
        "question": "What is the name of the instructor who advises the student with the greatest number of total credits?",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ tot_cred , ID ] ; #2 = Scan Table [ instructor ] Output [ name , ID ] ; #3 = Scan Table [ advisor ] Output [ s_ID , i_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ID = #3.i_ID ] Output [ #2.name , #3.s_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.ID = #4.s_ID ] Output [ #4.name , #1.tot_cred ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ tot_cred DESC ] Output [ name , tot_cred ]"
    },
    {
        "id": "1faa56c1193654c5863efa891bb2cdf0f01cf241f5b8a1d5624fe1d0925c8098",
        "question": "Find the name of instructors who didn't teach any courses?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , ID ] ; #2 = Scan Table [ teaches ] Output [ ID ] ; #3 = Aggregate [ #2 ] GroupBy [ ID ] Output [ ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.ID = #1.ID ] Output [ #1.name ]"
    },
    {
        "id": "2358de1bd434f39ea43ca1e5d0ce9e34eed920d2e92b45c8144013aa6420d7fe",
        "question": "What are the names of instructors who didn't teach?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , ID ] ; #2 = Scan Table [ teaches ] Output [ ID ] ; #3 = Aggregate [ #2 ] GroupBy [ ID ] Output [ ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.ID = #1.ID ] Output [ #1.name ]"
    },
    {
        "id": "19ffad6a38ef19e54e043f4521048b7cd676c217d925ac364b5c517736402625",
        "question": "Find the id of instructors who didn't teach any courses?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ ID ] ; #2 = Scan Table [ teaches ] Output [ ID ] ; #3 = Aggregate [ #2 ] GroupBy [ ID ] Output [ ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.ID = #1.ID ] Output [ #1.ID ]"
    },
    {
        "id": "6160f77598347ab8b5dcda434a135ef70ff511c485c3a3b84fb1a120a08ab97c",
        "question": "What are the ids of instructors who didnt' teach?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ ID ] ; #2 = Scan Table [ teaches ] Output [ ID ] ; #3 = Aggregate [ #2 ] GroupBy [ ID ] Output [ ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.ID = #1.ID ] Output [ #1.ID ]"
    },
    {
        "id": "411ae9ebb7322a682d2fda979daa93e477aaddd83d9af893454dbbb94018b8aa",
        "question": "Find the names of instructors who didn't each any courses in any Spring semester.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , ID ] ; #2 = Scan Table [ teaches ] Predicate [ semester = 'Spring' ] Output [ semester , ID ] ; #3 = Aggregate [ #2 ] GroupBy [ ID ] Output [ ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.ID = #1.ID ] Output [ #1.name ]"
    },
    {
        "id": "81f26c44cb655e20e0fbc2555d6f095e023d6ce1a2bfd8060b89b0a31913a7f6",
        "question": "What are the names of instructors who didn't teach courses in the Spring?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , ID ] ; #2 = Scan Table [ teaches ] Predicate [ semester = 'Spring' ] Output [ semester , ID ] ; #3 = Aggregate [ #2 ] GroupBy [ ID ] Output [ ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.ID = #1.ID ] Output [ #1.name ]"
    },
    {
        "id": "3b4be652562174760edf57f09a93a62cd64abd8eeffc8c07ef08d0cc4124a7be",
        "question": "Find the name of the department which has the highest average salary of professors.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ dept_name , salary ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_name ] Output [ dept_name , AVG(salary) AS Avg_salary ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Avg_salary DESC ] Output [ dept_name , Avg_salary ]"
    },
    {
        "id": "4cd7412009206561647448485767ad7d6c961dd61617080809272c5a1b952b82",
        "question": "Which department has the highest average instructor salary?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ dept_name , salary ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_name ] Output [ dept_name , AVG(salary) AS Avg_salary ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Avg_salary DESC ] Output [ dept_name , Avg_salary ]"
    },
    {
        "id": "f223ab9cd13f548af398231e4d774fe44fb6bf14729b39d1d970ac065647ad52",
        "question": "Find the name of students who didn't take any course from Biology department.",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ name , ID ] ; #2 = Scan Table [ course ] Predicate [ dept_name = 'Biology' ] Output [ dept_name , course_id ] ; #3 = Scan Table [ takes ] Output [ course_id , ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.ID ] ; #5 = Except [ #1 , #4 ] Predicate [ #4.ID = #1.ID ] Output [ #1.name ]"
    },
    {
        "id": "8e35eb8aaba2a54499155209bd93258e4069b0d4193509cd0924f04eabf6107b",
        "question": "What are the names of students who haven't taken any Biology courses?",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ name , ID ] ; #2 = Scan Table [ course ] Predicate [ dept_name = 'Biology' ] Output [ dept_name , course_id ] ; #3 = Scan Table [ takes ] Output [ course_id , ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.ID ] ; #5 = Except [ #1 , #4 ] Predicate [ #4.ID = #1.ID ] Output [ #1.name ]"
    },
    {
        "id": "30cff64c9df6efd00b9fa5657bcf6c8a3ffac34e7075322a460e7e46a70e0348",
        "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.",
        "parsing_tree": "college_2 | #1 = Scan Table [ takes ] Output [ course_id , ID ] ; #2 = Scan Table [ course ] Predicate [ title = 'International Finance' ] Output [ course_id , title ] ; #3 = Scan Table [ prereq ] Output [ prereq_id , course_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.prereq_id ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #4.prereq_id = #1.course_id ] Output [ #1.ID ] ; #6 = Scan Table [ student ] Output [ name , ID ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.ID = #6.ID ] Output [ #6.name ]"
    },
    {
        "id": "ed8ce777c650e486fd4bee716c1a4254d7f6bb268d9f0e96d4c668cb7e83952a",
        "question": "What are the names of students who have taken the prerequisite for the course International Finance?",
        "parsing_tree": "college_2 | #1 = Scan Table [ takes ] Output [ course_id , ID ] ; #2 = Scan Table [ course ] Predicate [ title = 'International Finance' ] Output [ course_id , title ] ; #3 = Scan Table [ prereq ] Output [ prereq_id , course_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.prereq_id ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #4.prereq_id = #1.course_id ] Output [ #1.ID ] ; #6 = Scan Table [ student ] Output [ name , ID ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.ID = #6.ID ] Output [ #6.name ]"
    },
    {
        "id": "f26f6089914e8c89b647e35f31d68c8bf9e99e049809225ad6e6f183b864ce26",
        "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Predicate [ dept_name = 'Physics' ] Output [ dept_name , salary ] ; #2 = Aggregate [ #1 ] Output [ AVG(salary) AS Avg_salary ] ; #3 = Scan Table [ instructor ] Output [ name , salary ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.salary < #2.Avg_salary ] Output [ #3.name , #3.salary ]"
    },
    {
        "id": "9e5d9ac2872c8cc7642dc4bbb76a40c7458e387dcfb97ba1d21ad079964052e2",
        "question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Predicate [ dept_name = 'Physics' ] Output [ dept_name , salary ] ; #2 = Aggregate [ #1 ] Output [ AVG(salary) AS Avg_salary ] ; #3 = Scan Table [ instructor ] Output [ name , salary ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.salary < #2.Avg_salary ] Output [ #3.name , #3.salary ]"
    },
    {
        "id": "7da9f943717a60675d63a518e39a32a21009a6406bd9829b5ba821bc13ce6714",
        "question": "Find the name of students who took some course offered by Statistics department.",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ name , ID ] ; #2 = Scan Table [ course ] Predicate [ dept_name = 'Statistics' ] Output [ dept_name , course_id ] ; #3 = Scan Table [ takes ] Output [ course_id , ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.ID = #4.ID ] Output [ #1.name ]"
    },
    {
        "id": "a06aaf073954537cabd57dc52beb833d6b3ac7db06744db2aa9a471ef9393475",
        "question": "What are the names of students who have taken Statistics courses?",
        "parsing_tree": "college_2 | #1 = Scan Table [ student ] Output [ name , ID ] ; #2 = Scan Table [ course ] Predicate [ dept_name = 'Statistics' ] Output [ dept_name , course_id ] ; #3 = Scan Table [ takes ] Output [ course_id , ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.ID = #4.ID ] Output [ #1.name ]"
    },
    {
        "id": "a8a25c4effb427aaf2105bcc9ef59f3f35b46bf83df2d929516fc0645938dc5a",
        "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Predicate [ dept_name = 'Psychology' ] Output [ dept_name , course_id , title ] ; #2 = Scan Table [ section ] Output [ year , semester , building , room_number , course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.room_number , #2.building , #2.year , #1.title , #2.semester ] ; #4 = Sort [ #3 ] OrderBy [ title ASC ] Output [ year , semester , building , room_number , title ]"
    },
    {
        "id": "57f784f0c1d1b8c2d65c0493d841630a086f0baa9e3c76c6adeddbf5000d06d7",
        "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?",
        "parsing_tree": "college_2 | #1 = Scan Table [ course ] Predicate [ dept_name = 'Psychology' ] Output [ dept_name , course_id , title ] ; #2 = Scan Table [ section ] Output [ year , semester , building , room_number , course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.room_number , #2.building , #2.year , #1.title , #2.semester ] ; #4 = Sort [ #3 ] OrderBy [ title ASC ] Output [ year , semester , building , room_number , title ]"
    },
    {
        "id": "10bc32d9052072be17b42648291af25f0f20a88d57ee70a9f5cf3bc8283eacf2",
        "question": "Find the names of all instructors who have taught some course and the course_id.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , ID ] ; #2 = Scan Table [ teaches ] Output [ course_id , ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.ID ] Output [ #1.name , #2.course_id ]"
    },
    {
        "id": "5227a13b7149b7e9bfdf10360b5c8fc2a8b2015f04a9f5cac14af32d79a92adb",
        "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name , ID ] ; #2 = Scan Table [ teaches ] Output [ course_id , ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.ID ] Output [ #1.name , #2.course_id ]"
    },
    {
        "id": "de4fe6c1745e531e1f6ae70a21cfb5fb42693ac11be3f8ba8a6bac37eac14b83",
        "question": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Predicate [ name like '%dar%' ] Output [ name ]"
    },
    {
        "id": "f1fab171f5177cf75b6f5dc4a72d1fab0011a03a32f9da837eb1a0cb35f15ed8",
        "question": "What are the names of all instructors with names that include \"dar\"?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Predicate [ name like '%dar%' ] Output [ name ]"
    },
    {
        "id": "be61a20f26890e5f12a259740e3fb25a4065d5bf8d34006b1c556a230ece8dce",
        "question": "List in alphabetic order the names of all distinct instructors.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name ] ; #2 = Sort [ #1 ] OrderBy [ name ASC ] Distinct [ true ] Output [ name ]"
    },
    {
        "id": "4e9eba06f8573057d3284fc394de8073930e8b736ac2f60a89267398a6aed6c5",
        "question": "List the distinct names of the instructors, ordered by name.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ name ] ; #2 = Sort [ #1 ] OrderBy [ name ASC ] Distinct [ true ] Output [ name ]"
    },
    {
        "id": "f2a7e6b541ecad414bf3a754fd5a29ecfdbd9c826e68f2c502f518699dcf0d36",
        "question": "Find courses that ran in Fall 2009 and in Spring 2010.",
        "parsing_tree": "college_2 | #1 = Scan Table [ section ] Predicate [ year = 2009 AND semester = 'Fall' ] Output [ course_id , semester , year ] ; #2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ course_id ] ; #3 = Scan Table [ section ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ course_id , semester , year ] ; #4 = Intersect [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #2.course_id ]"
    },
    {
        "id": "6affafcea52c42f2845abcfd16336419810c289a742df0371c37b9f5a16499bd",
        "question": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?",
        "parsing_tree": "college_2 | #1 = Scan Table [ section ] Predicate [ year = 2009 AND semester = 'Fall' ] Output [ course_id , semester , year ] ; #2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ course_id ] ; #3 = Scan Table [ section ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ course_id , semester , year ] ; #4 = Intersect [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #2.course_id ]"
    },
    {
        "id": "dfebdec042ccb1b0e33af4d760faa08fada6e5d35a174e445a8d71d95670e654",
        "question": "Find courses that ran in Fall 2009 but not in Spring 2010.",
        "parsing_tree": "college_2 | #1 = Scan Table [ section ] Predicate [ year = 2009 AND semester = 'Fall' ] Output [ course_id , semester , year ] ; #2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ course_id ] ; #3 = Scan Table [ section ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ course_id , semester , year ] ; #4 = Except [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #2.course_id ]"
    },
    {
        "id": "ad83a53983a85bfffda4c42c58c78173cdb2077edfb5fae5108475d5da7f230c",
        "question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?",
        "parsing_tree": "college_2 | #1 = Scan Table [ section ] Predicate [ year = 2009 AND semester = 'Fall' ] Output [ course_id , semester , year ] ; #2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ course_id ] ; #3 = Scan Table [ section ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ course_id , semester , year ] ; #4 = Except [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #2.course_id ]"
    },
    {
        "id": "9efef6d2932c49e8ed3157ed22ce7cb6a634cd38cbef01509ae95e423ce2b232",
        "question": "Find the salaries of all distinct instructors that are less than the largest salary.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ salary ] ; #2 = Aggregate [ #1 ] Output [ MAX(salary) AS Max_salary ] ; #3 = Scan Table [ instructor ] Output [ salary ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.salary < #2.Max_salary ] Distinct [ true ] Output [ #3.salary ]"
    },
    {
        "id": "5326973d0408cf1d098a986425263a4dc41291bc20dfb1aee07bd179cf9d786b",
        "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ salary ] ; #2 = Aggregate [ #1 ] Output [ MAX(salary) AS Max_salary ] ; #3 = Scan Table [ instructor ] Output [ salary ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.salary < #2.Max_salary ] Distinct [ true ] Output [ #3.salary ]"
    },
    {
        "id": "03deeaab834eddc70f888f3976d38d50d89ea6b01e5d382f943511ef2387e706",
        "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.",
        "parsing_tree": "college_2 | #1 = Scan Table [ teaches ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ semester , ID , year ] ; #2 = Aggregate [ #1 ] GroupBy [ ID ] Output [ ID ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c3ba3c4de666ba0c10c799d9606fa36078c9f16a7e0b821b15790e88c83cd0cd",
        "question": "How many instructors teach a course in the Spring of 2010?",
        "parsing_tree": "college_2 | #1 = Scan Table [ teaches ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ semester , ID , year ] ; #2 = Aggregate [ #1 ] GroupBy [ ID ] Output [ ID ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2edbf5dd529746a67b970221b47038ef773892fc71368e23162b690982e67dc8",
        "question": "Find the names and average salaries of all departments whose average salary is greater than 42000.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ dept_name , salary ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_name ] Output [ dept_name , AVG(salary) AS Avg_salary ] ; #3 = Filter [ #2 ] Predicate [ Avg_salary > 42000.0 ] Output [ dept_name , Avg_salary ]"
    },
    {
        "id": "55590e8b7ddb484d5de353ac150c944bbaabf14dc2b1a258595b2810cc9c9957",
        "question": "What are the names and average salaries for departments with average salary higher than 42000?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Output [ dept_name , salary ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_name ] Output [ dept_name , AVG(salary) AS Avg_salary ] ; #3 = Filter [ #2 ] Predicate [ Avg_salary > 42000.0 ] Output [ dept_name , Avg_salary ]"
    },
    {
        "id": "3b30bff06c4fd6a44a76fa553aa4b0a2c40ba486768601e1e9b677bccf032ddd",
        "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Predicate [ dept_name = 'Biology' ] Output [ dept_name , salary ] ; #2 = Aggregate [ #1 ] Output [ MIN(salary) AS Min_salary ] ; #3 = Scan Table [ instructor ] Output [ name , salary ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.salary > #2.Min_salary ] Output [ #3.name ]"
    },
    {
        "id": "675bc320f6966c75c4694363ce8832fb1248abe3e6adaccf0281fbe0f20e6a5e",
        "question": "What are the names of instructors who earn more than at least one instructor from the Biology department?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Predicate [ dept_name = 'Biology' ] Output [ dept_name , salary ] ; #2 = Aggregate [ #1 ] Output [ MIN(salary) AS Min_salary ] ; #3 = Scan Table [ instructor ] Output [ name , salary ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.salary > #2.Min_salary ] Output [ #3.name ]"
    },
    {
        "id": "9c54fc9647edf8853e8f203cbf4e09a96f0e60199a622f40dc343c2070fff705",
        "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Predicate [ dept_name = 'Biology' ] Output [ dept_name , salary ] ; #2 = Aggregate [ #1 ] Output [ MAX(salary) AS Max_salary ] ; #3 = Scan Table [ instructor ] Output [ name , salary ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.salary > #2.Max_salary ] Output [ #3.name ]"
    },
    {
        "id": "2bfcaab2b3ead56082f441e35c0d991d725391a497afae09abef01bda7000340",
        "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?",
        "parsing_tree": "college_2 | #1 = Scan Table [ instructor ] Predicate [ dept_name = 'Biology' ] Output [ dept_name , salary ] ; #2 = Aggregate [ #1 ] Output [ MAX(salary) AS Max_salary ] ; #3 = Scan Table [ instructor ] Output [ name , salary ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.salary > #2.Max_salary ] Output [ #3.name ]"
    },
    {
        "id": "db8defcaf58fc8b919186e2a129bd5ebedc68bf205479c0f2ae4afd834a41f19",
        "question": "How many debates are there?",
        "parsing_tree": "debate | #1 = Scan Table [ debate ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e123f41079e7024512487193c1abf857983fce511051b71c53c9566d3d884c6b",
        "question": "List the venues of debates in ascending order of the number of audience.",
        "parsing_tree": "debate | #1 = Scan Table [ debate ] Output [ Venue , Num_of_Audience ] ; #2 = Sort [ #1 ] OrderBy [ Num_of_Audience ASC ] Output [ Venue , Num_of_Audience ]"
    },
    {
        "id": "3a6a83b3b230b67e5197f6b6d49c82a5c9f393102921e006dd15a23061b5ee80",
        "question": "What are the date and venue of each debate?",
        "parsing_tree": "debate | #1 = Scan Table [ debate ] Output [ Venue , Date ]"
    },
    {
        "id": "27e2f1bf8b4345e731c4b2fb34c4c2f82f3eb44777c4441c35f901d673fd8da4",
        "question": "List the dates of debates with number of audience bigger than 150",
        "parsing_tree": "debate | #1 = Scan Table [ debate ] Predicate [ Num_of_Audience > 150 ] Output [ Num_of_Audience , Date ]"
    },
    {
        "id": "1d7dd79247e325afdd2445caf46eeb41ca8d94dbae4fbcdb8376000d8132b7ef",
        "question": "Show the names of people aged either 35 or 36.",
        "parsing_tree": "debate | #1 = Scan Table [ people ] Predicate [ Age = 35 OR Age = 36 ] Output [ Name , Age ]"
    },
    {
        "id": "80651fa9254b5406eae5b3ed45adf365108fd721372632262d05c4ce9eff8e91",
        "question": "What is the party of the youngest people?",
        "parsing_tree": "debate | #1 = Scan Table [ people ] Output [ Party , Age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Age ASC ] Output [ Party , Age ]"
    },
    {
        "id": "738bd191e5764cb5850ab4aa6daa4cf373bf8f071a8bc2e1deccf135785a7a7a",
        "question": "Show different parties of people along with the number of people in each party.",
        "parsing_tree": "debate | #1 = Scan Table [ people ] Output [ Party ] ; #2 = Aggregate [ #1 ] GroupBy [ Party ] Output [ countstar AS Count_Star , Party ]"
    },
    {
        "id": "5fdb2a2f31e4bb73a0c0d99f63d48ce41759c9250b120c729d79740360120538",
        "question": "Show the party that has the most people.",
        "parsing_tree": "debate | #1 = Scan Table [ people ] Output [ Party ] ; #2 = Aggregate [ #1 ] GroupBy [ Party ] Output [ countstar AS Count_Star , Party ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Party ]"
    },
    {
        "id": "1aa3b72f9137418f385db92cd554d30a4a7700fc3f9fe6af7b3ac95ae8be823f",
        "question": "Show the distinct venues of debates",
        "parsing_tree": "debate | #1 = Scan Table [ debate ] Distinct [ true ] Output [ Venue ]"
    },
    {
        "id": "521b3356a6d6402bd3c1bbf3103266dbf57c6be2a9bc09e89b80b57828f1799c",
        "question": "Show the names of people, and dates and venues of debates they are on the affirmative side.",
        "parsing_tree": "debate | #1 = Scan Table [ debate_people ] Output [ Affirmative , Debate_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Affirmative = #2.People_ID ] Output [ #2.Name , #1.Debate_ID ] ; #4 = Scan Table [ debate ] Output [ Venue , Date , Debate_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Debate_ID = #4.Debate_ID ] Output [ #3.Name , #4.Date , #4.Venue ]"
    },
    {
        "id": "d51fae120fd90d9aa429c085f92fa637a0342ef114e84448465d959b2dfe7523",
        "question": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.",
        "parsing_tree": "debate | #1 = Scan Table [ debate_people ] Output [ Negative , Debate_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Negative = #2.People_ID ] Output [ #2.Name , #1.Debate_ID ] ; #4 = Scan Table [ debate ] Output [ Venue , Date , Debate_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Debate_ID = #4.Debate_ID ] Output [ #3.Name , #4.Date , #4.Venue ] ; #6 = Sort [ #5 ] OrderBy [ Name ASC ] Output [ Venue , Name , Date ]"
    },
    {
        "id": "e061ee0f8cd9e21938bcc5fb2480b8c309b6c0247d712da09939019c6b334322",
        "question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
        "parsing_tree": "debate | #1 = Scan Table [ debate ] Predicate [ Num_of_Audience > 200 ] Output [ Num_of_Audience , Debate_ID ] ; #2 = Scan Table [ debate_people ] Output [ Affirmative , Debate_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Debate_ID = #2.Debate_ID ] Output [ #2.Affirmative ] ; #4 = Scan Table [ people ] Output [ People_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Affirmative = #4.People_ID ] Output [ #4.Name ]"
    },
    {
        "id": "406a3f9abc5858d7245ca7fa1cef820dc44abbbf1bf155ec6d4a031b9e26f75f",
        "question": "Show the names of people and the number of times they have been on the affirmative side of debates.",
        "parsing_tree": "debate | #1 = Scan Table [ debate_people ] Output [ Affirmative ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Affirmative = #2.People_ID ] Output [ #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "2543d93b1d3b9ea4dfcfea464972d34ba414f31c77d6f07e496a6ec20416812f",
        "question": "Show the names of people who have been on the negative side of debates at least twice.",
        "parsing_tree": "debate | #1 = Scan Table [ debate_people ] Output [ Negative ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Negative = #2.People_ID ] Output [ #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Name ]"
    },
    {
        "id": "04d4ef940510d57eb0f719ed6baaa09e10c210d5b173adacc03fbf5864bab44d",
        "question": "List the names of people that have not been on the affirmative side of debates.",
        "parsing_tree": "debate | #1 = Scan Table [ people ] Output [ People_ID , Name ] ; #2 = Scan Table [ debate_people ] Output [ Affirmative ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Affirmative = #1.People_ID ] Output [ #1.Name ]"
    },
    {
        "id": "b2e3c8c22a57c95cdb4227ced01d0500391572aa94391a379cbe74ed77bfc940",
        "question": "List the names of all the customers in alphabetical order.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Customers ] Output [ Customer_Details ] ; #2 = Sort [ #1 ] OrderBy [ Customer_Details ASC ] Output [ Customer_Details ]"
    },
    {
        "id": "d5d7a46d163f0a6b3e23fe09397915cfa7a7562cf05031b19b6b8900a4b82e18",
        "question": "Sort the customer names in alphabetical order.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Customers ] Output [ Customer_Details ] ; #2 = Sort [ #1 ] OrderBy [ Customer_Details ASC ] Output [ Customer_Details ]"
    },
    {
        "id": "5997c89fe37144c2a099beb183b90d5ea131f2a906c220841a80d00e79de01ef",
        "question": "Find all the policy type codes associated with the customer \"Dayana Robel\"",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Customers ] Predicate [ Customer_Details = 'Dayana Robel' ] Output [ Customer_ID , Customer_Details ] ; #2 = Scan Table [ Policies ] Output [ Policy_Type_Code , Customer_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Policy_Type_Code ]"
    },
    {
        "id": "bda1edc0300aa140f3e278dd647afc7f7dff0417556c15202e3944635eec1cb8",
        "question": "What are the type codes of the policies used by the customer \"Dayana Robel\"?",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Customers ] Predicate [ Customer_Details = 'Dayana Robel' ] Output [ Customer_ID , Customer_Details ] ; #2 = Scan Table [ Policies ] Output [ Policy_Type_Code , Customer_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Policy_Type_Code ]"
    },
    {
        "id": "9930e292f6461d52964226150f9e6f0fe63367315ad5bf16ada41524458b5b9e",
        "question": "Which type of policy is most frequently used? Give me the policy type code.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Policies ] Output [ Policy_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Policy_Type_Code ] Output [ countstar AS Count_Star , Policy_Type_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Policy_Type_Code , Count_Star ]"
    },
    {
        "id": "e422704027be9c6fc4f66089b1d5ce577c03e3832839439a8879a39d0adfad22",
        "question": "Find the type code of the most frequently used policy.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Policies ] Output [ Policy_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Policy_Type_Code ] Output [ countstar AS Count_Star , Policy_Type_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Policy_Type_Code , Count_Star ]"
    },
    {
        "id": "a0f796e32183d16716740e72e62b0c7cf6c4ed16be531b0f073cc50f476035fa",
        "question": "Find all the policy types that are used by more than 2 customers.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Policies ] Output [ Policy_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Policy_Type_Code ] Output [ countstar AS Count_Star , Policy_Type_Code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Policy_Type_Code ]"
    },
    {
        "id": "521988a05020d73f76f325dfd439ca3c5877285fac12898ba12560500193e56e",
        "question": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Policies ] Output [ Policy_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Policy_Type_Code ] Output [ countstar AS Count_Star , Policy_Type_Code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Policy_Type_Code ]"
    },
    {
        "id": "7a9d6c7b7b301dbbfb407983d007b8f9f9465fbf68810ee94d1b938ed47f00f5",
        "question": "Find the total and average amount paid in claim headers.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Claim_Headers ] Output [ Amount_Piad ] ; #2 = Aggregate [ #1 ] Output [ SUM(Amount_Piad) AS Sum_Amount_Piad , AVG(Amount_Piad) AS Avg_Amount_Piad ]"
    },
    {
        "id": "da37e38050cf70756a867b06c6d0b900eb74997c15fdbdd8f73622f5f24f4eb2",
        "question": "What are the total amount and average amount paid in claim headers?",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Claim_Headers ] Output [ Amount_Piad ] ; #2 = Aggregate [ #1 ] Output [ SUM(Amount_Piad) AS Sum_Amount_Piad , AVG(Amount_Piad) AS Avg_Amount_Piad ]"
    },
    {
        "id": "a8c9cd25e9fb3e93986f060a0dfae2ed35e3988685f16449dc6befbfc2d3b1a5",
        "question": "Find the total amount claimed in the most recently created document.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Claims_Documents ] Output [ Created_Date ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Created_Date ASC ] Output [ Created_Date ] ; #3 = Scan Table [ Claims_Documents ] Output [ Created_Date , Claim_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Created_Date = #3.Created_Date ] Output [ #3.Claim_ID ] ; #5 = Scan Table [ Claim_Headers ] Output [ Claim_Header_ID , Amount_Claimed ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Claim_ID = #5.Claim_Header_ID ] Output [ #5.Amount_Claimed ] ; #7 = Aggregate [ #6 ] Output [ SUM(Amount_Claimed) AS Sum_Amount_Claimed ]"
    },
    {
        "id": "0568d89956705a5fd819c8c8f400be2dc2e3c1cbcc9adefe5d4ecd468dc0184d",
        "question": "How much amount in total were claimed in the most recently created document?",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Claims_Documents ] Output [ Created_Date ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Created_Date ASC ] Output [ Created_Date ] ; #3 = Scan Table [ Claims_Documents ] Output [ Created_Date , Claim_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Created_Date = #3.Created_Date ] Output [ #3.Claim_ID ] ; #5 = Scan Table [ Claim_Headers ] Output [ Claim_Header_ID , Amount_Claimed ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Claim_ID = #5.Claim_Header_ID ] Output [ #5.Amount_Claimed ] ; #7 = Aggregate [ #6 ] Output [ SUM(Amount_Claimed) AS Sum_Amount_Claimed ]"
    },
    {
        "id": "e6788ee090d7f0c619d8ef301f9ee948f2fe3b05d3c5d9411965b564671f6628",
        "question": "Find the names of customers who have no policies associated.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ Customer_Details ] ; #2 = Scan Table [ Policies ] Output [ Customer_ID ] ; #3 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Customer_ID = #3.Customer_ID ] Output [ #3.Customer_Details ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Customer_Details = #4.Customer_Details ] Output [ #1.Customer_Details ]"
    },
    {
        "id": "89cd6bcc6e9cfb232df519aa750c04da91a50ff7405c1f8d6bb605397a2b3041",
        "question": "What are the names of customers who do not have any policies?",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ Customer_Details ] ; #2 = Scan Table [ Policies ] Output [ Customer_ID ] ; #3 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Customer_ID = #3.Customer_ID ] Output [ #3.Customer_Details ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Customer_Details = #4.Customer_Details ] Output [ #1.Customer_Details ]"
    },
    {
        "id": "5b93cdc7350cdaf8ea57858e8202cc444a62eba872e94344a23b773abdec4e0f",
        "question": "How many claim processing stages are there in total?",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Claims_Processing_Stages ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "33a6d8c672854587241a184db673e9f695c062e12cdf562416c932f1c74d2372",
        "question": "Find the number of distinct stages in claim processing.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Claims_Processing_Stages ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "34ceab88d12e881a1b5a1c3cdd188619115afbac18be2b5326dd81328e7b0fbe",
        "question": "What is the name of the claim processing stage that most of the claims are on?",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Claims_Processing ] Output [ Claim_Stage_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Claim_Stage_ID ] Output [ countstar AS Count_Star , Claim_Stage_ID ] ; #3 = Scan Table [ Claims_Processing_Stages ] Output [ Claim_Stage_ID , Claim_Status_Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Claim_Stage_ID = #3.Claim_Stage_ID ] Output [ #2.Count_Star , #3.Claim_Status_Name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Claim_Status_Name ]"
    },
    {
        "id": "9434a6c51318b62925f6c1305041b092a1a34846828023baad2d9da893df0e48",
        "question": "Which claim processing stage has the most claims? Show the claim status name.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Claims_Processing ] Output [ Claim_Stage_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Claim_Stage_ID ] Output [ countstar AS Count_Star , Claim_Stage_ID ] ; #3 = Scan Table [ Claims_Processing_Stages ] Output [ Claim_Stage_ID , Claim_Status_Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Claim_Stage_ID = #3.Claim_Stage_ID ] Output [ #2.Count_Star , #3.Claim_Status_Name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Claim_Status_Name ]"
    },
    {
        "id": "9a81d6e3d142fa912e7258ebb9299532c278af283faa7aa0f0ef2fe882846ed7",
        "question": "Find the names of customers whose name contains \"Diana\".",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Customers ] Predicate [ Customer_Details like '%Diana%' ] Output [ Customer_Details ]"
    },
    {
        "id": "e51fae7a12435350e2d4d475499795380cc049ad0fca9bf1b7b766db02c106e3",
        "question": "Which customers have the substring \"Diana\" in their names? Return the customer details.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Customers ] Predicate [ Customer_Details like '%Diana%' ] Output [ Customer_Details ]"
    },
    {
        "id": "d9c632f863ae3269b801cb5dbb1fedeeca0a6cea71edb55bee9dc841aa13a746",
        "question": "Find the names of the customers who have an deputy policy.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Policies ] Predicate [ Policy_Type_Code = 'Deputy' ] Output [ Policy_Type_Code , Customer_ID ] ; #2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Distinct [ true ] Output [ #2.Customer_Details ]"
    },
    {
        "id": "99cc134ae7308d706802228bae0099eaa062c9d7db2a720b6637c28ea367813f",
        "question": "Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Policies ] Predicate [ Policy_Type_Code = 'Deputy' ] Output [ Policy_Type_Code , Customer_ID ] ; #2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Distinct [ true ] Output [ #2.Customer_Details ]"
    },
    {
        "id": "1ac3df76736f6d63832e6cdaa2960d22c49f568c17c0c057849ce5f013aa2b77",
        "question": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Policies ] Predicate [ Policy_Type_Code = 'Deputy' OR Policy_Type_Code = 'Uniform' ] Output [ Policy_Type_Code , Customer_ID ] ; #2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Distinct [ true ] Output [ #2.Customer_Details ]"
    },
    {
        "id": "cbd2523d6f381b2f468974c815da9c80cb7a99c6c50143dc4298c8d17cef09ea",
        "question": "Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Policies ] Predicate [ Policy_Type_Code = 'Deputy' OR Policy_Type_Code = 'Uniform' ] Output [ Policy_Type_Code , Customer_ID ] ; #2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Distinct [ true ] Output [ #2.Customer_Details ]"
    },
    {
        "id": "87e4c9b78ad7891a452f8d9b8603609eedc4c3c9e620d19fd73570e06ceba0dc",
        "question": "Find the number of records of each policy type and its type code.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Policies ] Output [ Policy_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Policy_Type_Code ] Output [ countstar AS Count_Star , Policy_Type_Code ]"
    },
    {
        "id": "5c5485c39ea55e0631bf1f0f81d228095cb3333a28e0e42da5ac39f06fa39a28",
        "question": "For each policy type, return its type code and its count in the record.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Policies ] Output [ Policy_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Policy_Type_Code ] Output [ countstar AS Count_Star , Policy_Type_Code ]"
    },
    {
        "id": "ef5273240a24b6fdcc6ff4fa96aeb0762348727a8585e2deeb88386220e879bb",
        "question": "Find the name of the customer that has been involved in the most policies.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Policies ] Output [ Customer_ID ] ; #2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_Details ] ; #4 = Aggregate [ #3 ] GroupBy [ Customer_Details ] Output [ countstar AS Count_Star , Customer_Details ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Customer_Details ]"
    },
    {
        "id": "a91814a49ae6988a41b7e85174755da388517a49f2caa1be882e1c6a0bc1683d",
        "question": "Which customer have the most policies? Give me the customer details.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Policies ] Output [ Customer_ID ] ; #2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_Details ] ; #4 = Aggregate [ #3 ] GroupBy [ Customer_Details ] Output [ countstar AS Count_Star , Customer_Details ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Customer_Details ]"
    },
    {
        "id": "2629b88e781b60b9a4f788a20546964807b97c350667cec7aded0bc082424d98",
        "question": "What is the description of the claim status \"Open\"?",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Claims_Processing_Stages ] Predicate [ Claim_Status_Name = 'Open' ] Output [ Claim_Status_Description , Claim_Status_Name ]"
    },
    {
        "id": "5e843cdf531a2ef8c1c1865dd96579f71ca1dcb5db341d7bc6e7168bbe707958",
        "question": "Find the description of the claim status \"Open\".",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Claims_Processing_Stages ] Predicate [ Claim_Status_Name = 'Open' ] Output [ Claim_Status_Description , Claim_Status_Name ]"
    },
    {
        "id": "792a238cafaeb9f5bc6737497d0725072c59dc8f84e9bf4dc94476e23cf57ac4",
        "question": "How many distinct claim outcome codes are there?",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Claims_Processing ] Distinct [ true ] Output [ Claim_Outcome_Code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "74b7d29b6f8a3a22a266920898dfd90e2ac1cada4441494c79bd9dbfb1316a20",
        "question": "Count the number of distinct claim outcome codes.",
        "parsing_tree": "insurance_and_eClaims | #1 = Scan Table [ Claims_Processing ] Distinct [ true ] Output [ Claim_Outcome_Code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f370437bdd6d4d5478bd961e4970fa565bc2233ce6c668190cff5389b4faacf3",
        "question": "Show the number of accounts.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f28d50193ea347d17436e69e0184968386a3b75e1e6fd76911b976515ecc9d70",
        "question": "How many accounts are there?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f132701a8d7b5bebdb2405befbad8252049919cd204e14fc451f6efa8a3d4225",
        "question": "How many customers have opened an account?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Distinct [ true ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "73d943dc6ca039d2eb99cd12cc98c8d76577be09d28e6721751ee40007d3b2a9",
        "question": "Count the number of customers who have an account.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Distinct [ true ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e2635cc803cadcd19b7a2f9ba8c288b2ce80ff58adfaff7914c3e25df178d8ed",
        "question": "Show the id, the date of account opened, the account name, and other account detail for all accounts.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Output [ date_account_opened , other_account_details , account_id , account_name ]"
    },
    {
        "id": "54c4dd79be684687614bc9d3d34a1884a4e3c39f54bd9ad33b4e10a2d88808ee",
        "question": "What are the ids, date opened, name, and other details for all accounts?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Output [ date_account_opened , other_account_details , account_id , account_name ]"
    },
    {
        "id": "1f0833d6b716923dd5da36190ac599efc40e7170d6a9d4357bf37071c51d5452",
        "question": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Customers ] Predicate [ customer_first_name = 'Meaghan' ] Output [ customer_id , customer_first_name ] ; #2 = Scan Table [ Accounts ] Output [ customer_id , account_name , account_id , date_account_opened , other_account_details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.account_id , #2.account_name , #2.date_account_opened , #2.other_account_details ]"
    },
    {
        "id": "b6228149616b9bb64c0ffe70aeb40d4a193231c762013177377f204c0577ca2a",
        "question": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Customers ] Predicate [ customer_first_name = 'Meaghan' ] Output [ customer_id , customer_first_name ] ; #2 = Scan Table [ Accounts ] Output [ customer_id , account_name , account_id , date_account_opened , other_account_details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.account_id , #2.account_name , #2.date_account_opened , #2.other_account_details ]"
    },
    {
        "id": "f96dc1144e37fa7d54b7ff807ddd4dfd930afb54308f6b5aa20341201c49525f",
        "question": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Customers ] Predicate [ customer_first_name = 'Meaghan' AND customer_last_name = 'Keeling' ] Output [ customer_last_name , customer_id , customer_first_name ] ; #2 = Scan Table [ Accounts ] Output [ other_account_details , customer_id , account_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.account_name , #2.other_account_details ]"
    },
    {
        "id": "1971f6e552d05b81b64f65b77fd7ea0048c3ec8a3932e572d4643c5f905fad68",
        "question": "What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Customers ] Predicate [ customer_first_name = 'Meaghan' AND customer_last_name = 'Keeling' ] Output [ customer_last_name , customer_id , customer_first_name ] ; #2 = Scan Table [ Accounts ] Output [ other_account_details , customer_id , account_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.account_name , #2.other_account_details ]"
    },
    {
        "id": "b693f2e1b7c0b7c2523cd9611b94916711f8767c9a55016ae02e45319aebb16d",
        "question": "Show the first name and last name for the customer with account name 900.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Predicate [ account_name = '900' ] Output [ customer_id , account_name ] ; #2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_first_name , #2.customer_last_name ]"
    },
    {
        "id": "152d2f94e176ba8513315d61477868f3766703ba081b968ee96f63bc08d00c9e",
        "question": "What are the full names of customers with the account name 900?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Predicate [ account_name = '900' ] Output [ customer_id , account_name ] ; #2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_first_name , #2.customer_last_name ]"
    },
    {
        "id": "0c627f7dc7ac401c87433a99e5f37e6d1490b412b5892c4720fbdd34c019f34e",
        "question": "How many customers don't have an account?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Customers ] Output [ customer_id ] ; #2 = Scan Table [ Accounts ] Output [ customer_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f00a6934c2e46d9526c0230eafea9ef0450fc74f4fd065e1a7eee4a33f9c773b",
        "question": "Count the number of customers who do not have an account.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Customers ] Output [ customer_id ] ; #2 = Scan Table [ Accounts ] Output [ customer_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6dcc3223c0396cedfd56d2945c8bc91a0b9b3bb0e039292673804a0679072083",
        "question": "Show the unique first names, last names, and phone numbers for all customers with any account.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , phone_number , customer_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Distinct [ true ] Output [ #2.phone_number , #2.customer_first_name , #2.customer_last_name ]"
    },
    {
        "id": "ed83e13e9463e84a28d1daac14ebd9c4c5c1f66ea0c30609c259e97982abf538",
        "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , phone_number , customer_first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Distinct [ true ] Output [ #2.phone_number , #2.customer_first_name , #2.customer_last_name ]"
    },
    {
        "id": "5bb9ef71424fc0e69ce503b82d0a7f101cde78252d2ba29a82ba9775ae8ba208",
        "question": "Show customer ids who don't have an account.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Customers ] Output [ customer_id ] ; #2 = Scan Table [ Accounts ] Output [ customer_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.customer_id ]"
    },
    {
        "id": "d1fe74cd85860583c3ba0f862e30dc9d5181d767041379f35eaed15749f0a848",
        "question": "What are the customer ids for customers who do not have an account?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Customers ] Output [ customer_id ] ; #2 = Scan Table [ Accounts ] Output [ customer_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.customer_id ]"
    },
    {
        "id": "6fdcd9cf0c5243811e98cf0c565244aadcf239a5c4a6ee085dbb0eefaf04699a",
        "question": "How many accounts does each customer have? List the number and customer id.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ]"
    },
    {
        "id": "90ab72e5600191c483755719a78986b735e3e4c890deb5b03502ff4abfe0d59f",
        "question": "Count the number of accounts corresponding to each customer id.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ]"
    },
    {
        "id": "29e20797813ad6e975f28fa016f36203c7859bcb369984e80d2151d3ede27bed",
        "question": "What is the customer id, first and last name with most number of accounts.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.customer_id , #3.customer_last_name , #3.customer_first_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ customer_last_name , Count_Star , customer_id , customer_first_name ]"
    },
    {
        "id": "03babfa31d00689b35eab0bf575a2fdd48a9bba8d087674fc861d095d30ed530",
        "question": "Return the id and full name of the customer with the most accounts.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.customer_id , #3.customer_last_name , #3.customer_first_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ customer_last_name , Count_Star , customer_id , customer_first_name ]"
    },
    {
        "id": "1fbf7eab00da397ff0ff7c2b6a6bc5f8e78646705adf08fd4e6030949dbfda3f",
        "question": "Show id, first name and last name for all customers and the number of accounts.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.customer_id , #3.customer_last_name , #3.customer_first_name , #2.Count_Star ]"
    },
    {
        "id": "48618067353da9d2937cebd2d452dbdcda60887dfa9f05f30c5be8e497fb7466",
        "question": "What are the the full names and ids for all customers, and how many accounts does each have?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.customer_id , #3.customer_last_name , #3.customer_first_name , #2.Count_Star ]"
    },
    {
        "id": "dc59a82b7e397ede8d6bc3805a76f1e2a12a3a89580c41acec085b51354c58ee",
        "question": "Show first name and id for all customers with at least 2 accounts.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.customer_id , #3.customer_first_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ customer_id , customer_first_name ]"
    },
    {
        "id": "41bd3b15d3053c5991ee821d65c76d3c7a6d695fb2e94c19ebf75129d6108cfa",
        "question": "What are the first names and ids for customers who have two or more accounts?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.customer_id , #3.customer_first_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ customer_id , customer_first_name ]"
    },
    {
        "id": "4206086f5379e1d9b05b301db20acec5aff075c7ba05e9c957bb4ac95ee61c27",
        "question": "Show the number of customers.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Customers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c3e38c1e6836fe1096fcd464c208489f5adb46458ae4343746620d296b1607d4",
        "question": "Count the number of customers.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Customers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d2088673e60d391ed9de4fd0c22c585a6c2e16fd3954bbdc7e5ccffcd29d8b6c",
        "question": "Show the number of customers for each gender.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Customers ] Output [ gender ] ; #2 = Aggregate [ #1 ] GroupBy [ gender ] Output [ countstar AS Count_Star , gender ]"
    },
    {
        "id": "01621101dca7d7727b0e6c48f8dddab2a0c076268066cc14cce093b0c814767b",
        "question": "How many customers are there of each gender?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Customers ] Output [ gender ] ; #2 = Aggregate [ #1 ] GroupBy [ gender ] Output [ countstar AS Count_Star , gender ]"
    },
    {
        "id": "c76fb15ce7b4d072c45908d9397adfe59b44312ad102e41aa0cdb565df9b4bfd",
        "question": "How many transactions do we have?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "eed6b9b818f261af5f8de2c08801c2d45bde85152b62190879928a02df2969d7",
        "question": "Count the number of transactions.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d6e7cc154b4ed145e4fbdfb4c186ee1bdf2dd866a1e7331f17fccefc30ef4fd9",
        "question": "How many transaction does account with name 337 have?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Predicate [ account_name = '337' ] Output [ account_id , account_name ] ; #2 = Scan Table [ Financial_Transactions ] Output [ account_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.account_id = #2.account_id ] Output [ #1.account_name , #1.account_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "8d672f33e6698cf42117c2ecba9306e70fadae3c6eeb76c99bc9d7eade44d68a",
        "question": "Count the number of financial transactions that the account with the name 337 has.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Accounts ] Predicate [ account_name = '337' ] Output [ account_id , account_name ] ; #2 = Scan Table [ Financial_Transactions ] Output [ account_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.account_id = #2.account_id ] Output [ #1.account_name , #1.account_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7ca9529d202bbf3c3d8e74454ddcf433f26b5e9a059a2e8bba47baf3ab6f167c",
        "question": "What is the average, minimum, maximum, and total transaction amount?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ transaction_amount ] ; #2 = Aggregate [ #1 ] Output [ MAX(transaction_amount) AS Max_transaction_amount , MIN(transaction_amount) AS Min_transaction_amount , SUM(transaction_amount) AS Sum_transaction_amount , AVG(transaction_amount) AS Avg_transaction_amount ]"
    },
    {
        "id": "e537639ca525b57ce2604c0f44f6707a9d1480e9715962d89df8e38ca9e5f860",
        "question": "Return the average, minimum, maximum, and total transaction amounts.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ transaction_amount ] ; #2 = Aggregate [ #1 ] Output [ MAX(transaction_amount) AS Max_transaction_amount , MIN(transaction_amount) AS Min_transaction_amount , SUM(transaction_amount) AS Sum_transaction_amount , AVG(transaction_amount) AS Avg_transaction_amount ]"
    },
    {
        "id": "ef6884637e22025d2ad3f05563b86d592d63d7e2c36ae34554b3f7a5a6ed9ea9",
        "question": "Show ids for all transactions whose amounts are greater than the average.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ transaction_amount ] ; #2 = Aggregate [ #1 ] Output [ AVG(transaction_amount) AS Avg_transaction_amount ] ; #3 = Scan Table [ Financial_Transactions ] Output [ transaction_id , transaction_amount ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.transaction_amount > #2.Avg_transaction_amount ] Output [ #3.transaction_id ]"
    },
    {
        "id": "d4151724aa9c2d0a5b686199e32c9f1447aa3ecce429ca83e019168eec83b11c",
        "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ transaction_amount ] ; #2 = Aggregate [ #1 ] Output [ AVG(transaction_amount) AS Avg_transaction_amount ] ; #3 = Scan Table [ Financial_Transactions ] Output [ transaction_id , transaction_amount ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.transaction_amount > #2.Avg_transaction_amount ] Output [ #3.transaction_id ]"
    },
    {
        "id": "fe08906289a7f56fe81d65d65e984f66add178f62488f68433887677050c4a12",
        "question": "Show the transaction types and the total amount of transactions.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ transaction_amount , transaction_type ] ; #2 = Aggregate [ #1 ] GroupBy [ transaction_type ] Output [ SUM(transaction_amount) AS Sum_transaction_amount , transaction_type ]"
    },
    {
        "id": "53d320b38b20795dd8a9bd757004bf99582c974067dc656177d2d54f11bad55a",
        "question": "What are total transaction amounts for each transaction type?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ transaction_amount , transaction_type ] ; #2 = Aggregate [ #1 ] GroupBy [ transaction_type ] Output [ SUM(transaction_amount) AS Sum_transaction_amount , transaction_type ]"
    },
    {
        "id": "abbe166b781fedd390017ba6915731ce8cb0fb6f626ca4df8b50c4b3ed0f3f81",
        "question": "Show the account name, id and the number of transactions for each account.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ account_id ] ; #2 = Aggregate [ #1 ] GroupBy [ account_id ] Output [ countstar AS Count_Star , account_id ] ; #3 = Scan Table [ Accounts ] Output [ account_id , account_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.account_id = #3.account_id ] Output [ #2.account_id , #2.Count_Star , #3.account_name ]"
    },
    {
        "id": "9bf92efd7bdea8f476f9973bb7a428d01b129559aa5a6c904a9f6ccbcebdcf32",
        "question": "Return the names and ids of each account, as well as the number of transactions.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ account_id ] ; #2 = Aggregate [ #1 ] GroupBy [ account_id ] Output [ countstar AS Count_Star , account_id ] ; #3 = Scan Table [ Accounts ] Output [ account_id , account_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.account_id = #3.account_id ] Output [ #2.account_id , #2.Count_Star , #3.account_name ]"
    },
    {
        "id": "5870f8f03695b051d363b6393d85b11d2b421493b4e4291e603bbfadd1ce0990",
        "question": "Show the account id with most number of transactions.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ account_id ] ; #2 = Aggregate [ #1 ] GroupBy [ account_id ] Output [ countstar AS Count_Star , account_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , account_id ]"
    },
    {
        "id": "93e32733aeed296ca3717642d137b1d61ec531090b39e486721dde7ee00c8795",
        "question": "What is the id of the account with the most transactions?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ account_id ] ; #2 = Aggregate [ #1 ] GroupBy [ account_id ] Output [ countstar AS Count_Star , account_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , account_id ]"
    },
    {
        "id": "1dd95419ff3ba3d8e8f1dd75a33c8b5266db9d7e877a8fabb22b2232996c8796",
        "question": "Show the account id and name with at least 4 transactions.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ account_id ] ; #2 = Aggregate [ #1 ] GroupBy [ account_id ] Output [ countstar AS Count_Star , account_id ] ; #3 = Scan Table [ Accounts ] Output [ account_id , account_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.account_id = #3.account_id ] Output [ #2.account_id , #2.Count_Star , #3.account_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 4 ] Output [ account_id , account_name ]"
    },
    {
        "id": "94df6186b974909e15b18f506c1c7f4fc2d6e1ccd8e9dc8a5bb23d0d42a86190",
        "question": "What are the ids and names of accounts with 4 or more transactions?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ account_id ] ; #2 = Aggregate [ #1 ] GroupBy [ account_id ] Output [ countstar AS Count_Star , account_id ] ; #3 = Scan Table [ Accounts ] Output [ account_id , account_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.account_id = #3.account_id ] Output [ #2.account_id , #2.Count_Star , #3.account_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 4 ] Output [ account_id , account_name ]"
    },
    {
        "id": "b18389d7d0a15a184848813a10558141d55110adf270caf220f09cc8993b2cb8",
        "question": "Show all product sizes.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Products ] Distinct [ true ] Output [ product_size ]"
    },
    {
        "id": "4984aca5fa43caa627729f912fb9774a107c766ebde568cae0155981de2df757",
        "question": "What are the different product sizes?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Products ] Distinct [ true ] Output [ product_size ]"
    },
    {
        "id": "6ef8291cabd6ad1d153f62ebf9c28b661d2b6b715c8a5b7cd2ae979179ea13c7",
        "question": "Show all product colors.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Products ] Distinct [ true ] Output [ product_color ]"
    },
    {
        "id": "b661657ea6d914185a0fcabdfe52aa30b6e0aa84ac844e96dc92ea002646fc75",
        "question": "What are the different product colors?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Products ] Distinct [ true ] Output [ product_color ]"
    },
    {
        "id": "2da96520bd69c43a4fa7498a09ef12389ecb5b3691566d6da6bb16fae2bd9778",
        "question": "Show the invoice number and the number of transactions for each invoice.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ invoice_number ] ; #2 = Aggregate [ #1 ] GroupBy [ invoice_number ] Output [ countstar AS Count_Star , invoice_number ]"
    },
    {
        "id": "70f5a004e842f0a367f2d957335b8e48fde2105a41bc647fa9d96c1c5bdd6dae",
        "question": "How many transactions correspond to each invoice number?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ invoice_number ] ; #2 = Aggregate [ #1 ] GroupBy [ invoice_number ] Output [ countstar AS Count_Star , invoice_number ]"
    },
    {
        "id": "40b3e7a0b684e77f1231cc5afd1c57556d41983a871de07f6647431a28254c2f",
        "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ invoice_number ] ; #2 = Aggregate [ #1 ] GroupBy [ invoice_number ] Output [ countstar AS Count_Star , invoice_number ] ; #3 = Scan Table [ Invoices ] Output [ invoice_date , invoice_number ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.invoice_number = #3.invoice_number ] Output [ #2.Count_Star , #3.invoice_date , #3.invoice_number ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ invoice_date , Count_Star , invoice_number ]"
    },
    {
        "id": "0e3915843bfb0aca5a44fd0bbf76af36173f10433212010f65a8f9e0d86027fb",
        "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Financial_Transactions ] Output [ invoice_number ] ; #2 = Aggregate [ #1 ] GroupBy [ invoice_number ] Output [ countstar AS Count_Star , invoice_number ] ; #3 = Scan Table [ Invoices ] Output [ invoice_date , invoice_number ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.invoice_number = #3.invoice_number ] Output [ #2.Count_Star , #3.invoice_date , #3.invoice_number ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ invoice_date , Count_Star , invoice_number ]"
    },
    {
        "id": "dbeaa0600c37b40ab56ef3ccce7bdb7ac054e257ec8e6a6b543a44a680c12635",
        "question": "How many invoices do we have?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Invoices ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b07dac899157ab515d1edd3a59c4e8b380aecfbcf94bf51e7021b2a5c7d76a2f",
        "question": "Count the number of invoices.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Invoices ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "024fb31cb10be3cc1b3996e253ed168b20b31a74e2c4fe83ec68252bbdb8e4bb",
        "question": "Show invoice dates and order id and details for all invoices.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Invoices ] Output [ invoice_date , order_id ] ; #2 = Scan Table [ Orders ] Output [ order_details , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #1.order_id , #1.invoice_date , #2.order_details ]"
    },
    {
        "id": "6a2133350c747cd7485b3b3ba5dd24d62b786317ed270b3de6a718f6cd589d58",
        "question": "What are the invoice dates, order ids, and order details for all invoices?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Invoices ] Output [ invoice_date , order_id ] ; #2 = Scan Table [ Orders ] Output [ order_details , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #1.order_id , #1.invoice_date , #2.order_details ]"
    },
    {
        "id": "27172e2d8aa7af55836f46ea128d9a0fd52990ec3ebc28ea0579ad46fc5efa13",
        "question": "Show the order ids and the number of invoices for each order.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Invoices ] Output [ order_id ] ; #2 = Aggregate [ #1 ] GroupBy [ order_id ] Output [ countstar AS Count_Star , order_id ]"
    },
    {
        "id": "6c9d97bddb5637fa647bfaddd1abf49281123cf9eb06131d4e0fb87021b3275a",
        "question": "How many invoices correspond to each order id?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Invoices ] Output [ order_id ] ; #2 = Aggregate [ #1 ] GroupBy [ order_id ] Output [ countstar AS Count_Star , order_id ]"
    },
    {
        "id": "65d784f2991cfdf1d83e94f0013f77a6818dc1ba0adbadd4f601a10b5d810b69",
        "question": "What is the order id and order details for the order more than two invoices.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Invoices ] Output [ order_id ] ; #2 = Aggregate [ #1 ] GroupBy [ order_id ] Output [ countstar AS Count_Star , order_id ] ; #3 = Scan Table [ Orders ] Output [ order_details , order_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.order_id = #3.order_id ] Output [ #3.order_details , #3.order_id , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ order_details , order_id ]"
    },
    {
        "id": "8df5718060926ae5eb42b8d61e64d6515b4c5954f4da98718c91caef489aa926",
        "question": "Return the order ids and details for orderes with two or more invoices.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Invoices ] Output [ order_id ] ; #2 = Aggregate [ #1 ] GroupBy [ order_id ] Output [ countstar AS Count_Star , order_id ] ; #3 = Scan Table [ Orders ] Output [ order_details , order_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.order_id = #3.order_id ] Output [ #3.order_details , #3.order_id , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ order_details , order_id ]"
    },
    {
        "id": "6a526aa3fed6c93924a880ca34ee741816e0317076943d8f466703695ebe6528",
        "question": "What is the customer last name, id and phone number with most number of orders?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , phone_number ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.customer_id , #3.customer_last_name , #3.phone_number , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ customer_last_name , Count_Star , customer_id , phone_number ]"
    },
    {
        "id": "08e1c6e59e1d309180e61a3f9ee6e51d0a14e3b312297fe285a9f58cb0ad079b",
        "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , phone_number ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.customer_id , #3.customer_last_name , #3.phone_number , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ customer_last_name , Count_Star , customer_id , phone_number ]"
    },
    {
        "id": "7a9447e1facad5d9ce001f2770ff3553fa7a9e6b871c81623a18a88c639881b3",
        "question": "Show all product names without an order.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Products ] Distinct [ true ] Output [ product_name ] ; #2 = Scan Table [ Order_Items ] Output [ product_id ] ; #3 = Scan Table [ Products ] Output [ product_name , product_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.product_id = #3.product_id ] Output [ #3.product_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.product_name = #4.product_name ] Output [ #1.product_name ]"
    },
    {
        "id": "8bc28f8d83f520f54776e51e117c2a1e7e7b150cec1cbf4fe6e80af222df0515",
        "question": "What are the names of products that have never been ordered?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Products ] Distinct [ true ] Output [ product_name ] ; #2 = Scan Table [ Order_Items ] Output [ product_id ] ; #3 = Scan Table [ Products ] Output [ product_name , product_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.product_id = #3.product_id ] Output [ #3.product_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.product_name = #4.product_name ] Output [ #1.product_name ]"
    },
    {
        "id": "443a305082a07356509e5c93f1a4776320e302408a9c4e14cdf387d41012ae78",
        "question": "Show all product names and the total quantity ordered for each product name.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Order_Items ] Output [ product_quantity , product_id ] ; #2 = Scan Table [ Products ] Output [ product_name , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_quantity , #2.product_name ] ; #4 = Aggregate [ #3 ] GroupBy [ product_name ] Output [ product_name , SUM(product_quantity) AS Sum_product_quantity ]"
    },
    {
        "id": "2ee8d3b86f6f7c3ea5013acd69699e162be546143503c9ca6e24387a5b7384d2",
        "question": "What are the different product names, and what is the sum of quantity ordered for each product?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Order_Items ] Output [ product_quantity , product_id ] ; #2 = Scan Table [ Products ] Output [ product_name , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_quantity , #2.product_name ] ; #4 = Aggregate [ #3 ] GroupBy [ product_name ] Output [ product_name , SUM(product_quantity) AS Sum_product_quantity ]"
    },
    {
        "id": "4b0e04a5f6865278da74e1b1209860ad1bf24fc21df49235a5626e4798d1e4da",
        "question": "Show the order ids and the number of items in each order.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Order_Items ] Output [ order_id ] ; #2 = Aggregate [ #1 ] GroupBy [ order_id ] Output [ countstar AS Count_Star , order_id ]"
    },
    {
        "id": "43edc0886317b1661af2e762672a5eab7379d57fe63059e4bbc12832a0c91d34",
        "question": "How many order items correspond to each order id?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Order_Items ] Output [ order_id ] ; #2 = Aggregate [ #1 ] GroupBy [ order_id ] Output [ countstar AS Count_Star , order_id ]"
    },
    {
        "id": "e887712e58e3f7de91e16e0d22c44a4858de741a846d6e9fe3eb7f90cb638025",
        "question": "Show the product ids and the number of unique orders containing each product.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Order_Items ] Distinct [ true ] Output [ product_id , order_id ] ; #2 = Aggregate [ #1 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_id ]"
    },
    {
        "id": "67bb3c3196cde1cd8ed2224290ae68a668cbfd0eea4343e7b082a50288f75365",
        "question": "How many distinct order ids correspond to each product?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Order_Items ] Distinct [ true ] Output [ product_id , order_id ] ; #2 = Aggregate [ #1 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_id ]"
    },
    {
        "id": "68e0b764f4d6b669cd3c982e404d353c167542f47ce26788aadae616b4d1b518",
        "question": "Show all product names and the number of customers having an order on each product.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Order_Items ] Output [ product_id ] ; #2 = Scan Table [ Products ] Output [ product_name , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.product_name ] ; #4 = Aggregate [ #3 ] GroupBy [ product_name ] Output [ countstar AS Count_Star , product_name ]"
    },
    {
        "id": "f29a3356059aae3a7e0fe67bcfc7b887f2d662bfce2d6d8948363848d3e266ad",
        "question": "What are teh names of the different products, as well as the number of customers who have ordered each product.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Order_Items ] Output [ product_id ] ; #2 = Scan Table [ Products ] Output [ product_name , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.product_name ] ; #4 = Aggregate [ #3 ] GroupBy [ product_name ] Output [ countstar AS Count_Star , product_name ]"
    },
    {
        "id": "d6d4f5e29b6960dfb242499759dd92b0b184b7705a13fb4f1f83f3044c13a932",
        "question": "Show order ids and the number of products in each order.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Order_Items ] Distinct [ true ] Output [ product_id , order_id ] ; #2 = Aggregate [ #1 ] GroupBy [ order_id ] Output [ countstar AS Count_Star , order_id ]"
    },
    {
        "id": "2c5c2970c5af776ac4e1a849087bf26854b3c0eebbdff1dabb09bef694be9658",
        "question": "How many different products correspond to each order id?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Order_Items ] Distinct [ true ] Output [ product_id , order_id ] ; #2 = Aggregate [ #1 ] GroupBy [ order_id ] Output [ countstar AS Count_Star , order_id ]"
    },
    {
        "id": "e4631f9fdb7bb2567f17d20e2af670b2497a9678ca5dd480470757cd4b622fbe",
        "question": "Show order ids and the total quantity in each order.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Order_Items ] Output [ product_quantity , order_id ] ; #2 = Aggregate [ #1 ] GroupBy [ order_id ] Output [ SUM(product_quantity) AS Sum_product_quantity , order_id ]"
    },
    {
        "id": "d536c8c942f99af24edfaf38437faa9241baa11ff5c52716d562520ec62ccfc1",
        "question": "Give the order ids for all orders, as well as the total product quantity in each.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Order_Items ] Output [ product_quantity , order_id ] ; #2 = Aggregate [ #1 ] GroupBy [ order_id ] Output [ SUM(product_quantity) AS Sum_product_quantity , order_id ]"
    },
    {
        "id": "7ed6205f499090841b32b52fdfd9ce3680979c013bd3755c2f19ca756e7536bc",
        "question": "How many products were not included in any order?",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Products ] Output [ product_id ] ; #2 = Scan Table [ Order_Items ] Output [ product_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "89aa04ab00edfab45bcc66f4370f5b1f40bbed0bba0c433c3bb7d542ad093c81",
        "question": "Count the number of products that were never ordered.",
        "parsing_tree": "customers_and_invoices | #1 = Scan Table [ Products ] Output [ product_id ] ; #2 = Scan Table [ Order_Items ] Output [ product_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "25ce2403afefe2d46e1a750ba029cfc23299ac3615a6e44415fc92c50e864066",
        "question": "How many churches opened before 1850 are there?",
        "parsing_tree": "wedding | #1 = Scan Table [ church ] Predicate [ Open_Date < 1850 ] Output [ Open_Date ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "dc3882670271406c43fb2caaeca28d5a4697ed2242d2714db135aa50651459a7",
        "question": "Show the name, open date, and organizer for all churches.",
        "parsing_tree": "wedding | #1 = Scan Table [ church ] Output [ Open_Date , Organized_by , Name ]"
    },
    {
        "id": "4adb0dfac13dec735e3df588c6b3167bc0e8381e6b97b21ec5d04bd1193d31ee",
        "question": "List all church names in descending order of opening date.",
        "parsing_tree": "wedding | #1 = Scan Table [ church ] Output [ Open_Date , Name ] ; #2 = Sort [ #1 ] OrderBy [ Open_Date DESC ] Output [ Open_Date , Name ]"
    },
    {
        "id": "677991a4d1599655ee5b4cd868ccfea7f7cbd34f4b098b9fca57906ec86f8522",
        "question": "Show the opening year in whcih at least two churches opened.",
        "parsing_tree": "wedding | #1 = Scan Table [ church ] Output [ Open_Date ] ; #2 = Aggregate [ #1 ] GroupBy [ Open_Date ] Output [ Open_Date , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Open_Date ]"
    },
    {
        "id": "84cc23f44df403ee64682b64d4b87845b109928d43e928c3d31974202d1c12fc",
        "question": "Show the organizer and name for churches that opened between 1830 and 1840.",
        "parsing_tree": "wedding | #1 = Scan Table [ church ] Predicate [ Open_Date >= 1830 AND Open_Date <= 1840 ] Output [ Open_Date , Organized_by , Name ]"
    },
    {
        "id": "7d07681d712d3dbfc751fb2f2f956497b3fa5ef711a922d94c19b4b16afc3890",
        "question": "Show all opening years and the number of churches that opened in that year.",
        "parsing_tree": "wedding | #1 = Scan Table [ church ] Output [ Open_Date ] ; #2 = Aggregate [ #1 ] GroupBy [ Open_Date ] Output [ Open_Date , countstar AS Count_Star ]"
    },
    {
        "id": "228ddf71c104f49e06d248ae8438affcd7ac04ad9e0e83e5b5a084a7c9c03301",
        "question": "Show the name and opening year for three churches that opened most recently.",
        "parsing_tree": "wedding | #1 = Scan Table [ church ] Output [ Open_Date , Name ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ Open_Date DESC ] Output [ Open_Date , Name ]"
    },
    {
        "id": "7534d57861390725cdfce55188d8981723d48a5780259e840b8640b034b2182d",
        "question": "How many female people are older than 30 in our record?",
        "parsing_tree": "wedding | #1 = Scan Table [ people ] Predicate [ Age > 30 AND Is_Male = 'F' ] Output [ Is_Male , Age ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4a87e2f01cf268a7edcf89491d415106cf4e444cdbc6d1fa944d79bc760f8ac1",
        "question": "Show the country where people older than 30 and younger than 25 are from.",
        "parsing_tree": "wedding | #1 = Scan Table [ people ] Predicate [ Age < 25 ] Distinct [ true ] Output [ Country , Age ] ; #2 = Scan Table [ people ] Predicate [ Age > 30 ] Output [ Country , Age ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Country = #2.Country ] Output [ #1.Country ]"
    },
    {
        "id": "317b451f1bbda7fbd8ef36e9e5c2910dc724ebaadbbc9e50226f045d1d81256e",
        "question": "Show the minimum, maximum, and average age for all people.",
        "parsing_tree": "wedding | #1 = Scan Table [ people ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ MAX(Age) AS Max_Age , AVG(Age) AS Avg_Age , MIN(Age) AS Min_Age ]"
    },
    {
        "id": "21010380ba4d7cf1fcd58ff533821dc8041695f1e240f481de1b7d190bd8a5e2",
        "question": "Show the name and country for all people whose age is smaller than the average.",
        "parsing_tree": "wedding | #1 = Scan Table [ people ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ] ; #3 = Scan Table [ people ] Output [ Country , Name , Age ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Age < #2.Avg_Age ] Output [ #3.Name , #3.Country ]"
    },
    {
        "id": "af2e703984f81cdeeec8e1d4981f6d8d72f4b8127a9ad811d9b215fdc85672b8",
        "question": "Show the pair of male and female names in all weddings after year 2014",
        "parsing_tree": "wedding | #1 = Scan Table [ wedding ] Predicate [ Year > 2014 ] Output [ Male_ID , Year , Female_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Female_ID = #2.People_ID ] Output [ #2.Name , #1.Male_ID ] ; #4 = Scan Table [ people ] Output [ People_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Male_ID = #4.People_ID ] Output [ #3.Name ]"
    },
    {
        "id": "79f2e59155ac4454feb77082fa2ba95d106ddf57fc6fba083eb09100686c4bce",
        "question": "Show the name and age for all male people who don't have a wedding.",
        "parsing_tree": "wedding | #1 = Scan Table [ people ] Predicate [ Is_Male = 'T' ] Output [ Is_Male , People_ID , Name , Age ] ; #2 = Scan Table [ wedding ] Output [ Male_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Male_ID = #1.People_ID ] Output [ #1.Age , #1.Name ]"
    },
    {
        "id": "e2a8eb6d0af65afcab6add4a3fe33c56e44521e4b08f2236fad658b8bfe95fcd",
        "question": "Show all church names except for those that had a wedding in year 2015.",
        "parsing_tree": "wedding | #1 = Scan Table [ church ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ wedding ] Predicate [ Year = 2015 ] Output [ Church_ID , Year ] ; #3 = Scan Table [ church ] Output [ Church_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Church_ID = #3.Church_ID ] Output [ #3.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Name ]"
    },
    {
        "id": "6ac89758125ede45547db4edc8274ab20c7192e8b79dee81b5eacd40837710b3",
        "question": "Show all church names that have hosted least two weddings.",
        "parsing_tree": "wedding | #1 = Scan Table [ wedding ] Output [ Church_ID ] ; #2 = Scan Table [ church ] Output [ Church_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Church_ID = #2.Church_ID ] Output [ #2.Name , #2.Church_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Church_ID ] Output [ countstar AS Count_Star , Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Name ]"
    },
    {
        "id": "e02ad432d269882ebdc74ab7ea84fea4668765f2533ecbfc94df36eab653f724",
        "question": "Show the names for all females from Canada having a wedding in year 2016.",
        "parsing_tree": "wedding | #1 = Scan Table [ people ] Predicate [ Is_Male = 'F' AND Country = 'Canada' ] Output [ Is_Male , People_ID , Country , Name ] ; #2 = Scan Table [ wedding ] Predicate [ Year = 2016 ] Output [ Year , Female_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.Female_ID ] Output [ #1.Name ]"
    },
    {
        "id": "f7289424ce69f06e1e189036f15611b396797f944e2ced490a32029e0575c995",
        "question": "How many weddings are there in year 2016?",
        "parsing_tree": "wedding | #1 = Scan Table [ wedding ] Predicate [ Year = 2016 ] Output [ Year ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cc9190af7493d36cb614d457ca73f3b00895acba88d10ae37fbe3d9038d30827",
        "question": "Show all countries and the number of people from each country.",
        "parsing_tree": "wedding | #1 = Scan Table [ people ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]"
    },
    {
        "id": "f9f139e8c862568af965e5812b377234bc3685436b1b71fbc05cba6a584c5514",
        "question": "How many churches have a wedding in year 2016?",
        "parsing_tree": "wedding | #1 = Scan Table [ wedding ] Predicate [ Year = 2016 ] Output [ Church_ID , Year ] ; #2 = Aggregate [ #1 ] GroupBy [ Church_ID ] Output [ Church_ID ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "fceb8957a367ea6501ddc3a6460c020c79c97f01e45b7c57c0eff98272796730",
        "question": "How many artists do we have?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cfff6fb3d59c5b864155510da803d0ec776461bd22562726c537b7a89d59524b",
        "question": "Count the number of artists.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b35bab0a3ba55ad6e558f0adbf4eb6ec1b375ca1633ec96fb86c5d339d6a02e7",
        "question": "Show all artist name, age, and country ordered by the yeared they joined.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Output [ Year_Join , Country , Name , Age ] ; #2 = Sort [ #1 ] OrderBy [ Year_Join ASC ] Output [ Age , Country , Year_Join , Name ]"
    },
    {
        "id": "90561e7848da588ef89efa51b43ef2f2497fce92e83462c548fd647e84a0685a",
        "question": "What are the names, ages, and countries of artists, sorted by the year they joined?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Output [ Year_Join , Country , Name , Age ] ; #2 = Sort [ #1 ] OrderBy [ Year_Join ASC ] Output [ Age , Country , Year_Join , Name ]"
    },
    {
        "id": "f3257a2749454caedcf030ef1f9b0335b5475e5f0d7ecfd9f4ced0e952baa5d4",
        "question": "What are all distinct country for artists?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Distinct [ true ] Output [ Country ]"
    },
    {
        "id": "8b217c9000cfe24bbaa97dc19c1ed65487bdcb52c6787ffee3c4df5f5d36c742",
        "question": "Return the different countries for artists.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Distinct [ true ] Output [ Country ]"
    },
    {
        "id": "53d97ea67a7587d24ee7f8f9b64c7acc11f4e44d6fde3f560143f0d2c75aadc3",
        "question": "Show all artist names and the year joined who are not from United States.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Predicate [ Country <> 'United States' ] Output [ Year_Join , Country , Name ]"
    },
    {
        "id": "b75a4ccb983c0ace1322e5d5e721e51d5f01c52a18bc9a3a58d74e39b8378e36",
        "question": "What are the names and year of joining for artists that do not have the country \"United States\"?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Predicate [ Country <> 'United States' ] Output [ Year_Join , Country , Name ]"
    },
    {
        "id": "0f42fd9f457f2d0cf5cedab6ba9fc72a2dc74a73527d380ae1eaf63de4643719",
        "question": "How many artists are above age 46 and joined after 1990?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Predicate [ Age > 46 AND Year_Join > 1990 ] Output [ Year_Join , Age ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d172942f71826f0aa13a415257ae6b1ffe81ac3c50d724be478222451999a05c",
        "question": "Count the number of artists who are older than 46 and joined after 1990.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Predicate [ Age > 46 AND Year_Join > 1990 ] Output [ Year_Join , Age ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "503cc3eadde96bb9d6f4097f2459b9f2ada8eed59bf5bf24468cc89abfd0f113",
        "question": "What is the average and minimum age of all artists from United States.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Predicate [ Country = 'United States' ] Output [ Country , Age ] ; #2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age , MIN(Age) AS Min_Age ]"
    },
    {
        "id": "01672d52c85da57abba968ec801bf559fee7e554cdb7910866d125a345c84332",
        "question": "Return the average and minimum ages across artists from the United States.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Predicate [ Country = 'United States' ] Output [ Country , Age ] ; #2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age , MIN(Age) AS Min_Age ]"
    },
    {
        "id": "3d10acc3e076ca80271f00f6546c1f35bd87f0dbd40c1d5f763d00ec92eae34b",
        "question": "What is the name of the artist who joined latest?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Output [ Year_Join , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Year_Join DESC ] Output [ Year_Join , Name ]"
    },
    {
        "id": "9f4d84dfe430a4ba21cddb36e456219af379add34efaa03d29f9927d6ac8a8d1",
        "question": "Return the name of the artist who has the latest join year.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Output [ Year_Join , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Year_Join DESC ] Output [ Year_Join , Name ]"
    },
    {
        "id": "a5bfe1656394122130c1d5e43b0d564fdc840c5ac1041ee0c60be8f194691604",
        "question": "How many exhibition are there in year 2005 or after?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition ] Predicate [ Year >= 2005 ] Output [ Year ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "597f13db2f96cc517b66334e7c0a73d30c07b04f40078ae3add7390fb2917432",
        "question": "Count the number of exhibitions that happened in or after 2005.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition ] Predicate [ Year >= 2005 ] Output [ Year ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ec2f1b5b9bf1892c615656989dd3a48eb9b4707060da2ebaf519d5d7161b3e59",
        "question": "Show theme and year for all exhibitions with ticket prices lower than 15.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition ] Predicate [ Ticket_Price < 15.0 ] Output [ Theme , Ticket_Price , Year ]"
    },
    {
        "id": "d84238f52f274818572b1de3496ed3d302595290cc052b3509f6ff68dc214935",
        "question": "What are the theme and year for all exhibitions that have a ticket price under 15?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition ] Predicate [ Ticket_Price < 15.0 ] Output [ Theme , Ticket_Price , Year ]"
    },
    {
        "id": "37606870d75b4f218d4de2466b47fde7244688fa0a6974c3bf67123c4976447a",
        "question": "Show all artist names and the number of exhibitions for each artist.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition ] Output [ Artist_ID ] ; #2 = Scan Table [ artist ] Output [ Artist_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Name , #1.Artist_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Artist_ID ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "f04649cae0ceed0cdc8fe4c8c1d9f8941aeb5f7a485e4128c7bc58a05d903417",
        "question": "How many exhibitions has each artist had?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition ] Output [ Artist_ID ] ; #2 = Scan Table [ artist ] Output [ Artist_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Name , #1.Artist_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Artist_ID ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "98a2a294d250b8d08c5d21a927dc4e7e9d1ae8323be4440a6c1840e3fe585b15",
        "question": "What is the name and country for the artist with most number of exhibitions?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition ] Output [ Artist_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Artist_ID ] Output [ countstar AS Count_Star , Artist_ID ] ; #3 = Scan Table [ artist ] Output [ Country , Artist_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Artist_ID = #3.Artist_ID ] Output [ #3.Name , #3.Country , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Country , Name ]"
    },
    {
        "id": "43fc0ca89399423de70f5ef333d613fa66ca9ea7930ca239f5f684c6db4870d7",
        "question": "Return the name and country corresponding to the artist who has had the most exhibitions.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition ] Output [ Artist_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Artist_ID ] Output [ countstar AS Count_Star , Artist_ID ] ; #3 = Scan Table [ artist ] Output [ Country , Artist_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Artist_ID = #3.Artist_ID ] Output [ #3.Name , #3.Country , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Country , Name ]"
    },
    {
        "id": "a019907ed09d3452b87cb6108e7a7059adefbaf4c262ec1079209e72d50635b0",
        "question": "Show names for artists without any exhibition.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Output [ Artist_ID , Name ] ; #2 = Scan Table [ exhibition ] Output [ Artist_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Artist_ID IS NULL OR #1.Artist_ID = #2.Artist_ID ] Output [ #1.Name ]"
    },
    {
        "id": "b08918cb6f85a78a3831c9eb7db91436723661514b3b1a267a71fe0294de4779",
        "question": "What are the names of artists that have not had any exhibitions?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Output [ Artist_ID , Name ] ; #2 = Scan Table [ exhibition ] Output [ Artist_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Artist_ID IS NULL OR #1.Artist_ID = #2.Artist_ID ] Output [ #1.Name ]"
    },
    {
        "id": "d276f2757fe476dd3fdfc011dd30bf266f337aace92b05c7e5ff195f74dc3e89",
        "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Output [ Artist_ID , Name ] ; #2 = Scan Table [ exhibition ] Output [ Ticket_Price ] ; #3 = Aggregate [ #2 ] Output [ AVG(Ticket_Price) AS Avg_Ticket_Price ] ; #4 = Scan Table [ exhibition ] Output [ Theme , Artist_ID , Ticket_Price ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.Ticket_Price > #3.Avg_Ticket_Price ] Output [ #4.Theme , #4.Artist_ID ] ; #6 = Join [ #1 , #5 ] Predicate [ #5.Artist_ID = #1.Artist_ID ] Output [ #5.Theme , #1.Name ]"
    },
    {
        "id": "0e093e78fb6060b52bf8a8c034c2faf2a17761bcfd9b6ad4b8564d6d6fa3975a",
        "question": "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Output [ Artist_ID , Name ] ; #2 = Scan Table [ exhibition ] Output [ Ticket_Price ] ; #3 = Aggregate [ #2 ] Output [ AVG(Ticket_Price) AS Avg_Ticket_Price ] ; #4 = Scan Table [ exhibition ] Output [ Theme , Artist_ID , Ticket_Price ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.Ticket_Price > #3.Avg_Ticket_Price ] Output [ #4.Theme , #4.Artist_ID ] ; #6 = Join [ #1 , #5 ] Predicate [ #5.Artist_ID = #1.Artist_ID ] Output [ #5.Theme , #1.Name ]"
    },
    {
        "id": "20a60e0aafcd8d1adbbba3cf4d279907eadec221d2f0ca4a892294019b493383",
        "question": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition ] Predicate [ Year < 2009 ] Output [ Ticket_Price , Year ] ; #2 = Aggregate [ #1 ] Output [ AVG(Ticket_Price) AS Avg_Ticket_Price , MAX(Ticket_Price) AS Max_Ticket_Price , MIN(Ticket_Price) AS Min_Ticket_Price ]"
    },
    {
        "id": "718f039009d8b7af59d6245cb006efe45a469dd0cfc63db5d4d1d3871837de93",
        "question": "What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition ] Predicate [ Year < 2009 ] Output [ Ticket_Price , Year ] ; #2 = Aggregate [ #1 ] Output [ AVG(Ticket_Price) AS Avg_Ticket_Price , MAX(Ticket_Price) AS Max_Ticket_Price , MIN(Ticket_Price) AS Min_Ticket_Price ]"
    },
    {
        "id": "286482b10980948b65b050678f7d0e4f83b229c1a73819894065d241ba8588f1",
        "question": "Show theme and year for all exhibitions in an descending order of ticket price.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition ] Output [ Theme , Ticket_Price , Year ] ; #2 = Sort [ #1 ] OrderBy [ Ticket_Price DESC ] Output [ Theme , Ticket_Price , Year ]"
    },
    {
        "id": "555ad218983d09878bd332ae65ab40c776f3842bacce23b4d3bec1c6694a1e33",
        "question": "What are the themes and years for exhibitions, sorted by ticket price descending?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition ] Output [ Theme , Ticket_Price , Year ] ; #2 = Sort [ #1 ] OrderBy [ Ticket_Price DESC ] Output [ Theme , Ticket_Price , Year ]"
    },
    {
        "id": "99573f9df23867681b7861a91c145f508be9237aaae3693658a046c841315a6d",
        "question": "What is the theme, date, and attendance for the exhibition in year 2004?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition ] Predicate [ Year = 2004 ] Output [ Exhibition_ID , Theme , Year ] ; #2 = Scan Table [ exhibition_record ] Output [ Exhibition_ID , Attendance , Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Exhibition_ID = #2.Exhibition_ID ] Output [ #1.Theme , #2.Attendance , #2.Date ]"
    },
    {
        "id": "0141cfce82a95e8397a0dcfe142ff1eafcbcd29eb1521d5ca3cef3858d4a9035",
        "question": "Return the themes, dates, and attendance for exhibitions that happened in 2004.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition ] Predicate [ Year = 2004 ] Output [ Exhibition_ID , Theme , Year ] ; #2 = Scan Table [ exhibition_record ] Output [ Exhibition_ID , Attendance , Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Exhibition_ID = #2.Exhibition_ID ] Output [ #1.Theme , #2.Attendance , #2.Date ]"
    },
    {
        "id": "ae3cc3f0b1ff92f4f38d32432bf1e59488bf3a2ea590a6616d1deb371284de29",
        "question": "Show all artist names who didn't have an exhibition in 2004.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ exhibition ] Predicate [ Year = 2004 ] Output [ Artist_ID , Year ] ; #3 = Scan Table [ artist ] Output [ Artist_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Artist_ID = #3.Artist_ID ] Output [ #3.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Name ]"
    },
    {
        "id": "5fc0cc0f004b9027a8362857c0a0e3df44193dfb05f4aabcbf255c34f3e85f60",
        "question": "What are the names of artists who did not have an exhibition in 2004?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ artist ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ exhibition ] Predicate [ Year = 2004 ] Output [ Artist_ID , Year ] ; #3 = Scan Table [ artist ] Output [ Artist_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Artist_ID = #3.Artist_ID ] Output [ #3.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Name ]"
    },
    {
        "id": "cbdad37932f9dcf43e12d5decdfb6fa521f01c66ff1a123e950a0298f57eb84c",
        "question": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition_record ] Predicate [ Attendance < 100 ] Output [ Exhibition_ID , Attendance ] ; #2 = Scan Table [ exhibition ] Output [ Exhibition_ID , Theme ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Exhibition_ID = #2.Exhibition_ID ] Distinct [ true ] Output [ #2.Theme ] ; #4 = Scan Table [ exhibition ] Output [ Exhibition_ID , Theme ] ; #5 = Scan Table [ exhibition_record ] Predicate [ Attendance > 500 ] Output [ Exhibition_ID , Attendance ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Exhibition_ID = #5.Exhibition_ID ] Output [ #4.Theme ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Theme = #6.Theme ] Output [ #3.Theme ]"
    },
    {
        "id": "863593e1d833493d9ec4d2655de8a1dd56f5ec3c9484e2493d10941e7fe9b688",
        "question": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?",
        "parsing_tree": "theme_gallery | #1 = Scan Table [ exhibition_record ] Predicate [ Attendance < 100 ] Output [ Exhibition_ID , Attendance ] ; #2 = Scan Table [ exhibition ] Output [ Exhibition_ID , Theme ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Exhibition_ID = #2.Exhibition_ID ] Distinct [ true ] Output [ #2.Theme ] ; #4 = Scan Table [ exhibition ] Output [ Exhibition_ID , Theme ] ; #5 = Scan Table [ exhibition_record ] Predicate [ Attendance > 500 ] Output [ Exhibition_ID , Attendance ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Exhibition_ID = #5.Exhibition_ID ] Output [ #4.Theme ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Theme = #6.Theme ] Output [ #3.Theme ]"
    },
    {
        "id": "75d40b41aae0f3819229b6fb2e9e7f784a4efc77748d448364add16d2f3f6f43",
        "question": "Find the id of the item whose title is \"orange\".",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ item ] Predicate [ title = 'orange' ] Output [ i_id , title ]"
    },
    {
        "id": "ef56c45319e07ef947a8e86ec51503b6328c415fa47d5b94fddfc607978165e9",
        "question": "List all information in the item table.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ item ] Output [ i_id , title ]"
    },
    {
        "id": "9bc347ddb9b5f52e8c2306cfb52c5b0867d79de86593d56bd78b80188af7e74d",
        "question": "Find the number of reviews.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ review ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d1fc9c7f3b05ae5e11d6fc7e9d9b5688cdc24f90f55e944c26eeb1d864c248b8",
        "question": "How many users are there?",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ useracct ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c065bd8be09a3d3d67b4b65f7b465b96a4c6193998b8acf4c1c1521899feb981",
        "question": "Find the average and maximum rating of all reviews.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ review ] Output [ rating ] ; #2 = Aggregate [ #1 ] Output [ MAX(rating) AS Max_rating , AVG(rating) AS Avg_rating ]"
    },
    {
        "id": "84904c455a9ce13f2ebf8312a575a28630c8e2cd491bbd42acd7540e8eb49072",
        "question": "Find the highest rank of all reviews.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ review ] Output [ rank ] ; #2 = Aggregate [ #1 ] Output [ MIN(rank) AS Min_rank ]"
    },
    {
        "id": "ad6f2a333a1c426765b27a83929803b01e69f9fe1b5a9447275e5960d8ddfa61",
        "question": "How many different users wrote some reviews?",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ review ] Distinct [ true ] Output [ u_id ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "585376cb869406e0ec617199fb6adc2401d136a211e99d626fdcbb08497e9fee",
        "question": "How many different items were reviewed by some users?",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ review ] Distinct [ true ] Output [ i_id ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c23b522dc7fb2a5ec02cad91020d19799539a912ec94e7790c6fa37ba1261ba9",
        "question": "Find the number of items that did not receive any review.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ item ] Output [ i_id ] ; #2 = Scan Table [ review ] Output [ i_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.i_id = #2.i_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7930c8889cdef4d69d64301e7c5bd173b54d82293dbb621e4a5c3fe1c97dfbee",
        "question": "Find the names of users who did not leave any review.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ useracct ] Output [ name , u_id ] ; #2 = Scan Table [ review ] Output [ u_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.u_id = #1.u_id ] Output [ #1.name ]"
    },
    {
        "id": "02f39b1151767132a4b18d385b60202e76bb19830eed144fb9f51e89f0841fa5",
        "question": "Find the names of goods that receive a rating of 10.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ review ] Predicate [ rating = 10 ] Output [ i_id , rating ] ; #2 = Scan Table [ item ] Output [ i_id , title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.i_id = #2.i_id ] Output [ #2.title ]"
    },
    {
        "id": "69d4f47c11eb90ba6f14f1d0e9344a8c031458e1097ffcd9a2cab6237e8ffe5e",
        "question": "Find the titles of items whose rating is higher than the average review rating of all items.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ item ] Output [ i_id , title ] ; #2 = Scan Table [ review ] Output [ rating ] ; #3 = Aggregate [ #2 ] Output [ AVG(rating) AS Avg_rating ] ; #4 = Scan Table [ review ] Output [ i_id , rating ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.rating > #3.Avg_rating ] Output [ #4.i_id ] ; #6 = Join [ #1 , #5 ] Predicate [ #5.i_id = #1.i_id ] Output [ #1.title ]"
    },
    {
        "id": "0bd7ed4c4e7aefe24b2f40090c4f97ad63b72ec0633b75e73f1a09f3d64475ba",
        "question": "Find the titles of items that received any rating below 5.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ review ] Predicate [ rating < 5 ] Output [ i_id , rating ] ; #2 = Scan Table [ item ] Output [ i_id , title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.i_id = #2.i_id ] Output [ #2.title ]"
    },
    {
        "id": "0f58026bc5c5cc4825aa2efa5244166cdac930c47c44fded62441a5a93d161b5",
        "question": "Find the titles of items that received both a rating higher than 8 and a rating below 5.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ review ] Predicate [ rating > 8 ] Output [ i_id , rating ] ; #2 = Scan Table [ item ] Output [ i_id , title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.i_id = #2.i_id ] Distinct [ true ] Output [ #2.title ] ; #4 = Scan Table [ review ] Predicate [ rating < 5 ] Output [ i_id , rating ] ; #5 = Scan Table [ item ] Output [ i_id , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.i_id = #5.i_id ] Output [ #5.title ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.title = #6.title ] Output [ #3.title ]"
    },
    {
        "id": "629a149d2649ad76f2d4dcb3df4cd280b41bedfb29539033282bb5ccf521726e",
        "question": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ review ] Predicate [ rank > 3 ] Output [ i_id , rank ] ; #2 = Scan Table [ item ] Output [ i_id , title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.i_id = #2.i_id ] Distinct [ true ] Output [ #2.title ] ; #4 = Scan Table [ review ] Output [ i_id , rating ] ; #5 = Aggregate [ #4 ] GroupBy [ i_id ] Output [ i_id , AVG(rating) AS Avg_rating ] ; #6 = Scan Table [ item ] Output [ i_id , title ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.i_id = #6.i_id ] Output [ #6.title , #5.Avg_rating ] ; #8 = Filter [ #7 ] Predicate [ Avg_rating > 5 ] Output [ title ] ; #9 = Intersect [ #3 , #8 ] Predicate [ #3.title = #8.title ] Output [ #3.title ]"
    },
    {
        "id": "1c40143b69711172895a8617f7f3e63b4e7a1eebc042adde5bb7d709d64e9471",
        "question": "Find the name of the item with the lowest average rating.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ review ] Output [ i_id , rating ] ; #2 = Aggregate [ #1 ] GroupBy [ i_id ] Output [ i_id , AVG(rating) AS Avg_rating ] ; #3 = Scan Table [ item ] Output [ i_id , title ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.i_id = #3.i_id ] Output [ #2.Avg_rating , #3.title ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_rating ASC ] Output [ Avg_rating , title ]"
    },
    {
        "id": "9e8797a2016a2a1aa15b21882dd0ad8b7cf251b59ce9d1467de1030a22840498",
        "question": "List the titles of all items in alphabetic order .",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ item ] Output [ title ] ; #2 = Sort [ #1 ] OrderBy [ title ASC ] Output [ title ]"
    },
    {
        "id": "5b33d851f1deb7ab8d76fcd85cbcb30a196c8bd35a8c808614fca2e19f00af95",
        "question": "Find the name and id of the item with the highest average rating.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ review ] Output [ i_id , rating ] ; #2 = Aggregate [ #1 ] GroupBy [ i_id ] Output [ i_id , AVG(rating) AS Avg_rating ] ; #3 = Scan Table [ item ] Output [ i_id , title ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.i_id = #3.i_id ] Output [ #2.Avg_rating , #3.title , #3.i_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_rating DESC ] Output [ Avg_rating , i_id , title ]"
    },
    {
        "id": "44e557914bd3ad1e395d2a76f25d4f9ff6253a5885a2546e99d1bd5e57797bf0",
        "question": "Find the name and id of the good with the highest average rank.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ review ] Output [ i_id , rank ] ; #2 = Aggregate [ #1 ] GroupBy [ i_id ] Output [ i_id , AVG(rank) AS Avg_rank ] ; #3 = Scan Table [ item ] Output [ i_id , title ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.i_id = #3.i_id ] Output [ #2.Avg_rank , #3.title , #3.i_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_rank DESC ] Output [ i_id , title , Avg_rank ]"
    },
    {
        "id": "8c5fda93de837fa430aa131aa4b87f7535914a8e0444d971b27bb927507e251a",
        "question": "For each user, return the name and the average rating of reviews given by them.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ review ] Output [ rating , u_id ] ; #2 = Aggregate [ #1 ] GroupBy [ u_id ] Output [ AVG(rating) AS Avg_rating , u_id ] ; #3 = Scan Table [ useracct ] Output [ name , u_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.u_id = #3.u_id ] Output [ #3.name , #2.Avg_rating ]"
    },
    {
        "id": "7cfbc8112cbedc3d937296653fed60a6a386fd75202479ddbb943b5905565f41",
        "question": "For each user, find their name and the number of reviews written by them.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ review ] Output [ u_id ] ; #2 = Aggregate [ #1 ] GroupBy [ u_id ] Output [ countstar AS Count_Star , u_id ] ; #3 = Scan Table [ useracct ] Output [ name , u_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.u_id = #3.u_id ] Output [ #3.name , #2.Count_Star ]"
    },
    {
        "id": "8fa6313e180f5546918b524dd6edb215d5c85c525321bd91cb378e81e41b05d0",
        "question": "Find the name of the user who gave the highest rating.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ useracct ] Output [ name , u_id ] ; #2 = Scan Table [ review ] Output [ rating , u_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.u_id = #2.u_id ] Output [ #1.name , #2.rating ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ rating DESC ] Output [ name , rating ]"
    },
    {
        "id": "8239ffc05be42a3533bfa7d774e3e4363718aad23caf0382b6bfd506f8a582e7",
        "question": "Find the name of the source user with the highest average trust score.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ trust ] Output [ source_u_id , trust ] ; #2 = Aggregate [ #1 ] GroupBy [ source_u_id ] Output [ source_u_id , AVG(trust) AS Avg_trust ] ; #3 = Scan Table [ useracct ] Output [ name , u_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.source_u_id = #3.u_id ] Output [ #3.name , #2.Avg_trust ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_trust DESC ] Output [ name , Avg_trust ]"
    },
    {
        "id": "9dce87f61becf626d1e66be972749ed40c27c55a80685189fbdd4a0e73b5161c",
        "question": "Find each target user's name and average trust score.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ trust ] Output [ trust , target_u_id ] ; #2 = Aggregate [ #1 ] GroupBy [ target_u_id ] Output [ AVG(trust) AS Avg_trust , target_u_id ] ; #3 = Scan Table [ useracct ] Output [ name , u_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.target_u_id = #3.u_id ] Output [ #3.name , #2.Avg_trust ]"
    },
    {
        "id": "25a9eb68ef013adf720c1184d37ea59102b8917279504a5b82cba79d400d5d35",
        "question": "Find the name of the target user with the lowest trust score.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ useracct ] Output [ name , u_id ] ; #2 = Scan Table [ trust ] Output [ trust , target_u_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.u_id = #2.target_u_id ] Output [ #1.name , #2.trust ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ trust ASC ] Output [ name , trust ]"
    },
    {
        "id": "69cb63739163d4f0475dad41da4b32d9fdae1453e9b7608d08bd68296630000b",
        "question": "Find the names of the items that did not receive any review.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ item ] Output [ i_id , title ] ; #2 = Scan Table [ review ] Output [ i_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.i_id = #1.i_id ] Output [ #1.title ]"
    },
    {
        "id": "1f86c12f4fb12407a1f0d9d851f433eaaaf04b29bd86975126e910c0289b6fdf",
        "question": "Find the number of users who did not write any review.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ useracct ] Output [ u_id ] ; #2 = Scan Table [ review ] Output [ u_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.u_id = #2.u_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "816cc0e3924f7e6d6ad31ec203f69407c228615470bc9ff6a5044f74aa9bc762",
        "question": "Find the number of items without any review.",
        "parsing_tree": "epinions_1 | #1 = Scan Table [ item ] Output [ i_id ] ; #2 = Scan Table [ review ] Output [ i_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.i_id = #2.i_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e77b1cccf23b1c56c574574b1ddfe83cbccdcea3d818807a0f79e3cbaa21b529",
        "question": "How many players are there?",
        "parsing_tree": "riding_club | #1 = Scan Table [ player ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2ce398e0029e36cf64abfd67f7bb5a7d6f6cba9a752e40bc3d39ef232bd93b26",
        "question": "List the names of players in ascending order of votes.",
        "parsing_tree": "riding_club | #1 = Scan Table [ player ] Output [ Player_name , Votes ] ; #2 = Sort [ #1 ] OrderBy [ Votes ASC ] Output [ Player_name , Votes ]"
    },
    {
        "id": "ba51ea7c1613cd810bcf87209d9146e1af2cc6efd56d458026b0edb118ddc6ac",
        "question": "What are the gender and occupation of players?",
        "parsing_tree": "riding_club | #1 = Scan Table [ player ] Output [ Gender , Occupation ]"
    },
    {
        "id": "b63d28fc208fc7731c277bb526a2f2830143cb780bd4cc5f38b7dbe96ae1f42d",
        "question": "List the name and residence for players whose occupation is not \"Researcher\".",
        "parsing_tree": "riding_club | #1 = Scan Table [ player ] Predicate [ Occupation <> 'Researcher' ] Output [ Player_name , Occupation , Residence ]"
    },
    {
        "id": "3a02ab853b65aeaf2cb37f19c3462073aa51dab01b71643c517d50f33eb8f229",
        "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
        "parsing_tree": "riding_club | #1 = Scan Table [ player ] Predicate [ Residence = 'Birtle' OR Residence = 'Brandon' ] Output [ Sponsor_name , Residence ]"
    },
    {
        "id": "5753af3e93b3e951d50c31c7d78823f4c8e57363e586cb550446ed136c505295",
        "question": "What is the name of the player with the largest number of votes?",
        "parsing_tree": "riding_club | #1 = Scan Table [ player ] Output [ Player_name , Votes ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Votes DESC ] Output [ Player_name , Votes ]"
    },
    {
        "id": "ceeb4eab5709a76999b803eac331a04343c638c4107161faf17770dda728dc7b",
        "question": "Show different occupations along with the number of players in each occupation.",
        "parsing_tree": "riding_club | #1 = Scan Table [ player ] Output [ Occupation ] ; #2 = Aggregate [ #1 ] GroupBy [ Occupation ] Output [ countstar AS Count_Star , Occupation ]"
    },
    {
        "id": "0a81c80e12247358515023506950419e383d102e26f3be041c5997d8d22c8d48",
        "question": "Please show the most common occupation of players.",
        "parsing_tree": "riding_club | #1 = Scan Table [ player ] Output [ Occupation ] ; #2 = Aggregate [ #1 ] GroupBy [ Occupation ] Output [ countstar AS Count_Star , Occupation ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Occupation ]"
    },
    {
        "id": "ebedbaee821b5a0d121cc1d672299216bdee87f336248dc67125b2d31a5ebe51",
        "question": "Show the residences that have at least two players.",
        "parsing_tree": "riding_club | #1 = Scan Table [ player ] Output [ Residence ] ; #2 = Aggregate [ #1 ] GroupBy [ Residence ] Output [ countstar AS Count_Star , Residence ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Residence ]"
    },
    {
        "id": "a38db1ae70de3da863c226003acf674c709b43102e2b9eee16947b5b7c19cc8a",
        "question": "Show the names of players and names of their coaches.",
        "parsing_tree": "riding_club | #1 = Scan Table [ coach ] Output [ Coach_name , Coach_ID ] ; #2 = Scan Table [ player_coach ] Output [ Player_ID , Coach_ID ] ; #3 = Scan Table [ player ] Output [ Player_ID , Player_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Player_ID = #3.Player_ID ] Output [ #2.Coach_ID , #3.Player_name ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.Coach_ID = #4.Coach_ID ] Output [ #1.Coach_name , #4.Player_name ]"
    },
    {
        "id": "e80fa8b0ff2c1f06ca067f1530f9434fca41beb88069025c257cb45a3cd482bc",
        "question": "Show the names of players coached by the rank 1 coach.",
        "parsing_tree": "riding_club | #1 = Scan Table [ coach ] Predicate [ Rank = 1 ] Output [ Rank , Coach_ID ] ; #2 = Scan Table [ player_coach ] Output [ Player_ID , Coach_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Coach_ID = #2.Coach_ID ] Output [ #2.Player_ID ] ; #4 = Scan Table [ player ] Output [ Player_ID , Player_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Player_ID = #4.Player_ID ] Output [ #4.Player_name ]"
    },
    {
        "id": "a1a12823ba5602fc5620973974918ed6236153001d56799e4ff6e196cda0ea3b",
        "question": "Show the names and genders of players with a coach starting after 2011.",
        "parsing_tree": "riding_club | #1 = Scan Table [ player_coach ] Predicate [ Starting_year > 2011 ] Output [ Player_ID , Starting_year ] ; #2 = Scan Table [ player ] Output [ Player_ID , Player_name , Gender ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Player_ID = #2.Player_ID ] Output [ #2.Player_name , #2.Gender ]"
    },
    {
        "id": "e06e43ba51ff0a751524a099d6eb3706821bc62cf1fe4414423da2e5efb55112",
        "question": "Show the names of players and names of their coaches in descending order of the votes of players.",
        "parsing_tree": "riding_club | #1 = Scan Table [ coach ] Output [ Coach_name , Coach_ID ] ; #2 = Scan Table [ player_coach ] Output [ Player_ID , Coach_ID ] ; #3 = Scan Table [ player ] Output [ Player_ID , Player_name , Votes ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Player_ID = #3.Player_ID ] Output [ #2.Coach_ID , #3.Player_name , #3.Votes ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.Coach_ID = #4.Coach_ID ] Output [ #4.Votes , #1.Coach_name , #4.Player_name ] ; #6 = Sort [ #5 ] OrderBy [ Votes DESC ] Output [ Player_name , Coach_name , Votes ]"
    },
    {
        "id": "4b22fa0d1f2009889bb3bce3ee5dd9e0cb4f2394bf73ef0684ba506678666796",
        "question": "List the names of players that do not have coaches.",
        "parsing_tree": "riding_club | #1 = Scan Table [ player ] Output [ Player_ID , Player_name ] ; #2 = Scan Table [ player_coach ] Output [ Player_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Player_ID = #1.Player_ID ] Output [ #1.Player_name ]"
    },
    {
        "id": "0108c8f70f3166ae505edcfd823b4ce677e1af13f1e1eec68cf486613d79695c",
        "question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".",
        "parsing_tree": "riding_club | #1 = Scan Table [ player ] Predicate [ Gender = 'M' ] Distinct [ true ] Output [ Gender , Residence ] ; #2 = Scan Table [ player ] Predicate [ Gender = 'F' ] Output [ Gender , Residence ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Residence = #2.Residence ] Output [ #1.Residence ]"
    },
    {
        "id": "22287e29b5519ae285099bfc7b737326383e8d70b4bb3e8c8f3839e1cb7e4d18",
        "question": "How many coaches does each club has? List the club id, name and the number of coaches.",
        "parsing_tree": "riding_club | #1 = Scan Table [ coach ] Output [ Club_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Club_ID ] Output [ countstar AS Count_Star , Club_ID ] ; #3 = Scan Table [ club ] Output [ Club_name , Club_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Club_ID = #3.Club_ID ] Output [ #3.Club_ID , #3.Club_name , #2.Count_Star ]"
    },
    {
        "id": "f66add6d04b01602bbaf13901c0c793d5b42a65046c9b359dd3a8c0c000cc377",
        "question": "How many gold medals has the club with the most coaches won?",
        "parsing_tree": "riding_club | #1 = Scan Table [ coach ] Output [ Club_ID ] ; #2 = Scan Table [ match_result ] Output [ Gold , Club_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Club_ID = #2.Club_ID ] Output [ #2.Gold , #2.Club_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Gold , Club_ID ] Output [ countstar AS Count_Star , Gold , Club_ID ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Gold , Club_ID ]"
    },
    {
        "id": "7fe8e380a03d583004a17cbc820a65167265db48ff1cdaf8ffbd7b213e510809",
        "question": "How many gymnasts are there?",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e13f96892ba20300e384405bd991e63e20bc96f55d73489ea0e1566bb5dcfb7f",
        "question": "Count the number of gymnasts.",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "19423915fb628bb9c8bcda0ae53f871a04c5ac854f60da72916c27d921a4ebc8",
        "question": "List the total points of gymnasts in descending order.",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Total_Points ] ; #2 = Sort [ #1 ] OrderBy [ Total_Points DESC ] Output [ Total_Points ]"
    },
    {
        "id": "bb5f85b7299e3e032ba5d1b622f2272077c3c29fd30e552f5836f2a13bf22e58",
        "question": "What are the total points for all gymnasts, ordered by total points descending?",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Total_Points ] ; #2 = Sort [ #1 ] OrderBy [ Total_Points DESC ] Output [ Total_Points ]"
    },
    {
        "id": "e11bb75951685e925b6fa38a6a13d64db7d78f827dd34707357b68f92cbe4ef8",
        "question": "List the total points of gymnasts in descending order of floor exercise points.",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Total_Points , Floor_Exercise_Points ] ; #2 = Sort [ #1 ] OrderBy [ Floor_Exercise_Points DESC ] Output [ Total_Points , Floor_Exercise_Points ]"
    },
    {
        "id": "0d0e0f53fe9f7a40cbdb1d076857e434645f3fe4264cd485eba2995ab3a6eb50",
        "question": "What are the total points of gymnasts, ordered by their floor exercise points descending?",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Total_Points , Floor_Exercise_Points ] ; #2 = Sort [ #1 ] OrderBy [ Floor_Exercise_Points DESC ] Output [ Total_Points , Floor_Exercise_Points ]"
    },
    {
        "id": "9e657337c7a242317341fed580c444c20d583b592f77af5b6bc36ec66897d2cd",
        "question": "What is the average horizontal bar points for all gymnasts?",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Horizontal_Bar_Points ] ; #2 = Aggregate [ #1 ] Output [ AVG(Horizontal_Bar_Points) AS Avg_Horizontal_Bar_Points ]"
    },
    {
        "id": "393e55821f0243ed85f4862152bc4c5899b9f55833fa51703a26ad365928076d",
        "question": "Return the average horizontal bar points across all gymnasts.",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Horizontal_Bar_Points ] ; #2 = Aggregate [ #1 ] Output [ AVG(Horizontal_Bar_Points) AS Avg_Horizontal_Bar_Points ]"
    },
    {
        "id": "5fcf039e99b4f2802a53a25a32bbe267c9f18e5dc09b72881464a9c909d0f519",
        "question": "What are the names of people in ascending alphabetical order?",
        "parsing_tree": "gymnast | #1 = Scan Table [ people ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "103ce81760c8effea4b3dee573c5ac4e3c82f18c1fceedac68a18f5d9f75c148",
        "question": "Return the names of people, ordered alphabetically.",
        "parsing_tree": "gymnast | #1 = Scan Table [ people ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "821dcb0873238a87787c9ca5bd4b25f220e237b569d072fb30fa38289e83cfc1",
        "question": "What are the names of gymnasts?",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Output [ #2.Name ]"
    },
    {
        "id": "0321d45bc246fdb6197b204b4ce4612f2384f2c72c3b7c037822af8a2f0d8d19",
        "question": "Return the names of the gymnasts.",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Output [ #2.Name ]"
    },
    {
        "id": "68b6aff3afbc9ad76440c8c23b061d1787537789d2568faf915b389ba5c06b86",
        "question": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?",
        "parsing_tree": "gymnast | #1 = Scan Table [ people ] Predicate [ Hometown <> 'Santo Domingo' ] Output [ People_ID , Hometown , Name ] ; #2 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.Gymnast_ID ] Output [ #1.Name ]"
    },
    {
        "id": "c3c4a77fdbd1b54264b6603febe48cac02e7c8c6fc6124b8f5f3ecc29948c855",
        "question": "Return the names of gymnasts who did not grow up in Santo Domingo.",
        "parsing_tree": "gymnast | #1 = Scan Table [ people ] Predicate [ Hometown <> 'Santo Domingo' ] Output [ People_ID , Hometown , Name ] ; #2 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.Gymnast_ID ] Output [ #1.Name ]"
    },
    {
        "id": "952d253b90e08db1d1d2f9b3ff35abcf201c48fd46147293e837e4c58d3fa8cb",
        "question": "What is the age of the tallest person?",
        "parsing_tree": "gymnast | #1 = Scan Table [ people ] Output [ Height , Age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Height DESC ] Output [ Height , Age ]"
    },
    {
        "id": "4826633495136de0e62a8343c6ce55f853a8c14824989dc5a7692c03c3755f74",
        "question": "Return the age of the person with the greatest height.",
        "parsing_tree": "gymnast | #1 = Scan Table [ people ] Output [ Height , Age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Height DESC ] Output [ Height , Age ]"
    },
    {
        "id": "dd8a74b6c5f74f5a4781b7a3c33630426bce3f16df36145933de564c6e188260",
        "question": "List the names of the top 5 oldest people.",
        "parsing_tree": "gymnast | #1 = Scan Table [ people ] Output [ Name , Age ] ; #2 = TopSort [ #1 ] Rows [ 5 ] OrderBy [ Age DESC ] Output [ Name , Age ]"
    },
    {
        "id": "6950efb50b25c501578c3b202786a6044a38b5f0f70a150a5a92845f5f255682",
        "question": "What are the names of the five oldest people?",
        "parsing_tree": "gymnast | #1 = Scan Table [ people ] Output [ Name , Age ] ; #2 = TopSort [ #1 ] Rows [ 5 ] OrderBy [ Age DESC ] Output [ Name , Age ]"
    },
    {
        "id": "6c213452ca7a54088e356424292a7ab82ff783a8d9c3f667a7c01f6e1312e708",
        "question": "What is the average age of all gymnasts?",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Output [ #2.Age ] ; #4 = Aggregate [ #3 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "05531fea20d547bc66c1f60263e406de77559561f23f8308846f3d8bef4bc664",
        "question": "Return the average age across all gymnasts.",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Output [ #2.Age ] ; #4 = Aggregate [ #3 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "095399f4c214dbf66c2e347c1b3eafcfd791b8aa467070de62570eed97bc8120",
        "question": "What are the distinct hometowns of gymnasts with total points more than 57.5?",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Predicate [ Total_Points > 57.5 ] Output [ Gymnast_ID , Total_Points ] ; #2 = Scan Table [ people ] Output [ People_ID , Hometown ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Distinct [ true ] Output [ #2.Hometown ]"
    },
    {
        "id": "5de0ac92fea8dde9df2ca90c77e0af010be99008b7e0a2e05a5008376530862d",
        "question": "Give the different hometowns of gymnasts that have a total point score of above 57.5.",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Predicate [ Total_Points > 57.5 ] Output [ Gymnast_ID , Total_Points ] ; #2 = Scan Table [ people ] Output [ People_ID , Hometown ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Distinct [ true ] Output [ #2.Hometown ]"
    },
    {
        "id": "68922b001127ecc68de33ef4381ec404b4c308989094d977f75751c5f96c1683",
        "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Hometown ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Output [ #2.Hometown ] ; #4 = Aggregate [ #3 ] GroupBy [ Hometown ] Output [ countstar AS Count_Star , Hometown ]"
    },
    {
        "id": "768095659475554324c784ee356f10fd1625c2a802349fa8c1372fa412bfe694",
        "question": "How many gymnasts are from each hometown?",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Hometown ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Output [ #2.Hometown ] ; #4 = Aggregate [ #3 ] GroupBy [ Hometown ] Output [ countstar AS Count_Star , Hometown ]"
    },
    {
        "id": "4d3a60a7550e697a008dd43842e2a1a6fce8502efc1b5368688093c703b0bcd5",
        "question": "What is the most common hometown of gymnasts?",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Hometown ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Output [ #2.Hometown ] ; #4 = Aggregate [ #3 ] GroupBy [ Hometown ] Output [ countstar AS Count_Star , Hometown ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Hometown ]"
    },
    {
        "id": "130e570d7c891c25408b6a65e7a181b2c2475e0d8cd1741ac38bc4a5b88f95ff",
        "question": "Return the hometown that is most common among gymnasts.",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Hometown ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Output [ #2.Hometown ] ; #4 = Aggregate [ #3 ] GroupBy [ Hometown ] Output [ countstar AS Count_Star , Hometown ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Hometown ]"
    },
    {
        "id": "9a01a8e84db353d0bc463c11765b188f8628878db00d30c0f574f35245eb77c2",
        "question": "What are the hometowns that are shared by at least two gymnasts?",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Hometown ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Output [ #2.Hometown ] ; #4 = Aggregate [ #3 ] GroupBy [ Hometown ] Output [ countstar AS Count_Star , Hometown ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Hometown ]"
    },
    {
        "id": "b1e3718fa961197c0038972226252cf04e1b6f514551df600cd568175f1233fe",
        "question": "Give the hometowns from which two or more gymnasts are from.",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Hometown ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Output [ #2.Hometown ] ; #4 = Aggregate [ #3 ] GroupBy [ Hometown ] Output [ countstar AS Count_Star , Hometown ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Hometown ]"
    },
    {
        "id": "2fb979e434921902933f8ad1ee0d20ea95d48f2a0e232679ee3b850ae2fba779",
        "question": "List the names of gymnasts in ascending order by their heights.",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Name , Height ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Output [ #2.Name , #2.Height ] ; #4 = Sort [ #3 ] OrderBy [ Height ASC ] Output [ Name , Height ]"
    },
    {
        "id": "1fa14c179d0870691ad2b87aa9ef07ef740f7ef657e275057037b6e201e752f9",
        "question": "What are the names of gymnasts, ordered by their heights ascending?",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Name , Height ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Output [ #2.Name , #2.Height ] ; #4 = Sort [ #3 ] OrderBy [ Height ASC ] Output [ Name , Height ]"
    },
    {
        "id": "c45fa20d5c4c0a30ff60a3cb8e92caff69ffad1feec06df245e46b129a441897",
        "question": "List the distinct hometowns that are not associated with any gymnast.",
        "parsing_tree": "gymnast | #1 = Scan Table [ people ] Distinct [ true ] Output [ Hometown ] ; #2 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #3 = Scan Table [ people ] Output [ People_ID , Hometown ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Gymnast_ID = #3.People_ID ] Distinct [ true ] Output [ #3.Hometown ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Hometown = #4.Hometown ] Output [ #1.Hometown ]"
    },
    {
        "id": "c0355c16c0e293b7f4da15926c0526105c96d7a830110f9089f72537639a4813",
        "question": "From which hometowns did no gymnasts come from?",
        "parsing_tree": "gymnast | #1 = Scan Table [ people ] Distinct [ true ] Output [ Hometown ] ; #2 = Scan Table [ gymnast ] Output [ Gymnast_ID ] ; #3 = Scan Table [ people ] Output [ People_ID , Hometown ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Gymnast_ID = #3.People_ID ] Distinct [ true ] Output [ #3.Hometown ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Hometown = #4.Hometown ] Output [ #1.Hometown ]"
    },
    {
        "id": "ee00075b777c7540c81cdb72c14f6ebf845d7b7e6cae388a2e01c5be35a489d5",
        "question": "Show the hometowns shared by people older than 23 and younger than 20.",
        "parsing_tree": "gymnast | #1 = Scan Table [ people ] Predicate [ Age > 23.0 ] Distinct [ true ] Output [ Hometown , Age ] ; #2 = Scan Table [ people ] Predicate [ Age < 20.0 ] Output [ Hometown , Age ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Hometown = #2.Hometown ] Output [ #1.Hometown ]"
    },
    {
        "id": "f9ec0ceaf85f169083b309d1781c06684646b8aa788211a59578fb6b72532b29",
        "question": "From which hometowns did both people older than 23 and younger than 20 come from?",
        "parsing_tree": "gymnast | #1 = Scan Table [ people ] Predicate [ Age > 23.0 ] Distinct [ true ] Output [ Hometown , Age ] ; #2 = Scan Table [ people ] Predicate [ Age < 20.0 ] Output [ Hometown , Age ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Hometown = #2.Hometown ] Output [ #1.Hometown ]"
    },
    {
        "id": "409bc0a0bf5d462af68e97c389abb557bb24cabb5258d1b3322ce1fd54b52524",
        "question": "How many distinct hometowns did these people have?",
        "parsing_tree": "gymnast | #1 = Scan Table [ people ] Distinct [ true ] Output [ Hometown ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Hometown) AS Count_Dist_Hometown ]"
    },
    {
        "id": "bc9c7b8ea53d2e1ca36e23849039f47901b892e6f14eaada7b47cde98b6a6542",
        "question": "Count the number of different hometowns of these people.",
        "parsing_tree": "gymnast | #1 = Scan Table [ people ] Distinct [ true ] Output [ Hometown ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Hometown) AS Count_Dist_Hometown ]"
    },
    {
        "id": "5c07e1ade285ca744ec069fa150b6eab90afa4a84876a913fa628f5b96e2fe1d",
        "question": "Show the ages of gymnasts in descending order of total points.",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Gymnast_ID , Total_Points ] ; #2 = Scan Table [ people ] Output [ People_ID , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Output [ #1.Total_Points , #2.Age ] ; #4 = Sort [ #3 ] OrderBy [ Total_Points DESC ] Output [ Total_Points , Age ]"
    },
    {
        "id": "d77ec6fead1a3153f63c644509d580ddb7606c96b9c05304ed443411eecf5be9",
        "question": "What are the ages of the gymnasts, ordered descending by their total points?",
        "parsing_tree": "gymnast | #1 = Scan Table [ gymnast ] Output [ Gymnast_ID , Total_Points ] ; #2 = Scan Table [ people ] Output [ People_ID , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Gymnast_ID = #2.People_ID ] Output [ #1.Total_Points , #2.Age ] ; #4 = Sort [ #3 ] OrderBy [ Total_Points DESC ] Output [ Total_Points , Age ]"
    },
    {
        "id": "bae5863c21d436e15f6117bf943b5c91060e230bdd6825ffd9a0d441df7334d6",
        "question": "Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ ACCOUNTS ] Predicate [ name <> 'Brown' ] Output [ name , custid ] ; #2 = Scan Table [ SAVINGS ] Output [ custid , balance ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.custid = #2.custid ] Output [ #2.balance ] ; #4 = Aggregate [ #3 ] Output [ SUM(balance) AS Sum_balance ]"
    },
    {
        "id": "eaea96d8c4b7202301c7c555013477127fa80eb8e10a2f31d41c653d41d5ecad",
        "question": "What is the total balance of savings accounts not belonging to someone with the name Brown?",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ ACCOUNTS ] Predicate [ name <> 'Brown' ] Output [ name , custid ] ; #2 = Scan Table [ SAVINGS ] Output [ custid , balance ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.custid = #2.custid ] Output [ #2.balance ] ; #4 = Aggregate [ #3 ] Output [ SUM(balance) AS Sum_balance ]"
    },
    {
        "id": "1802aa6492da6ecd3dc230e73a256259eb27860bf71d2f22db02fc878bf06219",
        "question": "How many accounts are there in total?",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ ACCOUNTS ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "bc411f9da37aeaa575cc296a2598a4bfbb9313eb7f7a9f5c16d35c7c843e456a",
        "question": "Count the number of accounts.",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ ACCOUNTS ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f29f39bcccd24b91994298c6cb3db6208947c3cef5d64aa04adda5e0c21fd95f",
        "question": "What is the total checking balance in all accounts?",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ CHECKING ] Output [ balance ] ; #2 = Aggregate [ #1 ] Output [ SUM(balance) AS Sum_balance ]"
    },
    {
        "id": "a106f9081542cf93b17590a6026d77126100b34a1602ff627aa029c1b8eee5aa",
        "question": "Find the total balance across checking accounts.",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ CHECKING ] Output [ balance ] ; #2 = Aggregate [ #1 ] Output [ SUM(balance) AS Sum_balance ]"
    },
    {
        "id": "e83bb46a113047a82f112f0be153423ac12e403bdb1431d25d1dd191a6ad9d1d",
        "question": "Find the average checking balance.",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ CHECKING ] Output [ balance ] ; #2 = Aggregate [ #1 ] Output [ AVG(balance) AS Avg_balance ]"
    },
    {
        "id": "04e46ea5e2784caad2ebad0a251d781e7f429ff5f114aed966350d4fcab047ec",
        "question": "What is the average balance in checking accounts?",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ CHECKING ] Output [ balance ] ; #2 = Aggregate [ #1 ] Output [ AVG(balance) AS Avg_balance ]"
    },
    {
        "id": "fce8f8d4fab6da712ce920402b6f0b864542803eb2d5c427ed4ce1b4e735dcc1",
        "question": "How many accounts have a savings balance above the average savings balance?",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ SAVINGS ] Output [ balance ] ; #2 = Aggregate [ #1 ] Output [ AVG(balance) AS Avg_balance ] ; #3 = Scan Table [ SAVINGS ] Output [ balance ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.balance > #2.Avg_balance ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b9f3f83a3b4065e79fe6d2e9749b238409a8a881e28f42162e7196a669b0263e",
        "question": "Find the number of accounts with a savings balance that is higher than the average savings balance.",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ SAVINGS ] Output [ balance ] ; #2 = Aggregate [ #1 ] Output [ AVG(balance) AS Avg_balance ] ; #3 = Scan Table [ SAVINGS ] Output [ balance ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.balance > #2.Avg_balance ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "37a1007824219c2da55fdc3598c32842e9628f6630b033f351464c24f2227494",
        "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #2 = Scan Table [ CHECKING ] Output [ balance ] ; #3 = Aggregate [ #2 ] Output [ MAX(balance) AS Max_balance ] ; #4 = Scan Table [ CHECKING ] Output [ custid , balance ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.balance < #3.Max_balance ] Output [ #4.custid ] ; #6 = Join [ #1 , #5 ] Predicate [ #5.custid = #1.custid ] Output [ #1.custid , #1.name ]"
    },
    {
        "id": "87c71ba72d7b4c802de532ad1a7d44f293eb3855070d6bb9dd0c26883be5b370",
        "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #2 = Scan Table [ CHECKING ] Output [ balance ] ; #3 = Aggregate [ #2 ] Output [ MAX(balance) AS Max_balance ] ; #4 = Scan Table [ CHECKING ] Output [ custid , balance ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.balance < #3.Max_balance ] Output [ #4.custid ] ; #6 = Join [ #1 , #5 ] Predicate [ #5.custid = #1.custid ] Output [ #1.custid , #1.name ]"
    },
    {
        "id": "e0368606e94c79c648834afd596b832374d372f492fa2fc3b3c90da2f7367191",
        "question": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ ACCOUNTS ] Predicate [ name like '%ee%' ] Output [ name , custid ] ; #2 = Scan Table [ CHECKING ] Output [ custid , balance ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.custid = #2.custid ] Output [ #2.balance ]"
    },
    {
        "id": "7ef2cf63f77db395bf09cdde0cddcbe1153ab4f69ccc68a0714ba2c4e75b0d33",
        "question": "Find the balance of the checking account belonging to an owner whose name contains 'ee'.",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ ACCOUNTS ] Predicate [ name like '%ee%' ] Output [ name , custid ] ; #2 = Scan Table [ CHECKING ] Output [ custid , balance ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.custid = #2.custid ] Output [ #2.balance ]"
    },
    {
        "id": "bac7ecf5672a721217240bdc426cc15b499e634134b43fbb1322f0f01a1ec19e",
        "question": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ CHECKING ] Output [ balance ] ; #2 = Aggregate [ #1 ] Output [ AVG(balance) AS Avg_balance ] ; #3 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #4 = Scan Table [ CHECKING ] Output [ custid , balance ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.custid = #3.custid ] Output [ #3.name , #4.balance ] ; #6 = Join [ #2 , #5 ] Predicate [ #5.balance > #2.Avg_balance ] Output [ #5.name ] ; #7 = Aggregate [ #6 ] GroupBy [ name ] Output [ name ] ; #8 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #9 = Scan Table [ SAVINGS ] Output [ balance ] ; #10 = Aggregate [ #9 ] Output [ AVG(balance) AS Avg_balance ] ; #11 = Scan Table [ SAVINGS ] Output [ custid , balance ] ; #12 = Join [ #10 , #11 ] Predicate [ #11.balance < #10.Avg_balance ] Output [ #11.custid ] ; #13 = Join [ #8 , #12 ] Predicate [ #12.custid = #8.custid ] Output [ #8.name ] ; #14 = Intersect [ #7 , #13 ] Predicate [ #7.name = #13.name ] Output [ #7.name ]"
    },
    {
        "id": "eba91b3d7222d2ee8521b8b11ecbe48aac0c809bfef13ba3baa1dbbe974b67a7",
        "question": "What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ CHECKING ] Output [ balance ] ; #2 = Aggregate [ #1 ] Output [ AVG(balance) AS Avg_balance ] ; #3 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #4 = Scan Table [ CHECKING ] Output [ custid , balance ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.custid = #3.custid ] Output [ #3.name , #4.balance ] ; #6 = Join [ #2 , #5 ] Predicate [ #5.balance > #2.Avg_balance ] Output [ #5.name ] ; #7 = Aggregate [ #6 ] GroupBy [ name ] Output [ name ] ; #8 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #9 = Scan Table [ SAVINGS ] Output [ balance ] ; #10 = Aggregate [ #9 ] Output [ AVG(balance) AS Avg_balance ] ; #11 = Scan Table [ SAVINGS ] Output [ custid , balance ] ; #12 = Join [ #10 , #11 ] Predicate [ #11.balance < #10.Avg_balance ] Output [ #11.custid ] ; #13 = Join [ #8 , #12 ] Predicate [ #12.custid = #8.custid ] Output [ #8.name ] ; #14 = Intersect [ #7 , #13 ] Predicate [ #7.name = #13.name ] Output [ #7.name ]"
    },
    {
        "id": "85ffeeeb263b06b7203435e2eefe99b555e0e4c8ddbf7c5c76b07c11b51ade39",
        "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ SAVINGS ] Output [ balance ] ; #2 = Aggregate [ #1 ] Output [ AVG(balance) AS Avg_balance ] ; #3 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #4 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.name = #4.name ] Output [ #3.custid ] ; #6 = Scan Table [ SAVINGS ] Output [ custid , balance ] ; #7 = Join [ #5 , #6 ] Predicate [ #6.custid = #5.custid ] Output [ #6.balance , #5.custid ] ; #8 = Join [ #2 , #7 ] Predicate [ #7.balance > #2.Avg_balance ] Output [ #7.custid ] ; #9 = Aggregate [ #8 ] GroupBy [ custid ] Output [ custid ] ; #10 = Scan Table [ CHECKING ] Output [ custid , balance ] ; #11 = Join [ #9 , #10 ] Predicate [ #10.custid = #9.custid ] Output [ #10.balance ]"
    },
    {
        "id": "6fb5d97aa26d048c5787c6459a9f6419913afc31894a65a2f6d5423112cb7edc",
        "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ SAVINGS ] Output [ balance ] ; #2 = Aggregate [ #1 ] Output [ AVG(balance) AS Avg_balance ] ; #3 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #4 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.name = #4.name ] Output [ #3.custid ] ; #6 = Scan Table [ SAVINGS ] Output [ custid , balance ] ; #7 = Join [ #5 , #6 ] Predicate [ #6.custid = #5.custid ] Output [ #6.balance , #5.custid ] ; #8 = Join [ #2 , #7 ] Predicate [ #7.balance > #2.Avg_balance ] Output [ #7.custid ] ; #9 = Aggregate [ #8 ] GroupBy [ custid ] Output [ custid ] ; #10 = Scan Table [ CHECKING ] Output [ custid , balance ] ; #11 = Join [ #9 , #10 ] Predicate [ #10.custid = #9.custid ] Output [ #10.balance ]"
    },
    {
        "id": "80a06ff05a5678567f6f9b3266406dac380a07bea32cc473b9f640d12e1ea586",
        "question": "List all customers\u2019 names in the alphabetical order.",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ ACCOUNTS ] Output [ name ] ; #2 = Sort [ #1 ] OrderBy [ name ASC ] Output [ name ]"
    },
    {
        "id": "442e7782dade31cd509ae4e756163e403935af4e00fbbab7547874e54f8ad1bc",
        "question": "What are the names of all the customers in alphabetical order?",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ ACCOUNTS ] Output [ name ] ; #2 = Sort [ #1 ] OrderBy [ name ASC ] Output [ name ]"
    },
    {
        "id": "d90467505c5867d562e0d1600997e77dcfc7f8b58f868715ad05d87d05470862",
        "question": "Find the number of checking accounts for each account name.",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ CHECKING ] Output [ custid ] ; #2 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.custid = #2.custid ] Output [ #2.name ] ; #4 = Aggregate [ #3 ] GroupBy [ name ] Output [ name , countstar AS Count_Star ]"
    },
    {
        "id": "8348c287f10c0bd7b9b1ce62c20622aa43e83593fce1dab49d48c4b0a4354799",
        "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ CHECKING ] Output [ custid ] ; #2 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.custid = #2.custid ] Output [ #2.name ] ; #4 = Aggregate [ #3 ] GroupBy [ name ] Output [ name , countstar AS Count_Star ]"
    },
    {
        "id": "66ecd22d899a2f4b8d0a8e78d7977568414b8beeee3cb2aa4626d3a907e33695",
        "question": "Find the total saving balance for each account name.",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ SAVINGS ] Output [ custid , balance ] ; #2 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.custid = #2.custid ] Output [ #2.name , #1.balance ] ; #4 = Aggregate [ #3 ] GroupBy [ name ] Output [ name , SUM(balance) AS Sum_balance ]"
    },
    {
        "id": "4e81bce522d7af1d9f869b4359c49be30f30e1a7a9dc119b89045862ff372e69",
        "question": "What are the names of customers with accounts, and what are the total savings balances for each?",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ SAVINGS ] Output [ custid , balance ] ; #2 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.custid = #2.custid ] Output [ #2.name , #1.balance ] ; #4 = Aggregate [ #3 ] GroupBy [ name ] Output [ name , SUM(balance) AS Sum_balance ]"
    },
    {
        "id": "7893732374621d0caa3305cdb163a77a44e40c587ee6b4a6887a3926e175f614",
        "question": "Find the name of accounts whose checking balance is below the average checking balance.",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #2 = Scan Table [ CHECKING ] Output [ balance ] ; #3 = Aggregate [ #2 ] Output [ AVG(balance) AS Avg_balance ] ; #4 = Scan Table [ CHECKING ] Output [ custid , balance ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.balance < #3.Avg_balance ] Output [ #4.custid ] ; #6 = Join [ #1 , #5 ] Predicate [ #5.custid = #1.custid ] Output [ #1.name ]"
    },
    {
        "id": "7e3e5d23830bf3b4e9010b761914a85a5575bfead0281d771c36f6f007d29b69",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #2 = Scan Table [ CHECKING ] Output [ balance ] ; #3 = Aggregate [ #2 ] Output [ AVG(balance) AS Avg_balance ] ; #4 = Scan Table [ CHECKING ] Output [ custid , balance ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.balance < #3.Avg_balance ] Output [ #4.custid ] ; #6 = Join [ #1 , #5 ] Predicate [ #5.custid = #1.custid ] Output [ #1.name ]"
    },
    {
        "id": "aeba2630d401152ac6278d445d8c5073eb6e8202b10768dc5301597b9c88fb6c",
        "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ SAVINGS ] Output [ custid , balance ] ; #2 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.custid = #2.custid ] Output [ #2.name , #1.balance ] ; #4 = TopSort [ #3 ] Rows [ 3 ] OrderBy [ balance DESC ] Output [ name , balance ]"
    },
    {
        "id": "150616758925bcee698bcbd462d9989705915e96dc15db1e2f883d87d9999367",
        "question": "What are names and savings balances of the three accounts with the highest savings balances?",
        "parsing_tree": "small_bank_1 | #1 = Scan Table [ SAVINGS ] Output [ custid , balance ] ; #2 = Scan Table [ ACCOUNTS ] Output [ name , custid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.custid = #2.custid ] Output [ #2.name , #1.balance ] ; #4 = TopSort [ #3 ] Rows [ 3 ] OrderBy [ balance DESC ] Output [ name , balance ]"
    },
    {
        "id": "883d4e5906b5f08baa1cc137cbe09755d58bb0e0958fb153a14ae0d312539dc5",
        "question": "How many main stream browsers whose market share is at least 5 exist?",
        "parsing_tree": "browser_web | #1 = Scan Table [ browser ] Predicate [ market_share >= 5.0 ] Output [ market_share ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "07bbc1adf4f2cf384b85a93f188dfded25a7ba34b361f0186e0aff1d5ad0d692",
        "question": "List the name of browsers in descending order by market share.",
        "parsing_tree": "browser_web | #1 = Scan Table [ browser ] Output [ name , market_share ] ; #2 = Sort [ #1 ] OrderBy [ market_share DESC ] Output [ name , market_share ]"
    },
    {
        "id": "be1379342b13f61fc2e480d2922db54861f04bd95a259a464067526702cd6b25",
        "question": "List the ids, names and market shares of all browsers.",
        "parsing_tree": "browser_web | #1 = Scan Table [ browser ] Output [ name , market_share , id ]"
    },
    {
        "id": "68fef79be384d5b68baf274a94c1f800c4acf6aa2e45b73381ace15f190cd578",
        "question": "What is the maximum, minimum and average market share of the listed browsers?",
        "parsing_tree": "browser_web | #1 = Scan Table [ browser ] Output [ market_share ] ; #2 = Aggregate [ #1 ] Output [ AVG(market_share) AS Avg_market_share , MAX(market_share) AS Max_market_share , MIN(market_share) AS Min_market_share ]"
    },
    {
        "id": "12f56d9ac57de092d603503e4f583e7215340dc0d942f224947655f4c4098f4f",
        "question": "What is the id and market share of the browser Safari?",
        "parsing_tree": "browser_web | #1 = Scan Table [ browser ] Predicate [ name = 'Safari' ] Output [ market_share , name , id ]"
    },
    {
        "id": "b2537e4dce9e1cf25f179c6e4d74fe9146e92d48afe9eed19f7abd53fd3527e5",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "parsing_tree": "browser_web | #1 = Scan Table [ Web_client_accelerator ] Predicate [ Connection <> 'Broadband' ] Output [ name , Connection , Operating_system ]"
    },
    {
        "id": "d01827364914a2ceefd1965819f0d950561b54fd67d5892f25ea924f2a2b8bba",
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "parsing_tree": "browser_web | #1 = Scan Table [ Web_client_accelerator ] Predicate [ name = 'CProxy' ] Output [ name , id ] ; #2 = Scan Table [ accelerator_compatible_browser ] Predicate [ compatible_since_year > 1998 ] Output [ compatible_since_year , browser_id , accelerator_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.accelerator_id ] Output [ #2.browser_id ] ; #4 = Scan Table [ browser ] Output [ name , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.browser_id = #4.id ] Output [ #4.name ]"
    },
    {
        "id": "82ef08760bb438a0675d1f76ebba812bb7d36b72b99d843addf870f92c9f4c02",
        "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "parsing_tree": "browser_web | #1 = Scan Table [ accelerator_compatible_browser ] Output [ accelerator_id ] ; #2 = Aggregate [ #1 ] GroupBy [ accelerator_id ] Output [ countstar AS Count_Star , accelerator_id ] ; #3 = Scan Table [ Web_client_accelerator ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.accelerator_id = #3.id ] Output [ #3.name , #3.id , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name , id ]"
    },
    {
        "id": "86b3454957897e7b0ff98bdb7fd7c568b56fb24973d8d21986ca48666bd31f4d",
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "parsing_tree": "browser_web | #1 = Scan Table [ accelerator_compatible_browser ] Output [ browser_id ] ; #2 = Aggregate [ #1 ] GroupBy [ browser_id ] Output [ countstar AS Count_Star , browser_id ] ; #3 = Scan Table [ browser ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.browser_id = #3.id ] Output [ #3.name , #3.id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , id ]"
    },
    {
        "id": "26aefd8469c84bcc8cfc1b3fe36415c00e870af990fa59526786425ceb2b1bae",
        "question": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?",
        "parsing_tree": "browser_web | #1 = Scan Table [ browser ] Predicate [ name = 'Internet Explorer' ] Output [ name , id ] ; #2 = Scan Table [ Web_client_accelerator ] Predicate [ name = 'CACHEbox' ] Output [ name , id ] ; #3 = Scan Table [ accelerator_compatible_browser ] Output [ compatible_since_year , browser_id , accelerator_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.id = #3.accelerator_id ] Output [ #3.browser_id , #3.compatible_since_year ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.id = #4.browser_id ] Output [ #4.compatible_since_year ]"
    },
    {
        "id": "3064603cc0d0ab174c2632ed623901bd34c2dfb515a3873f3f763e585a853d19",
        "question": "How many different kinds of clients are supported by the web clients accelerators?",
        "parsing_tree": "browser_web | #1 = Scan Table [ Web_client_accelerator ] Distinct [ true ] Output [ Client ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Client) AS Count_Dist_Client ]"
    },
    {
        "id": "e0a6ce1edacd7d55ad9d2913b21e73d9642063d555803a9b1cd4a7ef72703a7d",
        "question": "How many accelerators are not compatible with the browsers listed ?",
        "parsing_tree": "browser_web | #1 = Scan Table [ Web_client_accelerator ] Output [ id ] ; #2 = Scan Table [ accelerator_compatible_browser ] Output [ accelerator_id ] ; #3 = Aggregate [ #2 ] GroupBy [ accelerator_id ] Output [ accelerator_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.accelerator_id = #1.id ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "531320539eeade61dccce54d3639d61638a17e4c1da53ba3bee4ac3fc1c15441",
        "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
        "parsing_tree": "browser_web | #1 = Scan Table [ browser ] Predicate [ market_share > 15.0 ] Output [ market_share , id ] ; #2 = Scan Table [ accelerator_compatible_browser ] Output [ browser_id , accelerator_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.browser_id ] Output [ #2.accelerator_id ] ; #4 = Scan Table [ Web_client_accelerator ] Output [ name , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.accelerator_id = #4.id ] Distinct [ true ] Output [ #4.name ]"
    },
    {
        "id": "3a378e811505d94934f4c63c6896bb5ebe3f9deedcdd9ee3fb97be83b6684884",
        "question": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
        "parsing_tree": "browser_web | #1 = Scan Table [ Web_client_accelerator ] Predicate [ name = 'CACHEbox' ] Output [ name , id ] ; #2 = Scan Table [ accelerator_compatible_browser ] Output [ browser_id , accelerator_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.accelerator_id ] Output [ #2.browser_id ] ; #4 = Scan Table [ browser ] Output [ name , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.browser_id = #4.id ] Distinct [ true ] Output [ #4.name ] ; #6 = Scan Table [ Web_client_accelerator ] Predicate [ name = 'Fasterfox' ] Output [ name , id ] ; #7 = Scan Table [ accelerator_compatible_browser ] Output [ browser_id , accelerator_id ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.id = #7.accelerator_id ] Output [ #7.browser_id ] ; #9 = Scan Table [ browser ] Output [ name , id ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.browser_id = #9.id ] Output [ #9.name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.name = #10.name ] Output [ #5.name ]"
    },
    {
        "id": "ed498a35eea638436a509bc949f52deb72a67419c9996926883da3c4f437e23e",
        "question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.",
        "parsing_tree": "browser_web | #1 = Scan Table [ Web_client_accelerator ] Distinct [ true ] Output [ name , Operating_system ] ; #2 = Scan Table [ browser ] Predicate [ name = 'Opera' ] Output [ name , id ] ; #3 = Scan Table [ accelerator_compatible_browser ] Output [ browser_id , accelerator_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.id = #3.browser_id ] Output [ #3.accelerator_id ] ; #5 = Scan Table [ Web_client_accelerator ] Output [ name , id , Operating_system ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.accelerator_id = #5.id ] Output [ #5.name , #5.Operating_system ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.name = #6.name ] Output [ #1.name , #1.Operating_system ]"
    },
    {
        "id": "17cc38adb3a22921eb2852297d31713669d64da47f9d8b4b068b80d4ffedc5b4",
        "question": "Which accelerator name contains substring \"Opera\"?",
        "parsing_tree": "browser_web | #1 = Scan Table [ Web_client_accelerator ] Predicate [ name like '%Opera%' ] Output [ name ]"
    },
    {
        "id": "271d959b308ee126d92699490f51545f8c96cc48b0d51c19e36079be15c7f10f",
        "question": "Find the number of web accelerators used for each Operating system.",
        "parsing_tree": "browser_web | #1 = Scan Table [ Web_client_accelerator ] Output [ Operating_system ] ; #2 = Aggregate [ #1 ] GroupBy [ Operating_system ] Output [ countstar AS Count_Star , Operating_system ]"
    },
    {
        "id": "67e1cb51b2fc1c6019e9d2030d0c75296f084e691aec6327b5f68dd057b0d29c",
        "question": "How many wrestlers are there?",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "93536cfa568e4d866ced4dbdf5c4610976cae7f9f0b583d571381125bf0f4629",
        "question": "Count the number of wrestlers.",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7695e912614de0f2570a78ee97b418c937b80877e2c7017155f8a8744b41edc2",
        "question": "List the names of wrestlers in descending order of days held.",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ Days_held , Name ] ; #2 = Sort [ #1 ] OrderBy [ Days_held DESC ] Output [ Days_held , Name ]"
    },
    {
        "id": "16fae569187819b3240ed053e36f92bc92878e816a425667ace022ea6a08d689",
        "question": "What are the names of the wrestlers, ordered descending by days held?",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ Days_held , Name ] ; #2 = Sort [ #1 ] OrderBy [ Days_held DESC ] Output [ Days_held , Name ]"
    },
    {
        "id": "7f72a42964ff5301fba29ffd01506988b504f2eaf0524ed686d8a63aee2bec7f",
        "question": "What is the name of the wrestler with the fewest days held?",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ Days_held , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Days_held ASC ] Output [ Days_held , Name ]"
    },
    {
        "id": "30c139a3b2a65f5ae5e5b031639396469b2243c4aa54ad2439770dcf04c59b81",
        "question": "Return the name of the wrestler who had the lowest number of days held.",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ Days_held , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Days_held ASC ] Output [ Days_held , Name ]"
    },
    {
        "id": "335380e7da51e703027f9404195ab2f95dc095cdf456b5f955815765f9371e62",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Predicate [ Location <> 'Tokyo , Japan' ] Distinct [ true ] Output [ Reign ]"
    },
    {
        "id": "98749a09d350d2dd4dc5da509518aec2a1cd5f39bc32032628f575b0cd7af694",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Predicate [ Location <> 'Tokyo , Japan' ] Distinct [ true ] Output [ Reign ]"
    },
    {
        "id": "e7b74ad0d3f9d4025dcb0ebf32ad5fe253fcc8adcf02c90a5fb5f24ab23a999c",
        "question": "What are the names and location of the wrestlers?",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ Location , Name ]"
    },
    {
        "id": "3456c01f6fe182146410d867ce327230a61cdd270b827b084b18b1fc4c37edac",
        "question": "Give the names and locations of all wrestlers.",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ Location , Name ]"
    },
    {
        "id": "c13d3c78ecdb27ea620d8e6ac4c500e549e1cc228d2e0d57fe248b0c14322912",
        "question": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Predicate [ Team = 'Team Orton' ] Output [ Team , Elimination_Move ]"
    },
    {
        "id": "2e7262a2b35ec05eb3e494585ec8bbd165eab1238028b85629ffa092782bc15f",
        "question": "Return the elimination movies of wrestlers on Team Orton.",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Predicate [ Team = 'Team Orton' ] Output [ Team , Elimination_Move ]"
    },
    {
        "id": "6d7a164f5426d72eae3708a417ed5dded4e3b6557001805bd1a58394e28ac1ff",
        "question": "What are the names of wrestlers and the elimination moves?",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Output [ Wrestler_ID , Elimination_Move ] ; #2 = Scan Table [ wrestler ] Output [ Wrestler_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Wrestler_ID = #2.Wrestler_ID ] Output [ #2.Name , #1.Elimination_Move ]"
    },
    {
        "id": "8fb66151032e2122546cfd543e2d30e7abfda9060d50d14dfe3914da1c8a856f",
        "question": "Give the names of wrestlers and their elimination moves.",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Output [ Wrestler_ID , Elimination_Move ] ; #2 = Scan Table [ wrestler ] Output [ Wrestler_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Wrestler_ID = #2.Wrestler_ID ] Output [ #2.Name , #1.Elimination_Move ]"
    },
    {
        "id": "51c7ca421a46acea616f47d3c4b19ce625b7ef77989e63951ef0c52f8f5a34f0",
        "question": "List the names of wrestlers and the teams in elimination in descending order of days held.",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Output [ Wrestler_ID , Team ] ; #2 = Scan Table [ wrestler ] Output [ Wrestler_ID , Name , Days_held ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Wrestler_ID = #2.Wrestler_ID ] Output [ #2.Name , #2.Days_held , #1.Team ] ; #4 = Sort [ #3 ] OrderBy [ Days_held DESC ] Output [ Days_held , Name , Team ]"
    },
    {
        "id": "33f3271eb14e306c352597950af36b53e35357504f17421c3cb84e1935b6eb4e",
        "question": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Output [ Wrestler_ID , Team ] ; #2 = Scan Table [ wrestler ] Output [ Wrestler_ID , Name , Days_held ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Wrestler_ID = #2.Wrestler_ID ] Output [ #2.Name , #2.Days_held , #1.Team ] ; #4 = Sort [ #3 ] OrderBy [ Days_held DESC ] Output [ Days_held , Name , Team ]"
    },
    {
        "id": "316a936368606ab04a8c2462bb82d4e57665760e8a045d8ff29dab5394e2ac2f",
        "question": "List the time of elimination of the wrestlers with largest days held.",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Output [ Wrestler_ID , Time ] ; #2 = Scan Table [ wrestler ] Output [ Wrestler_ID , Days_held ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Wrestler_ID = #2.Wrestler_ID ] Output [ #1.Time , #2.Days_held ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Days_held DESC ] Output [ Days_held , Time ]"
    },
    {
        "id": "1d603ce73893df77a9f7e1aec7c98226b5c82d58ad09f5e2482fc99524536ce9",
        "question": "What is the time of elimination for the wrestler with the most days held?",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Output [ Wrestler_ID , Time ] ; #2 = Scan Table [ wrestler ] Output [ Wrestler_ID , Days_held ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Wrestler_ID = #2.Wrestler_ID ] Output [ #1.Time , #2.Days_held ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Days_held DESC ] Output [ Days_held , Time ]"
    },
    {
        "id": "a10e347659502c87ebbc9fabf6c5cc4e935b0cd57b775b6e0bd8ce7cf387bea1",
        "question": "Show times of elimination of wrestlers with days held more than 50.",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Predicate [ Days_held > 50 ] Output [ Wrestler_ID , Days_held ] ; #2 = Scan Table [ Elimination ] Output [ Wrestler_ID , Time ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Wrestler_ID = #2.Wrestler_ID ] Output [ #2.Time ]"
    },
    {
        "id": "b77334b803ea181a0e1d8f8b6a486634d5a7c63df87ba65a4280a1551d09672b",
        "question": "What are the times of elimination for wrestlers with over 50 days held?",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Predicate [ Days_held > 50 ] Output [ Wrestler_ID , Days_held ] ; #2 = Scan Table [ Elimination ] Output [ Wrestler_ID , Time ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Wrestler_ID = #2.Wrestler_ID ] Output [ #2.Time ]"
    },
    {
        "id": "f787479a593b0e041a7e4a62decda9141e6ad6135650a346cdd36a986a99bce1",
        "question": "Show different teams in eliminations and the number of eliminations from each team.",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Output [ Team ] ; #2 = Aggregate [ #1 ] GroupBy [ Team ] Output [ countstar AS Count_Star , Team ]"
    },
    {
        "id": "e602ec617109924b644f02970d9c01bafb6cded7eee614bb89084d1543cebad7",
        "question": "How many eliminations did each team have?",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Output [ Team ] ; #2 = Aggregate [ #1 ] GroupBy [ Team ] Output [ countstar AS Count_Star , Team ]"
    },
    {
        "id": "162c4a46a294d959c5a1dc1c2abd5e6459103adf66616d08f66b015b64f2f41f",
        "question": "Show teams that have suffered more than three eliminations.",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Output [ Team ] ; #2 = Aggregate [ #1 ] GroupBy [ Team ] Output [ countstar AS Count_Star , Team ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ Team ]"
    },
    {
        "id": "c32f44349f1e68e8a13d37f428d93f7d352875fc7a722a7f927d42b3833afddd",
        "question": "Which teams had more than 3 eliminations?",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Output [ Team ] ; #2 = Aggregate [ #1 ] GroupBy [ Team ] Output [ countstar AS Count_Star , Team ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ Team ]"
    },
    {
        "id": "3651831c5355288c29ef0014bd364d4501d579a517a2b484cd189706722adce1",
        "question": "Show the reign and days held of wrestlers.",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ Days_held , Reign ]"
    },
    {
        "id": "7d10c6dc8905172688046fd329c99e4efb38103f4884b989697fae52a1d0b886",
        "question": "What are the reigns and days held of all wrestlers?",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ Days_held , Reign ]"
    },
    {
        "id": "5a2d1903f08fff9c1ecf48a24132d7cab1dde055f98421c0c17fa3895fc2db32",
        "question": "What are the names of wrestlers days held less than 100?",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Predicate [ Days_held < 100 ] Output [ Days_held , Name ]"
    },
    {
        "id": "f7801cf57dc01b91711556a297164d3e00f54481c4e909221f583df1c5caf9c4",
        "question": "Return the names of wrestlers with fewer than 100 days held.",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Predicate [ Days_held < 100 ] Output [ Days_held , Name ]"
    },
    {
        "id": "7c38e5a83102ec78dc9ec40645cfdba5abc47b1e2e48398044afb79f81dacd74",
        "question": "Please show the most common reigns of wrestlers.",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ Reign ] ; #2 = Aggregate [ #1 ] GroupBy [ Reign ] Output [ countstar AS Count_Star , Reign ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Reign ]"
    },
    {
        "id": "b34404ee0aa30166c04bbb379fe4609dbcd881e97e14c7b3a97ed88655a160fb",
        "question": "Which reign is the most common among wrestlers?",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ Reign ] ; #2 = Aggregate [ #1 ] GroupBy [ Reign ] Output [ countstar AS Count_Star , Reign ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Reign ]"
    },
    {
        "id": "85b261ece54e4f211f48aa422095110a6e7c2913a18ea28190e2a6d8bbf40c1a",
        "question": "List the locations that are shared by more than two wrestlers.",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Location ]"
    },
    {
        "id": "bc7466366f277b720449a47df49a806a570f525b0b00afeb681fb3bb515b3c42",
        "question": "Which locations are shared by more than two wrestlers?",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Location ]"
    },
    {
        "id": "5587af8aaedf965fa2d64baf9eb7cf5b8094dd92b1d071491adb4ac0e33f9ab2",
        "question": "List the names of wrestlers that have not been eliminated.",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ Wrestler_ID , Name ] ; #2 = Scan Table [ Elimination ] Output [ Wrestler_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Wrestler_ID IS NULL OR #1.Wrestler_ID = #2.Wrestler_ID ] Output [ #1.Name ]"
    },
    {
        "id": "9b85ec987e796085b1a1f793b4b9bbfd5f802ae32e2b2c31a4d31555947ce230",
        "question": "What are the names of wrestlers who have never been eliminated?",
        "parsing_tree": "wrestler | #1 = Scan Table [ wrestler ] Output [ Wrestler_ID , Name ] ; #2 = Scan Table [ Elimination ] Output [ Wrestler_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Wrestler_ID IS NULL OR #1.Wrestler_ID = #2.Wrestler_ID ] Output [ #1.Name ]"
    },
    {
        "id": "d8216a33b4a86d52dac36cdebbc1ea680e27eba233546fb019555ece1bb35477",
        "question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Predicate [ Eliminated_By = 'Orton' ] Distinct [ true ] Output [ Team , Eliminated_By ] ; #2 = Scan Table [ Elimination ] Predicate [ Eliminated_By = 'Benjamin' ] Output [ Team , Eliminated_By ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Team = #2.Team ] Output [ #1.Team ]"
    },
    {
        "id": "f901d728e0c1afbde47451b26d47203fdc8954f3506a4f703f2b344390f91f0e",
        "question": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Predicate [ Eliminated_By = 'Orton' ] Distinct [ true ] Output [ Team , Eliminated_By ] ; #2 = Scan Table [ Elimination ] Predicate [ Eliminated_By = 'Benjamin' ] Output [ Team , Eliminated_By ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Team = #2.Team ] Output [ #1.Team ]"
    },
    {
        "id": "23101d150007d515f19573ff2899f162f5d8f3be9665c5bc05f97c985c26f979",
        "question": "What is the number of distinct teams that suffer elimination?",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Distinct [ true ] Output [ Team ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Team) AS Count_Dist_Team ]"
    },
    {
        "id": "55a0a977e82c362c2c23f4de4426a81be6bae9f3ca48c15b6235d445bb2d6c51",
        "question": "How many different teams have had eliminated wrestlers?",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Distinct [ true ] Output [ Team ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Team) AS Count_Dist_Team ]"
    },
    {
        "id": "78c09186993d426ea4f8ac8911e79a99fcbaa2e97df69f06796bbd74fa38e4fb",
        "question": "Show the times of elimination by \"Punk\" or \"Orton\".",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Predicate [ Eliminated_By = 'Orton' OR Eliminated_By = 'Punk' ] Output [ Time , Eliminated_By ]"
    },
    {
        "id": "b5404892657a2d02d861fdd399a2a70848b8a97c98810838e2fa366e832fff8e",
        "question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?",
        "parsing_tree": "wrestler | #1 = Scan Table [ Elimination ] Predicate [ Eliminated_By = 'Orton' OR Eliminated_By = 'Punk' ] Output [ Time , Eliminated_By ]"
    },
    {
        "id": "9187e41c6e94f8396e142fe16d1e7e57b2a09ae5b55398024b747c3be5c3ea3e",
        "question": "How many schools are there?",
        "parsing_tree": "school_finance | #1 = Scan Table [ School ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "631038f6dbe845ccea675086f4e888ae2e62c5a0b084b0b5cc00c52df2892539",
        "question": "Count the number of schools.",
        "parsing_tree": "school_finance | #1 = Scan Table [ School ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d327558cc34add98fc944bd2790a3c4d5623309499f78bacf639de15dee6a46d",
        "question": "Show all school names in alphabetical order.",
        "parsing_tree": "school_finance | #1 = Scan Table [ School ] Output [ School_name ] ; #2 = Sort [ #1 ] OrderBy [ School_name ASC ] Output [ School_name ]"
    },
    {
        "id": "789e9abce9db169ab6f75455248e9eed160a42e034f97752dc2b561662d5177a",
        "question": "List the name, location, mascot for all schools.",
        "parsing_tree": "school_finance | #1 = Scan Table [ School ] Output [ School_name , Location , Mascot ]"
    },
    {
        "id": "d5e066e4b57a37326d957e84312613bf6fda7a68e371156d7de36170065b336e",
        "question": "What are the total and average enrollment of all schools?",
        "parsing_tree": "school_finance | #1 = Scan Table [ School ] Output [ Enrollment ] ; #2 = Aggregate [ #1 ] Output [ AVG(Enrollment) AS Avg_Enrollment , SUM(Enrollment) AS Sum_Enrollment ]"
    },
    {
        "id": "538efc7a320315d90564dd5fb700979944a9f248287154aaa12af1a6b8150daa",
        "question": "What are the mascots for schools with enrollments above the average?",
        "parsing_tree": "school_finance | #1 = Scan Table [ School ] Output [ Enrollment ] ; #2 = Aggregate [ #1 ] Output [ AVG(Enrollment) AS Avg_Enrollment ] ; #3 = Scan Table [ School ] Output [ Enrollment , Mascot ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Enrollment > #2.Avg_Enrollment ] Output [ #3.Mascot ]"
    },
    {
        "id": "7724df2d4d2224487ef9d5c766f582192d8ef340644c57dd53254d2930a18e38",
        "question": "List the name of the school with the smallest enrollment.",
        "parsing_tree": "school_finance | #1 = Scan Table [ School ] Output [ School_name , Enrollment ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Enrollment ASC ] Output [ School_name , Enrollment ]"
    },
    {
        "id": "3553631474560daca8f1c076cc044a4f35a650e9d76dbfb8783f5175209eb1a6",
        "question": "Show the average, maximum, minimum enrollment of all schools.",
        "parsing_tree": "school_finance | #1 = Scan Table [ School ] Output [ Enrollment ] ; #2 = Aggregate [ #1 ] Output [ MAX(Enrollment) AS Max_Enrollment , MIN(Enrollment) AS Min_Enrollment , AVG(Enrollment) AS Avg_Enrollment ]"
    },
    {
        "id": "e1e7f555d5baff55982b815baafbec3fa8ccb39a9f25bef8270f69eb00600bf5",
        "question": "Show each county along with the number of schools and total enrollment in each county.",
        "parsing_tree": "school_finance | #1 = Scan Table [ School ] Output [ Enrollment , County ] ; #2 = Aggregate [ #1 ] GroupBy [ County ] Output [ countstar AS Count_Star , County , SUM(Enrollment) AS Sum_Enrollment ]"
    },
    {
        "id": "9b5360903419ec5da0cc29fda05347408afd9aa65d219b3f34e71132676afbe4",
        "question": "How many donors have endowment for school named \"Glenn\"?",
        "parsing_tree": "school_finance | #1 = Scan Table [ School ] Predicate [ School_name = 'Glenn' ] Output [ School_name , School_id ] ; #2 = Scan Table [ endowment ] Output [ donator_name , School_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_id = #2.School_id ] Distinct [ true ] Output [ #2.donator_name ] ; #4 = Aggregate [ #3 ] Output [ COUNT(donator_name) AS Count_donator_name ]"
    },
    {
        "id": "5544c93642c1e93ff2156e26a1b8eb601b92f0a9d5fe117f0226f0ae1fe3a216",
        "question": "List the names of the schools without any endowment.",
        "parsing_tree": "school_finance | #1 = Scan Table [ School ] Output [ School_name , School_id ] ; #2 = Scan Table [ endowment ] Output [ School_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.School_id IS NULL OR #1.School_id = #2.School_id ] Output [ #1.School_name ]"
    },
    {
        "id": "983b51d9c974cc13b8c6a9883251b590b2c9770c89e98cdcaa16c2e71ddf1a1a",
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "parsing_tree": "school_finance | #1 = Scan Table [ endowment ] Output [ amount , School_id ] ; #2 = Aggregate [ #1 ] GroupBy [ School_id ] Output [ SUM(amount) AS Sum_amount , School_id ] ; #3 = Scan Table [ School ] Output [ School_name , School_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.School_id = #3.School_id ] Output [ #2.Sum_amount , #3.School_name ] ; #5 = Filter [ #4 ] Predicate [ Sum_amount <= 10.0 ] Output [ School_name ]"
    },
    {
        "id": "b5e5cf5747fec4b381db026d5c0ec77b2547b22370d7fe7a69adbf8b27ba108d",
        "question": "Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"",
        "parsing_tree": "school_finance | #1 = Scan Table [ School ] Predicate [ School_name = 'Glenn' ] Output [ School_name , School_id ] ; #2 = Scan Table [ endowment ] Output [ donator_name , School_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_id = #2.School_id ] Distinct [ true ] Output [ #2.donator_name ] ; #4 = Scan Table [ School ] Predicate [ School_name = 'Triton' ] Output [ School_name , School_id ] ; #5 = Scan Table [ endowment ] Output [ donator_name , School_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.School_id = #5.School_id ] Output [ #5.donator_name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.donator_name = #6.donator_name ] Output [ #3.donator_name ]"
    },
    {
        "id": "03c4cf901f68fddda1c4d55762e797ea21f53ef6eb60916532dd3aa936905d00",
        "question": "Show the names of all the donors except those whose donation amount less than 9.",
        "parsing_tree": "school_finance | #1 = Scan Table [ endowment ] Distinct [ true ] Output [ donator_name ] ; #2 = Scan Table [ endowment ] Predicate [ amount < 9.0 ] Output [ amount , donator_name ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.donator_name = #2.donator_name ] Output [ #1.donator_name ]"
    },
    {
        "id": "96d6e420646d218fd7fab89ccac4170bbf66fca089a31b2b451c7d7a8b075d82",
        "question": "List the amount and donor name for the largest amount of donation.",
        "parsing_tree": "school_finance | #1 = Scan Table [ endowment ] Output [ amount , donator_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ amount DESC ] Output [ amount , donator_name ]"
    },
    {
        "id": "3f037739becb9d17143ea06c27186bec084bb0b3370d03ac5fd8912659d8a983",
        "question": "How many budgets are above 3000 in year 2001 or before?",
        "parsing_tree": "school_finance | #1 = Scan Table [ budget ] Predicate [ Budgeted > 3000 AND Year <= 2001 ] Output [ Budgeted , Year ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "62f890f5fb970cdfa8c82552e39a19ffea0bc9b8e242f4a92be7bf9fc707024e",
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "parsing_tree": "school_finance | #1 = Scan Table [ budget ] Predicate [ Budgeted > 3000 AND Year <= 2001 ] Output [ Budgeted , Year ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d53034fcba1ebc5bc34f888ced6095cb4a919781ca42011cb72955a26d596f4e",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "parsing_tree": "school_finance | #1 = Scan Table [ budget ] Predicate [ Year >= 2002 ] Output [ Budgeted , Invested , Year , School_id ] ; #2 = Scan Table [ School ] Output [ School_name , School_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_id = #2.School_id ] Output [ #1.Invested , #1.Budgeted , #2.School_name ]"
    },
    {
        "id": "f3ceaa42bbfa2036a5837ebd9e9169f983e0313e0f5bee5b1fb4e2c4a66be115",
        "question": "Show all donor names.",
        "parsing_tree": "school_finance | #1 = Scan Table [ endowment ] Distinct [ true ] Output [ donator_name ]"
    },
    {
        "id": "62c34a0aa5087fcfc6ab59e49c400168bc528e773debad72d795da3107ee7b9a",
        "question": "How many budget record has a budget amount smaller than the invested amount?",
        "parsing_tree": "school_finance | #1 = Scan Table [ budget ] Predicate [ Budgeted < Invested ] Output [ Budgeted , Invested ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0ea23538c40aaacb6f48b9b154bb213f5d025ce678c45116f016ccb9c7e884a3",
        "question": "What is the total budget amount for school \"Glenn\" in all years?",
        "parsing_tree": "school_finance | #1 = Scan Table [ School ] Predicate [ School_name = 'Glenn' ] Output [ School_name , School_id ] ; #2 = Scan Table [ budget ] Output [ Budgeted , School_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_id = #2.School_id ] Output [ #2.Budgeted ] ; #4 = Aggregate [ #3 ] Output [ SUM(Budgeted) AS Sum_Budgeted ]"
    },
    {
        "id": "6e36f3ab9ee1a3a2cc00677c08494aeafe419c26441c8b93bc7a4bbc6abc155c",
        "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
        "parsing_tree": "school_finance | #1 = Scan Table [ budget ] Output [ Budgeted , School_id ] ; #2 = Scan Table [ School ] Output [ School_name , School_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_id = #2.School_id ] Output [ #1.Budgeted , #2.School_name , #2.School_id ] ; #4 = Scan Table [ endowment ] Output [ amount , School_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.School_id = #4.School_id ] Output [ #3.Budgeted , #4.amount , #3.School_name ] ; #6 = Aggregate [ #5 ] GroupBy [ School_name ] Output [ School_name , SUM(Budgeted) AS Sum_Budgeted , SUM(amount) AS Sum_amount ] ; #7 = Filter [ #6 ] Predicate [ Sum_Budgeted > 100 OR Sum_amount > 10.0 ] Output [ School_name ]"
    },
    {
        "id": "42c1bd3fa8adf26e97f789b93dc2f3bc08b697c33d28f8d90b988541eb2f851f",
        "question": "Find the names of schools that have more than one donator with donation amount above 8.5.",
        "parsing_tree": "school_finance | #1 = Scan Table [ School ] Output [ School_name , School_id ] ; #2 = Scan Table [ endowment ] Predicate [ amount > 8.5 ] Output [ amount , School_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_id = #2.School_id ] Output [ #1.School_name , #2.School_id ] ; #4 = Aggregate [ #3 ] GroupBy [ School_id ] Output [ School_name , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ School_name ]"
    },
    {
        "id": "6421ed6c2ddce23398191bdf8995c5dcc4adc70d2e843ce437e67f0bb23f48dc",
        "question": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.",
        "parsing_tree": "school_finance | #1 = Scan Table [ budget ] Predicate [ Budgeted > 6000 OR Year < 2003 ] Output [ Budgeted , total_budget_percent_budgeted , School_id , total_budget_percent_invested , Year ] ; #2 = Scan Table [ School ] Output [ School_name , Mascot , School_id , IHSAA_Football_Class ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_id = #2.School_id ] Output [ #1.total_budget_percent_invested , #2.Mascot , #2.School_name , #1.total_budget_percent_budgeted , #2.IHSAA_Football_Class ] ; #4 = Sort [ #3 ] OrderBy [ total_budget_percent_invested ASC , total_budget_percent_budgeted ASC ] Output [ total_budget_percent_budgeted , School_name , Mascot , total_budget_percent_invested , IHSAA_Football_Class ]"
    },
    {
        "id": "a4f4cb7e688db8c4a952f72f9125cd4da93bfaeb166776e85b99310b01a1233d",
        "question": "How many buildings are there?",
        "parsing_tree": "protein_institute | #1 = Scan Table [ building ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6123d7a65ef61e048ef2612e140b437018356cdcbea15cb5258f8cc19c18839a",
        "question": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.",
        "parsing_tree": "protein_institute | #1 = Scan Table [ building ] Output [ Name , Street_address , Floors ] ; #2 = Sort [ #1 ] OrderBy [ Floors ASC ] Output [ Name , Street_address , Floors ]"
    },
    {
        "id": "d420402f285dd4f0a850ab6f5bbe6f4fa6ed929259034f32e98a80585769fd5f",
        "question": "What is the name of the tallest building?",
        "parsing_tree": "protein_institute | #1 = Scan Table [ building ] Output [ Height_feet , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Height_feet DESC ] Output [ Height_feet , Name ]"
    },
    {
        "id": "8eb835436f03ca2c7f63275069b2c8cc495fd4d7501c271d8be272897ed145f8",
        "question": "What are the average, maximum, and minimum number of floors for all buildings?",
        "parsing_tree": "protein_institute | #1 = Scan Table [ building ] Output [ Floors ] ; #2 = Aggregate [ #1 ] Output [ MIN(Floors) AS Min_Floors , MAX(Floors) AS Max_Floors , AVG(Floors) AS Avg_Floors ]"
    },
    {
        "id": "0e29972729ccbbe6bf13e634e48ea7c29b5e5e1867b1e70a704715f03efd88d6",
        "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.",
        "parsing_tree": "protein_institute | #1 = Scan Table [ building ] Predicate [ Height_feet >= 200 AND Floors >= 20 ] Output [ Height_feet , Name , Floors ]"
    },
    {
        "id": "b5ccbfd88f0e6ab4b358e12149020486604c099cc28a366aab585893634bfbb5",
        "question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
        "parsing_tree": "protein_institute | #1 = Scan Table [ Institution ] Predicate [ Founded > 1990.0 AND Type = 'Private' ] Output [ Location , Type , Institution , Founded ]"
    },
    {
        "id": "5b2e8c297af89e3afe4785e0c7fe3dc25f8d7a5c680162039cfb9fafa1e19993",
        "question": "Show institution types, along with the number of institutions and total enrollment for each type.",
        "parsing_tree": "protein_institute | #1 = Scan Table [ Institution ] Output [ Type , Enrollment ] ; #2 = Aggregate [ #1 ] GroupBy [ Type ] Output [ countstar AS Count_Star , Type , SUM(Enrollment) AS Sum_Enrollment ]"
    },
    {
        "id": "c2c55276b1ac198444b1efcdd0b9a5a859a3da8039819ef6dec6d5098da4745d",
        "question": "Show the institution type with the largest number of institutions.",
        "parsing_tree": "protein_institute | #1 = Scan Table [ Institution ] Output [ Type ] ; #2 = Aggregate [ #1 ] GroupBy [ Type ] Output [ countstar AS Count_Star , Type ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Type ]"
    },
    {
        "id": "91839ef7ab157637b1fd3554c853c2345b727f34f8d9293215aa8e2050809a98",
        "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "parsing_tree": "protein_institute | #1 = Scan Table [ Institution ] Predicate [ Founded > 1990.0 AND Enrollment >= 1000 ] Output [ Type , Enrollment , Founded ]"
    },
    {
        "id": "b13f1421ad35b19b183d409b478af1be7342063421d9a024465e088d0047e35c",
        "question": "Show the name of buildings that do not have any institution.",
        "parsing_tree": "protein_institute | #1 = Scan Table [ building ] Output [ Name , building_id ] ; #2 = Scan Table [ Institution ] Output [ building_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.building_id IS NULL OR #1.building_id = #2.building_id ] Output [ #1.Name ]"
    },
    {
        "id": "5b86da81c08717bf0d2ea2f90a63efe2650afc00554c2cb833a93aaae93a0d14",
        "question": "Show the names of buildings except for those having an institution founded in 2003.",
        "parsing_tree": "protein_institute | #1 = Scan Table [ building ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ Institution ] Predicate [ Founded = 2003.0 ] Output [ Founded , building_id ] ; #3 = Scan Table [ building ] Output [ Name , building_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.building_id = #3.building_id ] Output [ #3.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Name ]"
    },
    {
        "id": "a99f0d04a68a9dbfa6b840f802f1eb1e7935e1ae49cda053b9a74beefaec164e",
        "question": "For each building, show the name of the building and the number of institutions in it.",
        "parsing_tree": "protein_institute | #1 = Scan Table [ Institution ] Output [ building_id ] ; #2 = Aggregate [ #1 ] GroupBy [ building_id ] Output [ countstar AS Count_Star , building_id ] ; #3 = Scan Table [ building ] Output [ Name , building_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.building_id = #3.building_id ] Output [ #3.Name , #2.Count_Star ]"
    },
    {
        "id": "3387130898b243d4cbaaa718dbe507937d49f8f8aa00da43882d56ab6afccbf9",
        "question": "Show the names and heights of buildings with at least two institutions founded after 1880.",
        "parsing_tree": "protein_institute | #1 = Scan Table [ building ] Output [ Height_feet , Name , building_id ] ; #2 = Scan Table [ Institution ] Predicate [ Founded > 1880.0 ] Output [ Founded , building_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.building_id = #2.building_id ] Output [ #1.Name , #1.Height_feet , #1.building_id ] ; #4 = Aggregate [ #3 ] GroupBy [ building_id ] Output [ Height_feet , countstar AS Count_Star , Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Height_feet , Name ]"
    },
    {
        "id": "06ab9eab242ccc9844b6f395ae1559bb033d70d6c8ac84607aeadec43b8e3c05",
        "question": "Show all the distinct institution types.",
        "parsing_tree": "protein_institute | #1 = Scan Table [ Institution ] Distinct [ true ] Output [ Type ]"
    },
    {
        "id": "32a5eeaadd738f05c4be439c02d06bf3df4686fecf13e020809c6bd9000c842a",
        "question": "Show institution names along with the number of proteins for each institution.",
        "parsing_tree": "protein_institute | #1 = Scan Table [ protein ] Output [ Institution_id ] ; #2 = Scan Table [ Institution ] Output [ Institution_id , Institution ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Institution_id = #2.Institution_id ] Output [ #2.Institution , #2.Institution_id ] ; #4 = Aggregate [ #3 ] GroupBy [ Institution_id ] Output [ countstar AS Count_Star , Institution ]"
    },
    {
        "id": "ff60c3acf11ea04fde1f8f3d5070b018cfea608f0c56798909dac3cf9c5bf39c",
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "parsing_tree": "protein_institute | #1 = Scan Table [ protein ] Output [ Institution_id ] ; #2 = Scan Table [ Institution ] Predicate [ Founded > 1880.0 OR Type = 'Private' ] Output [ Type , Institution_id , Founded ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Institution_id = #2.Institution_id ] Output [ #1.Institution_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f46c3da09f671df33cce8e7be9ff214b23f3d5fc1ffa8aa7c4fc010e0d7c9669",
        "question": "Show the protein name and the institution name.",
        "parsing_tree": "protein_institute | #1 = Scan Table [ protein ] Output [ protein_name , Institution_id ] ; #2 = Scan Table [ Institution ] Output [ Institution_id , Institution ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Institution_id = #2.Institution_id ] Output [ #2.Institution , #1.protein_name ]"
    },
    {
        "id": "c92dde905bf7329dbe22c2f6708d431f59ccd788f67cf94661bf14087141df27",
        "question": "How many proteins are associated with an institution in a building with at least 20 floors?",
        "parsing_tree": "protein_institute | #1 = Scan Table [ protein ] Output [ Institution_id ] ; #2 = Scan Table [ Institution ] Output [ Institution_id , building_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Institution_id = #2.Institution_id ] Output [ #2.building_id ] ; #4 = Scan Table [ building ] Predicate [ Floors >= 20 ] Output [ Floors , building_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.building_id = #4.building_id ] Output [ #3.building_id ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "99005703b3cb6d2af451aa257e4a79954f040ae29569f04aadf9a1edefc93b49",
        "question": "How many institutions do not have an associated protein in our record?",
        "parsing_tree": "protein_institute | #1 = Scan Table [ Institution ] Output [ Institution_id ] ; #2 = Scan Table [ protein ] Output [ Institution_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Institution_id IS NULL OR #1.Institution_id = #2.Institution_id ] Output [ #1.Institution_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f542976ab9500f6a1632d7985aa7cd31eeca89c130a96b9c7b57782bae5d6930",
        "question": "Show all the locations where no cinema has capacity over 800.",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Distinct [ true ] Output [ Location ] ; #2 = Scan Table [ cinema ] Predicate [ Capacity > 800 ] Output [ Location , Capacity ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Location = #2.Location ] Output [ #1.Location ]"
    },
    {
        "id": "19b48a6bcd09c9717e90c78fc3582a902e5af39b33218e45e69a3d29b572181e",
        "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Predicate [ Openning_year = 2010 ] Distinct [ true ] Output [ Openning_year , Location ] ; #2 = Scan Table [ cinema ] Predicate [ Openning_year = 2011 ] Output [ Openning_year , Location ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Location = #2.Location ] Output [ #1.Location ]"
    },
    {
        "id": "7c1319cca8c21655200bffbfe91042c64a3a08d082e2c2eabed377d101b23296",
        "question": "How many cinema do we have?",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1fc2bf30b1cb62567e0f1c716a2f9ff3c4e46c32f88a8d06381e760df0a93d4a",
        "question": "Count the number of cinemas.",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a811a593913ac1c49a4b199adf8135ad074b0ec936b360f5d5b883228421c779",
        "question": "Show name, opening year, and capacity for each cinema.",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Output [ Openning_year , Capacity , Name ]"
    },
    {
        "id": "6503b09ee7cc97d8a246c958f99b0c4f16d4d9be71e9e75747bf466f05658ff4",
        "question": "Show the cinema name and location for cinemas with capacity above average.",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Output [ Capacity ] ; #2 = Aggregate [ #1 ] Output [ AVG(Capacity) AS Avg_Capacity ] ; #3 = Scan Table [ cinema ] Output [ Location , Capacity , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Capacity > #2.Avg_Capacity ] Output [ #3.Name , #3.Location ]"
    },
    {
        "id": "880c9e68fed6875ec4bb56804a2febf8cda1e913a2f48794c037e22709548f0f",
        "question": "What are all the locations with a cinema?",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Distinct [ true ] Output [ Location ]"
    },
    {
        "id": "5f25e59f69c82e129046df97ce55d0afc9d486ee0f2efdf54767d267b32c67b0",
        "question": "Find the distinct locations that has a cinema.",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Distinct [ true ] Output [ Location ]"
    },
    {
        "id": "845591006b3b499b8352aa6574f4bb2c54605f3f81d28289db7bbba270904d27",
        "question": "Show all the cinema names and opening years in descending order of opening year.",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Output [ Openning_year , Name ] ; #2 = Sort [ #1 ] OrderBy [ Openning_year DESC ] Output [ Openning_year , Name ]"
    },
    {
        "id": "c4bb93b1821de00966c59b2e52fb4322ee43ae8b7248582ac3405a88aac29898",
        "question": "What are the name and location of the cinema with the largest capacity?",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Output [ Location , Capacity , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Capacity DESC ] Output [ Location , Capacity , Name ]"
    },
    {
        "id": "227370b499815da34ba099582f6b29a0ff41d02c425694c02c8a022479577bbf",
        "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Predicate [ Openning_year >= 2011 ] Output [ Openning_year , Capacity ] ; #2 = Aggregate [ #1 ] Output [ AVG(Capacity) AS Avg_Capacity , MAX(Capacity) AS Max_Capacity , MIN(Capacity) AS Min_Capacity ]"
    },
    {
        "id": "00b4881e11e7449d22e28e66b19d77921c168c7cf35a61da7ea6b901af865576",
        "question": "Show each location and the number of cinemas there.",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Output [ Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ]"
    },
    {
        "id": "b003e239cb020c3374401c82925f36de96112dedd2e50c797881ce7b5d7943ac",
        "question": "What is the location with the most cinemas opened in year 2010 or later?",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Predicate [ Openning_year >= 2010 ] Output [ Openning_year , Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Location ]"
    },
    {
        "id": "0e045bf0bdf1921f132e98801a431b9245ec735bdbd10d565521491c758a20dc",
        "question": "Show all the locations with at least two cinemas with capacity above 300.",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Predicate [ Capacity > 300 ] Output [ Location , Capacity ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Location ]"
    },
    {
        "id": "be32f092f7616deddf2216895dc6da74a74683bfee68dd77d5419ed803a27744",
        "question": "Which locations have 2 or more cinemas with capacity over 300?",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Predicate [ Capacity > 300 ] Output [ Location , Capacity ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Location ]"
    },
    {
        "id": "58fd2bb7833a713886bcdc4108738bdafa7e20565da31abea32df498564f1934",
        "question": "Show the title and director for all films.",
        "parsing_tree": "cinema | #1 = Scan Table [ film ] Output [ Directed_by , Title ]"
    },
    {
        "id": "975642d03ab93d9ec2771a64502a1633b34f3e11cfe32ee1fd0e2585306fd306",
        "question": "What are the title and director of each film?",
        "parsing_tree": "cinema | #1 = Scan Table [ film ] Output [ Directed_by , Title ]"
    },
    {
        "id": "af49487118a158838abc4d32ecbc9f55c681eb12c6a9d0316c8f143ee0a5f11b",
        "question": "Show all directors.",
        "parsing_tree": "cinema | #1 = Scan Table [ film ] Distinct [ true ] Output [ Directed_by ]"
    },
    {
        "id": "3338746e39424f8f26443efc7c127cd33f0864adec820d6cd124b01fb1d4019c",
        "question": "Who are all the directors?",
        "parsing_tree": "cinema | #1 = Scan Table [ film ] Distinct [ true ] Output [ Directed_by ]"
    },
    {
        "id": "2509b46d80a167a6596e3fbf4241ac62b227a693501d12a9999600978ad33039",
        "question": "List all directors along with the number of films directed by each director.",
        "parsing_tree": "cinema | #1 = Scan Table [ film ] Output [ Directed_by ] ; #2 = Aggregate [ #1 ] GroupBy [ Directed_by ] Output [ countstar AS Count_Star , Directed_by ]"
    },
    {
        "id": "0af56cd77de4e93f4e7b2acddbb685ffe60deda95a2a676785f564d098b8adf1",
        "question": "What is total number of show times per dat for each cinema?",
        "parsing_tree": "cinema | #1 = Scan Table [ schedule ] Output [ Cinema_ID , Show_times_per_day ] ; #2 = Scan Table [ cinema ] Output [ Cinema_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Cinema_ID = #2.Cinema_ID ] Output [ #2.Name , #1.Cinema_ID , #1.Show_times_per_day ] ; #4 = Aggregate [ #3 ] GroupBy [ Cinema_ID ] Output [ SUM(Show_times_per_day) AS Sum_Show_times_per_day , Name ]"
    },
    {
        "id": "ea9692752210633050e1a5a053d5650c8bff58f385c91c25dad3584e0e49dda5",
        "question": "What are the title and maximum price of each film?",
        "parsing_tree": "cinema | #1 = Scan Table [ film ] Output [ Film_ID , Title ] ; #2 = Scan Table [ schedule ] Output [ Film_ID , Price ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Film_ID = #2.Film_ID ] Output [ #2.Price , #1.Title , #2.Film_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Film_ID ] Output [ Title , MAX(Price) AS Max_Price ]"
    },
    {
        "id": "b6428f506035727efb0b6091b039dfc737c977d67dd87f87174d1cc261f1d319",
        "question": "Give me the title and highest price for each film.",
        "parsing_tree": "cinema | #1 = Scan Table [ film ] Output [ Film_ID , Title ] ; #2 = Scan Table [ schedule ] Output [ Film_ID , Price ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Film_ID = #2.Film_ID ] Output [ #2.Price , #1.Title , #2.Film_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Film_ID ] Output [ Title , MAX(Price) AS Max_Price ]"
    },
    {
        "id": "712f00ef525fc117f562713c2fe56cdb39ac709e5c8d2d728ca818df28104589",
        "question": "Show cinema name, film title, date, and price for each record in schedule.",
        "parsing_tree": "cinema | #1 = Scan Table [ film ] Output [ Film_ID , Title ] ; #2 = Scan Table [ schedule ] Output [ Film_ID , Cinema_ID , Price , Date ] ; #3 = Scan Table [ cinema ] Output [ Cinema_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Cinema_ID = #3.Cinema_ID ] Output [ #2.Price , #2.Date , #2.Film_ID , #3.Name ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.Film_ID = #4.Film_ID ] Output [ #1.Title , #4.Date , #4.Name , #4.Price ]"
    },
    {
        "id": "5551361d6bd6ca47bd74f45cfbfc1869ea63d9de9ffb85bd07dade509f7228fb",
        "question": "What are the title and director of the films without any schedule?",
        "parsing_tree": "cinema | #1 = Scan Table [ film ] Output [ Film_ID , Directed_by , Title ] ; #2 = Scan Table [ schedule ] Output [ Film_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Film_ID = #1.Film_ID ] Output [ #1.Title , #1.Directed_by ]"
    },
    {
        "id": "675dc74aad7c326f433cac3c58259e0469dd2d84421800973b62013c90858714",
        "question": "Show director with the largest number of show times in total.",
        "parsing_tree": "cinema | #1 = Scan Table [ film ] Output [ Film_ID , Directed_by ] ; #2 = Scan Table [ schedule ] Output [ Film_ID , Show_times_per_day ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Film_ID = #2.Film_ID ] Output [ #1.Directed_by , #2.Show_times_per_day ] ; #4 = Aggregate [ #3 ] GroupBy [ Directed_by ] Output [ SUM(Show_times_per_day) AS Sum_Show_times_per_day , Directed_by ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_Show_times_per_day DESC ] Output [ Directed_by , Sum_Show_times_per_day ]"
    },
    {
        "id": "0f4d74b02a6ffc05fc88078b87aabba843f1ce08c39f60ee5ffe46240d7d47f6",
        "question": "Find the locations that have more than one movie theater with capacity above 300.",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Predicate [ Capacity > 300 ] Output [ Location , Capacity ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Location ]"
    },
    {
        "id": "171733185567e48abd2fa9b55a3a812aca7706fc52fd4a1ea03a301c95d2c6c7",
        "question": "In which locations are there more than one movie theater with capacity above 300?",
        "parsing_tree": "cinema | #1 = Scan Table [ cinema ] Predicate [ Capacity > 300 ] Output [ Location , Capacity ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Location ]"
    },
    {
        "id": "ea55ff6b021f4404c3bfa278e06acc1e4cbfbeccc0aa72de98dcea15904ded5d",
        "question": "How many films have the word 'Dummy' in their titles?",
        "parsing_tree": "cinema | #1 = Scan Table [ film ] Predicate [ Title like '%Dummy%' ] Output [ Title ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a0fc8e3fb8e82916eef91f1c43ac4aedf26ebe2301cfa9a59fc88c248028af91",
        "question": "Count the number of films whose title contains the word 'Dummy'.",
        "parsing_tree": "cinema | #1 = Scan Table [ film ] Predicate [ Title like '%Dummy%' ] Output [ Title ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1debdf1173d85889ae3513163a7bf9ce1c82b26552c27144e47351a79374dc7e",
        "question": "Are the customers holding coupons with amount 500 bad or good?",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Discount_Coupons ] Predicate [ coupon_amount = 500.0 ] Output [ coupon_amount , coupon_id ] ; #2 = Scan Table [ Customers ] Output [ good_or_bad_customer , coupon_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.coupon_id = #2.coupon_id ] Output [ #2.good_or_bad_customer ]"
    },
    {
        "id": "2285e7be515175ff3cf2cc70616aec5589e7567c4d71157c992d9e30060b5a72",
        "question": "How many bookings did each customer make? List the customer id, first name, and the count.",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Bookings ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_id , #3.first_name , #2.Count_Star ]"
    },
    {
        "id": "b0d5517081a67d4f9916167c1f1086d43552e30aa33802a86fddcb0d7689eedf",
        "question": "What is the maximum total amount paid by a customer? List the customer id and amount.",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Payments ] Output [ amount_paid , customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ customer_id , SUM(amount_paid) AS Sum_amount_paid ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_amount_paid DESC ] Output [ customer_id , Sum_amount_paid ]"
    },
    {
        "id": "261c85bce9a6a845cf562c59b3e49c8109a5cb0978d19cc1b0c8a850af5bf14d",
        "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Payments ] Output [ booking_id ] ; #2 = Aggregate [ #1 ] GroupBy [ booking_id ] Output [ countstar AS Count_Star , booking_id ] ; #3 = Scan Table [ Bookings ] Output [ booking_id , amount_of_refund ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.booking_id = #3.booking_id ] Output [ #3.amount_of_refund , #3.booking_id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ booking_id , Count_Star , amount_of_refund ]"
    },
    {
        "id": "1a764d126cdb532d67949572906f40e07a1db5af78c9446b7f838fa59a17b114",
        "question": "What is the id of the product that is booked for 3 times?",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Products_Booked ] Output [ product_id ] ; #2 = Aggregate [ #1 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_id ] ; #3 = Filter [ #2 ] Predicate [ Count_Star = 3 ] Output [ product_id ]"
    },
    {
        "id": "a5f1de1bb1977a10e8b735e77cfdbe651fb34a51d63c15ecccd88a54136b1798",
        "question": "What is the product description of the product booked with an amount of 102.76?",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Products_Booked ] Predicate [ booked_amount = 102.76 ] Output [ product_id , booked_amount ] ; #2 = Scan Table [ Products_for_Hire ] Output [ product_description , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.product_description ]"
    },
    {
        "id": "9ebc020bc2841d81c23c0086de6453be0f0b5e7e6143cea374fd1d097dea6bcf",
        "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Products_for_Hire ] Predicate [ product_name = 'Book collection A' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Products_Booked ] Output [ booking_id , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.booking_id ] ; #4 = Scan Table [ Bookings ] Output [ booking_id , booking_end_date , booking_start_date ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.booking_id = #4.booking_id ] Output [ #4.booking_start_date , #4.booking_end_date ]"
    },
    {
        "id": "8f46cf2bff4bc705e9eb0e3fce8ae9eef644f8c05ca7bb36eb56040c98b895ef",
        "question": "What are the names of products whose availability equals to 1?",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ View_Product_Availability ] Predicate [ available_yn = 1 ] Output [ product_id , available_yn ] ; #2 = Scan Table [ Products_for_Hire ] Output [ product_name , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.product_name ]"
    },
    {
        "id": "ab7e99be2665ca5727eae1298c08f8b0603e60a937c246781a7e1ad27e59be54",
        "question": "How many different product types are there?",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Products_for_Hire ] Distinct [ true ] Output [ product_type_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c07fb663d04525fc8b20f09d583293408c8b3d18eee1ed6c3bac8a9bc897a6fb",
        "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Customers ] Predicate [ good_or_bad_customer = 'good' ] Output [ last_name , good_or_bad_customer , gender_mf , first_name ] ; #2 = Sort [ #1 ] OrderBy [ last_name ASC ] Output [ last_name , gender_mf , first_name ]"
    },
    {
        "id": "47510fb5b6eed148ccd2ac7fb5d817e68ace8497a64e0ef7b69b6d4a812e3130",
        "question": "What is the average amount due for all the payments?",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Payments ] Output [ amount_due ] ; #2 = Aggregate [ #1 ] Output [ AVG(amount_due) AS Avg_amount_due ]"
    },
    {
        "id": "6b5a6c7cef30a7a28612c7ec55492dd320642bd16db5e4ecb12db4e2ef4f0181",
        "question": "What are the maximum, minimum, and average booked count for the products booked?",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Products_Booked ] Output [ booked_count ] ; #2 = Aggregate [ #1 ] Output [ AVG(booked_count) AS Avg_booked_count , MAX(booked_count) AS Max_booked_count , MIN(booked_count) AS Min_booked_count ]"
    },
    {
        "id": "3b57e0139d75d464b83aa8f06f0c16abeae4d48010dd1e01fb0bab4b5f21adb8",
        "question": "What are all the distinct payment types?",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Payments ] Distinct [ true ] Output [ payment_type_code ]"
    },
    {
        "id": "a5f2c921edec35da7fac6254f77916195c410efa9edaea6cd8f559345a1ee14a",
        "question": "What are the daily hire costs for the products with substring 'Book' in its name?",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Products_for_Hire ] Predicate [ product_name like '%Book%' ] Output [ product_name , daily_hire_cost ]"
    },
    {
        "id": "1e584333955de3ce263fffc75455cb1c7ceb32bb141fd7cf2d6aaedcb42c8f58",
        "question": "How many products are never booked with amount higher than 200?",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Products_for_Hire ] Output [ product_id ] ; #2 = Scan Table [ Products_Booked ] Predicate [ booked_amount > 200.0 ] Output [ product_id , booked_amount ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "794a54da740f0b7e9a214f0c15b2d0011fc55b9416c3f2e79927c84dde844b76",
        "question": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Customers ] Predicate [ good_or_bad_customer = 'good' ] Output [ good_or_bad_customer , coupon_id ] ; #2 = Scan Table [ Discount_Coupons ] Output [ coupon_amount , coupon_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.coupon_id = #2.coupon_id ] Distinct [ true ] Output [ #2.coupon_amount ] ; #4 = Scan Table [ Customers ] Predicate [ good_or_bad_customer = 'bad' ] Output [ good_or_bad_customer , coupon_id ] ; #5 = Scan Table [ Discount_Coupons ] Output [ coupon_amount , coupon_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.coupon_id = #5.coupon_id ] Output [ #5.coupon_amount ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.coupon_amount = #6.coupon_amount ] Output [ #3.coupon_amount ]"
    },
    {
        "id": "079818d187acc0e37ec5f491f59bb02c2a4b25edc40be406f51b691ae24405c0",
        "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Payments ] Predicate [ amount_paid > 300.0 OR payment_type_code = 'Check' ] Output [ amount_paid , payment_type_code , payment_date ]"
    },
    {
        "id": "190c5a8a6ba7008f80b229e8db58f3860c3897bd68930e99f4959aec2996a68c",
        "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "parsing_tree": "products_for_hire | #1 = Scan Table [ Products_for_Hire ] Predicate [ daily_hire_cost < 20.0 AND product_type_code = 'Cutlery' ] Output [ product_name , product_description , daily_hire_cost , product_type_code ]"
    },
    {
        "id": "115547c6d6c8b524f582c5b5145e4a1c45852092f0b258ac5587845b5050b01a",
        "question": "How many phones are there?",
        "parsing_tree": "phone_market | #1 = Scan Table [ phone ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "33d2bb27757d73b280e6883512b025dc44072049eef86e765ccbf3a16b11a284",
        "question": "List the names of phones in ascending order of price.",
        "parsing_tree": "phone_market | #1 = Scan Table [ phone ] Output [ Price , Name ] ; #2 = Sort [ #1 ] OrderBy [ Price ASC ] Output [ Price , Name ]"
    },
    {
        "id": "792d572e0f80883c8730ae12c5e23ac89507cdecf7fd05ac3fe8b93cb2091845",
        "question": "What are the memories and carriers of phones?",
        "parsing_tree": "phone_market | #1 = Scan Table [ phone ] Output [ Memory_in_G , Carrier ]"
    },
    {
        "id": "712cbd3af41a88cc6dad2de1f92df79530b44a7997080c4ab6cfe5fb94f5803c",
        "question": "List the distinct carriers of phones with memories bigger than 32.",
        "parsing_tree": "phone_market | #1 = Scan Table [ phone ] Predicate [ Memory_in_G > 32 ] Distinct [ true ] Output [ Carrier ]"
    },
    {
        "id": "d80eed71bcd87d8201c457e2049b68cd24a8f4b3836671b4223c7f510d9cc416",
        "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
        "parsing_tree": "phone_market | #1 = Scan Table [ phone ] Predicate [ Carrier = 'Sprint' OR Carrier = 'TMobile' ] Output [ Name , Carrier ]"
    },
    {
        "id": "c5ecb31b13d8957ba1d14933140a5b6c300f5fda34479c81dc51da69d078276f",
        "question": "What is the carrier of the most expensive phone?",
        "parsing_tree": "phone_market | #1 = Scan Table [ phone ] Output [ Price , Carrier ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Price DESC ] Output [ Price , Carrier ]"
    },
    {
        "id": "5cdbb07b82d9e8cebf8e810c18491c409be2ef1111e6100f9b07d057a5807990",
        "question": "Show different carriers of phones together with the number of phones with each carrier.",
        "parsing_tree": "phone_market | #1 = Scan Table [ phone ] Output [ Carrier ] ; #2 = Aggregate [ #1 ] GroupBy [ Carrier ] Output [ countstar AS Count_Star , Carrier ]"
    },
    {
        "id": "35acb688d102538f9ce64b035223c99f64a77b25a43de9e190b9ca9c2daff74c",
        "question": "Show the most frequently used carrier of the phones.",
        "parsing_tree": "phone_market | #1 = Scan Table [ phone ] Output [ Carrier ] ; #2 = Aggregate [ #1 ] GroupBy [ Carrier ] Output [ countstar AS Count_Star , Carrier ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Carrier ]"
    },
    {
        "id": "05330cc18b5d377d7010fffe4bd029ddbfe53ba696bf2aa860f8950b5091c77a",
        "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
        "parsing_tree": "phone_market | #1 = Scan Table [ phone ] Predicate [ Memory_in_G < 32 ] Distinct [ true ] Output [ Memory_in_G , Carrier ] ; #2 = Scan Table [ phone ] Predicate [ Memory_in_G > 64 ] Output [ Memory_in_G , Carrier ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Carrier = #2.Carrier ] Output [ #1.Carrier ]"
    },
    {
        "id": "a2e7c6818cd7ed1238ec64147de2527bc1e2ce94185670e2087024c9d9b536d4",
        "question": "Show the names of phones and the districts of markets they are on.",
        "parsing_tree": "phone_market | #1 = Scan Table [ phone ] Output [ Phone_ID , Name ] ; #2 = Scan Table [ phone_market ] Output [ Phone_ID , Market_ID ] ; #3 = Scan Table [ market ] Output [ District , Market_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Market_ID = #3.Market_ID ] Output [ #2.Phone_ID , #3.District ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.Phone_ID = #4.Phone_ID ] Output [ #1.Name , #4.District ]"
    },
    {
        "id": "5251c1b6e857449bdbaa965489e033dc2ec1ec82175290907d627c0cb2d2c8c5",
        "question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.",
        "parsing_tree": "phone_market | #1 = Scan Table [ phone ] Output [ Phone_ID , Name ] ; #2 = Scan Table [ phone_market ] Output [ Phone_ID , Market_ID ] ; #3 = Scan Table [ market ] Output [ District , Market_ID , Ranking ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Market_ID = #3.Market_ID ] Output [ #2.Phone_ID , #3.District , #3.Ranking ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.Phone_ID = #4.Phone_ID ] Output [ #4.Ranking , #1.Name , #4.District ] ; #6 = Sort [ #5 ] OrderBy [ Ranking ASC ] Output [ District , Name , Ranking ]"
    },
    {
        "id": "9fb1da458fb40bd78a3922f1b1e5a1a82d921ddd88faaa8730a7274f76953886",
        "question": "Show the names of phones that are on market with number of shops greater than 50.",
        "parsing_tree": "phone_market | #1 = Scan Table [ market ] Predicate [ Num_of_shops > 50.0 ] Output [ Num_of_shops , Market_ID ] ; #2 = Scan Table [ phone_market ] Output [ Phone_ID , Market_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Market_ID = #2.Market_ID ] Output [ #2.Phone_ID ] ; #4 = Scan Table [ phone ] Output [ Phone_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Phone_ID = #4.Phone_ID ] Output [ #4.Name ]"
    },
    {
        "id": "a4f384add7b9ef79ded62dc22bf329df310a2caf42844a98fc6a2164778390a3",
        "question": "For each phone, show its names and total number of stocks.",
        "parsing_tree": "phone_market | #1 = Scan Table [ phone ] Output [ Phone_ID , Name ] ; #2 = Scan Table [ phone_market ] Output [ Phone_ID , Num_of_stock ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Phone_ID = #2.Phone_ID ] Output [ #2.Num_of_stock , #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ SUM(Num_of_stock) AS Sum_Num_of_stock , Name ]"
    },
    {
        "id": "b67678c2e5e291ccecb8ce8d2e4226c35c13c93c9853b3d613e58441fcc5c4f5",
        "question": "List the names of phones that are not on any market.",
        "parsing_tree": "phone_market | #1 = Scan Table [ phone ] Output [ Phone_ID , Name ] ; #2 = Scan Table [ phone_market ] Output [ Phone_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Phone_ID = #1.Phone_ID ] Output [ #1.Name ]"
    },
    {
        "id": "d21d157e2c6c77c280155f21587c6ad93bddecc292b8c93f7f95f6a699732939",
        "question": "How many gas companies are there?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0ba1372849df0cf51724ef43e3abfd2be9506e966d06f765f45856c33c6ed364",
        "question": "What is the total number of companies?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e4d756cb32b9c1a5ea0639695b7ed0a13d4384c161b190f525fffa1db4db7514",
        "question": "List the company name and rank for all companies in the decreasing order of their sales.",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ Rank , Sales_billion , Company ] ; #2 = Sort [ #1 ] OrderBy [ Sales_billion DESC ] Output [ Rank , Sales_billion , Company ]"
    },
    {
        "id": "bae45474b273b74509040930188c5013b8c11cf42e0b3b7d42c4e29347faf47d",
        "question": "What is the name and rank of every company ordered by descending number of sales?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ Rank , Sales_billion , Company ] ; #2 = Sort [ #1 ] OrderBy [ Sales_billion DESC ] Output [ Rank , Sales_billion , Company ]"
    },
    {
        "id": "f4ab0618fe0dd06ae0395cc13d114219bd7f8d48d9d85e3222ca0adc613546d9",
        "question": "Show the company name and the main industry for all companies whose headquarters are not from USA.",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Predicate [ Headquarters <> 'USA' ] Output [ Main_Industry , Headquarters , Company ]"
    },
    {
        "id": "406363a2c62528c4fcd9749d706348f41ae5b2eec7582d63be4dece81798f6d3",
        "question": "What are the companies and main industries of all companies that are not headquartered in the United States?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Predicate [ Headquarters <> 'USA' ] Output [ Main_Industry , Headquarters , Company ]"
    },
    {
        "id": "0fbe1baa277e78f47ad156354b69d1cf368141d6d0e6ab1ad897b409de64fd64",
        "question": "Show all company names and headquarters in the descending order of market value.",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ Market_Value , Headquarters , Company ] ; #2 = Sort [ #1 ] OrderBy [ Market_Value DESC ] Output [ Market_Value , Headquarters , Company ]"
    },
    {
        "id": "98c3c5f3cf977844e279c7589c87e3fb71b255f76c4611ec9282d66d2d2fa76c",
        "question": "What are the names and headquarters of all companies ordered by descending market value?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ Market_Value , Headquarters , Company ] ; #2 = Sort [ #1 ] OrderBy [ Market_Value DESC ] Output [ Market_Value , Headquarters , Company ]"
    },
    {
        "id": "3fd94dbfbfb9a43dd9c5985a42b73093f184637c3d6ee5daee6395635b6e0ce6",
        "question": "Show minimum, maximum, and average market value for all companies.",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ Market_Value ] ; #2 = Aggregate [ #1 ] Output [ MAX(Market_Value) AS Max_Market_Value , MIN(Market_Value) AS Min_Market_Value , AVG(Market_Value) AS Avg_Market_Value ]"
    },
    {
        "id": "573ce653fa12f092cb8b55793ba1c1c36f805c537e9306cf7ec74e57f694c968",
        "question": "What is the minimum, maximum, and average market value for every company?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ Market_Value ] ; #2 = Aggregate [ #1 ] Output [ MAX(Market_Value) AS Max_Market_Value , MIN(Market_Value) AS Min_Market_Value , AVG(Market_Value) AS Avg_Market_Value ]"
    },
    {
        "id": "09f0704d1c15b5b83074f6f5c052059a201dc3f6ca5a98d5ee19302edde4dae8",
        "question": "Show all main industry for all companies.",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Distinct [ true ] Output [ Main_Industry ]"
    },
    {
        "id": "d372bc73524e394c8fb1a15f925fedb64365e49a56c7f81e29dcdd361379ee82",
        "question": "What are the different main industries for all companies?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Distinct [ true ] Output [ Main_Industry ]"
    },
    {
        "id": "041e087211de72de5b9c93b5a25473b6d173c870379528a184b257205a8143a8",
        "question": "List all headquarters and the number of companies in each headquarter.",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ Headquarters ] ; #2 = Aggregate [ #1 ] GroupBy [ Headquarters ] Output [ countstar AS Count_Star , Headquarters ]"
    },
    {
        "id": "d0e49f63542cee7a777f58b4b77ce92fabdf04690923d00cd6b6d85420eb5d61",
        "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ Headquarters ] ; #2 = Aggregate [ #1 ] GroupBy [ Headquarters ] Output [ countstar AS Count_Star , Headquarters ]"
    },
    {
        "id": "14e0aa973f90aaaca9f10fffb51afa86f1346c8c7e3e80b8ae1930692ac16e39",
        "question": "Show all main industry and total market value in each industry.",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ Main_Industry , Market_Value ] ; #2 = Aggregate [ #1 ] GroupBy [ Main_Industry ] Output [ SUM(Market_Value) AS Sum_Market_Value , Main_Industry ]"
    },
    {
        "id": "4600b107d9b11fee539ec45e0bcd028c3ebd36c418cf0ca530a299430207e521",
        "question": "What are the main indstries and total market value for each industry?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ Main_Industry , Market_Value ] ; #2 = Aggregate [ #1 ] GroupBy [ Main_Industry ] Output [ SUM(Market_Value) AS Sum_Market_Value , Main_Industry ]"
    },
    {
        "id": "6528ac5fdc43c12bd3fc8a266ade3d39d7424cd692166c1d41a9696d084526be",
        "question": "List the main industry with highest total market value and its number of companies.",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ Main_Industry , Market_Value ] ; #2 = Aggregate [ #1 ] GroupBy [ Main_Industry ] Output [ countstar AS Count_Star , Main_Industry , SUM(Market_Value) AS Sum_Market_Value ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_Market_Value DESC ] Output [ Sum_Market_Value , Count_Star , Main_Industry ]"
    },
    {
        "id": "d420d4a5d97a20304ae7c6ebb008086e21a118186f5e7e5a2238814a153dc03a",
        "question": "For each main industry, what is the total number of companies for the industry with the highest total market value?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ Main_Industry , Market_Value ] ; #2 = Aggregate [ #1 ] GroupBy [ Main_Industry ] Output [ countstar AS Count_Star , Main_Industry , SUM(Market_Value) AS Sum_Market_Value ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_Market_Value DESC ] Output [ Sum_Market_Value , Count_Star , Main_Industry ]"
    },
    {
        "id": "415537aed456cb26ffcd5c2b3b5e72873fd39feabb7982d0d09cc7859c451949",
        "question": "Show headquarters with at least two companies in the banking industry.",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Predicate [ Main_Industry = 'Banking' ] Output [ Main_Industry , Headquarters ] ; #2 = Aggregate [ #1 ] GroupBy [ Headquarters ] Output [ countstar AS Count_Star , Headquarters ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Headquarters ]"
    },
    {
        "id": "6d2b706dfff9a32283326d7b75264aeff0adae24b05bdaa30135c3d3c5428d2d",
        "question": "What are the headquarters with at least two companies in the banking industry?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Predicate [ Main_Industry = 'Banking' ] Output [ Main_Industry , Headquarters ] ; #2 = Aggregate [ #1 ] GroupBy [ Headquarters ] Output [ countstar AS Count_Star , Headquarters ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Headquarters ]"
    },
    {
        "id": "fc3909abf50c4987d8b07ec3a495430cc358890f8615e26854f42f0af57f4f4f",
        "question": "Show gas station id, location, and manager_name for all gas stations ordered by open year.",
        "parsing_tree": "gas_company | #1 = Scan Table [ gas_station ] Output [ Open_Year , Location , Station_ID , Manager_Name ] ; #2 = Sort [ #1 ] OrderBy [ Open_Year ASC ] Output [ Station_ID , Location , Open_Year , Manager_Name ]"
    },
    {
        "id": "7d3b30fa395d168dcecfeee9cb7552203c29ac46c3ee0b1f9ef53bc493c591c2",
        "question": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?",
        "parsing_tree": "gas_company | #1 = Scan Table [ gas_station ] Output [ Open_Year , Location , Station_ID , Manager_Name ] ; #2 = Sort [ #1 ] OrderBy [ Open_Year ASC ] Output [ Station_ID , Location , Open_Year , Manager_Name ]"
    },
    {
        "id": "482135d3e31c25c0fcf0e7c7541ac38ae3d200d22d42de49c707fe84bb4aa8d4",
        "question": "How many gas station are opened between 2000 and 2005?",
        "parsing_tree": "gas_company | #1 = Scan Table [ gas_station ] Predicate [ Open_Year >= 2000 AND Open_Year <= 2005 ] Output [ Open_Year ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a0d75d90670ff3062e5a07d93e8923ea58491990598164b59ad79ed3b583399f",
        "question": "What is the total number of gas stations that opened between 2000 and 2005?",
        "parsing_tree": "gas_company | #1 = Scan Table [ gas_station ] Predicate [ Open_Year >= 2000 AND Open_Year <= 2005 ] Output [ Open_Year ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "8dfdcc6458fe60af3366f3ee6e55565782f284c9c4e2fd65c1d46793a745bddb",
        "question": "Show all locations and the number of gas stations in each location ordered by the count.",
        "parsing_tree": "gas_company | #1 = Scan Table [ gas_station ] Output [ Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Location ]"
    },
    {
        "id": "f6d85988fad716130613969dca5e5972c6f42b8c69c0e39fa3930ee94390bca6",
        "question": "For each location, how many gas stations are there in order?",
        "parsing_tree": "gas_company | #1 = Scan Table [ gas_station ] Output [ Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Location ]"
    },
    {
        "id": "8d69b918bb1b692cd2ac12e13c47ad7732c4ec6d561653ce5836939338dbf2b4",
        "question": "Show all headquarters with both a company in banking industry and a company in Oil and gas.",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Predicate [ Main_Industry = 'Banking' ] Distinct [ true ] Output [ Main_Industry , Headquarters ] ; #2 = Scan Table [ company ] Predicate [ Main_Industry = 'Oil and gas' ] Output [ Main_Industry , Headquarters ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Headquarters = #2.Headquarters ] Output [ #1.Headquarters ]"
    },
    {
        "id": "5a584f7e2494ba4fd4b35c45bb0487aa18cf60d5592b832a4280095aee0cbced",
        "question": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Predicate [ Main_Industry = 'Banking' ] Distinct [ true ] Output [ Main_Industry , Headquarters ] ; #2 = Scan Table [ company ] Predicate [ Main_Industry = 'Oil and gas' ] Output [ Main_Industry , Headquarters ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Headquarters = #2.Headquarters ] Output [ #1.Headquarters ]"
    },
    {
        "id": "af8fbba9ed884d024c3f844d59ecf003d8d6ba839a65c1f565dca33171c6c2ac",
        "question": "Show all headquarters without a company in banking industry.",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Distinct [ true ] Output [ Headquarters ] ; #2 = Scan Table [ company ] Predicate [ Main_Industry = 'Banking' ] Output [ Main_Industry , Headquarters ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Headquarters = #2.Headquarters ] Output [ #1.Headquarters ]"
    },
    {
        "id": "c62b4068da4a453001adeba04380efa6a4dd79e6cf16ae6d76e676c60f274655",
        "question": "What are the headquarters without companies that are in the banking industry?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Distinct [ true ] Output [ Headquarters ] ; #2 = Scan Table [ company ] Predicate [ Main_Industry = 'Banking' ] Output [ Main_Industry , Headquarters ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Headquarters = #2.Headquarters ] Output [ #1.Headquarters ]"
    },
    {
        "id": "a77db940f0b16d64022c4b1a709a3d858f16538212617f3c50c1b9d3075e079a",
        "question": "Show the company name with the number of gas station.",
        "parsing_tree": "gas_company | #1 = Scan Table [ station_company ] Output [ Company_ID ] ; #2 = Scan Table [ company ] Output [ Company_ID , Company ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Company_ID = #2.Company_ID ] Output [ #1.Company_ID , #2.Company ] ; #4 = Aggregate [ #3 ] GroupBy [ Company_ID ] Output [ countstar AS Count_Star , Company ]"
    },
    {
        "id": "4fe43a1c429a886e99bc56c054c239a2e2bbf599effeeb8c4d65731b36e66408",
        "question": "For each company id, what are the companies and how many gas stations does each one operate?",
        "parsing_tree": "gas_company | #1 = Scan Table [ station_company ] Output [ Company_ID ] ; #2 = Scan Table [ company ] Output [ Company_ID , Company ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Company_ID = #2.Company_ID ] Output [ #1.Company_ID , #2.Company ] ; #4 = Aggregate [ #3 ] GroupBy [ Company_ID ] Output [ countstar AS Count_Star , Company ]"
    },
    {
        "id": "f5b5eb491dc111c12c7d4db8c643374265443f4a4068cdec0e0562daabf0ecea",
        "question": "Show company name and main industry without a gas station.",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ Main_Industry , Company_ID , Company ] ; #2 = Scan Table [ station_company ] Output [ Company_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Company_ID = #1.Company_ID ] Output [ #1.Company , #1.Main_Industry ]"
    },
    {
        "id": "9d06589a3183d8fba5b3b303a38e66272195ce72c3fafe48dbe8880c5d22244d",
        "question": "What are the main industries of the companies without gas stations and what are the companies?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Output [ Main_Industry , Company_ID , Company ] ; #2 = Scan Table [ station_company ] Output [ Company_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Company_ID = #1.Company_ID ] Output [ #1.Company , #1.Main_Industry ]"
    },
    {
        "id": "e3aacf0c34ed8b92fdddd2694440c58a6297e98b4dbaea9198698c535616d8d9",
        "question": "Show the manager name for gas stations belonging to the ExxonMobil company.",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Predicate [ Company = 'ExxonMobil' ] Output [ Company_ID , Company ] ; #2 = Scan Table [ station_company ] Output [ Station_ID , Company_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Company_ID = #2.Company_ID ] Output [ #2.Station_ID ] ; #4 = Scan Table [ gas_station ] Output [ Station_ID , Manager_Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Station_ID = #4.Station_ID ] Output [ #4.Manager_Name ]"
    },
    {
        "id": "6b762fe7d5a06f1089b406f858ff21f6170b654b09b19ae03ff8fbb60554b507",
        "question": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Predicate [ Company = 'ExxonMobil' ] Output [ Company_ID , Company ] ; #2 = Scan Table [ station_company ] Output [ Station_ID , Company_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Company_ID = #2.Company_ID ] Output [ #2.Station_ID ] ; #4 = Scan Table [ gas_station ] Output [ Station_ID , Manager_Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Station_ID = #4.Station_ID ] Output [ #4.Manager_Name ]"
    },
    {
        "id": "73af7d13f51d8134955c68fe475f1e7551224746439fb3c8ebda6529162168d2",
        "question": "Show all locations where a gas station for company with market value greater than 100 is located.",
        "parsing_tree": "gas_company | #1 = Scan Table [ station_company ] Output [ Station_ID , Company_ID ] ; #2 = Scan Table [ company ] Predicate [ Market_Value > 100.0 ] Output [ Market_Value , Company_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Company_ID = #2.Company_ID ] Output [ #1.Station_ID ] ; #4 = Scan Table [ gas_station ] Output [ Location , Station_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Station_ID = #4.Station_ID ] Output [ #4.Location ]"
    },
    {
        "id": "c278bf1a3bdf54a84b053127d0a370b2d2b794dc1fc6e5c7b84c14078ebce310",
        "question": "What are the locations that have gas stations owned by a company with a market value greater than 100?",
        "parsing_tree": "gas_company | #1 = Scan Table [ station_company ] Output [ Station_ID , Company_ID ] ; #2 = Scan Table [ company ] Predicate [ Market_Value > 100.0 ] Output [ Market_Value , Company_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Company_ID = #2.Company_ID ] Output [ #1.Station_ID ] ; #4 = Scan Table [ gas_station ] Output [ Location , Station_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Station_ID = #4.Station_ID ] Output [ #4.Location ]"
    },
    {
        "id": "240d979df19528917e167f5fefe4f0dfb8176b4769fef0616f0877f353cca1d3",
        "question": "Show the manager name with most number of gas stations opened after 2000.",
        "parsing_tree": "gas_company | #1 = Scan Table [ gas_station ] Predicate [ Open_Year > 2000 ] Output [ Open_Year , Manager_Name ] ; #2 = Aggregate [ #1 ] GroupBy [ Manager_Name ] Output [ countstar AS Count_Star , Manager_Name ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Manager_Name ]"
    },
    {
        "id": "d7431ea93cf6f58cfc5ea965c120272d5c8a51acb2450d3ae3aba91b91d377c7",
        "question": "What is the name of the manager with the most gas stations that opened after 2000?",
        "parsing_tree": "gas_company | #1 = Scan Table [ gas_station ] Predicate [ Open_Year > 2000 ] Output [ Open_Year , Manager_Name ] ; #2 = Aggregate [ #1 ] GroupBy [ Manager_Name ] Output [ countstar AS Count_Star , Manager_Name ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Manager_Name ]"
    },
    {
        "id": "fb76cd549bf8f412986e0683666651accbe900816873c629b443bdf2104e2aba",
        "question": "order all gas station locations by the opening year.",
        "parsing_tree": "gas_company | #1 = Scan Table [ gas_station ] Output [ Location , Open_Year ] ; #2 = Sort [ #1 ] OrderBy [ Open_Year ASC ] Output [ Location , Open_Year ]"
    },
    {
        "id": "9e3a3890452e3b79df5f8d234aaaf7a4a9ff507509fcd37feac3d464425efc1e",
        "question": "What are the locations of all the gas stations ordered by opening year?",
        "parsing_tree": "gas_company | #1 = Scan Table [ gas_station ] Output [ Location , Open_Year ] ; #2 = Sort [ #1 ] OrderBy [ Open_Year ASC ] Output [ Location , Open_Year ]"
    },
    {
        "id": "b70d1f9cdca41820e79f6c143b695f6611b27fb8eff190a0cf2be3a0707957ed",
        "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Predicate [ Main_Industry = 'Banking' ] Output [ Rank , Company , Sales_billion , Profits_billion , Market_Value , Main_Industry ] ; #2 = Sort [ #1 ] OrderBy [ Sales_billion ASC , Profits_billion ASC ] Output [ Rank , Company , Sales_billion , Profits_billion , Market_Value ]"
    },
    {
        "id": "f7811e6365fc5a72aa2ebceea8c3be61af5c02c5bbfd58cc2f0f6f14aad6b2ca",
        "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?",
        "parsing_tree": "gas_company | #1 = Scan Table [ company ] Predicate [ Main_Industry = 'Banking' ] Output [ Rank , Company , Sales_billion , Profits_billion , Market_Value , Main_Industry ] ; #2 = Sort [ #1 ] OrderBy [ Sales_billion ASC , Profits_billion ASC ] Output [ Rank , Company , Sales_billion , Profits_billion , Market_Value ]"
    },
    {
        "id": "aa1d6a5a1eca17cb573a0a9ab2e92c2092db1958f2d53fe96b8fb92b227c911b",
        "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
        "parsing_tree": "gas_company | #1 = Scan Table [ station_company ] Output [ Station_ID , Company_ID ] ; #2 = Scan Table [ gas_station ] Output [ Location , Station_ID , Representative_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Station_ID = #2.Station_ID ] Output [ #2.Representative_Name , #1.Company_ID , #2.Location ] ; #4 = Scan Table [ company ] Output [ Company_ID , Assets_billion ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Company_ID = #4.Company_ID ] Output [ #3.Representative_Name , #3.Location , #4.Assets_billion ] ; #6 = TopSort [ #5 ] Rows [ 3 ] OrderBy [ Assets_billion DESC ] Output [ Location , Representative_Name , Assets_billion ]"
    },
    {
        "id": "eefb1fc55cb3590ba9b2f9ffedfa41c72aa2d20b3e79ab88e2bf115a01d3684b",
        "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?",
        "parsing_tree": "gas_company | #1 = Scan Table [ station_company ] Output [ Station_ID , Company_ID ] ; #2 = Scan Table [ gas_station ] Output [ Location , Station_ID , Representative_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Station_ID = #2.Station_ID ] Output [ #2.Representative_Name , #1.Company_ID , #2.Location ] ; #4 = Scan Table [ company ] Output [ Company_ID , Assets_billion ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Company_ID = #4.Company_ID ] Output [ #3.Representative_Name , #3.Location , #4.Assets_billion ] ; #6 = TopSort [ #5 ] Rows [ 3 ] OrderBy [ Assets_billion DESC ] Output [ Location , Representative_Name , Assets_billion ]"
    },
    {
        "id": "ff02387af79da05ae5d74491f6b2dee85cadf36194577081fb6e9a2f7afb1c8c",
        "question": "How many regions do we have?",
        "parsing_tree": "party_people | #1 = Scan Table [ region ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2b4fb0661fc5c0b1ab7a03fb1110dca94333862606f1bda7e60bb119876cd7e2",
        "question": "Count the number of regions.",
        "parsing_tree": "party_people | #1 = Scan Table [ region ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2a0eb35bd12237ce87d34490b18a29786d5810f7f81eadc53093502246185fad",
        "question": "Show all distinct region names ordered by their labels.",
        "parsing_tree": "party_people | #1 = Scan Table [ region ] Output [ Label , Region_name ] ; #2 = Sort [ #1 ] OrderBy [ Label ASC , Region_name ASC ] Distinct [ true ] Output [ Label , Region_name ]"
    },
    {
        "id": "3222438599a579b0123b0505f9d5ca0c3ab12225af09997b5608209146e7752b",
        "question": "What are the different region names, ordered by labels?",
        "parsing_tree": "party_people | #1 = Scan Table [ region ] Output [ Label , Region_name ] ; #2 = Sort [ #1 ] OrderBy [ Label ASC , Region_name ASC ] Distinct [ true ] Output [ Label , Region_name ]"
    },
    {
        "id": "b43617ced794ef3a04cada935cffcb27d9b790fb39637220cacd15dd9ad5e4b8",
        "question": "How many parties do we have?",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Distinct [ true ] Output [ Party_name ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Party_name) AS Count_Dist_Party_name ]"
    },
    {
        "id": "25126792d99579edfaa88bdd48974782de5fbd5894ad95cee59e98dc181d9108",
        "question": "Count the number of different parties.",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Distinct [ true ] Output [ Party_name ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Party_name) AS Count_Dist_Party_name ]"
    },
    {
        "id": "618de4af2ebc065ddb3ced271723314d285e0fc68f1c2bad4cd604b51b0bf073",
        "question": "Show the ministers and the time they took and left office, listed by the time they left office.",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Output [ Took_office , Left_office , Minister ] ; #2 = Sort [ #1 ] OrderBy [ Left_office ASC ] Output [ Took_office , Left_office , Minister ]"
    },
    {
        "id": "4a42c54f3e2df7c2eed30555937135fa1153e85862c665409a9b71ae2853f0ad",
        "question": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Output [ Took_office , Left_office , Minister ] ; #2 = Sort [ #1 ] OrderBy [ Left_office ASC ] Output [ Took_office , Left_office , Minister ]"
    },
    {
        "id": "dedcf322681235e1200ce534d48c434a53a06fa09ff34eb5b2275eb0a20eb449",
        "question": "Show the minister who took office after 1961 or before 1959.",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Predicate [ Took_office > 1961 OR Took_office < 1959 ] Output [ Took_office , Minister ]"
    },
    {
        "id": "5a3cd47e2a462836cd5ed3f2923a8521305d14a129baf56d946be1b3f7c10570",
        "question": "Who are the ministers who took office after 1961 or before 1959?",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Predicate [ Took_office > 1961 OR Took_office < 1959 ] Output [ Took_office , Minister ]"
    },
    {
        "id": "6ea4b449cbd7d8c4c43389ce417d81e749c6458c8b0f1066e7baefdf3adeaa47",
        "question": "Show all ministers who do not belong to Progress Party.",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Predicate [ Party_name <> 'Progress Party' ] Output [ Minister , Party_name ]"
    },
    {
        "id": "fe3c6582acec322de5e0c28e2d1b3136e64d310043f2ede19db370096cfc7fc2",
        "question": "Which ministers are not a part of the Progress Party?",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Predicate [ Party_name <> 'Progress Party' ] Output [ Minister , Party_name ]"
    },
    {
        "id": "1682f679589bd88ecb9f7ed50c0de615a0bee30fa604d6ab015d6cc1f7d81519",
        "question": "Show all ministers and parties they belong to in descending order of the time they took office.",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Output [ Took_office , Minister , Party_name ] ; #2 = Sort [ #1 ] OrderBy [ Took_office DESC ] Output [ Took_office , Minister , Party_name ]"
    },
    {
        "id": "15e1e73b4705d1faf6462381a5b7b191562afa537b44d6e135062a53a2e9ad17",
        "question": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Output [ Took_office , Minister , Party_name ] ; #2 = Sort [ #1 ] OrderBy [ Took_office DESC ] Output [ Took_office , Minister , Party_name ]"
    },
    {
        "id": "69c47a2cdb6fc9178acbc595c3738343f5d6df31bf8175eee05ebb936dd1f2ad",
        "question": "Return the minister who left office at the latest time.",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Output [ Left_office , Minister ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Left_office DESC ] Output [ Left_office , Minister ]"
    },
    {
        "id": "f0efa2db05eccbd7e7ff81310ae274c6fe9958c68403994375557476ed4e8504",
        "question": "Which minister left office the latest?",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Output [ Left_office , Minister ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Left_office DESC ] Output [ Left_office , Minister ]"
    },
    {
        "id": "a6115eb4af758442f6f38948749be57838b0d4521e19412a3755f911da98b173",
        "question": "List member names and their party names.",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Output [ Party_name , Party_ID ] ; #2 = Scan Table [ member ] Output [ Member_Name , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party_ID = #2.Party_ID ] Output [ #1.Party_name , #2.Member_Name ]"
    },
    {
        "id": "a78a358aecbc63007090fdd317cb6013d6ec2240926728d70de4e2837ee3c493",
        "question": "What are the names of members and their corresponding parties?",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Output [ Party_name , Party_ID ] ; #2 = Scan Table [ member ] Output [ Member_Name , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party_ID = #2.Party_ID ] Output [ #1.Party_name , #2.Member_Name ]"
    },
    {
        "id": "3dbcf9cfbb232dd9b04bde6bdf5088099607ef71f3461138b25acda2721f70f2",
        "question": "Show all party names and the number of members in each party.",
        "parsing_tree": "party_people | #1 = Scan Table [ member ] Output [ Party_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Party_ID ] Output [ countstar AS Count_Star , Party_ID ] ; #3 = Scan Table [ party ] Output [ Party_name , Party_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Party_ID = #3.Party_ID ] Output [ #3.Party_name , #2.Count_Star ]"
    },
    {
        "id": "cfdb0a326c2f300d6460afd0014a65811f7f12e16ea6c02a6a46f5a98b1e5e34",
        "question": "How many members are in each party?",
        "parsing_tree": "party_people | #1 = Scan Table [ member ] Output [ Party_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Party_ID ] Output [ countstar AS Count_Star , Party_ID ] ; #3 = Scan Table [ party ] Output [ Party_name , Party_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Party_ID = #3.Party_ID ] Output [ #3.Party_name , #2.Count_Star ]"
    },
    {
        "id": "a62d71960dc39112029d62e72db541ec98a40bb9083b84f64e38275314723a65",
        "question": "What is the name of party with most number of members?",
        "parsing_tree": "party_people | #1 = Scan Table [ member ] Output [ Party_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Party_ID ] Output [ countstar AS Count_Star , Party_ID ] ; #3 = Scan Table [ party ] Output [ Party_name , Party_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Party_ID = #3.Party_ID ] Output [ #3.Party_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Party_name ]"
    },
    {
        "id": "5f5888255987bf8d3f5d6b221fca0a9e7232dc6346c54fa52b04988934c80828",
        "question": "Return the name of the party with the most members.",
        "parsing_tree": "party_people | #1 = Scan Table [ member ] Output [ Party_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Party_ID ] Output [ countstar AS Count_Star , Party_ID ] ; #3 = Scan Table [ party ] Output [ Party_name , Party_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Party_ID = #3.Party_ID ] Output [ #3.Party_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Party_name ]"
    },
    {
        "id": "d56cf7f45bfb1d3942888b7edf0c272de45040493f4ed0775ef7d420c7defd30",
        "question": "Show all party names and their region names.",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Output [ Region_ID , Party_name ] ; #2 = Scan Table [ region ] Output [ Region_ID , Region_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Region_ID = #2.Region_ID ] Output [ #1.Party_name , #2.Region_name ]"
    },
    {
        "id": "045be4a5c1f681e8fcc6fbc890dbce1ea37b3a73a2afb539d0174790db271f70",
        "question": "What are the names of parties and their respective regions?",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Output [ Region_ID , Party_name ] ; #2 = Scan Table [ region ] Output [ Region_ID , Region_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Region_ID = #2.Region_ID ] Output [ #1.Party_name , #2.Region_name ]"
    },
    {
        "id": "e4e9818f2c8224d523abb8199468e19cbd968fccfa7dbd5c3eaf71a24b7ae84a",
        "question": "Show names of parties that does not have any members.",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Output [ Party_name , Party_ID ] ; #2 = Scan Table [ member ] Output [ Party_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Party_ID IS NULL OR #1.Party_ID = #2.Party_ID ] Output [ #1.Party_name ]"
    },
    {
        "id": "1efbc61a80e26c16be88a75339990411de3ca613b493945d010a52e1f5ae826d",
        "question": "What are the names of parties that have no members?",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Output [ Party_name , Party_ID ] ; #2 = Scan Table [ member ] Output [ Party_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Party_ID IS NULL OR #1.Party_ID = #2.Party_ID ] Output [ #1.Party_name ]"
    },
    {
        "id": "34fe53e5454bec5cfdd7caefa275c876f9ef373cb08e4d106371264c66de1619",
        "question": "Show the member names which are in both the party with id 3 and the party with id 1.",
        "parsing_tree": "party_people | #1 = Scan Table [ member ] Predicate [ Party_ID = 3 ] Distinct [ true ] Output [ Member_Name , Party_ID ] ; #2 = Scan Table [ member ] Predicate [ Party_ID = 1 ] Output [ Member_Name , Party_ID ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Member_Name = #2.Member_Name ] Output [ #1.Member_Name ]"
    },
    {
        "id": "515ffcaa05e0e03d8b038b778ceea871e3a352d5301591b3315c8151bccc358f",
        "question": "Which member names are shared among members in the party with the id 3 and the party with the id 1?",
        "parsing_tree": "party_people | #1 = Scan Table [ member ] Predicate [ Party_ID = 3 ] Distinct [ true ] Output [ Member_Name , Party_ID ] ; #2 = Scan Table [ member ] Predicate [ Party_ID = 1 ] Output [ Member_Name , Party_ID ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Member_Name = #2.Member_Name ] Output [ #1.Member_Name ]"
    },
    {
        "id": "7e12b43fc8dd810004c4ae2311b82870a9f06abfb25da0f6934549d192e29ab8",
        "question": "Show member names that are not in the Progress Party.",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Predicate [ Party_name <> 'Progress Party' ] Output [ Party_name , Party_ID ] ; #2 = Scan Table [ member ] Output [ Member_Name , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party_ID = #2.Party_ID ] Output [ #2.Member_Name ]"
    },
    {
        "id": "b6078a4bf37c78347d154c429bde3c276bf0412d988f44adf13aca84f3fe2a10",
        "question": "Which member names corresponding to members who are not in the Progress Party?",
        "parsing_tree": "party_people | #1 = Scan Table [ party ] Predicate [ Party_name <> 'Progress Party' ] Output [ Party_name , Party_ID ] ; #2 = Scan Table [ member ] Output [ Member_Name , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party_ID = #2.Party_ID ] Output [ #2.Member_Name ]"
    },
    {
        "id": "54445d9ac25fe5017ff51b2496a1f3e57422eb6a9a240e0fcd187521a8ecbea9",
        "question": "How many party events do we have?",
        "parsing_tree": "party_people | #1 = Scan Table [ party_events ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a63809b4c1e042bb79a4f0556c6ba74aaeb9082f2cff57e7961374eac68ffc02",
        "question": "Count the number of party events.",
        "parsing_tree": "party_people | #1 = Scan Table [ party_events ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "bf55496158bfddcfe652392a8127bc4aa0195e313fd7e72b1307862d33207475",
        "question": "Show party names and the number of events for each party.",
        "parsing_tree": "party_people | #1 = Scan Table [ party_events ] Output [ Party_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Party_ID ] Output [ countstar AS Count_Star , Party_ID ] ; #3 = Scan Table [ party ] Output [ Party_name , Party_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Party_ID = #3.Party_ID ] Output [ #3.Party_name , #2.Count_Star ]"
    },
    {
        "id": "0ae0d8cc9955157e5fdfe7cbfd31f7366c056057fd4f117be6acd49f2a3cb430",
        "question": "How many events are there for each party?",
        "parsing_tree": "party_people | #1 = Scan Table [ party_events ] Output [ Party_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Party_ID ] Output [ countstar AS Count_Star , Party_ID ] ; #3 = Scan Table [ party ] Output [ Party_name , Party_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Party_ID = #3.Party_ID ] Output [ #3.Party_name , #2.Count_Star ]"
    },
    {
        "id": "fed50e73ebb385ade552ec4b0c5f617953c7406cb8069a25b8446d3c3de7a661",
        "question": "Show all member names who are not in charge of any event.",
        "parsing_tree": "party_people | #1 = Scan Table [ member ] Distinct [ true ] Output [ Member_Name ] ; #2 = Scan Table [ party_events ] Output [ Member_in_charge_ID ] ; #3 = Scan Table [ member ] Output [ Member_Name , Member_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Member_in_charge_ID = #3.Member_ID ] Output [ #3.Member_Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Member_Name = #4.Member_Name ] Output [ #1.Member_Name ]"
    },
    {
        "id": "d7d0e61705307a19fb48a1e9c16017b45da22ddd1cc37598b98a8d9356600944",
        "question": "What are the names of members who are not in charge of any events?",
        "parsing_tree": "party_people | #1 = Scan Table [ member ] Distinct [ true ] Output [ Member_Name ] ; #2 = Scan Table [ party_events ] Output [ Member_in_charge_ID ] ; #3 = Scan Table [ member ] Output [ Member_Name , Member_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Member_in_charge_ID = #3.Member_ID ] Output [ #3.Member_Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Member_Name = #4.Member_Name ] Output [ #1.Member_Name ]"
    },
    {
        "id": "5ff8509fd8dc5f366eb2d8281b01d8685ab5477ef8b89d1128d26f3635db037a",
        "question": "What are the names of parties with at least 2 events?",
        "parsing_tree": "party_people | #1 = Scan Table [ party_events ] Output [ Party_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Party_ID ] Output [ countstar AS Count_Star , Party_ID ] ; #3 = Scan Table [ party ] Output [ Party_name , Party_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Party_ID = #3.Party_ID ] Output [ #3.Party_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Party_name ]"
    },
    {
        "id": "2de1f9803aa55601277780c57f7970e283f4d1846d9e5d2c4c7fe3eee5664f7a",
        "question": "Return the names of parties that have two or more events.",
        "parsing_tree": "party_people | #1 = Scan Table [ party_events ] Output [ Party_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Party_ID ] Output [ countstar AS Count_Star , Party_ID ] ; #3 = Scan Table [ party ] Output [ Party_name , Party_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Party_ID = #3.Party_ID ] Output [ #3.Party_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Party_name ]"
    },
    {
        "id": "4e0df0f8843dba6f50ba5e0cd63015e0ff93fe5fa4bba910a78eef8d52b6b207",
        "question": "What is the name of member in charge of greatest number of events?",
        "parsing_tree": "party_people | #1 = Scan Table [ party_events ] Output [ Member_in_charge_ID ] ; #2 = Scan Table [ member ] Output [ Member_Name , Member_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Member_in_charge_ID = #2.Member_ID ] Output [ #2.Member_ID , #2.Member_Name , #1.Member_in_charge_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Member_in_charge_ID ] Output [ countstar AS Count_Star , Member_Name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Member_Name ]"
    },
    {
        "id": "49ea6216490ad0a5dbadb4886a639c588e1cc68e9c2d53c8f65acbd16b52df2f",
        "question": "Return the name of the member who is in charge of the most events.",
        "parsing_tree": "party_people | #1 = Scan Table [ party_events ] Output [ Member_in_charge_ID ] ; #2 = Scan Table [ member ] Output [ Member_Name , Member_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Member_in_charge_ID = #2.Member_ID ] Output [ #2.Member_ID , #2.Member_Name , #1.Member_in_charge_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Member_in_charge_ID ] Output [ countstar AS Count_Star , Member_Name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Member_Name ]"
    },
    {
        "id": "472c48aea51d9e41a26ff3bc9c8c0d197420e7bb15ef3d693a54d9d6ec63431e",
        "question": "find the event names that have more than 2 records.",
        "parsing_tree": "party_people | #1 = Scan Table [ party_events ] Output [ Event_Name ] ; #2 = Aggregate [ #1 ] GroupBy [ Event_Name ] Output [ countstar AS Count_Star , Event_Name ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Event_Name ]"
    },
    {
        "id": "250e654c3a6f31ff5d394aa327bc06b7edec396e8f9ac8f85bedb02dd4c0f992",
        "question": "Which event names were used more than twice for party events?",
        "parsing_tree": "party_people | #1 = Scan Table [ party_events ] Output [ Event_Name ] ; #2 = Aggregate [ #1 ] GroupBy [ Event_Name ] Output [ countstar AS Count_Star , Event_Name ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Event_Name ]"
    },
    {
        "id": "b998554659fd10037d42b32068280b607342c4926b505c3345c757c0b97e4404",
        "question": "How many Annual Meeting events happened in the United Kingdom region?",
        "parsing_tree": "party_people | #1 = Scan Table [ region ] Predicate [ Region_name = 'United Kingdom' ] Output [ Region_ID , Region_name ] ; #2 = Scan Table [ party ] Output [ Region_ID , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Region_ID = #2.Region_ID ] Output [ #2.Party_ID ] ; #4 = Scan Table [ party_events ] Predicate [ Event_Name = 'Annaual Meeting' ] Output [ Event_Name , Party_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Party_ID = #4.Party_ID ] Output [ #3.Party_ID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "92739be6c5544e9671d99d09d735ed3ba3685b5774f44020ef4d3d26176cf100",
        "question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.",
        "parsing_tree": "party_people | #1 = Scan Table [ region ] Predicate [ Region_name = 'United Kingdom' ] Output [ Region_ID , Region_name ] ; #2 = Scan Table [ party ] Output [ Region_ID , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Region_ID = #2.Region_ID ] Output [ #2.Party_ID ] ; #4 = Scan Table [ party_events ] Predicate [ Event_Name = 'Annaual Meeting' ] Output [ Event_Name , Party_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Party_ID = #4.Party_ID ] Output [ #3.Party_ID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "adf7e2e622fe47bdb19131c1564137afe715331f86b0d6f088204e93048d2476",
        "question": "How many pilots are there?",
        "parsing_tree": "pilot_record | #1 = Scan Table [ pilot ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "82867f67bf51efb6617005639bc4ed29827298b53b8b32760fd12d6884dffcff",
        "question": "List the names of pilots in ascending order of rank.",
        "parsing_tree": "pilot_record | #1 = Scan Table [ pilot ] Output [ Rank , Pilot_name ] ; #2 = Sort [ #1 ] OrderBy [ Rank ASC ] Output [ Rank , Pilot_name ]"
    },
    {
        "id": "0e5225dc1e719505a4cb9d300d3ef0705f356be78ece2fe44bcf9e99116b70ff",
        "question": "What are the positions and teams of pilots?",
        "parsing_tree": "pilot_record | #1 = Scan Table [ pilot ] Output [ Position , Team ]"
    },
    {
        "id": "960d98ffc9c371049da9b28d7c4ef0d43b44a237f13ec9438f2155ace1fd2cb9",
        "question": "List the distinct positions of pilots older than 30.",
        "parsing_tree": "pilot_record | #1 = Scan Table [ pilot ] Predicate [ Age > 30 ] Distinct [ true ] Output [ Position ]"
    },
    {
        "id": "56e8e772d12dbb96b43ae5dc891aa30d8d01a3b0d392473d10df88157d15962c",
        "question": "Show the names of pilots from team \"Bradley\" or \"Fordham\".",
        "parsing_tree": "pilot_record | #1 = Scan Table [ pilot ] Predicate [ Team = 'Bradley' OR Team = 'Fordham' ] Output [ Team , Pilot_name ]"
    },
    {
        "id": "71ab5bbc34d967cea02ec70ad1e2b66d136ce4fc3cb6658ceb3ba80183f82f69",
        "question": "What is the joined year of the pilot of the highest rank?",
        "parsing_tree": "pilot_record | #1 = Scan Table [ pilot ] Output [ Rank , Join_Year ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Rank ASC ] Output [ Rank , Join_Year ]"
    },
    {
        "id": "6359373f8670fef803a5a01b845b393920701546dcef3c9825178769e1b518e0",
        "question": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.",
        "parsing_tree": "pilot_record | #1 = Scan Table [ pilot ] Output [ Nationality ] ; #2 = Aggregate [ #1 ] GroupBy [ Nationality ] Output [ Nationality , countstar AS Count_Star ]"
    },
    {
        "id": "b0eec30e3c189c2aa62394f46f7455a6b162c7c6f772b1ff90a75f202b0b901e",
        "question": "Show the most common nationality of pilots.",
        "parsing_tree": "pilot_record | #1 = Scan Table [ pilot ] Output [ Nationality ] ; #2 = Aggregate [ #1 ] GroupBy [ Nationality ] Output [ Nationality , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Nationality , Count_Star ]"
    },
    {
        "id": "006767753c66a6186de84f1eea6719a998a08dc1d9b2e0c9ef4b291bdc5e32a0",
        "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "parsing_tree": "pilot_record | #1 = Scan Table [ pilot ] Predicate [ Join_Year < 2000 ] Distinct [ true ] Output [ Position , Join_Year ] ; #2 = Scan Table [ pilot ] Predicate [ Join_Year > 2005 ] Output [ Position , Join_Year ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Position = #2.Position ] Output [ #1.Position ]"
    },
    {
        "id": "740ff1791e17bcee6604bc381f0b27f9bf8a0fd5d1aa9f51372c5664c51773fa",
        "question": "Show the names of pilots and models of aircrafts they have flied with.",
        "parsing_tree": "pilot_record | #1 = Scan Table [ pilot ] Output [ Pilot_ID , Pilot_name ] ; #2 = Scan Table [ pilot_record ] Output [ Aircraft_ID , Pilot_ID ] ; #3 = Scan Table [ aircraft ] Output [ Aircraft_ID , Model ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Aircraft_ID = #3.Aircraft_ID ] Output [ #2.Pilot_ID , #3.Model ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.Pilot_ID = #4.Pilot_ID ] Output [ #4.Model , #1.Pilot_name ]"
    },
    {
        "id": "79c2b48d92b8dd0a18331240f152bc60c1522ca0fda8a94026845b3f75e2d13c",
        "question": "Show the fleet series of the aircrafts flied by pilots younger than 34",
        "parsing_tree": "pilot_record | #1 = Scan Table [ pilot ] Predicate [ Age < 34 ] Output [ Pilot_ID , Age ] ; #2 = Scan Table [ pilot_record ] Output [ Aircraft_ID , Pilot_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Pilot_ID = #2.Pilot_ID ] Output [ #2.Aircraft_ID ] ; #4 = Scan Table [ aircraft ] Output [ Aircraft_ID , Fleet_Series ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Aircraft_ID = #4.Aircraft_ID ] Output [ #4.Fleet_Series ]"
    },
    {
        "id": "f690d4376816cff50f903b62abdbb020014eec1a2a0b8a2c23c05429ba7452ff",
        "question": "Show the names of pilots and the number of records they have.",
        "parsing_tree": "pilot_record | #1 = Scan Table [ pilot ] Output [ Pilot_ID , Pilot_name ] ; #2 = Scan Table [ pilot_record ] Output [ Pilot_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Pilot_ID = #2.Pilot_ID ] Output [ #1.Pilot_name ] ; #4 = Aggregate [ #3 ] GroupBy [ Pilot_name ] Output [ countstar AS Count_Star , Pilot_name ]"
    },
    {
        "id": "d652c204f5ab0af16dc455bbfd4c1c1d7a91df5696a21df66057c6fff85e1dd4",
        "question": "Show names of pilots that have more than one record.",
        "parsing_tree": "pilot_record | #1 = Scan Table [ pilot ] Output [ Pilot_ID , Pilot_name ] ; #2 = Scan Table [ pilot_record ] Output [ Pilot_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Pilot_ID = #2.Pilot_ID ] Output [ #1.Pilot_name ] ; #4 = Aggregate [ #3 ] GroupBy [ Pilot_name ] Output [ countstar AS Count_Star , Pilot_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Count_Star , Pilot_name ]"
    },
    {
        "id": "cef55b8fe487267adc1f0b7fbe6152b238dc25f7a561c04664f9e3dbd7337af9",
        "question": "List the names of pilots that do not have any record.",
        "parsing_tree": "pilot_record | #1 = Scan Table [ pilot ] Output [ Pilot_ID , Pilot_name ] ; #2 = Scan Table [ pilot_record ] Output [ Pilot_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Pilot_ID ] Output [ Pilot_ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Pilot_ID = #1.Pilot_ID ] Output [ #1.Pilot_name ]"
    },
    {
        "id": "2a6ce35eff39062cc1133bf107193822851954170ca67c3d66c8bc571825f97a",
        "question": "What document status codes do we have?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Ref_Document_Status ] Output [ document_status_code ]"
    },
    {
        "id": "310f36fd40ad52f0959e5f2e4430314ac57123de1a9af089e8e42d8fc563a469",
        "question": "What is the description of document status code 'working'?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Ref_Document_Status ] Predicate [ document_status_code = 'working' ] Output [ document_status_code , document_status_description ]"
    },
    {
        "id": "a53f9e358455e01530e186aad916cb7d46501fa9009074e10cb0fac265d06cdf",
        "question": "What document type codes do we have?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Ref_Document_Types ] Output [ document_type_code ]"
    },
    {
        "id": "1742090363dfcfe8c9fe04f81f84764f0b935fd8ed3a2c509739fb43336aad42",
        "question": "What is the description of document type 'Paper'?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Ref_Document_Types ] Predicate [ document_type_code = 'Paper' ] Output [ document_type_description , document_type_code ]"
    },
    {
        "id": "cf489d9b8b1c312b78c2da22a193375a855b295879e291f4d4890130f14f4275",
        "question": "What are the shipping agent names?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Ref_Shipping_Agents ] Output [ shipping_agent_name ]"
    },
    {
        "id": "b2f7315c53323f7297bd5ff38141591941bec2dd1b9d9d85bd03f188f040f532",
        "question": "What is the shipping agent code of shipping agent UPS?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Ref_Shipping_Agents ] Predicate [ shipping_agent_name = 'UPS' ] Output [ shipping_agent_code , shipping_agent_name ]"
    },
    {
        "id": "1e87a92feceab616c60525470efdb6abca130a212ca698c3719b9979538e48fe",
        "question": "What are all role codes?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Roles ] Output [ role_code ]"
    },
    {
        "id": "4cdf98e1dfb3d73896505079e2b45415db6f24e564e6ceabf605878957993cb8",
        "question": "What is the description of role code ED?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Roles ] Predicate [ role_code = 'ED' ] Output [ role_description , role_code ]"
    },
    {
        "id": "580c1f0804b35cda8f089f2219d1d69e5d38ca00d8a42ea6fb841598ff499590",
        "question": "How many employees do we have?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Employees ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "265419cf137690752e81ba3efc2e41af4280d4535e2657a1dd66395c1d263cf5",
        "question": "What is the role of the employee named Koby?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Employees ] Predicate [ employee_name = 'Koby' ] Output [ role_code , employee_name ] ; #2 = Scan Table [ Roles ] Output [ role_description , role_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.role_code = #2.role_code ] Output [ #2.role_description ]"
    },
    {
        "id": "3188be0609dadf068e12d11a76919041c92ac0b65c52b76b116c445122cf024c",
        "question": "List all document ids and receipt dates of documents.",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Documents ] Output [ receipt_date , document_id ]"
    },
    {
        "id": "07d51887c69574a90d207be4f512b2b6da8ae9bd7f1ba34a5b87f407c06e072c",
        "question": "How many employees does each role have? List role description, id and number of employees.",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Employees ] Output [ role_code ] ; #2 = Aggregate [ #1 ] GroupBy [ role_code ] Output [ countstar AS Count_Star , role_code ] ; #3 = Scan Table [ Roles ] Output [ role_description , role_code ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.role_code = #3.role_code ] Output [ #2.role_code , #3.role_description , #2.Count_Star ]"
    },
    {
        "id": "31d741137c213a52a7ba8e7609dfab9dbb83d20f98e5679da722d925fd2199ba",
        "question": "List roles that have more than one employee. List the role description and number of employees.",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Employees ] Output [ role_code ] ; #2 = Aggregate [ #1 ] GroupBy [ role_code ] Output [ countstar AS Count_Star , role_code ] ; #3 = Scan Table [ Roles ] Output [ role_description , role_code ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.role_code = #3.role_code ] Output [ #3.role_description , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ role_description , Count_Star ]"
    },
    {
        "id": "7403da40d4c2c07936f59ed47cd4e67bc89c80a1a5fc2ee0de0a8aff360b10ca",
        "question": "What is the document status description of the document with id 1?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Documents ] Predicate [ document_id = 1 ] Output [ document_status_code , document_id ] ; #2 = Scan Table [ Ref_Document_Status ] Output [ document_status_code , document_status_description ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.document_status_code = #2.document_status_code ] Output [ #2.document_status_description ]"
    },
    {
        "id": "31cf79810c0a264e79eeb0982d4f126525cadc022627a32a91ca2dfc70410e1f",
        "question": "How many documents have the status code done?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Documents ] Predicate [ document_status_code = 'done' ] Output [ document_status_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1a648c9f28d81242552cc643cc1ffc5c4c629f57b4011f0662ed005af603f173",
        "question": "List the document type code for the document with the id 2.",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Documents ] Predicate [ document_id = 2 ] Output [ document_type_code , document_id ]"
    },
    {
        "id": "aefd1af7b90d0fcd01d681eebdcd882bce1f5c233dfd6be60a92e2384ba9e4bc",
        "question": "List the document ids for any documents with the status code done and the type code paper.",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Documents ] Predicate [ document_status_code = 'done' AND document_type_code = 'Paper' ] Output [ document_status_code , document_id , document_type_code ]"
    },
    {
        "id": "77c95689eff11b7626cfe3703f0347646c3749cde30f2210c5635f8accdebb02",
        "question": "What is the name of the shipping agent of the document with id 2?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Documents ] Predicate [ document_id = 2 ] Output [ shipping_agent_code , document_id ] ; #2 = Scan Table [ Ref_Shipping_Agents ] Output [ shipping_agent_code , shipping_agent_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.shipping_agent_code = #2.shipping_agent_code ] Output [ #2.shipping_agent_name ]"
    },
    {
        "id": "78c5354c0d11a62d8a4828d1e75a69b309f928420c5f24a141e66fba8dfdb722",
        "question": "How many documents were shipped by USPS?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Ref_Shipping_Agents ] Predicate [ shipping_agent_name = 'USPS' ] Output [ shipping_agent_code , shipping_agent_name ] ; #2 = Scan Table [ Documents ] Output [ shipping_agent_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.shipping_agent_code = #2.shipping_agent_code ] Output [ #1.shipping_agent_name , #1.shipping_agent_code ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "20c5edd473ac8d008e77b30d4ca18fe37e0d446b9c946a45e1c9d24979698910",
        "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Documents ] Output [ shipping_agent_code ] ; #2 = Aggregate [ #1 ] GroupBy [ shipping_agent_code ] Output [ shipping_agent_code , countstar AS Count_Star ] ; #3 = Scan Table [ Ref_Shipping_Agents ] Output [ shipping_agent_code , shipping_agent_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.shipping_agent_code = #3.shipping_agent_code ] Output [ #3.shipping_agent_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , shipping_agent_name ]"
    },
    {
        "id": "a47082af326753a990ae1fce939edb477a17507be19533f4435b8fa1c2884807",
        "question": "What is the receipt date of the document with id 3?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Documents ] Predicate [ document_id = 3 ] Output [ receipt_date , document_id ]"
    },
    {
        "id": "8941e8cba68fc4c1c88bb13bed5bf744854fc7aadcc35fd247993bb5aaf41f87",
        "question": "What address was the document with id 4 mailed to?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Documents_Mailed ] Predicate [ document_id = 4 ] Output [ document_id , mailed_to_address_id ] ; #2 = Scan Table [ Addresses ] Output [ address_details , address_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mailed_to_address_id = #2.address_id ] Output [ #2.address_details ]"
    },
    {
        "id": "9670316623e058d9d81560e903d246d3b123444728706b73f5ed756245800962",
        "question": "What is the mail date of the document with id 7?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Documents_Mailed ] Predicate [ document_id = 7 ] Output [ mailing_date , document_id ]"
    },
    {
        "id": "640e5dc9b1decd40ce1953fac9026057dd1f298a8da5e7f98dbe4e0989537f4d",
        "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Documents ] Predicate [ document_status_code = 'done' AND document_type_code = 'Paper' ] Output [ document_status_code , document_id , document_type_code ] ; #2 = Scan Table [ Ref_Shipping_Agents ] Predicate [ shipping_agent_name = 'USPS' ] Output [ shipping_agent_code , shipping_agent_name ] ; #3 = Scan Table [ Documents ] Output [ shipping_agent_code , document_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.shipping_agent_code = #3.shipping_agent_code ] Output [ #3.document_id ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.document_id = #4.document_id ] Output [ #1.document_id ]"
    },
    {
        "id": "94001f5e60974db6863f03feefbf5b720bf733c8abc41286dd6655928ea0abc1",
        "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Ref_Shipping_Agents ] Predicate [ shipping_agent_name = 'USPS' ] Output [ shipping_agent_code , shipping_agent_name ] ; #2 = Scan Table [ Documents ] Predicate [ document_status_code = 'done' AND document_type_code = 'Paper' ] Output [ document_status_code , document_id , document_type_code ] ; #3 = Scan Table [ Documents ] Output [ shipping_agent_code , document_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.document_id = #3.document_id ] Output [ #2.document_id , #3.shipping_agent_code ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.shipping_agent_code = #4.shipping_agent_code ] Output [ #4.document_id ]"
    },
    {
        "id": "caf8d1f3e9871fe5121de0564a7fecc10bfa6484df4acbc7d1deaa4370ee7873",
        "question": "What is draft detail of the document with id 7?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Document_Drafts ] Predicate [ document_id = 7 ] Output [ draft_details , document_id ]"
    },
    {
        "id": "edb2b47c74598458b3913efd5fdd784a6da7671e90bf12d1e5ba7eb5216736ee",
        "question": "How many draft copies does the document with id 2 have?",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Draft_Copies ] Predicate [ document_id = 2 ] Output [ document_id ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b713f7a39be6e3bca193fe826c9f8d951026acef06b06e01a572abba31db331d",
        "question": "Which document has the most draft copies? List its document id and number of draft copies.",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Draft_Copies ] Output [ document_id ] ; #2 = Aggregate [ #1 ] GroupBy [ document_id ] Output [ countstar AS Count_Star , document_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , document_id ]"
    },
    {
        "id": "39eca17bf0d8910e82c7865bc19cc25e91826c71ae4b963855a56203596c35e1",
        "question": "Which documents have more than 1 draft copies? List document id and number of draft copies.",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Draft_Copies ] Output [ document_id ] ; #2 = Aggregate [ #1 ] GroupBy [ document_id ] Output [ countstar AS Count_Star , document_id ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Count_Star , document_id ]"
    },
    {
        "id": "6a30d608de097e75736127ff165b7ea86be224f7cde9ebaca8f91fd2cede3fd1",
        "question": "List all employees in the circulation history of the document with id 1. List the employee's name.",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Circulation_History ] Predicate [ document_id = 1 ] Output [ employee_id , document_id ] ; #2 = Scan Table [ Employees ] Output [ employee_id , employee_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.employee_id = #2.employee_id ] Output [ #2.employee_name ]"
    },
    {
        "id": "5e5b9ac8d7c243631fd9cb466e1e269a23e6763b16a57d696f5e43338c2eb64f",
        "question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Employees ] Distinct [ true ] Output [ employee_name ] ; #2 = Scan Table [ Circulation_History ] Output [ employee_id ] ; #3 = Scan Table [ Employees ] Output [ employee_id , employee_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.employee_id = #3.employee_id ] Output [ #3.employee_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.employee_name = #4.employee_name ] Output [ #1.employee_name ]"
    },
    {
        "id": "8568f53d2fbaece6dced7f5567a2746471a87385f60c0c6d4d3f3ae4d20bf59d",
        "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Circulation_History ] Output [ draft_number , employee_id , copy_number , document_id ] ; #2 = Scan Table [ Employees ] Output [ employee_id , employee_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.employee_id = #2.employee_id ] Output [ #1.draft_number , #1.copy_number , #1.document_id , #2.employee_name ] ; #4 = Aggregate [ #3 ] GroupBy [ employee_name , document_id , draft_number , copy_number ] Output [ countstar AS Count_Star , employee_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , employee_name ]"
    },
    {
        "id": "7409704d9683107770c8e685e9f1d8aaa952e4eecc7dfd0e2013e328bf8d6842",
        "question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
        "parsing_tree": "cre_Doc_Control_Systems | #1 = Scan Table [ Circulation_History ] Distinct [ true ] Output [ employee_id , document_id ] ; #2 = Aggregate [ #1 ] GroupBy [ document_id ] Output [ countstar AS Count_Star , document_id ]"
    },
    {
        "id": "5d2caf4f199f049311d65866c5bdf272f10f87d24bf03669acb221d683e80c86",
        "question": "List all department names ordered by their starting date.",
        "parsing_tree": "company_1 | #1 = Scan Table [ department ] Output [ Mgr_start_date , Dname ] ; #2 = Sort [ #1 ] OrderBy [ Mgr_start_date ASC ] Output [ Mgr_start_date , Dname ]"
    },
    {
        "id": "0c5722130750cec8d8c0bcea68a77965fd1842f755bed1055eddd6f909179547",
        "question": "find all dependent names who have a spouse relation with some employee.",
        "parsing_tree": "company_1 | #1 = Scan Table [ dependent ] Output [ Dependent_name , Relationship ] ; #2 = Filter [ #1 ] Predicate [ Relationship = 'Spouse' ] Output [ Dependent_name ]"
    },
    {
        "id": "05e02e7e4618ebe8c27650074889eb605df5256f835cedc7934b226a068aa9c1",
        "question": "how many female dependents are there?",
        "parsing_tree": "company_1 | #1 = Scan Table [ dependent ] Output [ Sex ] ; #2 = Filter [ #1 ] Predicate [ Sex = 'F' ] Output [ 1 AS One ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ec6ea8c938f89003e1be5a7964f49e386c5bda16055282a5090951343a29e234",
        "question": "Find the names of departments that are located in Houston.",
        "parsing_tree": "company_1 | #1 = Scan Table [ dept_locations ] Predicate [ Dlocation = 'Houston' ] Output [ Dlocation , Dnumber ] ; #2 = Scan Table [ department ] Output [ Dname , Dnumber ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Dnumber = #2.Dnumber ] Output [ #2.Dname ]"
    },
    {
        "id": "b8f6eba7fea61c1c6491306cb61fe664a488f9e4a75eb5e1a39881e6610aeeb5",
        "question": "Return the first names and last names of employees who earn more than 30000 in salary.",
        "parsing_tree": "company_1 | #1 = Scan Table [ employee ] Predicate [ Salary > 30000 ] Output [ Fname , Lname , Salary ]"
    },
    {
        "id": "bff65dd10a08e79ed162c9b9ed7d5223f1e474a85c305ec1e9e2325c5a01d552",
        "question": "Find the number of employees of each gender whose salary is lower than 50000.",
        "parsing_tree": "company_1 | #1 = Scan Table [ employee ] Predicate [ Salary < 50000 ] Output [ Salary , Sex ] ; #2 = Aggregate [ #1 ] GroupBy [ Sex ] Output [ countstar AS Count_Star , Sex ]"
    },
    {
        "id": "5ee99572a63a2dbba354fba58f6ce2205f2153d554070348b92b65de67d71a71",
        "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.",
        "parsing_tree": "company_1 | #1 = Scan Table [ employee ] Output [ Fname , Lname , Bdate , Address ] ; #2 = Sort [ #1 ] OrderBy [ Bdate ASC ] Output [ Fname , Lname , Bdate , Address ]"
    },
    {
        "id": "913d0dccab09d4065b9f960e39b360b5e76997697a9112b32dcdf2f99fbad609",
        "question": "what are the event details of the services that have the type code 'Marriage'?",
        "parsing_tree": "local_govt_in_alabama | #1 = Scan Table [ Services ] Predicate [ Service_Type_Code = 'Marriage' ] Output [ Service_Type_Code , Service_ID ] ; #2 = Scan Table [ Events ] Output [ Service_ID , Event_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Service_ID = #2.Service_ID ] Output [ #2.Event_Details ]"
    },
    {
        "id": "4c79fe89e8190671654a02cf144b8d9cb16c04eb8f43e38b7f15ea75158b65d9",
        "question": "What are the ids and details of events that have more than one participants?",
        "parsing_tree": "local_govt_in_alabama | #1 = Scan Table [ Participants_in_Events ] Output [ Event_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Event_ID ] Output [ countstar AS Count_Star , Event_ID ] ; #3 = Scan Table [ Events ] Output [ Event_ID , Event_Details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Event_ID = #3.Event_ID ] Output [ #2.Count_Star , #3.Event_ID , #3.Event_Details ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Event_ID , Event_Details ]"
    },
    {
        "id": "2d194c508bcc5bfa0dde4c6a163afdc59e6ccdaa5c6cbb2203eea25eaac3c7bf",
        "question": "How many events have each participants attended? List the participant id, type and the number.",
        "parsing_tree": "local_govt_in_alabama | #1 = Scan Table [ Participants_in_Events ] Output [ Participant_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Participant_ID ] Output [ countstar AS Count_Star , Participant_ID ] ; #3 = Scan Table [ Participants ] Output [ Participant_Type_Code , Participant_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Participant_ID = #3.Participant_ID ] Output [ #2.Count_Star , #3.Participant_ID , #3.Participant_Type_Code ]"
    },
    {
        "id": "ed601a982e59dcc96dc9e971d101d410d1bffb0f7c7903b4d90658433c058157",
        "question": "What are all the the participant ids, type code and details?",
        "parsing_tree": "local_govt_in_alabama | #1 = Scan Table [ Participants ] Output [ Participant_Details , Participant_Type_Code , Participant_ID ]"
    },
    {
        "id": "ba2e3fb4f1b0f4ed437745d2177472063d2fc8451d1b6b45f208291d37d88661",
        "question": "How many participants belong to the type 'Organizer'?",
        "parsing_tree": "local_govt_in_alabama | #1 = Scan Table [ Participants ] Predicate [ Participant_Type_Code = 'Organizer' ] Output [ Participant_Type_Code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "66b7b37ec126880bf5a5e8a302c8cfff9b34d1b5ddcad0bfa6abe74a6c122fae",
        "question": "List the type of the services in alphabetical order.",
        "parsing_tree": "local_govt_in_alabama | #1 = Scan Table [ Services ] Output [ Service_Type_Code ] ; #2 = Sort [ #1 ] OrderBy [ Service_Type_Code ASC ] Output [ Service_Type_Code ]"
    },
    {
        "id": "dd650d62558671ab9691116b74204d2f7c2f9bd1ff4148d59d320698464c5218",
        "question": "List the service id and details for the events.",
        "parsing_tree": "local_govt_in_alabama | #1 = Scan Table [ Events ] Output [ Service_ID , Event_Details ]"
    },
    {
        "id": "05fa9c095142e18457e212bdc5d989fbeeb4b00ea9a0c8503382fa3ae7ecba2f",
        "question": "What is the most common participant type?",
        "parsing_tree": "local_govt_in_alabama | #1 = Scan Table [ Participants ] Output [ Participant_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Participant_Type_Code ] Output [ countstar AS Count_Star , Participant_Type_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Participant_Type_Code ]"
    },
    {
        "id": "25514fdebc441270d2a4ac4fd23e3887786c137d756154f5c4db60ba8852b6bb",
        "question": "Which service id and type has the least number of participants?",
        "parsing_tree": "local_govt_in_alabama | #1 = Scan Table [ Services ] Output [ Service_Type_Code , Service_ID ] ; #2 = Scan Table [ Events ] Output [ Event_ID , Service_ID ] ; #3 = Scan Table [ Participants_in_Events ] Output [ Event_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Event_ID = #3.Event_ID ] Output [ #2.Service_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.Service_ID = #4.Service_ID ] Output [ #1.Service_Type_Code , #4.Service_ID ] ; #6 = Aggregate [ #5 ] GroupBy [ Service_ID ] Output [ countstar AS Count_Star , Service_Type_Code , Service_ID ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Service_Type_Code , Count_Star , Service_ID ]"
    },
    {
        "id": "1629d7de8d763ed5536609d8c3f582222054ad9bbb6df6da4981063c9eba018b",
        "question": "What is the id of the event with the most participants?",
        "parsing_tree": "local_govt_in_alabama | #1 = Scan Table [ Participants_in_Events ] Output [ Event_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Event_ID ] Output [ countstar AS Count_Star , Event_ID ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Event_ID ]"
    },
    {
        "id": "2f58650c027ccdf470c5bf934d00dc9e3bc18ad2f9cf8fdf6a71d70a388abedb",
        "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "parsing_tree": "local_govt_in_alabama | #1 = Scan Table [ Events ] Output [ Event_ID ] ; #2 = Scan Table [ Participants ] Predicate [ Participant_Details = 'Kenyatta Kuhn' ] Output [ Participant_Details , Participant_ID ] ; #3 = Scan Table [ Participants_in_Events ] Output [ Event_ID , Participant_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Participant_ID = #3.Participant_ID ] Output [ #3.Event_ID ] ; #5 = Except [ #1 , #4 ] Predicate [ #4.Event_ID = #1.Event_ID ] Output [ #1.Event_ID ]"
    },
    {
        "id": "b3fd25600c45ec5bec5b0029296323d9ade8651b5b4f8dc141b8ab7c0c2fcc6c",
        "question": "Which services type had both successful and failure event details?",
        "parsing_tree": "local_govt_in_alabama | #1 = Scan Table [ Services ] Output [ Service_Type_Code , Service_ID ] ; #2 = Scan Table [ Events ] Predicate [ Event_Details = 'Success' ] Output [ Service_ID , Event_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Service_ID = #2.Service_ID ] Distinct [ true ] Output [ #1.Service_Type_Code ] ; #4 = Scan Table [ Services ] Output [ Service_Type_Code , Service_ID ] ; #5 = Scan Table [ Events ] Predicate [ Event_Details = 'Fail' ] Output [ Service_ID , Event_Details ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Service_ID = #5.Service_ID ] Output [ #4.Service_Type_Code ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Service_Type_Code = #6.Service_Type_Code ] Output [ #3.Service_Type_Code ]"
    },
    {
        "id": "8db5fe3a9e8c179bcc9c59043307b5fae5b08032c8ebb800a24dc167cfbfdf36",
        "question": "How many events did not have any participants?",
        "parsing_tree": "local_govt_in_alabama | #1 = Scan Table [ Events ] Output [ Event_ID ] ; #2 = Scan Table [ Participants_in_Events ] Output [ Event_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Event_ID ] Output [ Event_ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Event_ID = #1.Event_ID ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "fe906db60895b292b09fa8fa1a82a733d53baa6402b98286ce7dd1f873e88c4d",
        "question": "What are all the distinct participant ids who attended any events?",
        "parsing_tree": "local_govt_in_alabama | #1 = Scan Table [ Participants_in_Events ] Distinct [ true ] Output [ Participant_ID ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a52e525c549718905e007c59148e97deb560facf8d9b05ace880d88acdbc69d2",
        "question": "What is the name of the race held most recently?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Output [ name , date ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date DESC ] Output [ name , date ]"
    },
    {
        "id": "599b7a8bbd0ca25855218335c4986c0d5556539537c678b88ab375348a699fa9",
        "question": "What is the name of the race that occurred most recently?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Output [ name , date ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date DESC ] Output [ name , date ]"
    },
    {
        "id": "12825424e1262c4a268223c6a59272dfaddffd4309b83f8ebdb2e98a78ab82f3",
        "question": "What is the name and date of the most recent race?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Output [ name , date ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date DESC ] Output [ name , date ]"
    },
    {
        "id": "8c31e9210194670e6f90f3b9e2ca6abcbc42efbd7adeea2eb12c9cb3bc16adf2",
        "question": "What is the name and date of the race that occurred most recently?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Output [ name , date ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date DESC ] Output [ name , date ]"
    },
    {
        "id": "2a717a8c2c28d3d8bf46f9bb7e580d96d2677ae9d7506e9eb81d0fb2569800f6",
        "question": "Find the names of all races held in 2017.",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ year = 2017 ] Output [ name , year ]"
    },
    {
        "id": "014313268b059dbae5101168c11c01f59ef43d5b551c7ef80cd4858249e574b4",
        "question": "What are the names of all the races that occurred in the year 2017?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ year = 2017 ] Output [ name , year ]"
    },
    {
        "id": "641bb54b93ae7ce1d27bf29f21f4754f8740eea2097cef9a13bd74bc9a1fa404",
        "question": "Find the distinct names of all races held between 2014 and 2017?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ year >= 2014 AND year <= 2017 ] Distinct [ true ] Output [ name ]"
    },
    {
        "id": "cf022e722dba708dd6987c8593d118b96d07065c21b40ad8375f0b6bc81cbde9",
        "question": "What are the unique names of all race held between 2014 and 2017?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ year >= 2014 AND year <= 2017 ] Distinct [ true ] Output [ name ]"
    },
    {
        "id": "2ac8aafbfad0b3a5ddbacde2d55e61d79215db9578ab9f314940ce0f3f870f95",
        "question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ lapTimes ] Predicate [ milliseconds < 93000 ] Distinct [ true ] Output [ driverId , milliseconds ] ; #2 = Scan Table [ drivers ] Output [ driverId , forename , surname ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.driverId = #2.driverId ] Distinct [ true ] Output [ #2.surname , #2.forename ]"
    },
    {
        "id": "397e5d3c9190b268e740a305c802a1cee99e5c2760cb5c1622b00e0765382084",
        "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ lapTimes ] Predicate [ milliseconds < 93000 ] Distinct [ true ] Output [ driverId , milliseconds ] ; #2 = Scan Table [ drivers ] Output [ driverId , forename , surname ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.driverId = #2.driverId ] Distinct [ true ] Output [ #2.surname , #2.forename ]"
    },
    {
        "id": "da40076406bf023a7851c5da8978e445154093784b9a3fa899b92cf76239d376",
        "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Output [ driverId , nationality ] ; #2 = Scan Table [ lapTimes ] Predicate [ milliseconds > 100000 ] Output [ driverId , milliseconds ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.driverId = #1.driverId ] Output [ #1.driverId , #1.nationality ]"
    },
    {
        "id": "4b974b053a47b8f600db57e99320a614d346c198574263dccf1c77e57fd14301",
        "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Output [ driverId , nationality ] ; #2 = Scan Table [ lapTimes ] Predicate [ milliseconds > 100000 ] Output [ driverId , milliseconds ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.driverId = #1.driverId ] Output [ #1.driverId , #1.nationality ]"
    },
    {
        "id": "d62d4e77989633762663aecb5a37be3fe1bcdca233dc113f52221c5937ca2550",
        "question": "What are the forename and surname of the driver who has the smallest laptime?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Output [ driverId , forename , surname ] ; #2 = Scan Table [ lapTimes ] Output [ driverId , milliseconds ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.driverId = #2.driverId ] Output [ #1.forename , #2.milliseconds , #1.surname ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ milliseconds ASC ] Output [ milliseconds , forename , surname ]"
    },
    {
        "id": "7a775f684a4332e459b417f892a600b33fda6f003de9a3e58489b32bf0623a24",
        "question": "What is the forename and surname of the driver with the shortest laptime?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Output [ driverId , forename , surname ] ; #2 = Scan Table [ lapTimes ] Output [ driverId , milliseconds ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.driverId = #2.driverId ] Output [ #1.forename , #2.milliseconds , #1.surname ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ milliseconds ASC ] Output [ milliseconds , forename , surname ]"
    },
    {
        "id": "8c444d015f25b11521d115ad26d70b601972f2d9e7f8cabcd59014c31db6463d",
        "question": "What is the id and family name of the driver who has the longest laptime?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Output [ driverId , surname ] ; #2 = Scan Table [ lapTimes ] Output [ driverId , milliseconds ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.driverId = #2.driverId ] Output [ #2.milliseconds , #1.driverId , #1.surname ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ milliseconds DESC ] Output [ driverId , milliseconds , surname ]"
    },
    {
        "id": "729c7be57e89146d2f036b248347c0bb1dad41f4c21fb3e770bc07387eb2e29a",
        "question": "What is the id and last name of the driver with the longest laptime?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Output [ driverId , surname ] ; #2 = Scan Table [ lapTimes ] Output [ driverId , milliseconds ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.driverId = #2.driverId ] Output [ #2.milliseconds , #1.driverId , #1.surname ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ milliseconds DESC ] Output [ driverId , milliseconds , surname ]"
    },
    {
        "id": "8bc2c6748bec1912d8e74457efb9065dac3dc5f21fbebbd1a230da037dc2e00f",
        "question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ lapTimes ] Predicate [ position = 1 ] Output [ driverId , position ] ; #2 = Aggregate [ #1 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #3 = Scan Table [ drivers ] Output [ driverId , forename , surname ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.driverId = #3.driverId ] Output [ #3.surname , #3.forename , #3.driverId , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ driverId , forename , surname ]"
    },
    {
        "id": "ee26523b653a28640f75f64ab43c58c47fc3ab9a6bda3b613742586390a31f40",
        "question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ lapTimes ] Predicate [ position = 1 ] Output [ driverId , position ] ; #2 = Aggregate [ #1 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #3 = Scan Table [ drivers ] Output [ driverId , forename , surname ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.driverId = #3.driverId ] Output [ #3.surname , #3.forename , #3.driverId , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ driverId , forename , surname ]"
    },
    {
        "id": "c24336e980c6d98fc8e03a2484b821d959bb56c46be626e48a9066ffe4dceb4e",
        "question": "How many drivers participated in the race Australian Grand Prix held in 2009?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ year = 2009 AND name = 'Australian Grand Prix' ] Output [ name , raceId , year ] ; #2 = Scan Table [ results ] Output [ raceId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.raceId = #2.raceId ] Output [ #1.raceId , #1.name , #1.year ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4cedbbec9bfcc4ed140b0ca36b6652cb7f85034e6a64bcd328f5769d57c0dc15",
        "question": "How many drivers were in the Australian Grand Prix held in 2009?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ year = 2009 AND name = 'Australian Grand Prix' ] Output [ name , raceId , year ] ; #2 = Scan Table [ results ] Output [ raceId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.raceId = #2.raceId ] Output [ #1.raceId , #1.name , #1.year ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "bf29897b9e99cb8c14d7b3a83c7c10d45016c9a9b1d5518255cc18070c17f596",
        "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Predicate [ forename = 'Lewis' ] Output [ driverId , forename ] ; #2 = Scan Table [ results ] Output [ driverId , raceId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.driverId = #2.driverId ] Output [ #2.raceId ] ; #4 = Scan Table [ races ] Output [ name , raceId , year ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.raceId = #4.raceId ] Output [ #4.year , #4.name ]"
    },
    {
        "id": "4b1778a44374c15e36cf24f558352fdcf0bfa0c29825b8c4c0f9bb71b4f695c0",
        "question": "What are the names and years of all races that had a driver with the last name Lewis?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Predicate [ forename = 'Lewis' ] Output [ driverId , forename ] ; #2 = Scan Table [ results ] Output [ driverId , raceId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.driverId = #2.driverId ] Output [ #2.raceId ] ; #4 = Scan Table [ races ] Output [ name , raceId , year ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.raceId = #4.raceId ] Output [ #4.year , #4.name ]"
    },
    {
        "id": "785e4eae614d11d540cfa95a5ec800a1e3adf3126d2fd6b2bd9c4ced1c660b69",
        "question": "Find the forename and surname of drivers whose nationality is German?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Predicate [ nationality = 'German' ] Output [ nationality , forename , surname ]"
    },
    {
        "id": "21e356d86f0cbb0da7168aada548773e26ab5bcc1f0c73f07baff413001b8c96",
        "question": "What is the first and last name of all the German drivers?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Predicate [ nationality = 'German' ] Output [ nationality , forename , surname ]"
    },
    {
        "id": "dcbf8ed9aaeb5625b4d975f8c1409f8d5008048c15dd4f6fbe00ed170dc5a731",
        "question": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ name = 'Chinese Grand Prix' ] Output [ name , raceId ] ; #2 = Scan Table [ results ] Output [ driverId , raceId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.raceId = #2.raceId ] Distinct [ true ] Output [ #2.driverId ] ; #4 = Scan Table [ drivers ] Output [ driverId , forename ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.driverId = #4.driverId ] Output [ #4.forename , #3.driverId ] ; #6 = Scan Table [ races ] Predicate [ name = 'Australian Grand Prix' ] Output [ name , raceId ] ; #7 = Scan Table [ results ] Output [ driverId , raceId ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.raceId = #7.raceId ] Distinct [ true ] Output [ #7.driverId ] ; #9 = Scan Table [ drivers ] Output [ driverId , forename ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.driverId = #9.driverId ] Output [ #9.forename , #8.driverId ] ; #11 = Join [ #5 , #10 ] Predicate [ #5.driverId = #10.driverId ] Output [ #5.forename , #5.driverId ]"
    },
    {
        "id": "08b9292cf2157e64aa1856a32f7b099d7d5cfbb4ccfa72806707aadd01c2e7a4",
        "question": "What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ name = 'Chinese Grand Prix' ] Output [ name , raceId ] ; #2 = Scan Table [ results ] Output [ driverId , raceId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.raceId = #2.raceId ] Distinct [ true ] Output [ #2.driverId ] ; #4 = Scan Table [ drivers ] Output [ driverId , forename ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.driverId = #4.driverId ] Output [ #4.forename , #3.driverId ] ; #6 = Scan Table [ races ] Predicate [ name = 'Australian Grand Prix' ] Output [ name , raceId ] ; #7 = Scan Table [ results ] Output [ driverId , raceId ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.raceId = #7.raceId ] Distinct [ true ] Output [ #7.driverId ] ; #9 = Scan Table [ drivers ] Output [ driverId , forename ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.driverId = #9.driverId ] Output [ #9.forename , #8.driverId ] ; #11 = Join [ #5 , #10 ] Predicate [ #5.driverId = #10.driverId ] Output [ #5.forename , #5.driverId ]"
    },
    {
        "id": "5870ae667190dc2d916f9ee0670d563485dcb13855c5fa8eaaddde48efacce1d",
        "question": "Find all the forenames of distinct drivers who was in position 1 as standing and won?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ driverStandings ] Predicate [ position = 1 AND wins = 1 ] Output [ driverId , wins , position ] ; #2 = Scan Table [ drivers ] Output [ driverId , forename ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.driverId = #2.driverId ] Distinct [ true ] Output [ #2.forename ]"
    },
    {
        "id": "e1526abc3a71f17ed8563ece83414b8ec7b42f5fd6030090f65e42eadd739fbf",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ driverStandings ] Predicate [ position = 1 AND wins = 1 ] Output [ driverId , wins , position ] ; #2 = Scan Table [ drivers ] Output [ driverId , forename ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.driverId = #2.driverId ] Distinct [ true ] Output [ #2.forename ]"
    },
    {
        "id": "f0ec35e0e818bf73d863e9b450deb347ba2dfa191b73bc266ccc0266d9696f4c",
        "question": "What are the numbers of constructors for different nationalities?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ constructors ] Output [ nationality ] ; #2 = Aggregate [ #1 ] GroupBy [ nationality ] Output [ countstar AS Count_Star , nationality ]"
    },
    {
        "id": "3ccbe133bfcf95952d204c8a80de7f97866ecfa7fbb6fb545e4ba0344bb5e354",
        "question": "For each nationality, how many different constructors are there?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ constructors ] Output [ nationality ] ; #2 = Aggregate [ #1 ] GroupBy [ nationality ] Output [ countstar AS Count_Star , nationality ]"
    },
    {
        "id": "bfe779a93d0679d1601d1746dfb11b6124f31f6507bc7a49b4f125a4df6da437",
        "question": "What are the numbers of races for each constructor id?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ constructorStandings ] Output [ constructorId ] ; #2 = Aggregate [ #1 ] GroupBy [ constructorId ] Output [ countstar AS Count_Star , constructorId ]"
    },
    {
        "id": "aae30f991093929f9a83827a93b708a39a4364ce9325bf43ead5149988f90fd8",
        "question": "For each constructor id, how many races are there?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ constructorStandings ] Output [ constructorId ] ; #2 = Aggregate [ #1 ] GroupBy [ constructorId ] Output [ countstar AS Count_Star , constructorId ]"
    },
    {
        "id": "86fee6a8096f01a368113f9c738b4538c142b3f6e81c61ea7fe21ab9afaa76f6",
        "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ circuits ] Predicate [ country = 'Spain' ] Output [ country , circuitId ] ; #2 = Scan Table [ races ] Predicate [ year > 2017 ] Output [ name , circuitId , year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.circuitId = #2.circuitId ] Output [ #2.name ]"
    },
    {
        "id": "b36c1d0881cd8418ac472ec2bec7acff6c1ff15e15aa3c309d05e02c4d1419bf",
        "question": "What are the names of the races held after 2017 in Spain?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ circuits ] Predicate [ country = 'Spain' ] Output [ country , circuitId ] ; #2 = Scan Table [ races ] Predicate [ year > 2017 ] Output [ name , circuitId , year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.circuitId = #2.circuitId ] Output [ #2.name ]"
    },
    {
        "id": "8655e136e78559968768161cfc7725183c5d393e20097adb19bef368079c0265",
        "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ circuits ] Predicate [ country = 'Spain' ] Output [ country , circuitId ] ; #2 = Scan Table [ races ] Predicate [ year > 2000 ] Output [ name , circuitId , year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.circuitId = #2.circuitId ] Distinct [ true ] Output [ #2.name ]"
    },
    {
        "id": "69ee817ed56ce76517eed1ec7567cf9bbd096e0ec3d78ebafe45e95c5b9b3670",
        "question": "What are the names of all races held after 2000 in Spain?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ circuits ] Predicate [ country = 'Spain' ] Output [ country , circuitId ] ; #2 = Scan Table [ races ] Predicate [ year > 2000 ] Output [ name , circuitId , year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.circuitId = #2.circuitId ] Distinct [ true ] Output [ #2.name ]"
    },
    {
        "id": "42e714cb76321602537d4f7b6a52e01e6550f43f83fca4e35de9e262662bb7b0",
        "question": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.",
        "parsing_tree": "formula_1 | #1 = Scan Table [ pitStops ] Predicate [ raceId = 841 ] Output [ raceId , duration ] ; #2 = Aggregate [ #1 ] Output [ MAX(duration) AS Max_duration ] ; #3 = Scan Table [ pitStops ] Output [ driverId , stop , duration ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.duration < #2.Max_duration ] Distinct [ true ] Output [ #3.driverId , #3.stop ]"
    },
    {
        "id": "8af238383f077285addfd613bc5254bbe1148ff09d60d01f0ec1e74476382636",
        "question": "What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ pitStops ] Predicate [ raceId = 841 ] Output [ raceId , duration ] ; #2 = Aggregate [ #1 ] Output [ MAX(duration) AS Max_duration ] ; #3 = Scan Table [ pitStops ] Output [ driverId , stop , duration ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.duration < #2.Max_duration ] Distinct [ true ] Output [ #3.driverId , #3.stop ]"
    },
    {
        "id": "e49542f95413ce3a42783e8b44d0a6d2f9f9bc5a47aff3af44cee314cd531b66",
        "question": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ pitStops ] Predicate [ raceId = 841 ] Output [ raceId , duration ] ; #2 = Aggregate [ #1 ] Output [ MIN(duration) AS Min_duration ] ; #3 = Scan Table [ pitStops ] Output [ driverId , stop , duration ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.duration > #2.Min_duration ] Distinct [ true ] Output [ #3.driverId , #3.stop ]"
    },
    {
        "id": "467726c39bfbbfdae45cf2d64246008ece3acbfd6b2f9043638ad7f314708f8d",
        "question": "What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ pitStops ] Predicate [ raceId = 841 ] Output [ raceId , duration ] ; #2 = Aggregate [ #1 ] Output [ MIN(duration) AS Min_duration ] ; #3 = Scan Table [ pitStops ] Output [ driverId , stop , duration ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.duration > #2.Min_duration ] Distinct [ true ] Output [ #3.driverId , #3.stop ]"
    },
    {
        "id": "bc17bbaefcd8f9783b07bf976be8cd40bcd8db15fa9d7d85edd529abccb53339",
        "question": "List the forenames of all distinct drivers in alphabetical order?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Output [ forename ] ; #2 = Sort [ #1 ] OrderBy [ forename ASC ] Distinct [ true ] Output [ forename ]"
    },
    {
        "id": "283104cd7b71331971acdda664ba80c29279b1291f3da1c679d8a3b08c2c34ed",
        "question": "What are the first names of all the different drivers in alphabetical order?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Output [ forename ] ; #2 = Sort [ #1 ] OrderBy [ forename ASC ] Distinct [ true ] Output [ forename ]"
    },
    {
        "id": "8ae3d59ff74ae5b9f482dfa95e16c6924561bec8aba27cdc1a12904ea81367b1",
        "question": "List the names of all distinct races in reversed  lexicographic order?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Output [ name ] ; #2 = Sort [ #1 ] OrderBy [ name DESC ] Distinct [ true ] Output [ name ]"
    },
    {
        "id": "ad703ed6072852c9a85375f618bfbc499a95d71457786159913762b662e10ad3",
        "question": "What are the different names of all the races in reverse alphabetical order?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Output [ name ] ; #2 = Sort [ #1 ] OrderBy [ name DESC ] Distinct [ true ] Output [ name ]"
    },
    {
        "id": "a38ef8f0ea8e3f7118233a2ae05bb3bb29e3f06b0dd6d490314c74c0cfab36cb",
        "question": "What are the names of races held between 2009 and 2011?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ year >= 2009 AND year <= 2011 ] Output [ name , year ]"
    },
    {
        "id": "35aa27875fffd6f8678ffb2a0b4461c90d0b206ff52c4b48d0dc8ccb939ce3f6",
        "question": "What are the names of all races held between 2009 and 2011?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ year >= 2009 AND year <= 2011 ] Output [ name , year ]"
    },
    {
        "id": "c7ecb737e020e9bbd04e7bb16c781666075f78fb0b4a67d424b1b4bc4b28f36c",
        "question": "What are the names of races held after 12:00:00 or before 09:00:00?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ time < '09:00:00' OR time > '12:00:00' ] Output [ name , time ]"
    },
    {
        "id": "1a087d2415fdb0656f7a2ca2a210ad0bc7702eacddcee8bc316403a18b417bf1",
        "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ time < '09:00:00' OR time > '12:00:00' ] Output [ name , time ]"
    },
    {
        "id": "aa0d7bbb8d68cb366f5ebfb5a4ef16230550337c721125a38ebdf6efeffcbf9a",
        "question": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ pitStops ] Output [ driverId ] ; #2 = Aggregate [ #1 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #3 = Scan Table [ drivers ] Output [ driverId , forename , surname ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.driverId = #3.driverId ] Output [ #3.surname , #3.forename , #3.driverId , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 8 ] Output [ driverId , forename , surname ] ; #6 = Scan Table [ drivers ] Output [ driverId , forename , surname ] ; #7 = Scan Table [ results ] Output [ driverId ] ; #8 = Aggregate [ #7 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #9 = Join [ #6 , #8 ] Predicate [ #6.driverId = #8.driverId ] Output [ #6.driverId , #6.forename , #6.surname , #8.Count_Star ] ; #10 = Filter [ #9 ] Predicate [ Count_Star > 5 ] Output [ driverId , forename , surname ] ; #11 = Union [ #5 , #10 ] Output [ #5.forename , #5.surname , #5.driverId ]"
    },
    {
        "id": "2954f688859f49c3a164b25adf35a7cf502b21f952fab789953449e9e14bf22b",
        "question": "What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ pitStops ] Output [ driverId ] ; #2 = Aggregate [ #1 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #3 = Scan Table [ drivers ] Output [ driverId , forename , surname ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.driverId = #3.driverId ] Output [ #3.surname , #3.forename , #3.driverId , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 8 ] Output [ driverId , forename , surname ] ; #6 = Scan Table [ drivers ] Output [ driverId , forename , surname ] ; #7 = Scan Table [ results ] Output [ driverId ] ; #8 = Aggregate [ #7 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #9 = Join [ #6 , #8 ] Predicate [ #6.driverId = #8.driverId ] Output [ #6.driverId , #6.forename , #6.surname , #8.Count_Star ] ; #10 = Filter [ #9 ] Predicate [ Count_Star > 5 ] Output [ driverId , forename , surname ] ; #11 = Union [ #5 , #10 ] Output [ #5.forename , #5.surname , #5.driverId ]"
    },
    {
        "id": "d39d5b34b6457b2e6909e198b3b88b3eb18717cb7488b8915982ac06eda0d7a3",
        "question": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ pitStops ] Output [ driverId ] ; #2 = Aggregate [ #1 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #3 = Scan Table [ drivers ] Output [ driverId , surname ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.driverId = #3.driverId ] Output [ #3.surname , #3.driverId , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star = 11 ] Output [ driverId , surname ] ; #6 = Scan Table [ drivers ] Output [ driverId , surname ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.surname = #6.surname ] Output [ #5.surname , #5.driverId ] ; #8 = Scan Table [ results ] Output [ driverId ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.driverId = #8.driverId ] Output [ #7.driverId , #7.surname ] ; #10 = Aggregate [ #9 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star , surname ] ; #11 = Filter [ #10 ] Predicate [ Count_Star > 5 ] Output [ driverId , surname ]"
    },
    {
        "id": "a34130d4b9381a7d8812877e3acbf91706f6f4d88a00b5cbd2c0cc8ace558e24",
        "question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ pitStops ] Output [ driverId ] ; #2 = Aggregate [ #1 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #3 = Scan Table [ drivers ] Output [ driverId , surname ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.driverId = #3.driverId ] Output [ #3.surname , #3.driverId , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star = 11 ] Output [ driverId , surname ] ; #6 = Scan Table [ drivers ] Output [ driverId , surname ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.surname = #6.surname ] Output [ #5.surname , #5.driverId ] ; #8 = Scan Table [ results ] Output [ driverId ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.driverId = #8.driverId ] Output [ #7.driverId , #7.surname ] ; #10 = Aggregate [ #9 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star , surname ] ; #11 = Filter [ #10 ] Predicate [ Count_Star > 5 ] Output [ driverId , surname ]"
    },
    {
        "id": "059df461808b698127df81095ec036fc8d8ce33fc16a56fc3dc25e17de7d7ee3",
        "question": "What is the id and last name of the driver who participated in the most races after 2010?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ year > 2010 ] Output [ raceId , year ] ; #2 = Scan Table [ results ] Output [ driverId , raceId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.raceId = #2.raceId ] Output [ #2.driverId ] ; #4 = Aggregate [ #3 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #5 = Scan Table [ drivers ] Output [ driverId , surname ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.driverId = #5.driverId ] Output [ #5.surname , #5.driverId , #4.Count_Star ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ driverId , Count_Star , surname ]"
    },
    {
        "id": "eb6845e634795782b616f51d4ef0483c861482209b9caf51e40538358b17755d",
        "question": "What are the names of circuits that belong to UK or Malaysia?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ circuits ] Predicate [ country = 'Malaysia' OR country = 'UK' ] Output [ name , country ]"
    },
    {
        "id": "ac62d06f4d35347cc878a1bde0e7084109f528c75ec81e494e3c9a81501decde",
        "question": "What are the names of all the circuits that are in the UK or Malaysia?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ circuits ] Predicate [ country = 'Malaysia' OR country = 'UK' ] Output [ name , country ]"
    },
    {
        "id": "d67ab3198c81197c0d14322786d38eefffbed86caa591654af830c0e4449fec0",
        "question": "Find the id and location of circuits that belong to France or Belgium?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ circuits ] Predicate [ country = 'Belgium' OR country = 'France' ] Output [ country , location , circuitId ]"
    },
    {
        "id": "3b048cb71d9d629a9247944b95476e54ac6da56850b4e8feb86317f0adb02932",
        "question": "What are the ids and locations of all circuits in France or Belgium?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ circuits ] Predicate [ country = 'Belgium' OR country = 'France' ] Output [ country , location , circuitId ]"
    },
    {
        "id": "fcb23940c9338496aca4400eae36b1aaff53b1577f096b469191835eeb089034",
        "question": "Find the names of Japanese constructors that have once earned more than 5 points?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ constructors ] Predicate [ nationality = 'Japanese' ] Output [ name , constructorId , nationality ] ; #2 = Scan Table [ constructorStandings ] Predicate [ points > 5.0 ] Output [ points , constructorId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.constructorId = #2.constructorId ] Output [ #1.name ]"
    },
    {
        "id": "b07b615456b7e6ef6cb3f2154026ec1dd135c935a0564bce5f5a428cce3953ec",
        "question": "What are the names of all the Japanese constructors that have earned more than 5 points?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ constructors ] Predicate [ nationality = 'Japanese' ] Output [ name , constructorId , nationality ] ; #2 = Scan Table [ constructorStandings ] Predicate [ points > 5.0 ] Output [ points , constructorId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.constructorId = #2.constructorId ] Output [ #1.name ]"
    },
    {
        "id": "09f8e97c3ac8d978b280c8686da70136f7b693d0b7f1c4dc6143f28ee62e2455",
        "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ year = 2008 AND name = 'Monaco Grand Prix' ] Output [ name , raceId , year ] ; #2 = Scan Table [ results ] Output [ fastestLapSpeed , raceId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.raceId = #2.raceId ] Output [ #2.fastestLapSpeed ] ; #4 = Aggregate [ #3 ] Output [ MAX(fastestLapSpeed) AS Max_fastestLapSpeed ]"
    },
    {
        "id": "f154ccad53214b91fbebc6ff957ba61cf664f195c405996e7df2d85437d12886",
        "question": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ year = 2008 AND name = 'Monaco Grand Prix' ] Output [ name , raceId , year ] ; #2 = Scan Table [ results ] Output [ fastestLapSpeed , raceId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.raceId = #2.raceId ] Output [ #2.fastestLapSpeed ] ; #4 = Aggregate [ #3 ] Output [ MAX(fastestLapSpeed) AS Max_fastestLapSpeed ]"
    },
    {
        "id": "5ea2941bc5e0324544a211067d460989671b42a2c9561fd02424e905bb6370b8",
        "question": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ year > 2014 ] Output [ name , raceId , year ] ; #2 = Scan Table [ results ] Output [ fastestLapSpeed , raceId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.raceId = #2.raceId ] Output [ #1.name , #2.fastestLapSpeed , #1.year ] ; #4 = Aggregate [ #3 ] GroupBy [ year , name ] Output [ name , MAX(fastestLapSpeed) AS Max_fastestLapSpeed , year ] ; #5 = Sort [ #4 ] OrderBy [ year ASC ] Output [ name , Max_fastestLapSpeed , year ]"
    },
    {
        "id": "2af5c60a0e2c463207c22bc2805268574807c3341f9e5d60893fa2e3c31aa36a",
        "question": "For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ races ] Predicate [ year > 2014 ] Output [ name , raceId , year ] ; #2 = Scan Table [ results ] Output [ fastestLapSpeed , raceId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.raceId = #2.raceId ] Output [ #1.name , #2.fastestLapSpeed , #1.year ] ; #4 = Aggregate [ #3 ] GroupBy [ year , name ] Output [ name , MAX(fastestLapSpeed) AS Max_fastestLapSpeed , year ] ; #5 = Sort [ #4 ] OrderBy [ year ASC ] Output [ name , Max_fastestLapSpeed , year ]"
    },
    {
        "id": "28cecd12d0756b63b42fa6f27762f1438acf59d3cb86a2db2ba397ed03860099",
        "question": "Find the id, forename and number of races of all drivers who have at least participated in two races?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Output [ driverId , forename ] ; #2 = Scan Table [ races ] Output [ raceId ] ; #3 = Scan Table [ results ] Output [ driverId , raceId ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.raceId = #3.raceId ] Output [ #3.driverId ] ; #5 = Aggregate [ #4 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #6 = Join [ #1 , #5 ] Predicate [ #1.driverId = #5.driverId ] Output [ #1.forename , #1.driverId , #5.Count_Star ] ; #7 = Filter [ #6 ] Predicate [ Count_Star >= 2 ] Output [ driverId , Count_Star , forename ]"
    },
    {
        "id": "7e2fafef8e341dd2b2cf3ec32333e75383875263f8dce0bf9654a8bd64242e85",
        "question": "What is the id, forename, and number of races for all drivers that have participated in at least 2 races?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Output [ driverId , forename ] ; #2 = Scan Table [ races ] Output [ raceId ] ; #3 = Scan Table [ results ] Output [ driverId , raceId ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.raceId = #3.raceId ] Output [ #3.driverId ] ; #5 = Aggregate [ #4 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #6 = Join [ #1 , #5 ] Predicate [ #1.driverId = #5.driverId ] Output [ #1.forename , #1.driverId , #5.Count_Star ] ; #7 = Filter [ #6 ] Predicate [ Count_Star >= 2 ] Output [ driverId , Count_Star , forename ]"
    },
    {
        "id": "5674182ec243756e8daf6714f2b893155b7e256aed92658e72e2db3ace545226",
        "question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Output [ driverId ] ; #2 = Scan Table [ races ] Output [ raceId ] ; #3 = Scan Table [ results ] Output [ driverId , raceId ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.raceId = #3.raceId ] Output [ #3.driverId ] ; #5 = Aggregate [ #4 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #6 = Join [ #1 , #5 ] Predicate [ #1.driverId = #5.driverId ] Output [ #1.driverId , #5.Count_Star ] ; #7 = Filter [ #6 ] Predicate [ Count_Star <= 30 ] Output [ driverId , Count_Star ]"
    },
    {
        "id": "5c80d2f47b99e3c6c2e0a223021efaa46f0ff69cb8c59b2edff83e7918a0f3c6",
        "question": "For each id of a driver who participated in at most 30 races, how many races did they participate in?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Output [ driverId ] ; #2 = Scan Table [ races ] Output [ raceId ] ; #3 = Scan Table [ results ] Output [ driverId , raceId ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.raceId = #3.raceId ] Output [ #3.driverId ] ; #5 = Aggregate [ #4 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #6 = Join [ #1 , #5 ] Predicate [ #1.driverId = #5.driverId ] Output [ #1.driverId , #5.Count_Star ] ; #7 = Filter [ #6 ] Predicate [ Count_Star <= 30 ] Output [ driverId , Count_Star ]"
    },
    {
        "id": "3f6875764507aea4e70805fdda1a93e2ed22f958f5a3d49f6d52b85b78c8e4d9",
        "question": "Find the id and surname of the driver who participated the most number of races?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Output [ driverId , surname ] ; #2 = Scan Table [ races ] Output [ raceId ] ; #3 = Scan Table [ results ] Output [ driverId , raceId ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.raceId = #3.raceId ] Output [ #3.driverId ] ; #5 = Aggregate [ #4 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #6 = Join [ #1 , #5 ] Predicate [ #1.driverId = #5.driverId ] Output [ #1.driverId , #1.surname , #5.Count_Star ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ driverId , Count_Star , surname ]"
    },
    {
        "id": "6fdaad78ef6cf8ad146828f646a7921afc0d71b4d89e9d132d6b672a69f1eba8",
        "question": "What are the ids and last names of all drivers who participated in the most races?",
        "parsing_tree": "formula_1 | #1 = Scan Table [ drivers ] Output [ driverId , surname ] ; #2 = Scan Table [ races ] Output [ raceId ] ; #3 = Scan Table [ results ] Output [ driverId , raceId ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.raceId = #3.raceId ] Output [ #3.driverId ] ; #5 = Aggregate [ #4 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ] ; #6 = Join [ #1 , #5 ] Predicate [ #1.driverId = #5.driverId ] Output [ #1.driverId , #1.surname , #5.Count_Star ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ driverId , Count_Star , surname ]"
    },
    {
        "id": "cbcb814180f1ee1bde96808dcdfe8f53ea3ffdc3e165eab8966118a2e70d8cd9",
        "question": "How many technicians are there?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b03b07413bfd7b38425e8e200507b1456f29aa3849aa066c62c5cc2848bc06a8",
        "question": "What is the number of technicians?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "67c4f04c97ef648d173d0b21ec343e9551bae233ed5bd82f5a8cf8c652b88539",
        "question": "List the names of technicians in ascending order of age.",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ Name , Age ] ; #2 = Sort [ #1 ] OrderBy [ Age ASC ] Output [ Name , Age ]"
    },
    {
        "id": "bf0127226b3d1ce92482573160ded903e0ab058b905df4d9d41539648754d8ca",
        "question": "What are the names of the technicians by ascending order of age?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ Name , Age ] ; #2 = Sort [ #1 ] OrderBy [ Age ASC ] Output [ Name , Age ]"
    },
    {
        "id": "dfed952c5aa185bf23c3df6ebcbad7c6e101b372d22e0755d34bdac81cfc206b",
        "question": "What are the team and starting year of technicians?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ Team , Starting_Year ]"
    },
    {
        "id": "afcca346f079cb2bd2eca6254d5336b28fcb9474dbf6ed53f33cbb27565c20b7",
        "question": "What is the team and starting year for each technician?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ Team , Starting_Year ]"
    },
    {
        "id": "28e2df031757cd64da5df92de025e4b5c80d926c4ab468eb3c2a6c6ca5f4c726",
        "question": "List the name of technicians whose team is not \"NYY\".",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Predicate [ Team <> 'NYY' ] Output [ Name , Team ]"
    },
    {
        "id": "90f06f9088ad7d7e66d196e156b3d58adbb0a00b22fdb55c121f5635773a232e",
        "question": "What is the name of the technician whose team is not 'NYY'?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Predicate [ Team <> 'NYY' ] Output [ Name , Team ]"
    },
    {
        "id": "d953df32e2651e11729d48aca09dd3ffdfd5682e42d7f136cdcaddb014c9f43b",
        "question": "Show the name of technicians aged either 36 or 37",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Predicate [ Age = 36 OR Age = 37 ] Output [ Name , Age ]"
    },
    {
        "id": "d376488d8b7aa8ee1554ab568d4db0b6d42efe9df4d8ca2c159b52f2dfe7c3b3",
        "question": "What are the names of the technicians aged either 36 or 37?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Predicate [ Age = 36 OR Age = 37 ] Output [ Name , Age ]"
    },
    {
        "id": "0e65741a98e0d186992c373f06fea46a6fbd8955446c7fdb8d361e92a8e489af",
        "question": "What is the starting year of the oldest technicians?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ Age , Starting_Year ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Age DESC ] Output [ Age , Starting_Year ]"
    },
    {
        "id": "999efa55aba2d6fae9f5abc8f5f8a4aefbd0e1829d845260ee3a475b2d078e88",
        "question": "What is the starting year for the oldest technician?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ Age , Starting_Year ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Age DESC ] Output [ Age , Starting_Year ]"
    },
    {
        "id": "822813928212db928a9ec98f2701010b9b37a297a9e485f720627f6ab63b7727",
        "question": "Show different teams of technicians and the number of technicians in each team.",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ Team ] ; #2 = Aggregate [ #1 ] GroupBy [ Team ] Output [ countstar AS Count_Star , Team ]"
    },
    {
        "id": "f41ebef3839ab86bb09e80edfef5b9435e399de332b49638fb39c90b043577d2",
        "question": "For each team, how many technicians are there?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ Team ] ; #2 = Aggregate [ #1 ] GroupBy [ Team ] Output [ countstar AS Count_Star , Team ]"
    },
    {
        "id": "ce05f69054ea597eaf64d2ce66a65ee204d6b0b782f829eb68c480f3a312deac",
        "question": "Please show the team that has the most number of technicians.",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ Team ] ; #2 = Aggregate [ #1 ] GroupBy [ Team ] Output [ countstar AS Count_Star , Team ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Team ]"
    },
    {
        "id": "5fe071d3ec6fbb3da84ae7e33345f56d2f33f6faec9accd9cd7dcca9c1dc7dde",
        "question": "What are the teams with the most technicians?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ Team ] ; #2 = Aggregate [ #1 ] GroupBy [ Team ] Output [ countstar AS Count_Star , Team ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Team ]"
    },
    {
        "id": "bd562f5bcea6f18de48a58bd4318302c60db23470e0d673bfb4c8420efe084ab",
        "question": "Show the team that have at least two technicians.",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ Team ] ; #2 = Aggregate [ #1 ] GroupBy [ Team ] Output [ countstar AS Count_Star , Team ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Team ]"
    },
    {
        "id": "580cc1b8122ce2995a266e98cf11fac1a3db8c620745d7cb27d3cd5df1309bd8",
        "question": "What is the team with at least 2 technicians?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ Team ] ; #2 = Aggregate [ #1 ] GroupBy [ Team ] Output [ countstar AS Count_Star , Team ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Team ]"
    },
    {
        "id": "0deacbf83b01c864b95544ffafebf6daf415697bea377349634ed7a37a403d15",
        "question": "Show names of technicians and series of machines they are assigned to repair.",
        "parsing_tree": "machine_repair | #1 = Scan Table [ repair_assignment ] Output [ technician_id , Machine_ID ] ; #2 = Scan Table [ technician ] Output [ technician_id , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.technician_id = #2.technician_id ] Output [ #2.Name , #1.Machine_ID ] ; #4 = Scan Table [ machine ] Output [ Machine_series , Machine_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Machine_ID = #4.Machine_ID ] Output [ #3.Name , #4.Machine_series ]"
    },
    {
        "id": "c712383d25d162e945d341ce7b6aec03a0b053ae15028aee5437e3311a916f5e",
        "question": "What are the names of technicians and the machine series that they repair?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ repair_assignment ] Output [ technician_id , Machine_ID ] ; #2 = Scan Table [ technician ] Output [ technician_id , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.technician_id = #2.technician_id ] Output [ #2.Name , #1.Machine_ID ] ; #4 = Scan Table [ machine ] Output [ Machine_series , Machine_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Machine_ID = #4.Machine_ID ] Output [ #3.Name , #4.Machine_series ]"
    },
    {
        "id": "d94533dbd34d0577b2e3350934c9c1f981a0d05a439ac5616f175411e5109478",
        "question": "Show names of technicians in ascending order of quality rank of the machine they are assigned.",
        "parsing_tree": "machine_repair | #1 = Scan Table [ repair_assignment ] Output [ technician_id , Machine_ID ] ; #2 = Scan Table [ machine ] Output [ quality_rank , Machine_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Machine_ID = #2.Machine_ID ] Output [ #1.technician_id , #2.quality_rank ] ; #4 = Scan Table [ technician ] Output [ technician_id , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.technician_id = #4.technician_id ] Output [ #4.Name , #3.quality_rank ] ; #6 = Sort [ #5 ] OrderBy [ quality_rank ASC ] Output [ quality_rank , Name ]"
    },
    {
        "id": "f596eb4a3b6cee4358af8a7adfeff8176dd0ff03fd05b02cf81cca126fae73ed",
        "question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ repair_assignment ] Output [ technician_id , Machine_ID ] ; #2 = Scan Table [ machine ] Output [ quality_rank , Machine_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Machine_ID = #2.Machine_ID ] Output [ #1.technician_id , #2.quality_rank ] ; #4 = Scan Table [ technician ] Output [ technician_id , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.technician_id = #4.technician_id ] Output [ #4.Name , #3.quality_rank ] ; #6 = Sort [ #5 ] OrderBy [ quality_rank ASC ] Output [ quality_rank , Name ]"
    },
    {
        "id": "db1481b21b0f2417419674925145e526446989a266252e61ad43ec60c8a66d60",
        "question": "Show names of technicians who are assigned to repair machines with value point more than 70.",
        "parsing_tree": "machine_repair | #1 = Scan Table [ machine ] Predicate [ value_points > 70.0 ] Output [ Machine_ID , value_points ] ; #2 = Scan Table [ repair_assignment ] Output [ technician_id , Machine_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Machine_ID = #2.Machine_ID ] Output [ #2.technician_id ] ; #4 = Scan Table [ technician ] Output [ technician_id , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.technician_id = #4.technician_id ] Output [ #4.Name ]"
    },
    {
        "id": "fb77eb4f1ad3feb6b710d18a920cff1b6b21ef08218e296450ec2e6e94bc71ae",
        "question": "What are the names of the technicians that are assigned to repair machines with more point values than 70?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ machine ] Predicate [ value_points > 70.0 ] Output [ Machine_ID , value_points ] ; #2 = Scan Table [ repair_assignment ] Output [ technician_id , Machine_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Machine_ID = #2.Machine_ID ] Output [ #2.technician_id ] ; #4 = Scan Table [ technician ] Output [ technician_id , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.technician_id = #4.technician_id ] Output [ #4.Name ]"
    },
    {
        "id": "ceb93de2fac7820cafbcac81afd8fe34e8a37754d07218f3968eabe8dcfd7b91",
        "question": "Show names of technicians and the number of machines they are assigned to repair.",
        "parsing_tree": "machine_repair | #1 = Scan Table [ repair_assignment ] Output [ technician_id ] ; #2 = Scan Table [ technician ] Output [ technician_id , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.technician_id = #2.technician_id ] Output [ #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "c2fec9bdcb8dc4196841ec913d5c9cd95935dbc16727c1f3d6004be738f372e2",
        "question": "What are the names of the technicians  and how many machines are they assigned to repair?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ repair_assignment ] Output [ technician_id ] ; #2 = Scan Table [ technician ] Output [ technician_id , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.technician_id = #2.technician_id ] Output [ #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "46ad916413827a21d5eccaf817fd85bb3b9cec5cb674ded59d1584d773d0abd4",
        "question": "List the names of technicians who have not been assigned to repair machines.",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ technician_id , Name ] ; #2 = Scan Table [ repair_assignment ] Output [ technician_id ] ; #3 = Aggregate [ #2 ] GroupBy [ technician_id ] Output [ technician_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.technician_id = #1.technician_id ] Output [ #1.Name ]"
    },
    {
        "id": "157f46b51e45cc11ab9ceaf380e49be8591e9532d72e4081d4eb2017d636f185",
        "question": "What are the names of the technicians that have not been assigned to repair machines?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Output [ technician_id , Name ] ; #2 = Scan Table [ repair_assignment ] Output [ technician_id ] ; #3 = Aggregate [ #2 ] GroupBy [ technician_id ] Output [ technician_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.technician_id = #1.technician_id ] Output [ #1.Name ]"
    },
    {
        "id": "6a5f8fc26dc30adb5a14e0ae212f1b0b2298815f51ba5e417d181b393d885b98",
        "question": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Predicate [ Team = 'CLE' ] Distinct [ true ] Output [ Team , Starting_Year ] ; #2 = Scan Table [ technician ] Predicate [ Team = 'CWS' ] Output [ Team , Starting_Year ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Starting_Year = #2.Starting_Year ] Output [ #1.Starting_Year ]"
    },
    {
        "id": "9c3d560661e0af5e2aaa92049c89b2cc0cccb247eac202e4ccd2bbb27c9a89d7",
        "question": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?",
        "parsing_tree": "machine_repair | #1 = Scan Table [ technician ] Predicate [ Team = 'CLE' ] Distinct [ true ] Output [ Team , Starting_Year ] ; #2 = Scan Table [ technician ] Predicate [ Team = 'CWS' ] Output [ Team , Starting_Year ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Starting_Year = #2.Starting_Year ] Output [ #1.Starting_Year ]"
    },
    {
        "id": "1640481436193cfde385f28c2a77c11caf3838787c3d09367ca409d37f7d4aa6",
        "question": "How many entrepreneurs are there?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "48ffcc160ecd22577bbcd37f8771a8d86df03f385492d2ed91035b64fa591663",
        "question": "Count the number of entrepreneurs.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "770f14cee97e6f6578f208bc8ece7ab193f7f4a33c3292d982b15913a4eaa536",
        "question": "List the companies of entrepreneurs in descending order of money requested.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ Money_Requested , Company ] ; #2 = Sort [ #1 ] OrderBy [ Money_Requested DESC ] Output [ Money_Requested , Company ]"
    },
    {
        "id": "e0d258e0a9382b5e36bcff2bbd3cf4af4dfa607c95d4df9ae46db198773a8507",
        "question": "What are the companies of entrepreneurs, ordered descending by amount of money requested?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ Money_Requested , Company ] ; #2 = Sort [ #1 ] OrderBy [ Money_Requested DESC ] Output [ Money_Requested , Company ]"
    },
    {
        "id": "d8bbe16849b339270b37d4814c5fe3dd4015c0f6fc5e4e3f22ac7505cec95792",
        "question": "List the companies and the investors of entrepreneurs.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ Investor , Company ]"
    },
    {
        "id": "9ee8aa75fd3dde259af70f1946f2638389b75a32bdb90fcc46a01e11cde5cd1c",
        "question": "What are the companies and investors that correspond to each entrepreneur?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ Investor , Company ]"
    },
    {
        "id": "e8b957d589ce26fb47489e40e73026ff9b19fafe5c50f17e2384b1bbbfe6e47c",
        "question": "What is the average money requested by all entrepreneurs?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ Money_Requested ] ; #2 = Aggregate [ #1 ] Output [ AVG(Money_Requested) AS Avg_Money_Requested ]"
    },
    {
        "id": "6fb0613f684ad0c6f34c2383694f67ce02ce46a8f37964a4ddb1ac5622859ba5",
        "question": "Return the average money requested across all entrepreneurs.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ Money_Requested ] ; #2 = Aggregate [ #1 ] Output [ AVG(Money_Requested) AS Avg_Money_Requested ]"
    },
    {
        "id": "cf776b0b6e6106b17f8ed4d36f5ede2bcdd94476db3ffcb25fd0a95819c4ad1c",
        "question": "What are the names of people in ascending order of weight?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ people ] Output [ Weight , Name ] ; #2 = Sort [ #1 ] OrderBy [ Weight ASC ] Output [ Weight , Name ]"
    },
    {
        "id": "dcc16b543ba14101a9be7b9d545dc1da7db8b9d2117f5be0e9a53d9f590043eb",
        "question": "Return the names of people, ordered by weight ascending.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ people ] Output [ Weight , Name ] ; #2 = Sort [ #1 ] OrderBy [ Weight ASC ] Output [ Weight , Name ]"
    },
    {
        "id": "25db5c09902b123c19ce601db22835f9abd79140768d9843396f0958384e83cb",
        "question": "What are the names of entrepreneurs?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ People_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name ]"
    },
    {
        "id": "14e9418df40debfb71626c1d1a51e3f6cb828d0c9f67fe52529e796eea36a9ca",
        "question": "Return the names of entrepreneurs.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ People_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name ]"
    },
    {
        "id": "b0f7caf1f4876b3a6a1c5bb4b4b29a3123180afd757e168c90b252555549966f",
        "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Predicate [ Investor <> 'Rachel Elnaugh' ] Output [ People_ID , Investor ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name ]"
    },
    {
        "id": "0a67d12f41c562f996a579ac2c0753d701d67944c12388cac5fe1052bfcc19e2",
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Predicate [ Investor <> 'Rachel Elnaugh' ] Output [ People_ID , Investor ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name ]"
    },
    {
        "id": "6c57744bd9b7378e253192e89721c5d5bdf955eab5c0a39a8d049e441ffe5e04",
        "question": "What is the weight of the shortest person?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ people ] Output [ Weight , Height ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Height ASC ] Output [ Weight , Height ]"
    },
    {
        "id": "174b05200698148f945c1ed1e696ad2633fff0d58131a6b1718155b7a9692057",
        "question": "Return the weight of the shortest person.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ people ] Output [ Weight , Height ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Height ASC ] Output [ Weight , Height ]"
    },
    {
        "id": "9ab6857ecefba72713a8ccbf0ac3a4dd56f9734e1e786ee30a12dd0f92db98f6",
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ People_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Weight , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name , #2.Weight ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Weight DESC ] Output [ Weight , Name ]"
    },
    {
        "id": "0aa1eb07f58abfd6ef90113c2e1116b06d739b9c79521e19e2557a5df697ad4f",
        "question": "Return the name of the heaviest entrepreneur.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ People_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Weight , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name , #2.Weight ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Weight DESC ] Output [ Weight , Name ]"
    },
    {
        "id": "7d8fd4ddd20719d6c51e3f2f8a67068eb021ff3608bd3bf5887abb8619ab8732",
        "question": "What is the total money requested by entrepreneurs with height more than 1.85?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ people ] Predicate [ Height > 1.850000023841858 ] Output [ People_ID , Height ] ; #2 = Scan Table [ entrepreneur ] Output [ People_ID , Money_Requested ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Money_Requested ] ; #4 = Aggregate [ #3 ] Output [ SUM(Money_Requested) AS Sum_Money_Requested ]"
    },
    {
        "id": "e1a5e9b26b24d86e4cb8c430b61c027807d7af2b94c07f450297ea0e162125a1",
        "question": "Give the total money requested by entrepreneurs who are taller than 1.85.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ people ] Predicate [ Height > 1.850000023841858 ] Output [ People_ID , Height ] ; #2 = Scan Table [ entrepreneur ] Output [ People_ID , Money_Requested ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Money_Requested ] ; #4 = Aggregate [ #3 ] Output [ SUM(Money_Requested) AS Sum_Money_Requested ]"
    },
    {
        "id": "5640eaaebfc00d43dfadbe5c14cb6b72f31db37cf2b9d3f2dc1888520f8722d1",
        "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Predicate [ Investor = 'Peter Jones' OR Investor = 'Simon Woodroffe' ] Output [ People_ID , Investor ] ; #2 = Scan Table [ people ] Output [ Date_of_Birth , People_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Date_of_Birth ]"
    },
    {
        "id": "cb6b8c9c04409ae0501c9295353fd464759661a93502573877ddbd903dd49a5d",
        "question": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Predicate [ Investor = 'Peter Jones' OR Investor = 'Simon Woodroffe' ] Output [ People_ID , Investor ] ; #2 = Scan Table [ people ] Output [ Date_of_Birth , People_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Date_of_Birth ]"
    },
    {
        "id": "69de325064bc79c43f600efbb141cb1bfc79b7a3d34571e94f4c0a0b57734a1a",
        "question": "What are the weights of entrepreneurs in descending order of money requested?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ People_ID , Money_Requested ] ; #2 = Scan Table [ people ] Output [ People_ID , Weight ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Weight , #1.Money_Requested ] ; #4 = Sort [ #3 ] OrderBy [ Money_Requested DESC ] Output [ Weight , Money_Requested ]"
    },
    {
        "id": "306ae90f55c91c06a8dd23716d40e2d9363ebc7786fb3e54784f288cb1476588",
        "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ People_ID , Money_Requested ] ; #2 = Scan Table [ people ] Output [ People_ID , Weight ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Weight , #1.Money_Requested ] ; #4 = Sort [ #3 ] OrderBy [ Money_Requested DESC ] Output [ Weight , Money_Requested ]"
    },
    {
        "id": "f6c9d9ae7dc4679d15b1442d882e0e54d294af8ed452dad4f0a5ea844564846e",
        "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ Investor ] ; #2 = Aggregate [ #1 ] GroupBy [ Investor ] Output [ countstar AS Count_Star , Investor ]"
    },
    {
        "id": "817c6787d77381ff4f2672c896e14cc9b254885f5b78d3b270875d53e1660172",
        "question": "How many entrepreneurs correspond to each investor?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ Investor ] ; #2 = Aggregate [ #1 ] GroupBy [ Investor ] Output [ countstar AS Count_Star , Investor ]"
    },
    {
        "id": "ca1a8597b24e14050b812638ff6fafd0dfe7857ce3afb0f63d451fae1ecb0469",
        "question": "What is the investor that has invested in the most number of entrepreneurs?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ Investor ] ; #2 = Aggregate [ #1 ] GroupBy [ Investor ] Output [ countstar AS Count_Star , Investor ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Investor ]"
    },
    {
        "id": "d8e1ac4439a3ceb2a56569799373e36f0284a92af4b63a9ff5cfcac3cbea5f4a",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ Investor ] ; #2 = Aggregate [ #1 ] GroupBy [ Investor ] Output [ countstar AS Count_Star , Investor ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Investor ]"
    },
    {
        "id": "d2d1c9eec1fa6f70cf6734323e0ec3d6f861e580bf46a8654a1555cbdc17b7a1",
        "question": "What are the investors that have invested in at least two entrepreneurs?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ Investor ] ; #2 = Aggregate [ #1 ] GroupBy [ Investor ] Output [ countstar AS Count_Star , Investor ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Investor ]"
    },
    {
        "id": "1d2920e511e91a912044e731959b9aa7e73dc4bc8df9b7409f2e6060d1261326",
        "question": "Return the investors who have invested in two or more entrepreneurs.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ Investor ] ; #2 = Aggregate [ #1 ] GroupBy [ Investor ] Output [ countstar AS Count_Star , Investor ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Investor ]"
    },
    {
        "id": "1b624ba433cd291a710d12dc3eece4baeab855bce4d8f1f9f23bf244351739ab",
        "question": "List the names of entrepreneurs and their companies in descending order of money requested?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ People_ID , Money_Requested , Company ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #1.Company , #1.Money_Requested , #2.Name ] ; #4 = Sort [ #3 ] OrderBy [ Money_Requested ASC ] Output [ Money_Requested , Name , Company ]"
    },
    {
        "id": "9bda5d117bbb74f6de859eab5ed1477c2b24376d012331fe36e239f5ba7b0e66",
        "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ People_ID , Money_Requested , Company ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #1.Company , #1.Money_Requested , #2.Name ] ; #4 = Sort [ #3 ] OrderBy [ Money_Requested ASC ] Output [ Money_Requested , Name , Company ]"
    },
    {
        "id": "d70bd9528f6407073eda96c95a5c6d70626d73b5e24e5f829098eab2a7d02439",
        "question": "List the names of people that are not entrepreneurs.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ people ] Output [ People_ID , Name ] ; #2 = Scan Table [ entrepreneur ] Output [ People_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.People_ID IS NULL OR #1.People_ID = #2.People_ID ] Output [ #1.Name ]"
    },
    {
        "id": "0e85780d127e18f63860ed6dad785acb0fdd924b8a481841e83d05bffb6fc798",
        "question": "What are the names of people who are not entrepreneurs?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ people ] Output [ People_ID , Name ] ; #2 = Scan Table [ entrepreneur ] Output [ People_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.People_ID IS NULL OR #1.People_ID = #2.People_ID ] Output [ #1.Name ]"
    },
    {
        "id": "f67996bfdc9157fe71f3cffd1ca19f045e1e1594a35b389e39b28f7c0d0cd679",
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Predicate [ Money_Requested > 140000.0 ] Distinct [ true ] Output [ Money_Requested , Investor ] ; #2 = Scan Table [ entrepreneur ] Predicate [ Money_Requested < 120000.0 ] Output [ Money_Requested , Investor ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Investor = #2.Investor ] Output [ #1.Investor ]"
    },
    {
        "id": "800c2dfb6a5649421a4634509c00de47862a40b4328795116862910e6067d7c0",
        "question": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Predicate [ Money_Requested > 140000.0 ] Distinct [ true ] Output [ Money_Requested , Investor ] ; #2 = Scan Table [ entrepreneur ] Predicate [ Money_Requested < 120000.0 ] Output [ Money_Requested , Investor ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Investor = #2.Investor ] Output [ #1.Investor ]"
    },
    {
        "id": "41b52313c4dc8ab59b6a08febbf4d8b5a799563862410e4a7d2ab3b893c8f9a5",
        "question": "How many distinct companies are there?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Distinct [ true ] Output [ Company ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Company) AS Count_Dist_Company ]"
    },
    {
        "id": "e64891d9125e822642f0ef18a4f57740f3613eded9e31377669bcd14773f3f11",
        "question": "Count the number of different companies.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Distinct [ true ] Output [ Company ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Company) AS Count_Dist_Company ]"
    },
    {
        "id": "30f3e7435cab02f07ebe39f76c04f54c590e7a2e436cb96e69d4dea295af115c",
        "question": "Show the company of the tallest entrepreneur.",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ People_ID , Company ] ; #2 = Scan Table [ people ] Output [ People_ID , Height ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #1.Company , #2.Height ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Height DESC ] Output [ Height , Company ]"
    },
    {
        "id": "1e5e6adfa01f3a3273a884040df0ec643125f28c81612dff33b03a2fcb461c39",
        "question": "Which company was started by the entrepreneur with the greatest height?",
        "parsing_tree": "entrepreneur | #1 = Scan Table [ entrepreneur ] Output [ People_ID , Company ] ; #2 = Scan Table [ people ] Output [ People_ID , Height ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #1.Company , #2.Height ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Height DESC ] Output [ Height , Company ]"
    },
    {
        "id": "915bda808323615588d8d078bbfd0efbef9a4c9b5e90b48110180df37169e23c",
        "question": "How many perpetrators are there?",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6f91b6ae77fa2f0f18f622920ecaeba4fda1ba2e9baf0ec4b3bee78ca7123b56",
        "question": "List the date of perpetrators in descending order of the number of people killed.",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ Killed , Date ] ; #2 = Sort [ #1 ] OrderBy [ Killed DESC ] Output [ Killed , Date ]"
    },
    {
        "id": "f406785d626b0001325fc97b43e86602513aae8e066dd385c45feb91a5f4058a",
        "question": "List the number of people injured by perpetrators in ascending order.",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ Injured ] ; #2 = Sort [ #1 ] OrderBy [ Injured ASC ] Output [ Injured ]"
    },
    {
        "id": "fcc7a5cd7f4307ad20e5c0058d8ec36aa45b9c48d1844da1ce94d7f41d8580a9",
        "question": "What is the average number of people injured by all perpetrators?",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ Injured ] ; #2 = Aggregate [ #1 ] Output [ AVG(Injured) AS Avg_Injured ]"
    },
    {
        "id": "799c280682c61e960d004b05ff14aab74dbdb0e8afed74ee27bf4e1a77c3e5f9",
        "question": "What is the location of the perpetrator with the largest kills.",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ Location , Killed ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Killed DESC ] Output [ Location , Killed ]"
    },
    {
        "id": "6d4f4187383a2f3f73927d581e597a7d15035e395183b81435ab43bb5bbf2fab",
        "question": "What are the names of people in ascending order of height?",
        "parsing_tree": "perpetrator | #1 = Scan Table [ people ] Output [ Name , Height ] ; #2 = Sort [ #1 ] OrderBy [ Height ASC ] Output [ Name , Height ]"
    },
    {
        "id": "8bab3eb313f4efae28182e67119b88aa4fb0620ae657e077bf9168f8daacef82",
        "question": "What are the names of perpetrators?",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ People_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name ]"
    },
    {
        "id": "2f7539a400eade343de0dc5cccc6c0103548c038c14cacfad8a2809e9513897d",
        "question": "What are the names of perpetrators whose country is not \"China\"?",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Predicate [ Country <> 'China' ] Output [ People_ID , Country ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name ]"
    },
    {
        "id": "1bbe653346c232ce2620fbd6c079d64d1e89b6c97004b8be544896048930f542",
        "question": "What is the name of the perpetrator with the biggest weight.",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ People_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Weight , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name , #2.Weight ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Weight DESC ] Output [ Weight , Name ]"
    },
    {
        "id": "808a836a40fe9b2226c17377fc20934b7ef9ffce6e45f9b8f1b0cd4ba9fd34b5",
        "question": "What is the total kills of the perpetrators with height more than 1.84.",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ People_ID , Killed ] ; #2 = Scan Table [ people ] Predicate [ Height > 1.840000033378601 ] Output [ People_ID , Height ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #1.Killed ] ; #4 = Aggregate [ #3 ] Output [ SUM(Killed) AS Sum_Killed ]"
    },
    {
        "id": "fb2d89ba67fc271984744a3dca9944a773e15f572c57d6ade7af0b19d1903422",
        "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Predicate [ Country = 'China' OR Country = 'Japan' ] Output [ People_ID , Country ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name ]"
    },
    {
        "id": "b9e8d5a9f42d045e999f271bd0720918f15014ae94fcade8bfb5c7a90f973b9b",
        "question": "What are the heights of perpetrators in descending order of the number of people they injured?",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ Injured , People_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Height ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #1.Injured , #2.Height ] ; #4 = Sort [ #3 ] OrderBy [ Injured DESC ] Output [ Injured , Height ]"
    },
    {
        "id": "9def76d255bba707f296b8a2c2eeafa54d60424f9b511419eecc8da68b2cb749",
        "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]"
    },
    {
        "id": "9a37d2c6c863a335427d9acf85c32d4377215055495e1f926cf4fa29072f8f66",
        "question": "What is the country that has the most perpetrators?",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Country ]"
    },
    {
        "id": "91fec59c44c6994e0aece74147e68278d5f009934f66caf941aea291b3ee8a0a",
        "question": "What are the countries that have at least two perpetrators?",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Count_Star , Country ]"
    },
    {
        "id": "e9cb812a23dfae157a2b8ca6d3e320c30a9528e7fdca00bf9a215bc4a2737bcc",
        "question": "List the names of perpetrators in descending order of the year.",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ People_ID , Year ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name , #1.Year ] ; #4 = Sort [ #3 ] OrderBy [ Year DESC ] Output [ Name , Year ]"
    },
    {
        "id": "ae1955b11eeccbd4959089c6f1d9ad89fdb1716d8383503e9344d54d0f258ec5",
        "question": "List the names of people that are not perpetrators.",
        "parsing_tree": "perpetrator | #1 = Scan Table [ people ] Output [ People_ID , Name ] ; #2 = Scan Table [ perpetrator ] Output [ People_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.People_ID IS NULL OR #1.People_ID = #2.People_ID ] Output [ #1.Name ]"
    },
    {
        "id": "8ef04f31b6d4aa169dee38055fd50b5e373b1d1b7760115ce2038e452b97cef3",
        "question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Predicate [ Injured > 50 ] Distinct [ true ] Output [ Injured , Country ] ; #2 = Scan Table [ perpetrator ] Predicate [ Injured < 20 ] Output [ Injured , Country ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Country = #2.Country ] Output [ #1.Country ]"
    },
    {
        "id": "4de3e67678558055a66d4eec2f3b94fbc220f829dc23be03aa25cc2eca7cf937",
        "question": "How many distinct locations of perpetrators are there?",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Distinct [ true ] Output [ Location ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Location) AS Count_Dist_Location ]"
    },
    {
        "id": "e19406cd1aaf93cb5b71e180ca9f0c25d55578044d2f9b9c812821ce88d6a0b3",
        "question": "Show the date of the tallest perpetrator.",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ People_ID , Date ] ; #2 = Scan Table [ people ] Output [ People_ID , Height ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Height , #1.Date ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Height DESC ] Output [ Date , Height ]"
    },
    {
        "id": "23196bf8ae6f838027194bf116d1f4f492864cbee938a8aa9e22e197d5729b49",
        "question": "In which year did the most recent crime happen?",
        "parsing_tree": "perpetrator | #1 = Scan Table [ perpetrator ] Output [ Year ] ; #2 = Aggregate [ #1 ] Output [ MAX(Year) AS Max_Year ]"
    },
    {
        "id": "53470c6a70f67cda8c4c6de78129547e8ffe528fcc59e5a15d84a78378c87707",
        "question": "Report the name of all campuses in Los Angeles county.",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ County = 'Los Angeles' ] Output [ Campus , County ]"
    },
    {
        "id": "3b7e9d542b0d6e5eb0a15cd6433dbb6f9d38050cc6a2603bfc5e9aaf7cc9ce14",
        "question": "What campuses are located in the county of Los Angeles?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ County = 'Los Angeles' ] Output [ Campus , County ]"
    },
    {
        "id": "ffe1d2c0134325aa5fd3ff44c89e20135d09fde1ab51ca82c54e8eda7dc39ae6",
        "question": "What are the names of all campuses located at Chico?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Location = 'Chico' ] Output [ Location , Campus ]"
    },
    {
        "id": "6a8262a5e7efe54b2f08c5c972d9bff684d617a56d851bd5250952c2a5c10dcb",
        "question": "What campuses are located in Chico?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Location = 'Chico' ] Output [ Location , Campus ]"
    },
    {
        "id": "f37d3ac164971ce35f3564b0a5cb45e156ef180189ad536c8065cde90f99c33c",
        "question": "Find all the campuses opened in 1958.",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Year = 1958 ] Output [ Campus , Year ]"
    },
    {
        "id": "6daf2c65094739272e2c8195c9ee663692bf6abc7fe7a6c87bc7753b78b567c6",
        "question": "What are the campuses that opened in 1958?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Year = 1958 ] Output [ Campus , Year ]"
    },
    {
        "id": "cce6e23230fb29f4838e9860744b08a68af1f6926a501e6b0d77331f6e4cf4f0",
        "question": "Find the name of the campuses opened before 1800.",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Year < 1800 ] Output [ Campus , Year ]"
    },
    {
        "id": "7a2d67fecabbec05477e4ce95cbd04bbe11febec4c6ca3ff4927b1d2d1f532fa",
        "question": "What campuses opened before 1800?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Year < 1800 ] Output [ Campus , Year ]"
    },
    {
        "id": "c2ca737cf9d99bd58317beb60c41778a50886c26d7433823d8c56d8a2b6c9874",
        "question": "Which campus was opened between 1935 and 1939?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Year >= 1935 AND Year <= 1939 ] Output [ Campus , Year ]"
    },
    {
        "id": "6b20b87562fbedd969696253dbcf474118606f73e166da084b197641553f6a11",
        "question": "What campuses opened between 1935 and 1939?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Year >= 1935 AND Year <= 1939 ] Output [ Campus , Year ]"
    },
    {
        "id": "961d0abca797025581423286b172eb2badd39822735b98d2dd45dd4de4e489f2",
        "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Location = 'Northridge' AND County = 'Los Angeles' ] Output [ Location , Campus , County ] ; #2 = Scan Table [ Campuses ] Predicate [ Location = 'San Francisco' AND County = 'San Francisco' ] Output [ Location , Campus , County ] ; #3 = Union [ #1 , #2 ] Output [ #1.Campus ]"
    },
    {
        "id": "c3bf3b4872833ea973769f8534cbf9cd9d30f5eeb5ee42a3472d746c39edc7f1",
        "question": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Location = 'Northridge' AND County = 'Los Angeles' ] Output [ Location , Campus , County ] ; #2 = Scan Table [ Campuses ] Predicate [ Location = 'San Francisco' AND County = 'San Francisco' ] Output [ Location , Campus , County ] ; #3 = Union [ #1 , #2 ] Output [ #1.Campus ]"
    },
    {
        "id": "18d4eb2ea5f5962439b29d9b1df00cf9b9fb061240eb83112e00af573ae81cee",
        "question": "What is the campus fee of \"San Jose State University\" in year 1996?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'San Jose State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ csu_fees ] Predicate [ Year = 1996 ] Output [ Campus , Year , CampusFee ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.CampusFee ]"
    },
    {
        "id": "f74ece3814b3509df3e55c89badff186cf196129259447991182bec5a48a88f4",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'San Jose State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ csu_fees ] Predicate [ Year = 1996 ] Output [ Campus , Year , CampusFee ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.CampusFee ]"
    },
    {
        "id": "53225b46564a539ae3afa168e2c9e3157fb5bb93ed2bc543a47037ee9b582ad3",
        "question": "What is the campus fee of \"San Francisco State University\" in year 1996?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'San Francisco State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ csu_fees ] Predicate [ Year = 1996 ] Output [ Campus , Year , CampusFee ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.CampusFee ]"
    },
    {
        "id": "5688cd333acdfe843cce8d6d22339d353e4f02687c3a32afb14c7c970c35ea9a",
        "question": "What is the campus fee for San Francisco State University in 1996?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'San Francisco State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ csu_fees ] Predicate [ Year = 1996 ] Output [ Campus , Year , CampusFee ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.CampusFee ]"
    },
    {
        "id": "6c46a782045f28eeb906b1477c6a98dd66810926d82f35b37a34a7149694f346",
        "question": "Find the count of universities whose campus fee is greater than the average campus fee.",
        "parsing_tree": "csu_1 | #1 = Scan Table [ csu_fees ] Output [ CampusFee ] ; #2 = Aggregate [ #1 ] Output [ AVG(CampusFee) AS Avg_CampusFee ] ; #3 = Scan Table [ csu_fees ] Output [ CampusFee ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.CampusFee > #2.Avg_CampusFee ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f566e247c8897dd38064e7bf9505dad416c546308a162ce0aa5752d26134192e",
        "question": "How many universities have a campus fee higher than average?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ csu_fees ] Output [ CampusFee ] ; #2 = Aggregate [ #1 ] Output [ AVG(CampusFee) AS Avg_CampusFee ] ; #3 = Scan Table [ csu_fees ] Output [ CampusFee ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.CampusFee > #2.Avg_CampusFee ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "424bb72468b8ad5a5e1d0d35eaf30b2dfdb9696cd651aa25b839e39e866c90af",
        "question": "How many universities have a campus fee greater than the average?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ csu_fees ] Output [ CampusFee ] ; #2 = Aggregate [ #1 ] Output [ AVG(CampusFee) AS Avg_CampusFee ] ; #3 = Scan Table [ csu_fees ] Output [ CampusFee ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.CampusFee > #2.Avg_CampusFee ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a3782136628b6931e31b008f5671373e3640ff9c18d0a033b3e0bfa9f666b88f",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Year > 1950 AND County = 'Los Angeles' ] Output [ Campus , Year , County ]"
    },
    {
        "id": "b9026d9de849fbf200cbf2132f0ed0ce2d3fa24fca18ab65bab011e027ce94c4",
        "question": "What campuses are located in Los Angeles county and opened after 1950?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Year > 1950 AND County = 'Los Angeles' ] Output [ Campus , Year , County ]"
    },
    {
        "id": "0fda7ff1abb740bb9aca758ecb0deeecb38f67ea4489ea61c4dc6d4d76fafeb6",
        "question": "Which year has the most degrees conferred?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ degrees ] Output [ Degrees , Year ] ; #2 = Aggregate [ #1 ] GroupBy [ Year ] Output [ SUM(Degrees) AS Sum_Degrees , Year ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_Degrees DESC ] Output [ Sum_Degrees , Year ]"
    },
    {
        "id": "19c3441a16e3099fe7132ff4698712463895c304532ba795fc9052bd646062ac",
        "question": "In what year was the most degrees conferred?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ degrees ] Output [ Degrees , Year ] ; #2 = Aggregate [ #1 ] GroupBy [ Year ] Output [ SUM(Degrees) AS Sum_Degrees , Year ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_Degrees DESC ] Output [ Sum_Degrees , Year ]"
    },
    {
        "id": "2c20df98a80925174ce68bd033b3eaf0006994d1e3faef8312611b96ce87a4c4",
        "question": "Which campus has the most degrees conferred in all times?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ degrees ] Output [ Degrees , Campus ] ; #2 = Aggregate [ #1 ] GroupBy [ Campus ] Output [ SUM(Degrees) AS Sum_Degrees , Campus ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_Degrees DESC ] Output [ Sum_Degrees , Campus ]"
    },
    {
        "id": "cd68ab3f07697af489ddf2102e02c012978a905a1ef5b7c80d7b2299a5ab9e7a",
        "question": "What campus has the most degrees  conferrred over its entire existence?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ degrees ] Output [ Degrees , Campus ] ; #2 = Aggregate [ #1 ] GroupBy [ Campus ] Output [ SUM(Degrees) AS Sum_Degrees , Campus ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_Degrees DESC ] Output [ Sum_Degrees , Campus ]"
    },
    {
        "id": "dac0e6de664828c15954591356a1f4437e8f23de43ca1ae1392828862f9a6eb3",
        "question": "Which campus has the most faculties in year 2003?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ faculty ] Predicate [ Year = 2003 ] Output [ Campus , Year , Faculty ] ; #2 = Scan Table [ Campuses ] Output [ Id , Campus ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Campus = #2.Id ] Output [ #2.Campus , #1.Faculty ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Faculty DESC ] Output [ Campus , Faculty ]"
    },
    {
        "id": "063fd2717b3d0e7eed0d06c3ba5e681f1d325f3c1604a292e48b40e4bd8ebf19",
        "question": "What campus has the most faculties in 2003?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ faculty ] Predicate [ Year = 2003 ] Output [ Campus , Year , Faculty ] ; #2 = Scan Table [ Campuses ] Output [ Id , Campus ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Campus = #2.Id ] Output [ #2.Campus , #1.Faculty ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Faculty DESC ] Output [ Campus , Faculty ]"
    },
    {
        "id": "ed108b64e9eae5fcc81a0b3f88ea35e6e5dd94852c72e5548a9824e0a275ae45",
        "question": "Find the average fee on a CSU campus in 1996",
        "parsing_tree": "csu_1 | #1 = Scan Table [ csu_fees ] Predicate [ Year = 1996 ] Output [ CampusFee , Year ] ; #2 = Aggregate [ #1 ] Output [ AVG(CampusFee) AS Avg_CampusFee ]"
    },
    {
        "id": "0fbdf809e8261ef7cc53c17ab27bf90c0dd338c3459369675d705ad67297a0f5",
        "question": "What is the average fee for a CSU campus in the year of 1996?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ csu_fees ] Predicate [ Year = 1996 ] Output [ CampusFee , Year ] ; #2 = Aggregate [ #1 ] Output [ AVG(CampusFee) AS Avg_CampusFee ]"
    },
    {
        "id": "abaee843e3e91737cb926087d94b8aff210cda7bc69348d4dc9a5d28748e4d37",
        "question": "What is the average fee on a CSU campus in 2005?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ csu_fees ] Predicate [ Year = 2005 ] Output [ CampusFee , Year ] ; #2 = Aggregate [ #1 ] Output [ AVG(CampusFee) AS Avg_CampusFee ]"
    },
    {
        "id": "959dca68340ab454477132fdb92334a4fb8ea9cee43874696a5aa69571463a2c",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ csu_fees ] Predicate [ Year = 2005 ] Output [ CampusFee , Year ] ; #2 = Aggregate [ #1 ] Output [ AVG(CampusFee) AS Avg_CampusFee ]"
    },
    {
        "id": "e36a030a47648975bab48672f12c288ee839962bd95b53d3d4870dfcf52565e0",
        "question": "report the total number of degrees granted between 1998 and 2002.",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Output [ Id , Campus ] ; #2 = Scan Table [ degrees ] Predicate [ Year >= 1998 AND Year <= 2002 ] Output [ Degrees , Campus , Year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #1.Campus , #2.Degrees ] ; #4 = Aggregate [ #3 ] GroupBy [ Campus ] Output [ SUM(Degrees) AS Sum_Degrees , Campus ]"
    },
    {
        "id": "8837542e1914f3403f3afac5eeab27a81cfe5646bcbd1bab24febd3ba1b81e2f",
        "question": "how many degrees were conferred between 1998 and 2002?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Output [ Id , Campus ] ; #2 = Scan Table [ degrees ] Predicate [ Year >= 1998 AND Year <= 2002 ] Output [ Degrees , Campus , Year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #1.Campus , #2.Degrees ] ; #4 = Aggregate [ #3 ] GroupBy [ Campus ] Output [ SUM(Degrees) AS Sum_Degrees , Campus ]"
    },
    {
        "id": "62ad0e1388f46cbbfd4410f958f5e580883644680c51c895bb1b4f2a298ce45e",
        "question": "For each Orange county campus, report the number of degrees granted after 2000.",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ County = 'Orange' ] Output [ Id , Campus , County ] ; #2 = Scan Table [ degrees ] Predicate [ Year >= 2000 ] Output [ Degrees , Campus , Year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #1.Campus , #2.Degrees ] ; #4 = Aggregate [ #3 ] GroupBy [ Campus ] Output [ SUM(Degrees) AS Sum_Degrees , Campus ]"
    },
    {
        "id": "42b6e47262efc9829cf1aab6cf0c2893842b312b7e01aea729199c333d1a5e35",
        "question": "What is the total number of degrees granted after 2000 for each Orange county campus?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ County = 'Orange' ] Output [ Id , Campus , County ] ; #2 = Scan Table [ degrees ] Predicate [ Year >= 2000 ] Output [ Degrees , Campus , Year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #1.Campus , #2.Degrees ] ; #4 = Aggregate [ #3 ] GroupBy [ Campus ] Output [ SUM(Degrees) AS Sum_Degrees , Campus ]"
    },
    {
        "id": "ff67fc5176602f0eaeaad611be1aeead1c8027e5bfb668ea3ef135e2a9b88311",
        "question": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Output [ Id , Campus ] ; #2 = Scan Table [ Campuses ] Predicate [ County = 'Orange' ] Output [ Id , County ] ; #3 = Scan Table [ faculty ] Predicate [ Year = 2002 ] Output [ Campus , Year , Faculty ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Campus = #2.Id ] Output [ #3.Faculty ] ; #5 = Aggregate [ #4 ] Output [ MAX(Faculty) AS Max_Faculty ] ; #6 = Scan Table [ faculty ] Predicate [ Year = 2002 ] Output [ Campus , Year , Faculty ] ; #7 = Join [ #5 , #6 ] Predicate [ #6.Faculty > #5.Max_Faculty ] Output [ #6.Campus ] ; #8 = Join [ #1 , #7 ] Predicate [ #7.Campus = #1.Id ] Output [ #1.Campus ]"
    },
    {
        "id": "7c67e6c209fb9dac223b7093e01ed613ca87cb765bb9923b404668b77789ab8c",
        "question": "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Output [ Id , Campus ] ; #2 = Scan Table [ Campuses ] Predicate [ County = 'Orange' ] Output [ Id , County ] ; #3 = Scan Table [ faculty ] Predicate [ Year = 2002 ] Output [ Campus , Year , Faculty ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Campus = #2.Id ] Output [ #3.Faculty ] ; #5 = Aggregate [ #4 ] Output [ MAX(Faculty) AS Max_Faculty ] ; #6 = Scan Table [ faculty ] Predicate [ Year = 2002 ] Output [ Campus , Year , Faculty ] ; #7 = Join [ #5 , #6 ] Predicate [ #6.Faculty > #5.Max_Faculty ] Output [ #6.Campus ] ; #8 = Join [ #1 , #7 ] Predicate [ #7.Campus = #1.Id ] Output [ #1.Campus ]"
    },
    {
        "id": "20b64b1297bd31c080a6c5c15799edd33ba4072903a06e7a544d7750aad1cc2d",
        "question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ enrollments ] Predicate [ Year = 1956 AND TotalEnrollment_AY > 400 ] Output [ TotalEnrollment_AY , Campus , Year , FTE_AY ] ; #2 = Scan Table [ Campuses ] Output [ Id , Campus ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Campus = #2.Id ] Output [ #2.Campus ]"
    },
    {
        "id": "009220be454b9e63d1c2db08111208d67ab3b7654708a3a622d30b01a94c7bec",
        "question": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ enrollments ] Predicate [ Year = 1956 AND TotalEnrollment_AY > 400 ] Output [ TotalEnrollment_AY , Campus , Year , FTE_AY ] ; #2 = Scan Table [ Campuses ] Output [ Id , Campus ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Campus = #2.Id ] Output [ #2.Campus ]"
    },
    {
        "id": "00e3773accce3f7c7de48361ab73fd494332d0961283920f528185d4c73f5b97",
        "question": "How many campuses are there in Los Angeles county?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ County = 'Los Angeles' ] Output [ County ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f108923190ef9514383baad6714ce221aff403d9da21df3237201094e8521c1a",
        "question": "How many campuses exist are in the county of LA?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ County = 'Los Angeles' ] Output [ County ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a6f1296014c7b0581dab4e7873adade83be77f726d885ced486e0865fea0854a",
        "question": "List the campuses in Los Angeles county.",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ County = 'Los Angeles' ] Output [ Campus , County ]"
    },
    {
        "id": "920c97e24e99acfe36b0389d7e343321672614870e526cde7b92d3c0a5adc58d",
        "question": "What campuses are in Los Angeles county?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ County = 'Los Angeles' ] Output [ Campus , County ]"
    },
    {
        "id": "0721f3385571cbaecb9681a2c4891ea7ac140bae11fa7ef006a7ea54d2ec41a1",
        "question": "How many degrees were conferred in \"San Jose State University\" in 2000?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'San Jose State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ degrees ] Predicate [ Year = 2000 ] Output [ Degrees , Campus , Year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.Degrees ]"
    },
    {
        "id": "eb7ea80333cf1bc4eb4318e6f10d9000223d992fd1c49e34bff1d33626efa74b",
        "question": "How many degrees were conferred at San Jose State University in 2000?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'San Jose State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ degrees ] Predicate [ Year = 2000 ] Output [ Degrees , Campus , Year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.Degrees ]"
    },
    {
        "id": "6ed40609b52811eb14f14c909eb69babd431bd7bce80455966064e8835b3c840",
        "question": "What are the degrees conferred in \"San Francisco State University\" in 2001.",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'San Francisco State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ degrees ] Predicate [ Year = 2001 ] Output [ Degrees , Campus , Year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.Degrees ]"
    },
    {
        "id": "3b3016c8f53a7e197d90aefd266cf01626ee212407b7fb480cdd227b94157a33",
        "question": "What degrees were conferred in San Francisco State University in the year 2001?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'San Francisco State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ degrees ] Predicate [ Year = 2001 ] Output [ Degrees , Campus , Year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.Degrees ]"
    },
    {
        "id": "7be842e30f7263ab806ef698492dff07fa6f0d84c1c32211c9dd124cf23b5b97",
        "question": "How many faculty is there in total in the year of 2002?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ faculty ] Predicate [ Year = 2002 ] Output [ Faculty , Year ] ; #2 = Aggregate [ #1 ] Output [ SUM(Faculty) AS Sum_Faculty ]"
    },
    {
        "id": "c453e7556ef83642f22c78aa4455577dc58e46e5e1ca1acfafff789b7d5a1e1b",
        "question": "How many faculty, in total, are there in the year 2002?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ faculty ] Predicate [ Year = 2002 ] Output [ Faculty , Year ] ; #2 = Aggregate [ #1 ] Output [ SUM(Faculty) AS Sum_Faculty ]"
    },
    {
        "id": "a231dfa8ee0b94409ae718717d66b9c4c5d80198ceb53d1b69f7389f7a312b18",
        "question": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'Long Beach State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ faculty ] Predicate [ Year = 2002 ] Output [ Campus , Year , Faculty ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.Faculty ]"
    },
    {
        "id": "8de50986d961007e0a05ae3b7ff6c9f397649ff49ae04fa56d8d1e877feb569f",
        "question": "What is the number of faculty at Long Beach State University in 2002?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'Long Beach State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ faculty ] Predicate [ Year = 2002 ] Output [ Campus , Year , Faculty ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.Faculty ]"
    },
    {
        "id": "d4e690534cb2eca71b5a585afaffe3cffda98da4ab85e9f89bec942b93e3ce10",
        "question": "How many faculty lines are there in \"San Francisco State University\" in year 2004?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'San Francisco State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ faculty ] Predicate [ Year = 2004 ] Output [ Campus , Year , Faculty ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.Faculty ]"
    },
    {
        "id": "d5d102a20942e7cd810c2e97b50ecc2f2f0f1a3cb494ada4ebe4abcd8c74d942",
        "question": "How many faculty lines are there at San Francisco State University in 2004?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'San Francisco State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ faculty ] Predicate [ Year = 2004 ] Output [ Campus , Year , Faculty ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.Faculty ]"
    },
    {
        "id": "55d436948f6c71bee8a93f8c5a1a049b705e2505f70d290cc9db6579f3101421",
        "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ degrees ] Predicate [ Year = 2002 ] Output [ Degrees , Campus , Year ] ; #2 = Scan Table [ faculty ] Predicate [ Year = 2002 ] Output [ Campus , Year , Faculty ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Campus = #2.Campus ] Output [ #1.Degrees , #2.Faculty ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Degrees DESC ] Output [ Degrees , Faculty ]"
    },
    {
        "id": "6861b715deb63ed783aa29cf7363dffa3975939c6ede924b59bc51e03abe0ad9",
        "question": "How many faculty members did the university that conferred the most degrees in 2002 have?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ degrees ] Predicate [ Year = 2002 ] Output [ Degrees , Campus , Year ] ; #2 = Scan Table [ faculty ] Predicate [ Year = 2002 ] Output [ Campus , Year , Faculty ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Campus = #2.Campus ] Output [ #1.Degrees , #2.Faculty ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Degrees DESC ] Output [ Degrees , Faculty ]"
    },
    {
        "id": "b9b60c9bf379c42c5dbe6383e97b7c33df2d608d3f5beafd849c8f8a895ae1b6",
        "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ faculty ] Predicate [ Year = 2001 ] Output [ Campus , Year , Faculty ] ; #2 = Scan Table [ degrees ] Predicate [ Year = 2001 ] Output [ Degrees , Campus , Year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Campus = #2.Campus ] Output [ #1.Faculty , #2.Degrees ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Degrees ASC ] Output [ Degrees , Faculty ]"
    },
    {
        "id": "554ff5e417931b52ab20226420e64bb471a8281d368d047d81d8e1e867dce314",
        "question": "How many faculty members are at the university that gave the least number of degrees in 2001?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ faculty ] Predicate [ Year = 2001 ] Output [ Campus , Year , Faculty ] ; #2 = Scan Table [ degrees ] Predicate [ Year = 2001 ] Output [ Degrees , Campus , Year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Campus = #2.Campus ] Output [ #1.Faculty , #2.Degrees ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Degrees ASC ] Output [ Degrees , Faculty ]"
    },
    {
        "id": "0dbcbe334431677ab8f2a3a8a635d31fae1825bb49b19405b11865fa1443a3b2",
        "question": "What is the campus fee of \"San Francisco State University\" in year 2000?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'San Francisco State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ csu_fees ] Predicate [ Year = 2000 ] Output [ Campus , Year , CampusFee ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.CampusFee ]"
    },
    {
        "id": "33ac489547401d6b2837c40b06755fbb4fe35841d80b2db24ffcfd96dc0684e3",
        "question": "In the year 2000, what is the campus fee for San Francisco State University?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'San Francisco State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ csu_fees ] Predicate [ Year = 2000 ] Output [ Campus , Year , CampusFee ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.CampusFee ]"
    },
    {
        "id": "a4bc6e7674bdc934ed644c4d0e7d7b1f88f7e374f3880b6a5b4f440f130fcf4b",
        "question": "Find the campus fee of \"San Jose State University\" in year 2000.",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'San Jose State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ csu_fees ] Predicate [ Year = 2000 ] Output [ Campus , Year , CampusFee ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.CampusFee ]"
    },
    {
        "id": "166f3767a4ade31ce0e24b16305253540a2f55f6a7d708ab492e8ce7d75989cc",
        "question": "What is the campus fee in the year 2000 for San Jose State University?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Predicate [ Campus = 'San Jose State University' ] Output [ Id , Campus ] ; #2 = Scan Table [ csu_fees ] Predicate [ Year = 2000 ] Output [ Campus , Year , CampusFee ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.Campus ] Output [ #2.CampusFee ]"
    },
    {
        "id": "ebc2378421eae2f2c055614431e8441ccaa719c2558be2cd94be20d82fdbe85e",
        "question": "How many CSU campuses are there?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7221d0bea4d82990521d93b329f00512aeca17d422b6cf744ee9c77cb5c444bf",
        "question": "What is the total number of campuses?",
        "parsing_tree": "csu_1 | #1 = Scan Table [ Campuses ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "461eaadbf10e09907dca466c0072b5fc44b15f64ffa4b22c68d387d4d12482ae",
        "question": "How many candidates are there?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6917f02ce0bd87de91e94aa6a778d762908e3e026676d0a8cc5d583a8f02db74",
        "question": "Count the number of candidates.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ff6afcda5d2eaed71093dfd32b95c7a04bbf892c28367a35c3c9e6970e27d557",
        "question": "Which poll resource provided the most number of candidate information?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ Poll_Source ] ; #2 = Aggregate [ #1 ] GroupBy [ Poll_Source ] Output [ countstar AS Count_Star , Poll_Source ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Poll_Source ]"
    },
    {
        "id": "5a709eae6ee29fe08b40383e6b3acf455f832e2f2026e1ddc10b308e62e39fe3",
        "question": "Return the poll resource associated with the most candidates.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ Poll_Source ] ; #2 = Aggregate [ #1 ] GroupBy [ Poll_Source ] Output [ countstar AS Count_Star , Poll_Source ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Poll_Source ]"
    },
    {
        "id": "a9006613beb2917f494b7a0dcec23247212cf3ac7f3a2b332112883e34507b63",
        "question": "what are the top 3 highest support rates?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ Support_rate ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ Support_rate DESC ] Output [ Support_rate ]"
    },
    {
        "id": "e97e6cf32508495c1b1d20f29946a08a2bdbbb408cd8489034e7d65c6ffe13a8",
        "question": "Return the top 3 greatest support rates.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ Support_rate ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ Support_rate DESC ] Output [ Support_rate ]"
    },
    {
        "id": "cea1b46df9fd2160a219d4db424a85bc63e8e6c53a728a6ffcd61da0edfe078d",
        "question": "Find the id of the candidate who got the lowest oppose rate.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ Oppose_rate , Candidate_ID ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Oppose_rate ASC ] Output [ Oppose_rate , Candidate_ID ]"
    },
    {
        "id": "a8eaa845ceba7f68b5eccdcd4fdb75c59d6e393877d79265d08a2661fd15ca02",
        "question": "What is the id of the candidate with the lowest oppose rate?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ Oppose_rate , Candidate_ID ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Oppose_rate ASC ] Output [ Oppose_rate , Candidate_ID ]"
    },
    {
        "id": "4bdbbb2be65a30a0ddabef3ccee5869efa7f66b166f0d125063065be4ef2d7c4",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ Support_rate , Consider_rate , Unsure_rate , Oppose_rate ] ; #2 = Sort [ #1 ] OrderBy [ Unsure_rate ASC ] Output [ Support_rate , Consider_rate , Unsure_rate , Oppose_rate ]"
    },
    {
        "id": "58669b73c40c287506b9b6a31f9e73dfc67be7cafaa24266b41a6d406b980897",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ Support_rate , Consider_rate , Unsure_rate , Oppose_rate ] ; #2 = Sort [ #1 ] OrderBy [ Unsure_rate ASC ] Output [ Support_rate , Consider_rate , Unsure_rate , Oppose_rate ]"
    },
    {
        "id": "32fd1c0027386d991af3feb9135178d8114779ca5faea312e6ec65da9ff9041b",
        "question": "which poll source does the highest oppose rate come from?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ Poll_Source , Oppose_rate ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Oppose_rate DESC ] Output [ Poll_Source , Oppose_rate ]"
    },
    {
        "id": "3db7bbd4ac7f5a62ae724a8d8e1b1c464412a34493ed3159a4ae3d739c9ab9d4",
        "question": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ Poll_Source , Oppose_rate ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Oppose_rate DESC ] Output [ Poll_Source , Oppose_rate ]"
    },
    {
        "id": "87ae7f79c9a87ed27ae7aeff85e9b12ecc4f0b1977b4e8f94e79ffa4ce959524",
        "question": "List all people names in the order of their date of birth from old to young.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Output [ Date_of_Birth , Name ] ; #2 = Sort [ #1 ] OrderBy [ Date_of_Birth ASC ] Output [ Date_of_Birth , Name ]"
    },
    {
        "id": "14572a8212f81a6dd8d636d77c2d0e00e56ca7289bca56976cff3786c932b058",
        "question": "What are the names of all people, ordered by their date of birth?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Output [ Date_of_Birth , Name ] ; #2 = Sort [ #1 ] OrderBy [ Date_of_Birth ASC ] Output [ Date_of_Birth , Name ]"
    },
    {
        "id": "12a701226235a73451723360b0269ed46e9788483178b38b77aeb7ab040d6a91",
        "question": "Find the average height and weight for all males (sex is M).",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Predicate [ Sex = 'M' ] Output [ Weight , Sex , Height ] ; #2 = Aggregate [ #1 ] Output [ AVG(Height) AS Avg_Height , AVG(Weight) AS Avg_Weight ]"
    },
    {
        "id": "2bf972d9bd5d064b1688de1bf54538e79e9083b9e4f02b3f4727c17eb2fdd2c2",
        "question": "What are the average height and weight across males (sex is M)?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Predicate [ Sex = 'M' ] Output [ Weight , Sex , Height ] ; #2 = Aggregate [ #1 ] Output [ AVG(Height) AS Avg_Height , AVG(Weight) AS Avg_Weight ]"
    },
    {
        "id": "b0f6559cb18d30b780510574e26ad976169e6ef1e3e6cec7d27c05126eb39968",
        "question": "find the names of people who are taller than 200 or lower than 190.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Predicate [ Height < 190.0 OR Height > 200.0 ] Output [ Name , Height ]"
    },
    {
        "id": "f364a8dd6e5978b22e02fb50862688ca6bd3b926c37d8e5cb79f80347b3bbcc0",
        "question": "What are the names of people who have a height greater than 200 or less than 190?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Predicate [ Height < 190.0 OR Height > 200.0 ] Output [ Name , Height ]"
    },
    {
        "id": "0ef61e0bb50981a5f112c73888b14d2fb522ee1802cb15590884f59d4b66673f",
        "question": "Find the average and minimum weight for each gender.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Output [ Weight , Sex ] ; #2 = Aggregate [ #1 ] GroupBy [ Sex ] Output [ Sex , MIN(Weight) AS Min_Weight , AVG(Weight) AS Avg_Weight ]"
    },
    {
        "id": "dd7c5d87e5fcaccf4d1cdb343a88cad80a57bc959ca81fcf731a01708add7d8f",
        "question": "What are the average and minimum weights for people of each sex?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Output [ Weight , Sex ] ; #2 = Aggregate [ #1 ] GroupBy [ Sex ] Output [ Sex , MIN(Weight) AS Min_Weight , AVG(Weight) AS Avg_Weight ]"
    },
    {
        "id": "e986a57c88075cf84535cb661deec47a9570552b9b14e21d2c167b29603608bf",
        "question": "Find the name and gender of the candidate who got the highest support rate.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ Support_rate , People_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Sex , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Sex , #1.Support_rate , #2.Name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Support_rate DESC ] Output [ Support_rate , Sex , Name ]"
    },
    {
        "id": "b77b16fcc0680bdbd8aac1c0a9f496d9000cbd2b4d3478340c2a968787549185",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ Support_rate , People_ID ] ; #2 = Scan Table [ people ] Output [ People_ID , Sex , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Sex , #1.Support_rate , #2.Name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Support_rate DESC ] Output [ Support_rate , Sex , Name ]"
    },
    {
        "id": "ce556364c4075bbd0e189663fb5fc3c253cf59225fdff5fb4085fa167fbbdbbd",
        "question": "Find the name of the candidates whose oppose percentage is the lowest for each sex.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ People_ID , Oppose_rate ] ; #2 = Scan Table [ people ] Output [ People_ID , Sex , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Sex , #1.Oppose_rate , #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Sex , Name ] Output [ MIN(Oppose_rate) AS Min_Oppose_rate , Sex , Name ]"
    },
    {
        "id": "a0191a7ce532961301fd4acf2f205c641afe4b6f2bdf83dac602180129f12511",
        "question": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ People_ID , Oppose_rate ] ; #2 = Scan Table [ people ] Output [ People_ID , Sex , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Sex , #1.Oppose_rate , #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Sex , Name ] Output [ MIN(Oppose_rate) AS Min_Oppose_rate , Sex , Name ]"
    },
    {
        "id": "f93d8bc4804cb553f3a88b28dd116c04fe77ab443e8112874704475e4969763e",
        "question": "which gender got the highest average uncertain ratio.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ People_ID , Unsure_rate ] ; #2 = Scan Table [ people ] Output [ People_ID , Sex ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Sex , #1.Unsure_rate ] ; #4 = Aggregate [ #3 ] GroupBy [ Sex ] Output [ Sex , AVG(Unsure_rate) AS Avg_Unsure_rate ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_Unsure_rate DESC ] Output [ Sex , Avg_Unsure_rate ]"
    },
    {
        "id": "d19918bef786ecb25f3a4f06574925f06c36aafbc2ba5be9b4d1eb982872f5ea",
        "question": "What is the sex of the candidate who had the highest unsure rate?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ People_ID , Unsure_rate ] ; #2 = Scan Table [ people ] Output [ People_ID , Sex ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Sex , #1.Unsure_rate ] ; #4 = Aggregate [ #3 ] GroupBy [ Sex ] Output [ Sex , AVG(Unsure_rate) AS Avg_Unsure_rate ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_Unsure_rate DESC ] Output [ Sex , Avg_Unsure_rate ]"
    },
    {
        "id": "84d9a625e48ace7c41160d125c09f0a92ebb60454636b733f433eaf59da9fe53",
        "question": "what are the names of people who did not participate in the candidate election.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Output [ People_ID , Name ] ; #2 = Scan Table [ candidate ] Output [ People_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.People_ID IS NULL OR #1.People_ID = #2.People_ID ] Output [ #1.Name ]"
    },
    {
        "id": "990bde534eff6b58c5063091bac7f4c2fb1b8bf273c29517b9426122e62b58e0",
        "question": "Give the names of people who did not participate in the candidate election.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Output [ People_ID , Name ] ; #2 = Scan Table [ candidate ] Output [ People_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.People_ID IS NULL OR #1.People_ID = #2.People_ID ] Output [ #1.Name ]"
    },
    {
        "id": "a02f641c3e2159878ec509b5741230dac3c90e45aeadb9c862b0ff92c072338a",
        "question": "Find the names of the candidates whose support percentage is lower than their oppose rate.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Predicate [ Support_rate < Oppose_rate ] Output [ Support_rate , People_ID , Oppose_rate ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name ]"
    },
    {
        "id": "771d45624ea6ce444126d2238e2e301c8ded64c1b94320bcaf7d8c790016f103",
        "question": "What are the names of candidates who have a lower support rate than oppose rate?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Predicate [ Support_rate < Oppose_rate ] Output [ Support_rate , People_ID , Oppose_rate ] ; #2 = Scan Table [ people ] Output [ People_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #2.Name ]"
    },
    {
        "id": "9a6c08dc878e9275198be11f3b0acfdc59997c08c7d041afff8ad76341db15c6",
        "question": "how many people are there whose weight is higher than 85 for each gender?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Predicate [ Weight > 85.0 ] Output [ Weight , Sex ] ; #2 = Aggregate [ #1 ] GroupBy [ Sex ] Output [ countstar AS Count_Star , Sex ]"
    },
    {
        "id": "e5ce774f3749c34d30928c54561de1ce331644c387b3874d8ad04c38ed19ddbe",
        "question": "Count the number of people of each sex who have a weight higher than 85.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Predicate [ Weight > 85.0 ] Output [ Weight , Sex ] ; #2 = Aggregate [ #1 ] GroupBy [ Sex ] Output [ countstar AS Count_Star , Sex ]"
    },
    {
        "id": "cbe6f1b9bdf2a06922d6ad852fb265f29b441606771f3af4adf6b8c75042be77",
        "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ Support_rate , Consider_rate , Oppose_rate ] ; #2 = Aggregate [ #1 ] Output [ MIN(Oppose_rate) AS Min_Oppose_rate , MIN(Consider_rate) AS Min_Consider_rate , MAX(Support_rate) AS Max_Support_rate ]"
    },
    {
        "id": "79fd8baf65ce96c5a7a1439ab28bca565418bf0d3251484ba3f657c359973a76",
        "question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ candidate ] Output [ Support_rate , Consider_rate , Oppose_rate ] ; #2 = Aggregate [ #1 ] Output [ MIN(Oppose_rate) AS Min_Oppose_rate , MIN(Consider_rate) AS Min_Consider_rate , MAX(Support_rate) AS Max_Support_rate ]"
    },
    {
        "id": "0c26eca8b40f4dce5c2750184ec80c7a1733c593643b9d94e707465c3e20ecec",
        "question": "list all female (sex is F) candidate names in the alphabetical order.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Predicate [ Sex = 'F' ] Output [ People_ID , Sex , Name ] ; #2 = Scan Table [ candidate ] Output [ People_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #1.Name ] ; #4 = Sort [ #3 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "681d3a5acf05673381d75f696e0a263ba225d1d432780bca4ec6f25f3430ad6b",
        "question": "What are the names of all female candidates in alphabetical order (sex is F)?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Predicate [ Sex = 'F' ] Output [ People_ID , Sex , Name ] ; #2 = Scan Table [ candidate ] Output [ People_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.People_ID = #2.People_ID ] Output [ #1.Name ] ; #4 = Sort [ #3 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "488751f94744351e9420e24e0181cf27691f3bda22df73d8bc7b5d1ad19fac65",
        "question": "find the name of people whose height is lower than the average.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Output [ Height ] ; #2 = Aggregate [ #1 ] Output [ AVG(Height) AS Avg_Height ] ; #3 = Scan Table [ people ] Output [ Name , Height ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Height < #2.Avg_Height ] Output [ #3.Name ]"
    },
    {
        "id": "43b9c03245e10e9a8d65cc70c98d0b0b66e0a9afc33580892c53052940192f55",
        "question": "What are the names of people who are shorter than average?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Output [ Height ] ; #2 = Aggregate [ #1 ] Output [ AVG(Height) AS Avg_Height ] ; #3 = Scan Table [ people ] Output [ Name , Height ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Height < #2.Avg_Height ] Output [ #3.Name ]"
    },
    {
        "id": "6d0d77d59dc688e8d049bf10df63791bdc5607666d46da7821313fdf6a21350a",
        "question": "List all info about all people.",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Output [ People_ID , Date_of_Birth , Name , Weight , Sex , Height ]"
    },
    {
        "id": "66b8c53d6bcd094e606f2b3843720ccabaf367c851457f28156e607e1eaecdc2",
        "question": "What is all the information about all people?",
        "parsing_tree": "candidate_poll | #1 = Scan Table [ people ] Output [ People_ID , Date_of_Birth , Name , Weight , Sex , Height ]"
    },
    {
        "id": "a4bf4d038af8a255a08a9323bdc47d42c89f307b1a4749f3bb05e465d3e396cd",
        "question": "Find the titles of all movies directed by steven spielberg.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ director = 'Steven Spielberg' ] Output [ director , title ]"
    },
    {
        "id": "2bbd976b40b2b68d0f0eb102a63faf4a04a52b74e5ec79adc3146af2c9ed2f9f",
        "question": "What are the names of all movies directed by Steven Spielberg?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ director = 'Steven Spielberg' ] Output [ director , title ]"
    },
    {
        "id": "ed983072ad15927860c08a8f7c4c0973692f9cab65a6625158587c49a30c8c7c",
        "question": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ year > 2000 AND director = 'James Cameron' ] Output [ director , title , year ]"
    },
    {
        "id": "0b9f3e2be98eabb183cfaf9577166c68203ce9b6778c79fa79a6565a3108e7ff",
        "question": "What are the titles of all movies that James Cameron directed after 2000?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ year > 2000 AND director = 'James Cameron' ] Output [ director , title , year ]"
    },
    {
        "id": "5958d4d94ed61e7a23e4d572efd8e2fa9226d51b3f0fa72ecc7d6c80bb09eba1",
        "question": "How many movies were made before 2000?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ year < 2000 ] Output [ year ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1b6cdc466885c86e3268eb4ba95cfde94f225f1497bb5129a75bac878236b85d",
        "question": "Who is the director of movie Avatar?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ title = 'Avatar' ] Output [ director , title ]"
    },
    {
        "id": "1a00bfc0dcb190cc5f3f9131b6588eaee9d61b9c74cb07598d67ab36731007c4",
        "question": "Who directed Avatar?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ title = 'Avatar' ] Output [ director , title ]"
    },
    {
        "id": "049b89106f572a38ed27b85ed1bbd9f642f808bf4bddc75e3821938ea5b0d763",
        "question": "How many reviewers listed?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Reviewer ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "02a09a16d983e361d23d632fb9f8e5c27c02ccdcdb0d95ebbb68431f66ea378b",
        "question": "How many reviewers are there?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Reviewer ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7366db02e35eeeadf31d936116966ec8ea6eb1d43859a87de6537a5b3ea93e7c",
        "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Reviewer ] Predicate [ name like '%Mike%' ] Output [ name , rID ]"
    },
    {
        "id": "d421cbfc7dbe6ea51ab8d5e05f0ef22a76e0284fa829658621af33d448033498",
        "question": "What is the id of the reviewer whose name includes the word \"Mike\"?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Reviewer ] Predicate [ name like '%Mike%' ] Output [ name , rID ]"
    },
    {
        "id": "c87ca4ef282ec71ba3f436cb71aeea9625fb69f1c82ebaf06b733f1e2577df68",
        "question": "What is the reviewer id of Daniel Lewis?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Reviewer ] Predicate [ name = 'Daniel Lewis' ] Output [ name , rID ]"
    },
    {
        "id": "d7407c7c3cc01985b49bd6c9947b9818c584de0e1f242ed9fff4fcab33a02a4b",
        "question": "What is the id of the reviewer named Daniel Lewis?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Reviewer ] Predicate [ name = 'Daniel Lewis' ] Output [ name , rID ]"
    },
    {
        "id": "8feff8ce59edec245916ad5e4ccdaf6236ee683b001e0a8e847285a5153ca629",
        "question": "What is the total number of ratings that has more than 3 stars?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Predicate [ stars > 3 ] Output [ stars ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "556d38c1845abb9831f85a95605115624fa3ceff723d92fd01e53cfb5c682d3b",
        "question": "How many movie ratings have more than 3 stars?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Predicate [ stars > 3 ] Output [ stars ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "64ba4b94c9c529627ce987dac5e88179d3bb71a40c7b9f2ab9f4102c9aec66be",
        "question": "What is the lowest and highest rating star?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Output [ stars ] ; #2 = Aggregate [ #1 ] Output [ MAX(stars) AS Max_stars , MIN(stars) AS Min_stars ]"
    },
    {
        "id": "78682c3d1f606b8c650a65eb9031b826e20967fb781003805aef5bd5e6e3a899",
        "question": "What is the maximum and mininum number of stars a rating can receive?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Output [ stars ] ; #2 = Aggregate [ #1 ] Output [ MAX(stars) AS Max_stars , MIN(stars) AS Min_stars ]"
    },
    {
        "id": "a42acba429b3ed5a1839235c6f7dc656b6104cee3b8c41873f6c0f344a3c0470",
        "question": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ mID , year ] ; #2 = Scan Table [ Rating ] Predicate [ stars >= 4 ] Output [ stars , mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.mID = #1.mID ] Output [ #1.year ] ; #4 = Sort [ #3 ] OrderBy [ year ASC ] Distinct [ true ] Output [ year ]"
    },
    {
        "id": "e99e9bb7f99585cebda6efd78d50289ed7cafd846e02287241dcb2d7f9e1e615",
        "question": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ mID , year ] ; #2 = Scan Table [ Rating ] Predicate [ stars >= 4 ] Output [ stars , mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.mID = #1.mID ] Output [ #1.year ] ; #4 = Sort [ #3 ] OrderBy [ year ASC ] Distinct [ true ] Output [ year ]"
    },
    {
        "id": "d4d51acf68b4d49e1e6470f8a7d32f13fbfb441b3d2f354e53a72c33e28ed7eb",
        "question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Predicate [ stars = 5 ] Output [ stars , mID ] ; #2 = Scan Table [ Movie ] Output [ director , mID , title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Output [ #2.director , #2.title ]"
    },
    {
        "id": "beccc2d26a294c62f168feee234f30416e4ee609bc0741a2f2eabd23466e1eba",
        "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Predicate [ stars = 5 ] Output [ stars , mID ] ; #2 = Scan Table [ Movie ] Output [ director , mID , title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Output [ #2.director , #2.title ]"
    },
    {
        "id": "c670ccf76f158cafd60298f5ae36b20e780fb3128d5c6732e1afd4186085bddb",
        "question": "What is the average rating star for each reviewer?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Reviewer ] Output [ name , rID ] ; #2 = Scan Table [ Rating ] Output [ rID , stars ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.rID = #2.rID ] Output [ #1.name , #2.stars ] ; #4 = Aggregate [ #3 ] GroupBy [ name ] Output [ name , AVG(stars) AS Avg_stars ]"
    },
    {
        "id": "30a244e632d6897415b96382ca576746eb3e24ecf26840e8f2cbf2d9de96ef5e",
        "question": "What is the average number of stars that each reviewer awards for a movie?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Reviewer ] Output [ name , rID ] ; #2 = Scan Table [ Rating ] Output [ rID , stars ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.rID = #2.rID ] Output [ #1.name , #2.stars ] ; #4 = Aggregate [ #3 ] GroupBy [ name ] Output [ name , AVG(stars) AS Avg_stars ]"
    },
    {
        "id": "8017a171089f979281f99ff684699cedce4db888a21ffd266b524d78679801b6",
        "question": "Find the titles of all movies that have no ratings.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ mID , title ] ; #2 = Scan Table [ Rating ] Output [ mID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.mID IS NULL OR #1.mID = #2.mID ] Output [ #1.title ]"
    },
    {
        "id": "c1f30e43e5196ce6b7be9eff2ddc5c583e777bf4dd7f63f33aed1f5b4e50bff9",
        "question": "What are the titles of all movies that have not been rated?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ mID , title ] ; #2 = Scan Table [ Rating ] Output [ mID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.mID IS NULL OR #1.mID = #2.mID ] Output [ #1.title ]"
    },
    {
        "id": "b0f184b596a30154ba2c13d94dce45f7934d609f62eaa53d81223093ef6de048",
        "question": "What is the names of movies whose created year is after all movies directed by Steven Spielberg?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ director = 'Steven Spielberg' ] Output [ director , year ] ; #2 = Aggregate [ #1 ] Output [ MAX(year) AS Max_year ] ; #3 = Scan Table [ Movie ] Output [ title , year ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.year > #2.Max_year ] Output [ #3.title ]"
    },
    {
        "id": "50755f454dd7adb956980e68026ac779a794d03e3fbba09c70a788479b70970e",
        "question": "What are the names of all movies that were created after the most recent Steven Spielberg film?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ director = 'Steven Spielberg' ] Output [ director , year ] ; #2 = Aggregate [ #1 ] Output [ MAX(year) AS Max_year ] ; #3 = Scan Table [ Movie ] Output [ title , year ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.year > #2.Max_year ] Output [ #3.title ]"
    },
    {
        "id": "7cc72b57ccb35adabec9a1a00301a6b3b52bb2bb42f5e5c4253fdcaf4e83f807",
        "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ director , mID , title ] ; #2 = Scan Table [ Movie ] Predicate [ director = 'James Cameron' ] Output [ director , mID ] ; #3 = Scan Table [ Rating ] Output [ stars , mID ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.mID = #2.mID ] Output [ #3.stars ] ; #5 = Aggregate [ #4 ] Output [ AVG(stars) AS Avg_stars ] ; #6 = Scan Table [ Rating ] Output [ stars , mID ] ; #7 = Join [ #5 , #6 ] Predicate [ #6.stars > #5.Avg_stars ] Output [ #6.mID ] ; #8 = Join [ #1 , #7 ] Predicate [ #7.mID = #1.mID ] Output [ #1.title , #1.director ]"
    },
    {
        "id": "6ce32d29391b60eac767bc1ad93f58dd3142ce1cca29d3c81ba934f188e7f58f",
        "question": "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ director , mID , title ] ; #2 = Scan Table [ Movie ] Predicate [ director = 'James Cameron' ] Output [ director , mID ] ; #3 = Scan Table [ Rating ] Output [ stars , mID ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.mID = #2.mID ] Output [ #3.stars ] ; #5 = Aggregate [ #4 ] Output [ AVG(stars) AS Avg_stars ] ; #6 = Scan Table [ Rating ] Output [ stars , mID ] ; #7 = Join [ #5 , #6 ] Predicate [ #6.stars > #5.Avg_stars ] Output [ #6.mID ] ; #8 = Join [ #1 , #7 ] Predicate [ #7.mID = #1.mID ] Output [ #1.title , #1.director ]"
    },
    {
        "id": "50097f218216d026e32dd85785b43802844569ef4d067f0e29269610ee64f12d",
        "question": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ mID , title ] ; #2 = Scan Table [ Reviewer ] Output [ name , rID ] ; #3 = Scan Table [ Rating ] Output [ stars , rID , mID , ratingDate ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.rID = #3.rID ] Output [ #3.stars , #3.ratingDate , #2.name , #3.mID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.mID = #4.mID ] Output [ #4.ratingDate , #4.name , #1.title , #4.stars ] ; #6 = Sort [ #5 ] OrderBy [ name ASC , title ASC , stars ASC ] Output [ name , stars , ratingDate , title ]"
    },
    {
        "id": "e26e7783cf798349d2da08c0645e3d57d3b95f3c300a21c772fed14a4e1641b9",
        "question": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ mID , title ] ; #2 = Scan Table [ Reviewer ] Output [ name , rID ] ; #3 = Scan Table [ Rating ] Output [ stars , rID , mID , ratingDate ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.rID = #3.rID ] Output [ #3.stars , #3.ratingDate , #2.name , #3.mID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.mID = #4.mID ] Output [ #4.ratingDate , #4.name , #1.title , #4.stars ] ; #6 = Sort [ #5 ] OrderBy [ name ASC , title ASC , stars ASC ] Output [ name , stars , ratingDate , title ]"
    },
    {
        "id": "de91eb07f328b3ecd62d8af5eee44ee3d080080d6d5ed3f01cbc6ea5997e1414",
        "question": "Find the names of all reviewers who have contributed three or more ratings.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Output [ rID ] ; #2 = Aggregate [ #1 ] GroupBy [ rID ] Output [ countstar AS Count_Star , rID ] ; #3 = Scan Table [ Reviewer ] Output [ name , rID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.rID = #3.rID ] Output [ #3.name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ name ]"
    },
    {
        "id": "6d67d7105bd147279e23073a3120a0366e4a5b995e9f0ea49c939bda1baa4df6",
        "question": "What are the names of all reviewers that have rated 3 or more movies?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Output [ rID ] ; #2 = Aggregate [ #1 ] GroupBy [ rID ] Output [ countstar AS Count_Star , rID ] ; #3 = Scan Table [ Reviewer ] Output [ name , rID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.rID = #3.rID ] Output [ #3.name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ name ]"
    },
    {
        "id": "880b34fd483d5670f74786b0c9242b21916b82a154043e160e13183a733858bb",
        "question": "Find the names of all reviewers who rated Gone with the Wind.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ title = 'Gone with the Wind' ] Output [ mID , title ] ; #2 = Scan Table [ Rating ] Output [ rID , mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Output [ #2.rID ] ; #4 = Scan Table [ Reviewer ] Output [ name , rID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.rID = #4.rID ] Distinct [ true ] Output [ #4.name ]"
    },
    {
        "id": "6a57afcc6120a608de68f219efd535db0fc06c51a61cb0c4b4820d6a3ccd3f3a",
        "question": "What are the names of all the different reviewers who rates Gone with the Wind?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ title = 'Gone with the Wind' ] Output [ mID , title ] ; #2 = Scan Table [ Rating ] Output [ rID , mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Output [ #2.rID ] ; #4 = Scan Table [ Reviewer ] Output [ name , rID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.rID = #4.rID ] Distinct [ true ] Output [ #4.name ]"
    },
    {
        "id": "e8241772524476aaea924f70295d20cc2163186f27b0fad86fa21ef42d43d6f7",
        "question": "Find the names of all directors whose movies are rated by Sarah Martinez.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Reviewer ] Predicate [ name = 'Sarah Martinez' ] Output [ name , rID ] ; #2 = Scan Table [ Rating ] Output [ rID , mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.rID = #2.rID ] Output [ #2.mID ] ; #4 = Scan Table [ Movie ] Output [ director , mID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.mID = #4.mID ] Distinct [ true ] Output [ #4.director ]"
    },
    {
        "id": "eb46ecc6494a26b166ab4b915259706180dc446b52bb2f85b647a1794ef1ff46",
        "question": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Reviewer ] Predicate [ name = 'Sarah Martinez' ] Output [ name , rID ] ; #2 = Scan Table [ Rating ] Output [ rID , mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.rID = #2.rID ] Output [ #2.mID ] ; #4 = Scan Table [ Movie ] Output [ director , mID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.mID = #4.mID ] Distinct [ true ] Output [ #4.director ]"
    },
    {
        "id": "b3c3b444d5ebdf0677184e30d2d835ff93e713b5386b2f3baaba901497a91fa7",
        "question": "Find the titles of all movies not reviewed by Chris Jackson.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Distinct [ true ] Output [ title ] ; #2 = Scan Table [ Reviewer ] Predicate [ name = 'Chris Jackson' ] Output [ name , rID ] ; #3 = Scan Table [ Rating ] Output [ rID , mID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.rID = #3.rID ] Output [ #3.mID ] ; #5 = Scan Table [ Movie ] Output [ mID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.mID = #5.mID ] Output [ #5.title ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.title = #6.title ] Output [ #1.title ]"
    },
    {
        "id": "5b3f467602157a95fc8173bfb169b40593c934764ad5f8cbf38c400e4ee8d9bd",
        "question": "What are the titles of all movies that were not reviewed by Chris Jackson?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Distinct [ true ] Output [ title ] ; #2 = Scan Table [ Reviewer ] Predicate [ name = 'Chris Jackson' ] Output [ name , rID ] ; #3 = Scan Table [ Rating ] Output [ rID , mID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.rID = #3.rID ] Output [ #3.mID ] ; #5 = Scan Table [ Movie ] Output [ mID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.mID = #5.mID ] Output [ #5.title ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.title = #6.title ] Output [ #1.title ]"
    },
    {
        "id": "465b1a216905ac4929cc7a1646bd65807f11e583731a2a1bcce7eea256669956",
        "question": "What are the names of the directors who made exactly one movie?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ director ] ; #2 = Aggregate [ #1 ] GroupBy [ director ] Output [ countstar AS Count_Star , director ] ; #3 = Filter [ #2 ] Predicate [ Count_Star = 1 ] Output [ director ]"
    },
    {
        "id": "6419c6240a68596be2fc9b95d2b743fe9491cac82953db56efaa351d788a8b8a",
        "question": "What are the names of all directors who made one movie?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ director ] ; #2 = Aggregate [ #1 ] GroupBy [ director ] Output [ countstar AS Count_Star , director ] ; #3 = Filter [ #2 ] Predicate [ Count_Star = 1 ] Output [ director ]"
    },
    {
        "id": "94d27b39fa847e2faf3995d84bce2bb48b68ee10235c095455cb519414fc347d",
        "question": "What are the names of the directors who made exactly one movie excluding director NULL?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ director IS NOT NULL ] Output [ director ] ; #2 = Aggregate [ #1 ] GroupBy [ director ] Output [ countstar AS Count_Star , director ] ; #3 = Filter [ #2 ] Predicate [ Count_Star = 1 ] Output [ director ]"
    },
    {
        "id": "fa6cb749bcdc8276ddc9776ccb09422da5711e62cde8572cd2730bbdccd0e16d",
        "question": "What are the names of all directors who have made one movie except for the director named NULL?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ director IS NOT NULL ] Output [ director ] ; #2 = Aggregate [ #1 ] GroupBy [ director ] Output [ countstar AS Count_Star , director ] ; #3 = Filter [ #2 ] Predicate [ Count_Star = 1 ] Output [ director ]"
    },
    {
        "id": "47c666862c32d21c4b10b1004e7a8be796b14407849c96adf7ac1986e457c1d5",
        "question": "How many movie reviews does each director get?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ director , mID ] ; #2 = Scan Table [ Rating ] Output [ mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Output [ #1.director ] ; #4 = Aggregate [ #3 ] GroupBy [ director ] Output [ countstar AS Count_Star , director ]"
    },
    {
        "id": "d47c17ab0ee9605470b0d3a6b33dfa88a2146586c1fbf085489f2cf188644c14",
        "question": "For each director, how many reviews have they received?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ director , mID ] ; #2 = Scan Table [ Rating ] Output [ mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Output [ #1.director ] ; #4 = Aggregate [ #3 ] GroupBy [ director ] Output [ countstar AS Count_Star , director ]"
    },
    {
        "id": "7cca1d7a7c799bd5fbe1fb7dcd20e5ec62b538874014cd4e3dcdec87f9d38e04",
        "question": "Find the movies with the highest average rating. Return the movie titles and average rating.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Output [ stars , mID ] ; #2 = Aggregate [ #1 ] GroupBy [ mID ] Output [ AVG(stars) AS Avg_stars , mID ] ; #3 = Scan Table [ Movie ] Output [ mID , title ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.mID = #3.mID ] Output [ #2.Avg_stars , #3.title ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_stars DESC ] Output [ Avg_stars , title ]"
    },
    {
        "id": "1e5cd8d8af34d5d019212eac49685ee16d00282b98c77f188f02ce543dac2cea",
        "question": "What are the movie titles with the highest average rating and what are those ratings?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Output [ stars , mID ] ; #2 = Aggregate [ #1 ] GroupBy [ mID ] Output [ AVG(stars) AS Avg_stars , mID ] ; #3 = Scan Table [ Movie ] Output [ mID , title ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.mID = #3.mID ] Output [ #2.Avg_stars , #3.title ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_stars DESC ] Output [ Avg_stars , title ]"
    },
    {
        "id": "fa1f94f358a8842913c941ee9589ffc8872496c800c66b90f9e9b33d2ff785e1",
        "question": "What are the movie titles and average rating of the movies with the lowest average rating?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Output [ stars , mID ] ; #2 = Aggregate [ #1 ] GroupBy [ mID ] Output [ AVG(stars) AS Avg_stars , mID ] ; #3 = Scan Table [ Movie ] Output [ mID , title ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.mID = #3.mID ] Output [ #2.Avg_stars , #3.title ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_stars ASC ] Output [ Avg_stars , title ]"
    },
    {
        "id": "2d252b00b69f1c565d769759fea8a2ee4c1fef48c00436d957a5be906d37b502",
        "question": "What are the titles and average ratings for all movies that have the lowest average rating?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Output [ stars , mID ] ; #2 = Aggregate [ #1 ] GroupBy [ mID ] Output [ AVG(stars) AS Avg_stars , mID ] ; #3 = Scan Table [ Movie ] Output [ mID , title ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.mID = #3.mID ] Output [ #2.Avg_stars , #3.title ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_stars ASC ] Output [ Avg_stars , title ]"
    },
    {
        "id": "bfddeabfe7400bec3e8eea69350be88260f596a6ed7f49ba141b57593f3145ab",
        "question": "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ director IS NOT NULL ] Output [ director , mID , title ] ; #2 = Scan Table [ Rating ] Output [ stars , mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Output [ #2.stars , #1.title , #1.director ] ; #4 = Aggregate [ #3 ] GroupBy [ title , stars , director ] Output [ MAX(stars) AS Max_stars , director , stars , title ]"
    },
    {
        "id": "edb4cc87146c0f3a3793cb8c381c5a1b3ade20ad913bf818aeeace9a45c8382f",
        "question": "For each director, what are the titles and ratings for all the movies they reviewed?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ director IS NOT NULL ] Output [ director , mID , title ] ; #2 = Scan Table [ Rating ] Output [ stars , mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Output [ #2.stars , #1.title , #1.director ] ; #4 = Aggregate [ #3 ] GroupBy [ title , stars , director ] Output [ MAX(stars) AS Max_stars , director , stars , title ]"
    },
    {
        "id": "3c81dcb03e3409b3d36430438b229be973b7d4a16212850722f47505b497d04e",
        "question": "Find the title and star rating of the movie that got the least rating star for each reviewer.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ mID , title ] ; #2 = Scan Table [ Rating ] Output [ stars , rID , mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Output [ #2.rID , #2.stars , #1.title ] ; #4 = Aggregate [ #3 ] GroupBy [ title , rID , stars ] Output [ rID , stars , MIN(stars) AS Min_stars , title ]"
    },
    {
        "id": "b5656a12c5f6d2b9ba07cb357010958e5f8db1637f3f11baa319e7bcc8b66bbb",
        "question": "For each reviewer id, what is the title and rating for the movie with the smallest rating?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ mID , title ] ; #2 = Scan Table [ Rating ] Output [ stars , rID , mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Output [ #2.rID , #2.stars , #1.title ] ; #4 = Aggregate [ #3 ] GroupBy [ title , rID , stars ] Output [ rID , stars , MIN(stars) AS Min_stars , title ]"
    },
    {
        "id": "0627b5d41bedf91ab7a4230489cea80c316674ad8652a89f07afda1124ed413f",
        "question": "Find the title and score of the movie with the lowest rating among all movies directed by each director.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ director , mID , title ] ; #2 = Scan Table [ Rating ] Output [ stars , mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Output [ #2.stars , #1.title , #1.director ] ; #4 = Aggregate [ #3 ] GroupBy [ title , stars , director ] Output [ director , stars , MIN(stars) AS Min_stars , title ]"
    },
    {
        "id": "8c4a54affdf57528136b36f901a1b6dec320876348feb9edbf6101102a81d867",
        "question": "For each director, what is the title and score of their most poorly rated movie?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ director , mID , title ] ; #2 = Scan Table [ Rating ] Output [ stars , mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Output [ #2.stars , #1.title , #1.director ] ; #4 = Aggregate [ #3 ] GroupBy [ title , stars , director ] Output [ director , stars , MIN(stars) AS Min_stars , title ]"
    },
    {
        "id": "554a21f82bb0559977711133dd9ae78d065f0c2745b651cdd95a037e3e75ca61",
        "question": "What is the name of the movie that is rated by most of times?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Output [ mID ] ; #2 = Aggregate [ #1 ] GroupBy [ mID ] Output [ countstar AS Count_Star , mID ] ; #3 = Scan Table [ Movie ] Output [ mID , title ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.mID = #3.mID ] Output [ #2.mID , #3.title , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , mID , title ]"
    },
    {
        "id": "00d9cea2c39e351f22b8e79673d8288301c417516424018956b151754cce904d",
        "question": "What is the name of the movie that has been reviewed the most?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Output [ mID ] ; #2 = Aggregate [ #1 ] GroupBy [ mID ] Output [ countstar AS Count_Star , mID ] ; #3 = Scan Table [ Movie ] Output [ mID , title ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.mID = #3.mID ] Output [ #2.mID , #3.title , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , mID , title ]"
    },
    {
        "id": "e4a3efd1b98205010c567caba318dd32c944441ada3d6202edae2b28c8116015",
        "question": "What are the titles of all movies that have rating star is between 3 and 5?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ mID , title ] ; #2 = Scan Table [ Rating ] Predicate [ stars >= 3 AND stars <= 5 ] Output [ stars , mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Output [ #1.title ]"
    },
    {
        "id": "ce3e06dfd144bcda152014055f3e4da772f29ef8e247cb63facd71aa8e8e12da",
        "question": "What are the titles of all movies that have between 3 and 5 stars?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Output [ mID , title ] ; #2 = Scan Table [ Rating ] Predicate [ stars >= 3 AND stars <= 5 ] Output [ stars , mID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Output [ #1.title ]"
    },
    {
        "id": "7c8ccd876f3a8c5e640281abdfb87f21070e42ecbd684e97aaf6e687eab59578",
        "question": "Find the names of reviewers who had given higher than 3 star ratings.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Predicate [ stars > 3 ] Output [ rID , stars ] ; #2 = Scan Table [ Reviewer ] Output [ name , rID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.rID = #2.rID ] Output [ #2.name ]"
    },
    {
        "id": "1ad04e9e71cc8ac16190a6a78eaa0a27ff855041ab0e1eba61ed017b14228101",
        "question": "What are the names of the reviewers who have rated a movie more than 3 stars before?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Predicate [ stars > 3 ] Output [ rID , stars ] ; #2 = Scan Table [ Reviewer ] Output [ name , rID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.rID = #2.rID ] Output [ #2.name ]"
    },
    {
        "id": "6d5506c4aab4af9eea398267875c9e16318a416e4b4a36ea456af6da6642e768",
        "question": "What are the ids of the movies that are not reviewed by Brittany Harris.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Distinct [ true ] Output [ mID ] ; #2 = Scan Table [ Reviewer ] Predicate [ name = 'Brittany Harris' ] Output [ name , rID ] ; #3 = Scan Table [ Rating ] Output [ rID , mID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.rID = #3.rID ] Output [ #3.mID ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.mID = #4.mID ] Output [ #1.mID ]"
    },
    {
        "id": "ed238a83cac47d8a3a562429ae1e3513a70abddeca7a53063faa8e238dde56fb",
        "question": "What are the ids of all moviest hat have not been reviewed by Britanny Harris?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Distinct [ true ] Output [ mID ] ; #2 = Scan Table [ Reviewer ] Predicate [ name = 'Brittany Harris' ] Output [ name , rID ] ; #3 = Scan Table [ Rating ] Output [ rID , mID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.rID = #3.rID ] Output [ #3.mID ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.mID = #4.mID ] Output [ #1.mID ]"
    },
    {
        "id": "a0ea9ae9aa1f92a6f1ed181493289922afaac2b1155080e1a9ef2c12ab5f7f1f",
        "question": "Find the average rating star for each movie that received at least 2 ratings.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Output [ stars , mID ] ; #2 = Aggregate [ #1 ] GroupBy [ mID ] Output [ countstar AS Count_Star , AVG(stars) AS Avg_stars , mID ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ mID , Avg_stars ]"
    },
    {
        "id": "0991cda552ad14ec8800e9ae56c42f23625d9034954f3236d3b91b11704d1817",
        "question": "For each movie that received more than 3 reviews, what is the average rating?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Output [ stars , mID ] ; #2 = Aggregate [ #1 ] GroupBy [ mID ] Output [ countstar AS Count_Star , AVG(stars) AS Avg_stars , mID ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ mID , Avg_stars ]"
    },
    {
        "id": "a3d98dd4b77a108ea1a701bfcc306965a64367e7959a14cc1f85945bfb894006",
        "question": "find the ids of reviewers who did not give 4 star.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Distinct [ true ] Output [ rID ] ; #2 = Scan Table [ Rating ] Predicate [ stars = 4 ] Output [ rID , stars ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.rID = #2.rID ] Output [ #1.rID ]"
    },
    {
        "id": "64ffa140a2621ae024caace73c78ac4e4ff505d8bc60c47f650242585d7900c8",
        "question": "What are the ids of all reviewers who did not give 4 stars?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Distinct [ true ] Output [ rID ] ; #2 = Scan Table [ Rating ] Predicate [ stars = 4 ] Output [ rID , stars ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.rID = #2.rID ] Output [ #1.rID ]"
    },
    {
        "id": "9f5bebc0de030c7efc3c6744f41dc26474a8a29c9ed01bbab8cfcd82b3c90cbe",
        "question": "Find the ids of reviewers who didn't only give 4 star.",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Predicate [ stars <> 4 ] Output [ rID , stars ]"
    },
    {
        "id": "5f3fbe10584e94b0055d09fb4e8edfd28de7afa70d8d624edb8d5c8654f04c96",
        "question": "What are the ids of all reviewers who have not given 4 stars at least once?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Predicate [ stars <> 4 ] Output [ rID , stars ]"
    },
    {
        "id": "55940f0133186d102c869149ed1de05fc87cb8e0e4f197fa64a0e58b74a32ba5",
        "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ director = 'James Cameron' OR year < 1980 ] Output [ director , title , year ]"
    },
    {
        "id": "451240e20bb075443755f801d7d5f62386b3cd1c3408ce3e1f460bbd1c41f0dd",
        "question": "What are the names of all movies made before 1980 or had James Cameron as the director?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Movie ] Predicate [ director = 'James Cameron' OR year < 1980 ] Output [ director , title , year ]"
    },
    {
        "id": "302148d44fc3ba2a2e9c742c4f81f3650550838cc2489e44e5e4f21b0baf9809",
        "question": "What are the names of reviewers who had rated 3 star and 4 star?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Predicate [ stars = 3 ] Output [ rID , stars ] ; #2 = Scan Table [ Reviewer ] Output [ name , rID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.rID = #2.rID ] Distinct [ true ] Output [ #2.name ] ; #4 = Scan Table [ Rating ] Predicate [ stars = 4 ] Output [ rID , stars ] ; #5 = Scan Table [ Reviewer ] Output [ name , rID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.rID = #5.rID ] Output [ #5.name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.name = #6.name ] Output [ #3.name ]"
    },
    {
        "id": "a8098549841275de01f1773af75d4ad729292db457d4ab97cb4c2eea3491b854",
        "question": "What are the names of all reviewers that have given 3 or 4 stars for reviews?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Predicate [ stars = 3 ] Output [ rID , stars ] ; #2 = Scan Table [ Reviewer ] Output [ name , rID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.rID = #2.rID ] Distinct [ true ] Output [ #2.name ] ; #4 = Scan Table [ Rating ] Predicate [ stars = 4 ] Output [ rID , stars ] ; #5 = Scan Table [ Reviewer ] Output [ name , rID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.rID = #5.rID ] Output [ #5.name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.name = #6.name ] Output [ #3.name ]"
    },
    {
        "id": "5ba5ffd204fabd2821ec3a7f6b7b2285f41b83a46d4992a2220c76a850a2a055",
        "question": "What are the names of movies that get 3 star and 4 star?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Predicate [ stars = 3 ] Output [ stars , mID ] ; #2 = Scan Table [ Movie ] Output [ mID , title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Distinct [ true ] Output [ #2.title ] ; #4 = Scan Table [ Rating ] Predicate [ stars = 4 ] Output [ stars , mID ] ; #5 = Scan Table [ Movie ] Output [ mID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.mID = #5.mID ] Output [ #5.title ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.title = #6.title ] Output [ #3.title ]"
    },
    {
        "id": "e9a4937ad5548470ec8907065e74cbe680ff7bf55e0867a90b921590427f91bb",
        "question": "What are the names of all movies that received 3 or 4 stars?",
        "parsing_tree": "movie_1 | #1 = Scan Table [ Rating ] Predicate [ stars = 3 ] Output [ stars , mID ] ; #2 = Scan Table [ Movie ] Output [ mID , title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mID = #2.mID ] Distinct [ true ] Output [ #2.title ] ; #4 = Scan Table [ Rating ] Predicate [ stars = 4 ] Output [ stars , mID ] ; #5 = Scan Table [ Movie ] Output [ mID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.mID = #5.mID ] Output [ #5.title ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.title = #6.title ] Output [ #3.title ]"
    },
    {
        "id": "bac88d0e86e092d3d14f5e3920b2c30adf407ae6c84c6e78fff02696a3224836",
        "question": "How many counties are there?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1553ae1653ea91e87cb3817547fc7e67f342aa87e30e6519a8ce5ce61d16e3af",
        "question": "Count the number of countries.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e23cf514f978504e55f91a3667420f2188b3aa53dad3420869c85e58da752c55",
        "question": "List the names of counties in descending order of population.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Population , Name ] ; #2 = Sort [ #1 ] OrderBy [ Population DESC ] Output [ Population , Name ]"
    },
    {
        "id": "14ba7e4e97b4ea86501d1de7f2f8985d755b5e4f2d73126b2aaa52ea31501fc0",
        "question": "What are the names of the counties of public safety, ordered by population descending?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Population , Name ] ; #2 = Sort [ #1 ] OrderBy [ Population DESC ] Output [ Population , Name ]"
    },
    {
        "id": "1b2d016999427b1737a3f80c7f50ff94e3aa0a8ed43b5fb9b9fe5f1cf67dcb38",
        "question": "List the distinct police forces of counties whose location is not on east side.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Predicate [ Location <> 'East' ] Distinct [ true ] Output [ Police_force ]"
    },
    {
        "id": "bea1a16ad14666a818d99c02f8fc69eee148b6132d8243e92eae6fd3db6d1560",
        "question": "What are the different police forces of counties that are not located in the East?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Predicate [ Location <> 'East' ] Distinct [ true ] Output [ Police_force ]"
    },
    {
        "id": "927a280e7490bd10234ba937f0a2128c2a55ba42bf6531eac564a4651d0d4a57",
        "question": "What are the minimum and maximum crime rate of counties?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Crime_rate ] ; #2 = Aggregate [ #1 ] Output [ MAX(Crime_rate) AS Max_Crime_rate , MIN(Crime_rate) AS Min_Crime_rate ]"
    },
    {
        "id": "195a794e037e1c59b05c8a731bf4ec4ce09e2dcd838a441cb54849c9668f565b",
        "question": "Return the minimum and maximum crime rates across all counties.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Crime_rate ] ; #2 = Aggregate [ #1 ] Output [ MAX(Crime_rate) AS Max_Crime_rate , MIN(Crime_rate) AS Min_Crime_rate ]"
    },
    {
        "id": "86f539e24437827ade406e28d5dfd4a07cb26846619c55906dd19f1e75b996b0",
        "question": "Show the crime rates of counties in ascending order of number of police officers.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Police_officers , Crime_rate ] ; #2 = Sort [ #1 ] OrderBy [ Police_officers ASC ] Output [ Police_officers , Crime_rate ]"
    },
    {
        "id": "80a6290ffcc3700453d1213d706f48c1b551bab0493c0115e8b48aaded11d7e9",
        "question": "What are the crime rates of counties sorted by number of offices ascending?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Police_officers , Crime_rate ] ; #2 = Sort [ #1 ] OrderBy [ Police_officers ASC ] Output [ Police_officers , Crime_rate ]"
    },
    {
        "id": "31e63d2b08a0884f9b0a83b294ba5aec00cb6ea802326194ce1aaed05c43099d",
        "question": "What are the names of cities in ascending alphabetical order?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ city ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "4c7bde570d1d62f9e4191a5cc7aa80a6c882d9e4e7078db62a64f47b54b4f717",
        "question": "Return the names of cities, ordered alphabetically.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ city ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "c720bf9b67b28f2e2129640dd692acb6a22184855232f1921af9bc67261da25f",
        "question": "What are the percentage of hispanics in cities with the black percentage higher than 10?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ city ] Predicate [ Black > 10.0 ] Output [ Black , Hispanic ]"
    },
    {
        "id": "b73d57010fe6f011c90097bda5f57829ebaa999f62df2fdc9f862fb4a1b69078",
        "question": "Return the hispanic percentage for cities in which the black percentage is greater than 10.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ city ] Predicate [ Black > 10.0 ] Output [ Black , Hispanic ]"
    },
    {
        "id": "735e469e15e8ef7757dec0b7bce86bd8d02e4d4bfc145241d96d0bb896ac0a93",
        "question": "List the name of the county with the largest population.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Population , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Population DESC ] Output [ Population , Name ]"
    },
    {
        "id": "e986e2cb6ea374e5603214e6604a48dd22ebff94ae0a73299dba4277b47d6c63",
        "question": "What is the name of the county with the greatest population?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Population , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Population DESC ] Output [ Population , Name ]"
    },
    {
        "id": "dc1d0e26c3bed7c5b4ef76e367a927689993114d02086eeec3b49c41db278fd9",
        "question": "List the names of the city with the top 5 white percentages.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ city ] Output [ White , Name ] ; #2 = TopSort [ #1 ] Rows [ 5 ] OrderBy [ White DESC ] Output [ White , Name ]"
    },
    {
        "id": "10a0e9ea996d23f43a8379268342cd5c715e5450e6d945da922dc61868466780",
        "question": "What are the names of the five cities with the greatest proportion of white people?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ city ] Output [ White , Name ] ; #2 = TopSort [ #1 ] Rows [ 5 ] OrderBy [ White DESC ] Output [ White , Name ]"
    },
    {
        "id": "f479e70b94c20c654f94d3fc4b3edc1f4f6aa9ab100a49791d6c775589cea2a9",
        "question": "Show white percentages of cities and the crime rates of counties they are in.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Crime_rate , County_ID ] ; #2 = Scan Table [ city ] Output [ White , County_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.County_ID = #2.County_ID ] Output [ #1.Crime_rate , #2.White ]"
    },
    {
        "id": "12f545ec02b61f47af7f7deaddf76c79662a4b857389c3cdd35832737ca424d2",
        "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Crime_rate , County_ID ] ; #2 = Scan Table [ city ] Output [ White , County_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.County_ID = #2.County_ID ] Output [ #1.Crime_rate , #2.White ]"
    },
    {
        "id": "10b943ac0e9c95fb11027b764f8ad6c470920d40b04d9884ab707e1dad8437c8",
        "question": "Show the name of cities in the county that has the largest number of police officers.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Police_officers , County_ID ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Police_officers DESC ] Output [ Police_officers , County_ID ] ; #3 = Scan Table [ city ] Output [ Name , County_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.County_ID = #3.County_ID ] Output [ #3.Name ]"
    },
    {
        "id": "231763d4b9ce5fa06f730de6ccef09084c6b8eb49d39fe3b0a44e7e1bc1500c0",
        "question": "What are the names of cities that are in the county with the most police officers?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Police_officers , County_ID ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Police_officers DESC ] Output [ Police_officers , County_ID ] ; #3 = Scan Table [ city ] Output [ Name , County_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.County_ID = #3.County_ID ] Output [ #3.Name ]"
    },
    {
        "id": "c71ba76a3667f085461504a0929c5a2b787dfb377a92aabf5e59bc8c3adcb178",
        "question": "Show the number of cities in counties that have a population more than 20000.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Predicate [ Population > 20000 ] Output [ Population , County_ID ] ; #2 = Scan Table [ city ] Output [ County_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.County_ID = #2.County_ID ] Output [ #1.County_ID , #1.Population ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ecf750548a0b93cb168a35c01f25c6221cdecdbfcaa5681be70fe2df45ccc7ed",
        "question": "How many cities are in counties that have populations of over 20000?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Predicate [ Population > 20000 ] Output [ Population , County_ID ] ; #2 = Scan Table [ city ] Output [ County_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.County_ID = #2.County_ID ] Output [ #1.County_ID , #1.Population ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4f34d3d1d86871ce440fc7a2deefb2d9391649377ed265872600ae47e82c41a8",
        "question": "Show the crime rate of counties with a city having white percentage more than 90.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ city ] Predicate [ White > 90.0 ] Output [ White , County_ID ] ; #2 = Scan Table [ county_public_safety ] Output [ Crime_rate , County_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.County_ID = #2.County_ID ] Output [ #2.Crime_rate ]"
    },
    {
        "id": "da7809cd510efaf45ff45bd60a57a67902deb1d40b474237e57a9ceefca8e6ff",
        "question": "What are the crime rates of counties that contain cities that have white percentages of over 90?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ city ] Predicate [ White > 90.0 ] Output [ White , County_ID ] ; #2 = Scan Table [ county_public_safety ] Output [ Crime_rate , County_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.County_ID = #2.County_ID ] Output [ #2.Crime_rate ]"
    },
    {
        "id": "928a63498836ed039c639155387950966eb58522b4353be6974dad0041d909fa",
        "question": "Please show the police forces and the number of counties with each police force.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Police_force ] ; #2 = Aggregate [ #1 ] GroupBy [ Police_force ] Output [ countstar AS Count_Star , Police_force ]"
    },
    {
        "id": "a96c18698a098d78c010d2701c6247392bd7d709a2c99d3831a8120e99f1e1e3",
        "question": "How many counties correspond to each police force?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Police_force ] ; #2 = Aggregate [ #1 ] GroupBy [ Police_force ] Output [ countstar AS Count_Star , Police_force ]"
    },
    {
        "id": "e969c2f803f04fa1a9e6a7341ec4fe7e1b7e722bfae1041563758ca029157c1a",
        "question": "What is the location shared by most counties?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Location ]"
    },
    {
        "id": "ea08e5c2493eb24525d851236edb969bcf42b6ee1bbfb7b84db9ab2226ae7f92",
        "question": "Which location has the most corresponding counties?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Location ]"
    },
    {
        "id": "07039a7ac68085688baadd06cd36f60417feded9ab43ffb5847290d67d0f4453",
        "question": "List the names of counties that do not have any cities.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Name , County_ID ] ; #2 = Scan Table [ city ] Output [ County_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.County_ID IS NULL OR #1.County_ID = #2.County_ID ] Output [ #1.Name ]"
    },
    {
        "id": "08672b9048533a16022f02628fd8ea9ef9c9155bf613b0fe05cf632919817b79",
        "question": "What are the names of counties that do not contain any cities?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Name , County_ID ] ; #2 = Scan Table [ city ] Output [ County_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.County_ID IS NULL OR #1.County_ID = #2.County_ID ] Output [ #1.Name ]"
    },
    {
        "id": "b43cda0d757ef67212f46d1fa4002ab12619d217c65512996f4c99e0b8895c4d",
        "question": "Show the police force shared by counties with location on the east and west.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Predicate [ Location = 'East' ] Distinct [ true ] Output [ Location , Police_force ] ; #2 = Scan Table [ county_public_safety ] Predicate [ Location = 'West' ] Output [ Location , Police_force ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Police_force = #2.Police_force ] Output [ #1.Police_force ]"
    },
    {
        "id": "0dd0d84d22c9aa69dbbf957f3b7c4ac091394231ba2228f334fba43e06a3b3c9",
        "question": "Which police forces operate in both counties that are located in the East and in the West?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Predicate [ Location = 'East' ] Distinct [ true ] Output [ Location , Police_force ] ; #2 = Scan Table [ county_public_safety ] Predicate [ Location = 'West' ] Output [ Location , Police_force ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Police_force = #2.Police_force ] Output [ #1.Police_force ]"
    },
    {
        "id": "0d74c37d15ad83cbc130b62a7de0a511c3b1f462a9e6a23bf653b7c7a19b277b",
        "question": "Show the names of cities in counties that have a crime rate less than 100.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Predicate [ Crime_rate < 100.0 ] Output [ Crime_rate , County_ID ] ; #2 = Scan Table [ city ] Output [ Name , County_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.County_ID = #2.County_ID ] Output [ #2.Name ]"
    },
    {
        "id": "542a675eff9d9ecb399889c43b5f15fe30a49f2619f0e7b7310a9aab2dd514be",
        "question": "What are the names of cities that are in counties that have a crime rate below 100?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Predicate [ Crime_rate < 100.0 ] Output [ Crime_rate , County_ID ] ; #2 = Scan Table [ city ] Output [ Name , County_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.County_ID = #2.County_ID ] Output [ #2.Name ]"
    },
    {
        "id": "ded58c112cbc9684a45e0f2521fe603fc34dbec2a102b7ec90e26a4fde0ae71f",
        "question": "Show the case burden of counties in descending order of population.",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Population , Case_burden ] ; #2 = Sort [ #1 ] OrderBy [ Population DESC ] Output [ Population , Case_burden ]"
    },
    {
        "id": "41464e7a38f489fdca0c644333aa37d02273c7892e2b884de40730406c78b8b3",
        "question": "What are the case burdens of counties, ordered descending by population?",
        "parsing_tree": "county_public_safety | #1 = Scan Table [ county_public_safety ] Output [ Population , Case_burden ] ; #2 = Sort [ #1 ] OrderBy [ Population DESC ] Output [ Population , Case_burden ]"
    },
    {
        "id": "9dedce41f560971815d0884baf5c33a8b0ebd2017cf2ef150bc55d12b4de54c2",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ basePrice > 160 AND maxOccupancy > 2 ] Output [ basePrice , roomName , RoomId , maxOccupancy ]"
    },
    {
        "id": "97ba8183ce79e2dd273ac4fb5736712885082b6da5682d1105fbe6d383684d02",
        "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ basePrice > 160 AND maxOccupancy > 2 ] Output [ basePrice , roomName , RoomId , maxOccupancy ]"
    },
    {
        "id": "28d1b11f5572ac4325799f6e74913646001b039256ecf2ab9844426415de2ec3",
        "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Reservations ] Output [ Room ] ; #2 = Aggregate [ #1 ] GroupBy [ Room ] Output [ countstar AS Count_Star , Room ] ; #3 = Scan Table [ Rooms ] Output [ roomName , RoomId ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Room = #3.RoomId ] Output [ #2.Count_Star , #3.roomName ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , roomName ]"
    },
    {
        "id": "e814c919b7161d355e6b08cd7eaac7f35b852596bff48518ed9e1d4540584b6e",
        "question": "Which room has the largest number of reservations?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Reservations ] Output [ Room ] ; #2 = Aggregate [ #1 ] GroupBy [ Room ] Output [ countstar AS Count_Star , Room ] ; #3 = Scan Table [ Rooms ] Output [ roomName , RoomId ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Room = #3.RoomId ] Output [ #2.Count_Star , #3.roomName ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , roomName ]"
    },
    {
        "id": "ec49160c5e460724a8bba2957faa247eeb3cff05fd764884d85e74a2336ed668",
        "question": "How many kids stay in the rooms reserved by ROY SWEAZY?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Reservations ] Predicate [ FirstName = 'ROY' AND LastName = 'SWEAZY' ] Output [ LastName , Kids , FirstName ]"
    },
    {
        "id": "ddb3bd945aa9f0f78345031d688ea5b4969ffe4eb499b949efb804383e690e14",
        "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Reservations ] Predicate [ FirstName = 'ROY' AND LastName = 'SWEAZY' ] Output [ LastName , Kids , FirstName ]"
    },
    {
        "id": "cb2a35504862cd82c27e7f8f1ac3d034169ffd5d501a6107a7e0e830068db0c7",
        "question": "How many times does ROY SWEAZY has reserved a room.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Reservations ] Predicate [ FirstName = 'ROY' AND LastName = 'SWEAZY' ] Output [ LastName , FirstName ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ea88a9d99cd901df9f8e4a7aa12bb9c6a46966db2a2bd19f0702bdd3ae151963",
        "question": "Find the number of times ROY SWEAZY has reserved a room.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Reservations ] Predicate [ FirstName = 'ROY' AND LastName = 'SWEAZY' ] Output [ LastName , FirstName ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5bb414e364b209d9bf049bc367a67e3f559a5da3400b9ab81e40bf1699758e08",
        "question": "How many king beds are there?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ bedType = 'King' ] Output [ beds , bedType ] ; #2 = Aggregate [ #1 ] Output [ SUM(beds) AS Sum_beds ]"
    },
    {
        "id": "154eabf7cbef9c60c5436f7cf39a9d75deb9f5e5c34b05634870d6e28da0eecf",
        "question": "Find the total number of king beds available.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ bedType = 'King' ] Output [ beds , bedType ] ; #2 = Aggregate [ #1 ] Output [ SUM(beds) AS Sum_beds ]"
    },
    {
        "id": "07a791a2bbdc78f89c0b2ca6cb0220a58ad7180694c293d64583c057f8773c4a",
        "question": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ bedType = 'King' ] Output [ decor , basePrice , roomName , bedType ] ; #2 = Sort [ #1 ] OrderBy [ basePrice ASC ] Output [ decor , basePrice , roomName ]"
    },
    {
        "id": "a52376e9116b2659b3e2977603dd16acfd81eadfc272a6a5e6df8158ae5dda7c",
        "question": "What are the names and decor of rooms with a king bed? Sort them by their price",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ bedType = 'King' ] Output [ decor , basePrice , roomName , bedType ] ; #2 = Sort [ #1 ] OrderBy [ basePrice ASC ] Output [ decor , basePrice , roomName ]"
    },
    {
        "id": "2fcc4f1837c6e64dfedcb212ff0fba02f3f3c7096ddd27baee4503f92ea679e4",
        "question": "Which room has cheapest base price? List the room's name and the base price.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ basePrice , roomName ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ basePrice ASC ] Output [ basePrice , roomName ]"
    },
    {
        "id": "868ef7417b46f7b4cf4570165685105eaa0a6e59cb3d127515f17bfa06628577",
        "question": "What are the room name and base price of the room with the lowest base price?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ basePrice , roomName ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ basePrice ASC ] Output [ basePrice , roomName ]"
    },
    {
        "id": "c3de911510565be1715e443d673605a641bca5751264815e559b530ae910fb71",
        "question": "What is the decor of room Recluse and defiance?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ roomName = 'Recluse and defiance' ] Output [ decor , roomName ]"
    },
    {
        "id": "ad7cc48a8f204b66ba7f692ae10f8e512cdf687832b1d82175b9ece013725551",
        "question": "Return the decor of the room named \"Recluse and defiance\".",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ roomName = 'Recluse and defiance' ] Output [ decor , roomName ]"
    },
    {
        "id": "f3c1c0000043f8bf7018c38fc7daf4a3b887e6aa366113493a80f5cdc93657de",
        "question": "What is the average base price of different bed type? List bed type and average base price.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ basePrice , bedType ] ; #2 = Aggregate [ #1 ] GroupBy [ bedType ] Output [ AVG(basePrice) AS Avg_basePrice , bedType ]"
    },
    {
        "id": "5379306fd09b10097f8b04876386048dfa80122ceacb588b9ea1077437f9bb05",
        "question": "For each bed type, find the average base price of different bed type.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ basePrice , bedType ] ; #2 = Aggregate [ #1 ] GroupBy [ bedType ] Output [ AVG(basePrice) AS Avg_basePrice , bedType ]"
    },
    {
        "id": "f4fa6fe15245edbfc564d0b47fb8c270577b513b9fca66f545406195685a5f8e",
        "question": "What is the total number of people who could stay in the modern rooms in this inn?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ decor = 'modern' ] Output [ decor , maxOccupancy ] ; #2 = Aggregate [ #1 ] Output [ SUM(maxOccupancy) AS Sum_maxOccupancy ]"
    },
    {
        "id": "37f5a026bee655ba415a51152107bc1c6b056d24ee3041f06dec130bf88ad97b",
        "question": "How many people in total can stay in the modern rooms of this inn?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ decor = 'modern' ] Output [ decor , maxOccupancy ] ; #2 = Aggregate [ #1 ] Output [ SUM(maxOccupancy) AS Sum_maxOccupancy ]"
    },
    {
        "id": "2d5b468d9f412ad0146bacdce7fa7d3a5f6df50954cd4a6485751f0d8cfd8ea9",
        "question": "What kind of decor has the least number of reservations?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ decor , RoomId ] ; #2 = Scan Table [ Reservations ] Output [ Room ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.RoomId = #2.Room ] Output [ #1.decor ] ; #4 = Aggregate [ #3 ] GroupBy [ decor ] Output [ decor , COUNT(decor) AS Count_decor ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_decor ASC ] Output [ decor , Count_decor ]"
    },
    {
        "id": "07c6a948955812eba9c7ff9d9c971428cf56c4a40e65057fde09ba6330466f62",
        "question": "What is the least popular kind of decor?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ decor , RoomId ] ; #2 = Scan Table [ Reservations ] Output [ Room ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.RoomId = #2.Room ] Output [ #1.decor ] ; #4 = Aggregate [ #3 ] GroupBy [ decor ] Output [ decor , COUNT(decor) AS Count_decor ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_decor ASC ] Output [ decor , Count_decor ]"
    },
    {
        "id": "edcfea6c70a0c6c1d19fe2f7bd352f970fa5e476463a084657c2ea0449035b8d",
        "question": "How many rooms are there?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d5c86faaed174f2309442599407950f7f1ed1004d3fd908cc47fbf0cca1cf057",
        "question": "What is the total number of rooms available in this inn?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5f2635877af9524e7fa5c298ff9d12b83a66d4e462ac72b754222e76900d363f",
        "question": "Find the number of rooms with a king bed.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ bedType = 'King' ] Output [ bedType ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "29b22c175624adf0a54bbd216af4497153044561e3ff949c71a20b246764acf8",
        "question": "How many rooms have a king bed?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ bedType = 'King' ] Output [ bedType ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "69606c60fdb7f6e911fc41297bd0d1be384cf62eb43a7a5584b9fbde55eb2b1b",
        "question": "Find the number of rooms for each bed type.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ bedType ] ; #2 = Aggregate [ #1 ] GroupBy [ bedType ] Output [ countstar AS Count_Star , bedType ]"
    },
    {
        "id": "933e4fa3aabfc292a5eee0e456d74a553d1a13066d261c0466375b8c8d80c217",
        "question": "What are the number of rooms for each bed type?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ bedType ] ; #2 = Aggregate [ #1 ] GroupBy [ bedType ] Output [ countstar AS Count_Star , bedType ]"
    },
    {
        "id": "2642ce79f83b14fad15d44e7929ab079059c4d61738772d9c16c01b41db99b44",
        "question": "Find the name of the room with the maximum occupancy.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ roomName , maxOccupancy ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ maxOccupancy DESC ] Output [ roomName , maxOccupancy ]"
    },
    {
        "id": "870ad60c915a611329c8d954e770209667b959b716a75af20097373588abea70",
        "question": "What is the name of the room that can accommodate the most people?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ roomName , maxOccupancy ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ maxOccupancy DESC ] Output [ roomName , maxOccupancy ]"
    },
    {
        "id": "f5d62c4248b82715fbc6d99cc2153e237e185d99d055521d4ca24b31fcd7f76c",
        "question": "Find the id and name of the most expensive base price room.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ basePrice , roomName , RoomId ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ basePrice DESC ] Output [ basePrice , roomName , RoomId ]"
    },
    {
        "id": "a6f4b2c08d51a88299f6b38104bd1e1834ece165128c6596fd78ac8291b056c5",
        "question": "Which room has the highest base price?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ basePrice , roomName , RoomId ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ basePrice DESC ] Output [ basePrice , roomName , RoomId ]"
    },
    {
        "id": "3ecb8a47dca2ece69b852840af0e68b28f8abcd67ca8b4475c368eaaf0f76ee9",
        "question": "List the type of bed and name of all traditional rooms.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ decor = 'traditional' ] Output [ decor , roomName , bedType ]"
    },
    {
        "id": "1711042183bd87a4b16c6d850b96cde2be266cd53c1db1a662d759bc41d2f005",
        "question": "What are the bed type and name of all the rooms with traditional decor?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ decor = 'traditional' ] Output [ decor , roomName , bedType ]"
    },
    {
        "id": "ca07762c751a285ece5102bd0a26b29bd361f19104b0f4eaa8705a2d61dde3be",
        "question": "Find the number of rooms with king bed for each decor type.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ bedType = 'King' ] Output [ decor , bedType ] ; #2 = Aggregate [ #1 ] GroupBy [ decor ] Output [ decor , countstar AS Count_Star ]"
    },
    {
        "id": "e0c3b1652cc0a55964b52da94a17d6a8f032aaa0a6ba92f92c58dfe28fd1af61",
        "question": "How many rooms have king beds? Report the number for each decor type.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ bedType = 'King' ] Output [ decor , bedType ] ; #2 = Aggregate [ #1 ] GroupBy [ decor ] Output [ decor , countstar AS Count_Star ]"
    },
    {
        "id": "61370925a5b97e392dee7d39e3d55e41bb5bff625c8b52949ea8f8a15710a947",
        "question": "Find the average and minimum price of the rooms in different decor.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ decor , basePrice ] ; #2 = Aggregate [ #1 ] GroupBy [ decor ] Output [ decor , AVG(basePrice) AS Avg_basePrice , MIN(basePrice) AS Min_basePrice ]"
    },
    {
        "id": "b082c6d272c42eb7b376728c6dca001a020b8b19c23c97f9b3cebd0d4f6ec8f2",
        "question": "What is the average minimum and price of the rooms for each different decor.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ decor , basePrice ] ; #2 = Aggregate [ #1 ] GroupBy [ decor ] Output [ decor , AVG(basePrice) AS Avg_basePrice , MIN(basePrice) AS Min_basePrice ]"
    },
    {
        "id": "3ef21c1346e342bfef51bdf65626d1404d80c13e7226837af5f49a97933d9ff6",
        "question": "List the name of all rooms sorted by their prices.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ basePrice , roomName ] ; #2 = Sort [ #1 ] OrderBy [ basePrice ASC ] Output [ basePrice , roomName ]"
    },
    {
        "id": "8a0fc3118867be8079757fa8bb399f1ec188d282cf670f299b18d5fb7afffdeb",
        "question": "Sort all the rooms according to the price. Just report the room names.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ basePrice , roomName ] ; #2 = Sort [ #1 ] OrderBy [ basePrice ASC ] Output [ basePrice , roomName ]"
    },
    {
        "id": "d9da799a8529840d123fcc8854793dcc9f465b1c47da59de5840bf83a332ee46",
        "question": "Find the number of rooms with price higher than 120 for different decor.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ basePrice > 120 ] Output [ decor , basePrice ] ; #2 = Aggregate [ #1 ] GroupBy [ decor ] Output [ decor , countstar AS Count_Star ]"
    },
    {
        "id": "29fc50052cd1f6bf53e311efe9269c3dc8699792d4e5953ff184a6824cab472c",
        "question": "How many rooms cost more than 120, for each different decor?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ basePrice > 120 ] Output [ decor , basePrice ] ; #2 = Aggregate [ #1 ] GroupBy [ decor ] Output [ decor , countstar AS Count_Star ]"
    },
    {
        "id": "aa0d9d7c82f711e7e6c4d19bb19a705fd6169d1c2e8cd6ed0ad3ea3645815dac",
        "question": "For each bed type, find the average room price.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ basePrice , bedType ] ; #2 = Aggregate [ #1 ] GroupBy [ bedType ] Output [ AVG(basePrice) AS Avg_basePrice , bedType ]"
    },
    {
        "id": "7ab35b0b931d87f3c94f9d01942e9fa6a4c951e0d48a3ba9d877b372e88303b7",
        "question": "What is the average base price of rooms, for each bed type?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ basePrice , bedType ] ; #2 = Aggregate [ #1 ] GroupBy [ bedType ] Output [ AVG(basePrice) AS Avg_basePrice , bedType ]"
    },
    {
        "id": "f3d062f6102a8bb33e96f69a0fd53e37625235ba7398b10a412340a5de18195a",
        "question": "List the name of rooms with king or queen bed.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ bedType = 'King' OR bedType = 'Queen' ] Output [ roomName , bedType ]"
    },
    {
        "id": "d742e5e3c55e44c8e4c1d3ea26365b6e31d10fc5d5d473075668767fd2c50649",
        "question": "What are the names of rooms that have either king or queen bed?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ bedType = 'King' OR bedType = 'Queen' ] Output [ roomName , bedType ]"
    },
    {
        "id": "59ccdd196d4a450346b068ac2bfa6479e2730a374ff055a459a963c9956cde12",
        "question": "How many different types of beds are there?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Distinct [ true ] Output [ bedType ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT bedType) AS Count_Dist_bedType ]"
    },
    {
        "id": "04c3c3754f75913801c2dca44f86a2bd9cd3a8f54d8a6f3920739ccf37e7cb47",
        "question": "Find the number of distinct bed types available in this inn.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Distinct [ true ] Output [ bedType ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT bedType) AS Count_Dist_bedType ]"
    },
    {
        "id": "fb712a03689dcca0a7b2e872000db8c07c7f33c58693484b7c348bdb8731728a",
        "question": "Find the name and id of the top 3 expensive rooms.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ basePrice , roomName , RoomId ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ basePrice DESC ] Output [ basePrice , roomName , RoomId ]"
    },
    {
        "id": "1766a22584c0b2a42d232b6d3968a6f1c465d3adb93d3c9ccd564424c4413f4f",
        "question": "What are the name and id of the three highest priced rooms?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ basePrice , roomName , RoomId ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ basePrice DESC ] Output [ basePrice , roomName , RoomId ]"
    },
    {
        "id": "3a01f057432272448dd0ba40715276530e6f717ad7182c0bbd48686fa5716248",
        "question": "Find the name of rooms whose price is higher than the average price.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ basePrice ] ; #2 = Aggregate [ #1 ] Output [ AVG(basePrice) AS Avg_basePrice ] ; #3 = Scan Table [ Rooms ] Output [ basePrice , roomName ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.basePrice > #2.Avg_basePrice ] Output [ #3.roomName ]"
    },
    {
        "id": "21ce5ba878c6e2ff4e23308aabdc420f2968a8c9d302ebb2d7635b083a3367dd",
        "question": "What are the name of rooms that cost more than the average.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ basePrice ] ; #2 = Aggregate [ #1 ] Output [ AVG(basePrice) AS Avg_basePrice ] ; #3 = Scan Table [ Rooms ] Output [ basePrice , roomName ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.basePrice > #2.Avg_basePrice ] Output [ #3.roomName ]"
    },
    {
        "id": "87b41c8120f1cb30ebf9d7fa8199b823cb2add6239a83c148fe6d71df7685a73",
        "question": "Return the name and number of reservations made for each of the rooms.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Reservations ] Output [ Room ] ; #2 = Aggregate [ #1 ] GroupBy [ Room ] Output [ countstar AS Count_Star , Room ] ; #3 = Scan Table [ Rooms ] Output [ roomName , RoomId ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Room = #3.RoomId ] Output [ #2.Count_Star , #2.Room , #3.roomName ]"
    },
    {
        "id": "a368e255a013793554d6ca04c11ac4a32d64c65ff449142868597db7105bc05b",
        "question": "For each room, find its name and the number of times reservations were made for it.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Reservations ] Output [ Room ] ; #2 = Aggregate [ #1 ] GroupBy [ Room ] Output [ countstar AS Count_Star , Room ] ; #3 = Scan Table [ Rooms ] Output [ roomName , RoomId ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Room = #3.RoomId ] Output [ #2.Count_Star , #2.Room , #3.roomName ]"
    },
    {
        "id": "0c3bdbb822ce1ad59af38a9f3a3070392692af94dd035be6f7363a59b8dc74c7",
        "question": "Find the names of rooms that have been reserved for more than 60 times.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Reservations ] Output [ Room ] ; #2 = Aggregate [ #1 ] GroupBy [ Room ] Output [ countstar AS Count_Star , Room ] ; #3 = Scan Table [ Rooms ] Output [ roomName , RoomId ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Room = #3.RoomId ] Output [ #2.Count_Star , #3.roomName ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 60 ] Output [ roomName ]"
    },
    {
        "id": "4a9fa1eb49d5d3f58df6aec5cf64917dd53a66504f4893c97ce82a3e1a0638a0",
        "question": "What are the names of rooms whose reservation frequency exceeds 60 times?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Reservations ] Output [ Room ] ; #2 = Aggregate [ #1 ] GroupBy [ Room ] Output [ countstar AS Count_Star , Room ] ; #3 = Scan Table [ Rooms ] Output [ roomName , RoomId ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Room = #3.RoomId ] Output [ #2.Count_Star , #3.roomName ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 60 ] Output [ roomName ]"
    },
    {
        "id": "0719ec745a66d8fa1dbb0a38d2479d2f4f77751ca8663a5da7edd85e2d8eb382",
        "question": "Find the name of rooms whose base price is between 120 and 150.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ basePrice >= 120 AND basePrice <= 150 ] Output [ basePrice , roomName ]"
    },
    {
        "id": "d7e93221bb4d330495eb97e5561084864879cf4a8369513a6649c2b6f61db830",
        "question": "Which rooms cost between 120 and 150? Give me the room names.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Predicate [ basePrice >= 120 AND basePrice <= 150 ] Output [ basePrice , roomName ]"
    },
    {
        "id": "c90f8fe945f3629f66a8036523f8f9b8f395ecac7837f2ce5d3d3bd53cc17d3b",
        "question": "Find the name of rooms booked by some customers whose first name contains ROY.",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ roomName , RoomId ] ; #2 = Scan Table [ Reservations ] Predicate [ FirstName like '%ROY%' ] Output [ FirstName , Room ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.RoomId = #2.Room ] Output [ #1.roomName ]"
    },
    {
        "id": "da75af3d2c72ec538e4538151fdcefbd9f2951b01e7c9d32a1e8c133b42c78ae",
        "question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?",
        "parsing_tree": "inn_1 | #1 = Scan Table [ Rooms ] Output [ roomName , RoomId ] ; #2 = Scan Table [ Reservations ] Predicate [ FirstName like '%ROY%' ] Output [ FirstName , Room ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.RoomId = #2.Room ] Output [ #1.roomName ]"
    },
    {
        "id": "75efc5a1e93fdb9cac2c44d360e6856f7620d9ecab8c6004cc3077abb71ad9b6",
        "question": "what are the details of the cmi masters that have the cross reference code 'Tax'?",
        "parsing_tree": "local_govt_mdm | #1 = Scan Table [ CMI_Cross_References ] Predicate [ source_system_code = 'Tax' ] Output [ master_customer_id , source_system_code ] ; #2 = Scan Table [ Customer_Master_Index ] Output [ master_customer_id , cmi_details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.master_customer_id = #2.master_customer_id ] Output [ #2.cmi_details ]"
    },
    {
        "id": "ccb507947c1136e4b0e6b37d144a94edafbe9d5d80f7eb3a54cb0270b245e63c",
        "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "parsing_tree": "local_govt_mdm | #1 = Scan Table [ Council_Tax ] Output [ cmi_cross_ref_id ] ; #2 = Scan Table [ CMI_Cross_References ] Output [ cmi_cross_ref_id , source_system_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cmi_cross_ref_id = #2.cmi_cross_ref_id ] Output [ #2.source_system_code , #2.cmi_cross_ref_id ] ; #4 = Aggregate [ #3 ] GroupBy [ cmi_cross_ref_id ] Output [ cmi_cross_ref_id , countstar AS Count_Star , source_system_code ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 1 ] Output [ cmi_cross_ref_id , source_system_code ]"
    },
    {
        "id": "ab6387f0e7daf08fc352015d4306c53104de67425eb807001f3ffb7cb73419a1",
        "question": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
        "parsing_tree": "local_govt_mdm | #1 = Scan Table [ Benefits_Overpayments ] Output [ council_tax_id , cmi_cross_ref_id ] ; #2 = Scan Table [ CMI_Cross_References ] Output [ cmi_cross_ref_id , source_system_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cmi_cross_ref_id = #2.cmi_cross_ref_id ] Output [ #2.source_system_code , #1.council_tax_id ] ; #4 = Sort [ #3 ] OrderBy [ council_tax_id ASC ] Output [ council_tax_id , source_system_code ]"
    },
    {
        "id": "c7dd3656fbc5d164ebbb5e6b02b3b5e113a9d4ef81ca2c40e43b49c2d8c0a78f",
        "question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?",
        "parsing_tree": "local_govt_mdm | #1 = Scan Table [ Parking_Fines ] Output [ council_tax_id , cmi_cross_ref_id ] ; #2 = Scan Table [ CMI_Cross_References ] Output [ cmi_cross_ref_id , master_customer_id , source_system_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cmi_cross_ref_id = #2.cmi_cross_ref_id ] Output [ #2.source_system_code , #2.master_customer_id , #1.council_tax_id ]"
    },
    {
        "id": "4eef784fa351c167c63ef34c7a0c47152e5822165096bd70a396e614f30d54eb",
        "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "parsing_tree": "local_govt_mdm | #1 = Scan Table [ Rent_Arrears ] Output [ council_tax_id , cmi_cross_ref_id ] ; #2 = Scan Table [ CMI_Cross_References ] Output [ cmi_cross_ref_id , master_customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cmi_cross_ref_id = #2.cmi_cross_ref_id ] Output [ #2.master_customer_id , #1.council_tax_id ] ; #4 = Scan Table [ Customer_Master_Index ] Predicate [ cmi_details <> 'Schmidt , Kertzmann and Lubowitz' ] Output [ master_customer_id , cmi_details ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.master_customer_id = #4.master_customer_id ] Output [ #3.council_tax_id ]"
    },
    {
        "id": "ac775b9a705e2d30f7182a8f4b0a25ebeab326df8c2046a50c1ee1c6696483d0",
        "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?",
        "parsing_tree": "local_govt_mdm | #1 = Scan Table [ Electoral_Register ] Output [ cmi_cross_ref_id , electoral_register_id ] ; #2 = Scan Table [ CMI_Cross_References ] Predicate [ source_system_code = 'Electoral' OR source_system_code = 'Tax' ] Output [ cmi_cross_ref_id , source_system_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cmi_cross_ref_id = #2.cmi_cross_ref_id ] Output [ #1.electoral_register_id ]"
    },
    {
        "id": "2bc455778a7888ad0c380b76cf2ed7d3e6cfa5a2f69f43017ea11150b1577ba7",
        "question": "How many different source system code for the cmi cross references are there?",
        "parsing_tree": "local_govt_mdm | #1 = Scan Table [ CMI_Cross_References ] Distinct [ true ] Output [ source_system_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "28bc89aaef0f793dabe66359f099a2c5d5b45ddcf121c5e06496ae54e8b1f254",
        "question": "List all information about customer master index, and sort them by details in descending order.",
        "parsing_tree": "local_govt_mdm | #1 = Scan Table [ Customer_Master_Index ] Output [ master_customer_id , cmi_details ] ; #2 = Sort [ #1 ] OrderBy [ cmi_details DESC ] Output [ master_customer_id , cmi_details ]"
    },
    {
        "id": "2747b6a890abe6ff1bf23754b5d3887f6796c278e88240c44e0ac5e40e303697",
        "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
        "parsing_tree": "local_govt_mdm | #1 = Scan Table [ Parking_Fines ] Output [ council_tax_id , cmi_cross_ref_id ]"
    },
    {
        "id": "6eb7ec9ffa6f67dabbd50861aa36685819d3904fca892a35a9accd0c2f79bb85",
        "question": "How many council taxes are collected for renting arrears ?",
        "parsing_tree": "local_govt_mdm | #1 = Scan Table [ Rent_Arrears ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f024ae8ddaa0ef97c6fdb42f3703a56a4f4128403a63dfc92f08f3e6d9aa2988",
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "parsing_tree": "local_govt_mdm | #1 = Scan Table [ CMI_Cross_References ] Output [ cmi_cross_ref_id ] ; #2 = Scan Table [ Parking_Fines ] Output [ cmi_cross_ref_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.cmi_cross_ref_id = #1.cmi_cross_ref_id ] Output [ #1.cmi_cross_ref_id ]"
    },
    {
        "id": "4ac50f775d834f9568302512b80c766e5f4ad4a5a58630f2a9e7d5daca7cdda9",
        "question": "Which distinct source system code includes the substring 'en'?",
        "parsing_tree": "local_govt_mdm | #1 = Scan Table [ CMI_Cross_References ] Predicate [ source_system_code like '%en%' ] Distinct [ true ] Output [ source_system_code ]"
    },
    {
        "id": "a5e3b3c0d114a68d297e913cb55bbf738d0ff89235dbfe09d6333fa1b247f968",
        "question": "How many parties are there?",
        "parsing_tree": "party_host | #1 = Scan Table [ party ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cf20217a8ff01c77f071f0bbcd8bee28c4759814149b600b770dce379211ddd0",
        "question": "Count the number of parties.",
        "parsing_tree": "party_host | #1 = Scan Table [ party ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cf24db202c7e20a3640ce027ff9f406f8f228612361ddac42467e7ec3e3947d9",
        "question": "List the themes of parties in ascending order of number of hosts.",
        "parsing_tree": "party_host | #1 = Scan Table [ party ] Output [ Number_of_hosts , Party_Theme ] ; #2 = Sort [ #1 ] OrderBy [ Number_of_hosts ASC ] Output [ Number_of_hosts , Party_Theme ]"
    },
    {
        "id": "cabe2a856054f93eb2ce7fa674e936531076f7650aef14aa74215b09c8e17b80",
        "question": "What are the themes of parties ordered by the number of hosts in ascending manner?",
        "parsing_tree": "party_host | #1 = Scan Table [ party ] Output [ Number_of_hosts , Party_Theme ] ; #2 = Sort [ #1 ] OrderBy [ Number_of_hosts ASC ] Output [ Number_of_hosts , Party_Theme ]"
    },
    {
        "id": "cf49a54df7c7432cba437d9b4238eb0f60952b0c649458aa989574cd91993314",
        "question": "What are the themes and locations of parties?",
        "parsing_tree": "party_host | #1 = Scan Table [ party ] Output [ Location , Party_Theme ]"
    },
    {
        "id": "a5225e66400105f51c6a33f0cb773c8757f56cea0b210e1602576f77c8e2c912",
        "question": "Give me the theme and location of each party.",
        "parsing_tree": "party_host | #1 = Scan Table [ party ] Output [ Location , Party_Theme ]"
    },
    {
        "id": "07f57b4124520302f5d7d0581df496ef67d14ca9536416042bdf3aceff30fd06",
        "question": "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".",
        "parsing_tree": "party_host | #1 = Scan Table [ party ] Predicate [ Party_Theme = 'Spring' OR Party_Theme = 'Teqnology' ] Output [ Party_Theme , Last_year , First_year ]"
    },
    {
        "id": "48116583b768562c0da031b2409caa814e5427519153993dc58ea9598b7f335e",
        "question": "What are the first year and last year of the parties whose theme is \"Spring\" or \"Teqnology\"?",
        "parsing_tree": "party_host | #1 = Scan Table [ party ] Predicate [ Party_Theme = 'Spring' OR Party_Theme = 'Teqnology' ] Output [ Party_Theme , Last_year , First_year ]"
    },
    {
        "id": "faf5e0f53fd9a66867b46b127ed2286f6a998d6806b5479011d63aa6a1bfbaf6",
        "question": "What is the average number of hosts for parties?",
        "parsing_tree": "party_host | #1 = Scan Table [ party ] Output [ Number_of_hosts ] ; #2 = Aggregate [ #1 ] Output [ AVG(Number_of_hosts) AS Avg_Number_of_hosts ]"
    },
    {
        "id": "88b3d93445c182b386cc9d742b8330fb850d8e2a9fb91a10355536a7c4b4397f",
        "question": "Compute the average number of hosts for parties.",
        "parsing_tree": "party_host | #1 = Scan Table [ party ] Output [ Number_of_hosts ] ; #2 = Aggregate [ #1 ] Output [ AVG(Number_of_hosts) AS Avg_Number_of_hosts ]"
    },
    {
        "id": "dbebd1d73024c3535b62e619fe950ed0856dcfbb81a9d766e3633095287d0341",
        "question": "What is the location of the party with the most hosts?",
        "parsing_tree": "party_host | #1 = Scan Table [ party ] Output [ Location , Number_of_hosts ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Number_of_hosts DESC ] Output [ Location , Number_of_hosts ]"
    },
    {
        "id": "2fe913a0dd4ec059b75f3a825acf952eb1c46e3162a9e3da954cd8ecac0689e9",
        "question": "Which party had the most hosts? Give me the party location.",
        "parsing_tree": "party_host | #1 = Scan Table [ party ] Output [ Location , Number_of_hosts ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Number_of_hosts DESC ] Output [ Location , Number_of_hosts ]"
    },
    {
        "id": "1f398d02335ec5b8dedd6e766218edcbce3395acfd5b0bf838b92558f64fea33",
        "question": "Show different nationalities along with the number of hosts of each nationality.",
        "parsing_tree": "party_host | #1 = Scan Table [ host ] Output [ Nationality ] ; #2 = Aggregate [ #1 ] GroupBy [ Nationality ] Output [ Nationality , countstar AS Count_Star ]"
    },
    {
        "id": "3098a6f335116616624699510a51689eca508a6f3fa528941f71e74711521862",
        "question": "How many hosts does each nationality have? List the nationality and the count.",
        "parsing_tree": "party_host | #1 = Scan Table [ host ] Output [ Nationality ] ; #2 = Aggregate [ #1 ] GroupBy [ Nationality ] Output [ Nationality , countstar AS Count_Star ]"
    },
    {
        "id": "991e1bbfa896f12ab01ec0093e1a048546aef0a72c2ab87f8585c79f70e68d79",
        "question": "Show the most common nationality of hosts.",
        "parsing_tree": "party_host | #1 = Scan Table [ host ] Output [ Nationality ] ; #2 = Aggregate [ #1 ] GroupBy [ Nationality ] Output [ Nationality , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Nationality , Count_Star ]"
    },
    {
        "id": "d77d291937afc50d002518caee48213e2f3e05e50405cf046136a35ff32cf6fa",
        "question": "Which nationality has the most hosts?",
        "parsing_tree": "party_host | #1 = Scan Table [ host ] Output [ Nationality ] ; #2 = Aggregate [ #1 ] GroupBy [ Nationality ] Output [ Nationality , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Nationality , Count_Star ]"
    },
    {
        "id": "d1b7de54ea0f4b1edb826bcb8b8f262734cfbdafdf5c21d3afb453abb5bd29eb",
        "question": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
        "parsing_tree": "party_host | #1 = Scan Table [ host ] Predicate [ Age > 45 ] Distinct [ true ] Output [ Nationality , Age ] ; #2 = Scan Table [ host ] Predicate [ Age < 35 ] Output [ Nationality , Age ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Nationality = #2.Nationality ] Output [ #1.Nationality ]"
    },
    {
        "id": "32434bec8cadb3ef0307324cdf1b1d9ac2b3dca4e004c4bf85ad89b61d797045",
        "question": "Which nations have both hosts of age above 45 and hosts of age below 35?",
        "parsing_tree": "party_host | #1 = Scan Table [ host ] Predicate [ Age > 45 ] Distinct [ true ] Output [ Nationality , Age ] ; #2 = Scan Table [ host ] Predicate [ Age < 35 ] Output [ Nationality , Age ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Nationality = #2.Nationality ] Output [ #1.Nationality ]"
    },
    {
        "id": "74d700de79c431a74e52974387a9bae86084f1479980fefe2634750ce3f20c29",
        "question": "Show the themes of parties and the names of the party hosts.",
        "parsing_tree": "party_host | #1 = Scan Table [ party_host ] Output [ Host_ID , Party_ID ] ; #2 = Scan Table [ host ] Output [ Name , Host_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Host_ID = #2.Host_ID ] Output [ #2.Name , #1.Party_ID ] ; #4 = Scan Table [ party ] Output [ Party_Theme , Party_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Party_ID = #4.Party_ID ] Output [ #3.Name , #4.Party_Theme ]"
    },
    {
        "id": "cd46d3d8d6b6cf95dc03ce92c7d160802536506e7ff4e80bad3b1457416a0f59",
        "question": "For each party, return its theme and the name of its host.",
        "parsing_tree": "party_host | #1 = Scan Table [ party_host ] Output [ Host_ID , Party_ID ] ; #2 = Scan Table [ host ] Output [ Name , Host_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Host_ID = #2.Host_ID ] Output [ #2.Name , #1.Party_ID ] ; #4 = Scan Table [ party ] Output [ Party_Theme , Party_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Party_ID = #4.Party_ID ] Output [ #3.Name , #4.Party_Theme ]"
    },
    {
        "id": "93b94b029da5e8114fc75fdbe227cda328463b85c965d6ba3f3b4208a385c541",
        "question": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.",
        "parsing_tree": "party_host | #1 = Scan Table [ party_host ] Output [ Host_ID , Party_ID ] ; #2 = Scan Table [ party ] Output [ Location , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party_ID = #2.Party_ID ] Output [ #1.Host_ID , #2.Location ] ; #4 = Scan Table [ host ] Output [ Age , Name , Host_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Host_ID = #4.Host_ID ] Output [ #4.Age , #4.Name , #3.Location ] ; #6 = Sort [ #5 ] OrderBy [ Age ASC ] Output [ Location , Name , Age ]"
    },
    {
        "id": "61d9d4c50da3fc962f66a6f978641462bfa151c48a794dae263b3781a1785cb8",
        "question": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.",
        "parsing_tree": "party_host | #1 = Scan Table [ party_host ] Output [ Host_ID , Party_ID ] ; #2 = Scan Table [ party ] Output [ Location , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party_ID = #2.Party_ID ] Output [ #1.Host_ID , #2.Location ] ; #4 = Scan Table [ host ] Output [ Age , Name , Host_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Host_ID = #4.Host_ID ] Output [ #4.Age , #4.Name , #3.Location ] ; #6 = Sort [ #5 ] OrderBy [ Age ASC ] Output [ Location , Name , Age ]"
    },
    {
        "id": "ec15e87f4fe5609b7acfae9abe5c7ce9d1f5b0cb6f93d5f0306960887f57af03",
        "question": "Show the locations of parties with hosts older than 50.",
        "parsing_tree": "party_host | #1 = Scan Table [ host ] Predicate [ Age > 50 ] Output [ Age , Host_ID ] ; #2 = Scan Table [ party_host ] Output [ Host_ID , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Host_ID = #2.Host_ID ] Output [ #2.Party_ID ] ; #4 = Scan Table [ party ] Output [ Location , Party_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Party_ID = #4.Party_ID ] Output [ #4.Location ]"
    },
    {
        "id": "a03b3ad4d33a777e8c59906e4600e068e14d839b194590262d1bf4275c6b4305",
        "question": "Which parties have hosts of age above 50? Give me the party locations.",
        "parsing_tree": "party_host | #1 = Scan Table [ host ] Predicate [ Age > 50 ] Output [ Age , Host_ID ] ; #2 = Scan Table [ party_host ] Output [ Host_ID , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Host_ID = #2.Host_ID ] Output [ #2.Party_ID ] ; #4 = Scan Table [ party ] Output [ Location , Party_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Party_ID = #4.Party_ID ] Output [ #4.Location ]"
    },
    {
        "id": "24437b97b2a29956cd8469e6b09e681eb12acbd320ff11c706ab6895c804cff2",
        "question": "Show the host names for parties with number of hosts greater than 20.",
        "parsing_tree": "party_host | #1 = Scan Table [ party ] Predicate [ Number_of_hosts > 20 ] Output [ Number_of_hosts , Party_ID ] ; #2 = Scan Table [ party_host ] Output [ Host_ID , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party_ID = #2.Party_ID ] Output [ #2.Host_ID ] ; #4 = Scan Table [ host ] Output [ Name , Host_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Host_ID = #4.Host_ID ] Output [ #4.Name ]"
    },
    {
        "id": "bc5a92bea07dea8486e8002a3e2fdef753eafd6bfbd4b317602ecae32e0e3030",
        "question": "Which parties have more than 20 hosts? Give me the host names for these parties.",
        "parsing_tree": "party_host | #1 = Scan Table [ party ] Predicate [ Number_of_hosts > 20 ] Output [ Number_of_hosts , Party_ID ] ; #2 = Scan Table [ party_host ] Output [ Host_ID , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party_ID = #2.Party_ID ] Output [ #2.Host_ID ] ; #4 = Scan Table [ host ] Output [ Name , Host_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Host_ID = #4.Host_ID ] Output [ #4.Name ]"
    },
    {
        "id": "26bc0986fda73fae53c0934438ea7280b544c0025ffaada07bf5d9ddd12426b5",
        "question": "Show the name and the nationality of the oldest host.",
        "parsing_tree": "party_host | #1 = Scan Table [ host ] Output [ Nationality , Name , Age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Age DESC ] Output [ Nationality , Name , Age ]"
    },
    {
        "id": "e4aa3ecb1c2a80557cab6e8e690e018e3837200885a00a9b7b8bac829d68aa7a",
        "question": "What are the name and the nationality of the host of the highest age?",
        "parsing_tree": "party_host | #1 = Scan Table [ host ] Output [ Nationality , Name , Age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Age DESC ] Output [ Nationality , Name , Age ]"
    },
    {
        "id": "b75f0e95240ebe7918a5bb7cd38027f75d2b41185ad2d87772e802d124aa0053",
        "question": "List the names of hosts who did not serve as a host of any party in our record.",
        "parsing_tree": "party_host | #1 = Scan Table [ host ] Output [ Name , Host_ID ] ; #2 = Scan Table [ party_host ] Output [ Host_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Host_ID = #1.Host_ID ] Output [ #1.Name ]"
    },
    {
        "id": "89380b1e3e3b6154869f800c3d2feb35cd83d36cc368286750444f997d1228a4",
        "question": "What are the names of hosts who did not host any party in our record?",
        "parsing_tree": "party_host | #1 = Scan Table [ host ] Output [ Name , Host_ID ] ; #2 = Scan Table [ party_host ] Output [ Host_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Host_ID = #1.Host_ID ] Output [ #1.Name ]"
    },
    {
        "id": "8fc59125f8e9d096d3a4892fcf951018a8b71edf9fdb468234705a8dc47f0b01",
        "question": "How many regions do we have?",
        "parsing_tree": "storm_record | #1 = Scan Table [ region ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "01b331fb3ef37259db1a12af84851c5eb7a7c5c69b67233b9e974f18aa56e77a",
        "question": "Count the number of regions.",
        "parsing_tree": "storm_record | #1 = Scan Table [ region ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ef068bc33cd9fc370b3a1f387771a93010accb672c727cc41deb2b89f55ca463",
        "question": "Show all region code and region name sorted by the codes.",
        "parsing_tree": "storm_record | #1 = Scan Table [ region ] Output [ Region_code , Region_name ] ; #2 = Sort [ #1 ] OrderBy [ Region_code ASC ] Output [ Region_code , Region_name ]"
    },
    {
        "id": "d83bd00f0c8521e785c5b734e658ed57bfbbfd82661437f8ae003d7ad3ddf75f",
        "question": "What are the codes and names for all regions, sorted by codes?",
        "parsing_tree": "storm_record | #1 = Scan Table [ region ] Output [ Region_code , Region_name ] ; #2 = Sort [ #1 ] OrderBy [ Region_code ASC ] Output [ Region_code , Region_name ]"
    },
    {
        "id": "7a714bd7ab70a8b01d9577f344664570a966343f3ed60db8b6cb69b91bb45ac4",
        "question": "List all region names in alphabetical order.",
        "parsing_tree": "storm_record | #1 = Scan Table [ region ] Output [ Region_name ] ; #2 = Sort [ #1 ] OrderBy [ Region_name ASC ] Output [ Region_name ]"
    },
    {
        "id": "0dd7ed6fcf16e56588e890a9bd92525698019e4a4af4aa3a8f6decc15dbe2e1d",
        "question": "What are the names of the regions in alphabetical order?",
        "parsing_tree": "storm_record | #1 = Scan Table [ region ] Output [ Region_name ] ; #2 = Sort [ #1 ] OrderBy [ Region_name ASC ] Output [ Region_name ]"
    },
    {
        "id": "9fbb70f197976a83bec52c002878ac7cf91e31cf5d65889b368dd159d060b76a",
        "question": "Show names for all regions except for Denmark.",
        "parsing_tree": "storm_record | #1 = Scan Table [ region ] Predicate [ Region_name <> 'Denmark' ] Output [ Region_name ]"
    },
    {
        "id": "8beb9cf2469b019f992a6d547fa2ffae9116c79d49da7c5534b18110745eabdf",
        "question": "Return the names of all regions other than Denmark.",
        "parsing_tree": "storm_record | #1 = Scan Table [ region ] Predicate [ Region_name <> 'Denmark' ] Output [ Region_name ]"
    },
    {
        "id": "7a7d2bebc4323d2e7e774a5f9ccab3aa2b749feac345bde3b650a97fa313389b",
        "question": "How many storms had death records?",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Predicate [ Number_Deaths > 0 ] Output [ Number_Deaths ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2e7cc435f5e8deade6bf15e4f852eb73909ea64d4322df3d444264fc8e7e491f",
        "question": "Count the number of storms in which at least 1 person died.",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Predicate [ Number_Deaths > 0 ] Output [ Number_Deaths ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e01fd69d01fc1b877392e9429e453dfde517faf5364af0a79faa3e09eea68248",
        "question": "List name, dates active, and number of deaths for all storms with at least 1 death.",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Predicate [ Number_Deaths >= 1 ] Output [ Dates_active , Name , Number_Deaths ]"
    },
    {
        "id": "2cdf1e3cfc6944837739a08188a2ab7176cab500d2f90c870227abdd74f3bf9e",
        "question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Predicate [ Number_Deaths >= 1 ] Output [ Dates_active , Name , Number_Deaths ]"
    },
    {
        "id": "9b6f352f7ab2bfe1c9da48de714565627ab85ec02d9124d91a0b85348034a238",
        "question": "Show the average and maximum damage for all storms with max speed higher than 1000.",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Predicate [ Max_speed > 1000 ] Output [ Damage_millions_USD , Max_speed ] ; #2 = Aggregate [ #1 ] Output [ AVG(Damage_millions_USD) AS Avg_Damage_millions_USD , MAX(Damage_millions_USD) AS Max_Damage_millions_USD ]"
    },
    {
        "id": "96bc76434a5f07d9ecd09a9233b1d6a4e7095975c18ad4f9b42159561ec3a300",
        "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Predicate [ Max_speed > 1000 ] Output [ Damage_millions_USD , Max_speed ] ; #2 = Aggregate [ #1 ] Output [ AVG(Damage_millions_USD) AS Avg_Damage_millions_USD , MAX(Damage_millions_USD) AS Max_Damage_millions_USD ]"
    },
    {
        "id": "be8c68a642683a37c22adc8dd1151a2c66652f4f120328be5e8163e16ae4c9c4",
        "question": "What is the total number of deaths and damage for all storms with a max speed greater than the average?",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Output [ Max_speed ] ; #2 = Aggregate [ #1 ] Output [ AVG(Max_speed) AS Avg_Max_speed ] ; #3 = Scan Table [ storm ] Output [ Damage_millions_USD , Number_Deaths , Max_speed ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Max_speed > #2.Avg_Max_speed ] Output [ #3.Damage_millions_USD , #3.Number_Deaths ] ; #5 = Aggregate [ #4 ] Output [ SUM(Damage_millions_USD) AS Sum_Damage_millions_USD , SUM(Number_Deaths) AS Sum_Number_Deaths ]"
    },
    {
        "id": "42819c774ab004f1347ca1236ac6e9c8c31b2276de63f34eeb1d58a7eb7a428b",
        "question": "Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average.",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Output [ Max_speed ] ; #2 = Aggregate [ #1 ] Output [ AVG(Max_speed) AS Avg_Max_speed ] ; #3 = Scan Table [ storm ] Output [ Damage_millions_USD , Number_Deaths , Max_speed ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Max_speed > #2.Avg_Max_speed ] Output [ #3.Damage_millions_USD , #3.Number_Deaths ] ; #5 = Aggregate [ #4 ] Output [ SUM(Damage_millions_USD) AS Sum_Damage_millions_USD , SUM(Number_Deaths) AS Sum_Number_Deaths ]"
    },
    {
        "id": "f2b4ef6d2efebaf5066a64176f723eaab27c2ae436d14babfa1e57219e321a2e",
        "question": "List name and damage for all storms in a descending order of max speed.",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Output [ Damage_millions_USD , Name , Max_speed ] ; #2 = Sort [ #1 ] OrderBy [ Max_speed DESC ] Output [ Damage_millions_USD , Name , Max_speed ]"
    },
    {
        "id": "114dc98aeee6a7c25b04871f4cb9d4b3897098e19701b21fc0834d85b9614c11",
        "question": "What are the names and damage in millions for storms, ordered by their max speeds descending?",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Output [ Damage_millions_USD , Name , Max_speed ] ; #2 = Sort [ #1 ] OrderBy [ Max_speed DESC ] Output [ Damage_millions_USD , Name , Max_speed ]"
    },
    {
        "id": "59bbc6883cd777da32d8480f33dbc4a192997f1bce2a098ea8bba03712f51773",
        "question": "How many regions are affected?",
        "parsing_tree": "storm_record | #1 = Scan Table [ affected_region ] Output [ Region_id ] ; #2 = Aggregate [ #1 ] GroupBy [ Region_id ] Output [ Region_id ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "708f1b498517057ae79c626229135380cf7c3b42fb8e77738d5404c7754d50ce",
        "question": "Count the number of different affected regions.",
        "parsing_tree": "storm_record | #1 = Scan Table [ affected_region ] Output [ Region_id ] ; #2 = Aggregate [ #1 ] GroupBy [ Region_id ] Output [ Region_id ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "fccdbc1911bc0edadf64184df887dc85f82b493e6d863f7d2f8ba9c9d990efc7",
        "question": "Show the name for regions not affected.",
        "parsing_tree": "storm_record | #1 = Scan Table [ region ] Output [ Region_id , Region_name ] ; #2 = Scan Table [ affected_region ] Output [ Region_id ] ; #3 = Aggregate [ #2 ] GroupBy [ Region_id ] Output [ Region_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Region_id = #1.Region_id ] Output [ #1.Region_name ]"
    },
    {
        "id": "4904ab2b1b36b6298afccb458f4ff3aac36c8ad10b01aa927f02bee07428c5f3",
        "question": "What are the names of regions that were not affected?",
        "parsing_tree": "storm_record | #1 = Scan Table [ region ] Output [ Region_id , Region_name ] ; #2 = Scan Table [ affected_region ] Output [ Region_id ] ; #3 = Aggregate [ #2 ] GroupBy [ Region_id ] Output [ Region_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Region_id = #1.Region_id ] Output [ #1.Region_name ]"
    },
    {
        "id": "eaa8cdbb886c01c9393774f57a790d446ac722d6d224d280c3b64036e0c5e837",
        "question": "Show the name for regions and the number of storms for each region.",
        "parsing_tree": "storm_record | #1 = Scan Table [ affected_region ] Output [ Region_id ] ; #2 = Aggregate [ #1 ] GroupBy [ Region_id ] Output [ countstar AS Count_Star , Region_id ] ; #3 = Scan Table [ region ] Output [ Region_id , Region_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Region_id = #3.Region_id ] Output [ #3.Region_name , #2.Count_Star ]"
    },
    {
        "id": "9f46ae05d8f9eb6a5c1ca7c7ec85662b17cacd055d34038c5b5951b68fdcdc4c",
        "question": "How many storms occured in each region?",
        "parsing_tree": "storm_record | #1 = Scan Table [ affected_region ] Output [ Region_id ] ; #2 = Aggregate [ #1 ] GroupBy [ Region_id ] Output [ countstar AS Count_Star , Region_id ] ; #3 = Scan Table [ region ] Output [ Region_id , Region_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Region_id = #3.Region_id ] Output [ #3.Region_name , #2.Count_Star ]"
    },
    {
        "id": "d74eddda1b4a3e2a9bdbf00c3a8ae38a231fcf60424d65c8fb89e76e265eda9a",
        "question": "List the name for storms and the number of affected regions for each storm.",
        "parsing_tree": "storm_record | #1 = Scan Table [ affected_region ] Output [ Storm_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Storm_ID ] Output [ countstar AS Count_Star , Storm_ID ] ; #3 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Storm_ID = #3.Storm_ID ] Output [ #3.Name , #2.Count_Star ]"
    },
    {
        "id": "60c5412f95a5b6ff0ba679f2e526b5b12441d1596ec00233de27882e4c885a16",
        "question": "How many regions were affected by each storm?",
        "parsing_tree": "storm_record | #1 = Scan Table [ affected_region ] Output [ Storm_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Storm_ID ] Output [ countstar AS Count_Star , Storm_ID ] ; #3 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Storm_ID = #3.Storm_ID ] Output [ #3.Name , #2.Count_Star ]"
    },
    {
        "id": "c799027cf4b4ba7ac82054805eb570f5394c524be9d21ff845813ee7fa4d8b1d",
        "question": "What is the storm name and max speed which affected the greatest number of regions?",
        "parsing_tree": "storm_record | #1 = Scan Table [ affected_region ] Output [ Storm_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Storm_ID ] Output [ countstar AS Count_Star , Storm_ID ] ; #3 = Scan Table [ storm ] Output [ Storm_ID , Name , Max_speed ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Storm_ID = #3.Storm_ID ] Output [ #3.Name , #3.Max_speed , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name , Max_speed ]"
    },
    {
        "id": "d3ced8653a8b07eeeb6a2e6f8633488d3f2931544cefbb8dfd7ead91409c9cfb",
        "question": "Return the name and max speed of the storm that affected the most regions.",
        "parsing_tree": "storm_record | #1 = Scan Table [ affected_region ] Output [ Storm_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Storm_ID ] Output [ countstar AS Count_Star , Storm_ID ] ; #3 = Scan Table [ storm ] Output [ Storm_ID , Name , Max_speed ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Storm_ID = #3.Storm_ID ] Output [ #3.Name , #3.Max_speed , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name , Max_speed ]"
    },
    {
        "id": "d341ebf82ffc9aeeaeea4e2d148ab9c7ddefed364bc35350027cb79e8fec3b6e",
        "question": "Show the name of storms which don't have affected region in record.",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #2 = Scan Table [ affected_region ] Output [ Storm_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Storm_ID = #1.Storm_ID ] Output [ #1.Name ]"
    },
    {
        "id": "804b610045512cbeafa6cc8d1a8631128b5a0ee402637cceb6b163be49be120b",
        "question": "What are the names of storms that did not affect any regions?",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #2 = Scan Table [ affected_region ] Output [ Storm_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Storm_ID = #1.Storm_ID ] Output [ #1.Name ]"
    },
    {
        "id": "3feb36dfecd7f368f15785b3a6a092390d2afeaeb4aea0639c6487871df7daf1",
        "question": "Show storm name with at least two regions and 10 cities affected.",
        "parsing_tree": "storm_record | #1 = Scan Table [ affected_region ] Output [ Storm_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Storm_ID ] Output [ countstar AS Count_Star , Storm_ID ] ; #3 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Storm_ID = #3.Storm_ID ] Output [ #3.Name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Distinct [ true ] Output [ Name ] ; #6 = Scan Table [ affected_region ] Output [ Storm_ID , Number_city_affected ] ; #7 = Aggregate [ #6 ] GroupBy [ Storm_ID ] Output [ Storm_ID , SUM(Number_city_affected) AS Sum_Number_city_affected ] ; #8 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.Storm_ID = #8.Storm_ID ] Output [ #8.Name , #7.Sum_Number_city_affected ] ; #10 = Filter [ #9 ] Predicate [ Sum_Number_city_affected >= 10.0 ] Output [ Name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.Name = #10.Name ] Output [ #5.Name ]"
    },
    {
        "id": "088167c0cb3b5d3380408af79c4f1797fd18ee5769ab37d5bed200734156230d",
        "question": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?",
        "parsing_tree": "storm_record | #1 = Scan Table [ affected_region ] Output [ Storm_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Storm_ID ] Output [ countstar AS Count_Star , Storm_ID ] ; #3 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Storm_ID = #3.Storm_ID ] Output [ #3.Name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Distinct [ true ] Output [ Name ] ; #6 = Scan Table [ affected_region ] Output [ Storm_ID , Number_city_affected ] ; #7 = Aggregate [ #6 ] GroupBy [ Storm_ID ] Output [ Storm_ID , SUM(Number_city_affected) AS Sum_Number_city_affected ] ; #8 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.Storm_ID = #8.Storm_ID ] Output [ #8.Name , #7.Sum_Number_city_affected ] ; #10 = Filter [ #9 ] Predicate [ Sum_Number_city_affected >= 10.0 ] Output [ Name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.Name = #10.Name ] Output [ #5.Name ]"
    },
    {
        "id": "976161cbbf85bbb71109cc3e1b0a2f8db360c4e33050a43947424915769cc89f",
        "question": "Show all storm names except for those with at least two affected regions.",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ affected_region ] Output [ Storm_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Storm_ID ] Output [ countstar AS Count_Star , Storm_ID ] ; #4 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Storm_ID = #4.Storm_ID ] Output [ #4.Name , #3.Count_Star ] ; #6 = Filter [ #5 ] Predicate [ Count_Star >= 2 ] Output [ Name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.Name = #6.Name ] Output [ #1.Name ]"
    },
    {
        "id": "7a0fa86c348f800743b38748838975c3925137100600f273e38aa182aca48e36",
        "question": "What are the names of storms that did not affect two or more regions?",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ affected_region ] Output [ Storm_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Storm_ID ] Output [ countstar AS Count_Star , Storm_ID ] ; #4 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Storm_ID = #4.Storm_ID ] Output [ #4.Name , #3.Count_Star ] ; #6 = Filter [ #5 ] Predicate [ Count_Star >= 2 ] Output [ Name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.Name = #6.Name ] Output [ #1.Name ]"
    },
    {
        "id": "c032282160995ec6a649fa1a16009e5e2f5ab6feb0b4e7b6d7777c557234029a",
        "question": "What are the region names affected by the storm with a number of deaths of least 10?",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Predicate [ Number_Deaths >= 10 ] Output [ Storm_ID , Number_Deaths ] ; #2 = Scan Table [ affected_region ] Output [ Storm_ID , Region_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Storm_ID = #2.Storm_ID ] Output [ #2.Region_id ] ; #4 = Scan Table [ region ] Output [ Region_id , Region_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Region_id = #4.Region_id ] Output [ #4.Region_name ]"
    },
    {
        "id": "1b3052a0d65ddc7fee971c7ca68d9e25391b68f8459bc53591c4d2918d1e9df6",
        "question": "Return the names of the regions affected by storms that had a death count of at least 10.",
        "parsing_tree": "storm_record | #1 = Scan Table [ storm ] Predicate [ Number_Deaths >= 10 ] Output [ Storm_ID , Number_Deaths ] ; #2 = Scan Table [ affected_region ] Output [ Storm_ID , Region_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Storm_ID = #2.Storm_ID ] Output [ #2.Region_id ] ; #4 = Scan Table [ region ] Output [ Region_id , Region_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Region_id = #4.Region_id ] Output [ #4.Region_name ]"
    },
    {
        "id": "f7b636e053991327ccd8fcd4aab21b0e8a1e4a7fd04e254c4447f320692d3bed",
        "question": "Show all storm names affecting region \"Denmark\".",
        "parsing_tree": "storm_record | #1 = Scan Table [ region ] Predicate [ Region_name = 'Denmark' ] Output [ Region_id , Region_name ] ; #2 = Scan Table [ affected_region ] Output [ Storm_ID , Region_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Region_id = #2.Region_id ] Output [ #2.Storm_ID ] ; #4 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Storm_ID = #4.Storm_ID ] Output [ #4.Name ]"
    },
    {
        "id": "6cd33128c44c2bd1969dc76fbb1f9479a1ddf685c677f48dc7a8619ecbeb0ac7",
        "question": "What are the names of the storms that affected Denmark?",
        "parsing_tree": "storm_record | #1 = Scan Table [ region ] Predicate [ Region_name = 'Denmark' ] Output [ Region_id , Region_name ] ; #2 = Scan Table [ affected_region ] Output [ Storm_ID , Region_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Region_id = #2.Region_id ] Output [ #2.Storm_ID ] ; #4 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Storm_ID = #4.Storm_ID ] Output [ #4.Name ]"
    },
    {
        "id": "ca8065027b7ba478a9424032a01f0c26eee02ffb2c100f3c611c5f5a978fbd4b",
        "question": "Show the region name with at least two storms.",
        "parsing_tree": "storm_record | #1 = Scan Table [ affected_region ] Output [ Region_id ] ; #2 = Aggregate [ #1 ] GroupBy [ Region_id ] Output [ countstar AS Count_Star , Region_id ] ; #3 = Scan Table [ region ] Output [ Region_id , Region_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Region_id = #3.Region_id ] Output [ #3.Region_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Region_name ]"
    },
    {
        "id": "e3be1efec217a09f82ef67b5d873f1b83323b64f0a030f11393347357e7a527d",
        "question": "What are the names of regions with two or more storms?",
        "parsing_tree": "storm_record | #1 = Scan Table [ affected_region ] Output [ Region_id ] ; #2 = Aggregate [ #1 ] GroupBy [ Region_id ] Output [ countstar AS Count_Star , Region_id ] ; #3 = Scan Table [ region ] Output [ Region_id , Region_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Region_id = #3.Region_id ] Output [ #3.Region_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Region_name ]"
    },
    {
        "id": "e4bf6e83592954550ef2156a6256e48eb3bada5f76fd822c4e0698e263bd6c1f",
        "question": "Find the names of the regions which were affected by the storm that killed the greatest number of people.",
        "parsing_tree": "storm_record | #1 = Scan Table [ affected_region ] Output [ Storm_ID , Region_id ] ; #2 = Scan Table [ storm ] Output [ Storm_ID , Number_Deaths ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Storm_ID = #2.Storm_ID ] Output [ #1.Region_id , #2.Number_Deaths ] ; #4 = Scan Table [ region ] Output [ Region_id , Region_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Region_id = #4.Region_id ] Output [ #3.Number_Deaths , #4.Region_name ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Number_Deaths DESC ] Output [ Region_name , Number_Deaths ]"
    },
    {
        "id": "a5976654db71b9ebbdc9dd4b4d7f0fe88ee4ff479c803e705671e5fc33eaa103",
        "question": "What are the names of regions that were affected by the storm in which the most people died?",
        "parsing_tree": "storm_record | #1 = Scan Table [ affected_region ] Output [ Storm_ID , Region_id ] ; #2 = Scan Table [ storm ] Output [ Storm_ID , Number_Deaths ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Storm_ID = #2.Storm_ID ] Output [ #1.Region_id , #2.Number_Deaths ] ; #4 = Scan Table [ region ] Output [ Region_id , Region_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Region_id = #4.Region_id ] Output [ #3.Number_Deaths , #4.Region_name ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Number_Deaths DESC ] Output [ Region_name , Number_Deaths ]"
    },
    {
        "id": "4564ecfb1b92050d144324a5857b057b7cb32579744bf7bf562e3f08fdbe9a44",
        "question": "Find the name of the storm that affected both Afghanistan and Albania regions.",
        "parsing_tree": "storm_record | #1 = Scan Table [ region ] Predicate [ Region_name = 'Afghanistan' ] Output [ Region_id , Region_name ] ; #2 = Scan Table [ affected_region ] Output [ Storm_ID , Region_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Region_id = #2.Region_id ] Output [ #2.Storm_ID ] ; #4 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Storm_ID = #4.Storm_ID ] Distinct [ true ] Output [ #4.Name ] ; #6 = Scan Table [ region ] Predicate [ Region_name = 'Albania' ] Output [ Region_id , Region_name ] ; #7 = Scan Table [ affected_region ] Output [ Storm_ID , Region_id ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.Region_id = #7.Region_id ] Output [ #7.Storm_ID ] ; #9 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.Storm_ID = #9.Storm_ID ] Output [ #9.Name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.Name = #10.Name ] Output [ #5.Name ]"
    },
    {
        "id": "8b120d73bd98ec6c8ecede122102bbc42bf43e30b15e407930b985e2d10d5f1a",
        "question": "What are the names of the storms that affected both the regions of Afghanistan and Albania?",
        "parsing_tree": "storm_record | #1 = Scan Table [ region ] Predicate [ Region_name = 'Afghanistan' ] Output [ Region_id , Region_name ] ; #2 = Scan Table [ affected_region ] Output [ Storm_ID , Region_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Region_id = #2.Region_id ] Output [ #2.Storm_ID ] ; #4 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Storm_ID = #4.Storm_ID ] Distinct [ true ] Output [ #4.Name ] ; #6 = Scan Table [ region ] Predicate [ Region_name = 'Albania' ] Output [ Region_id , Region_name ] ; #7 = Scan Table [ affected_region ] Output [ Storm_ID , Region_id ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.Region_id = #7.Region_id ] Output [ #7.Storm_ID ] ; #9 = Scan Table [ storm ] Output [ Storm_ID , Name ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.Storm_ID = #9.Storm_ID ] Output [ #9.Name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.Name = #10.Name ] Output [ #5.Name ]"
    },
    {
        "id": "54d95ea91c31a2384b3ba52fed688971c53eefccb2fd3b61b11b0a36bcb661eb",
        "question": "How many counties are there in total?",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a8b3d5296d325c3840803dfef372cb3507236a5d6043797a37baaa0e92ed1416",
        "question": "Count the total number of counties.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7517cbda23d9bf277b0c7fc8a6f43114c0d5d902d4e80144ff2b30419e342f4d",
        "question": "Show the county name and population of all counties.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ Population , County_name ]"
    },
    {
        "id": "81942d7af0b6bf864edb5cd99a05746e1da946cc3f530885da2d2be0d9203c70",
        "question": "What are the name and population of each county?",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ Population , County_name ]"
    },
    {
        "id": "81398c7adbc1ac1ad3c8f9b3a10cb1f30731535a9e240e3a9641b6855f91952f",
        "question": "Show the average population of all counties.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ Population ] ; #2 = Aggregate [ #1 ] Output [ AVG(Population) AS Avg_Population ]"
    },
    {
        "id": "de7ace72c14aebe96b73b1d92794e3b0c998c857dbd6e21e17b45b3ecf9844a1",
        "question": "On average how large is the population of the counties?",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ Population ] ; #2 = Aggregate [ #1 ] Output [ AVG(Population) AS Avg_Population ]"
    },
    {
        "id": "47bd432659ed7a70333d1a5c0e05614359cd2bb2b1ec76bf8f698d980b2e329d",
        "question": "Return the maximum and minimum population among all counties.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ Population ] ; #2 = Aggregate [ #1 ] Output [ MAX(Population) AS Max_Population , MIN(Population) AS Min_Population ]"
    },
    {
        "id": "3c0136836f42a8ca8e440b56515517daa7edbe0ebce0bde7b1eccef2815267d2",
        "question": "What are the maximum and minimum population of the counties?",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ Population ] ; #2 = Aggregate [ #1 ] Output [ MAX(Population) AS Max_Population , MIN(Population) AS Min_Population ]"
    },
    {
        "id": "50b482d96c962d6bd4fed828fa08532de8fc712d406630ba4f02bb407fc1c8af",
        "question": "Show all the distinct districts for elections.",
        "parsing_tree": "election | #1 = Scan Table [ election ] Distinct [ true ] Output [ District ]"
    },
    {
        "id": "757e668f4daaca9c536644cab6c3f5db1db7accf4b73af63ad869b486bc84743",
        "question": "What are the distinct districts for elections?",
        "parsing_tree": "election | #1 = Scan Table [ election ] Distinct [ true ] Output [ District ]"
    },
    {
        "id": "7cb98b897b1f4f993cbf1ff3ae1a4aebd7ff5d31c0e62047a8f2b0c27b0d954b",
        "question": "Show the zip code of the county with name \"Howard\".",
        "parsing_tree": "election | #1 = Scan Table [ county ] Predicate [ County_name = 'Howard' ] Output [ Zip_code , County_name ]"
    },
    {
        "id": "f63f1878aae56a15d31d00f38ad2c14a0d607d3279e95526df8909adcf7670d9",
        "question": "What is the zip code the county named \"Howard\" is located in?",
        "parsing_tree": "election | #1 = Scan Table [ county ] Predicate [ County_name = 'Howard' ] Output [ Zip_code , County_name ]"
    },
    {
        "id": "70dc096f7d9b1bb5ffd75cbae70d81fe31729873ea8667f8447a60c48d388bdf",
        "question": "Show the delegate from district 1 in election.",
        "parsing_tree": "election | #1 = Scan Table [ election ] Predicate [ District = 1 ] Output [ District , Delegate ]"
    },
    {
        "id": "7c5cc508fc3f9973d36162c2f1c85b6dcd94177c9e629ead81bc3dc8b06295b4",
        "question": "Who is the delegate of district 1 in the elections?",
        "parsing_tree": "election | #1 = Scan Table [ election ] Predicate [ District = 1 ] Output [ District , Delegate ]"
    },
    {
        "id": "5c45e56449f32767b4d46627bac7ba8985c47d5cb6197a26057dcebf1db6e0b1",
        "question": "Show the delegate and committee information of elections.",
        "parsing_tree": "election | #1 = Scan Table [ election ] Output [ Delegate , Committee ]"
    },
    {
        "id": "4bab22ed7dcc806ea188d19346e6f911527211668dfc1822cedb4c7647c352d3",
        "question": "What are the delegate and committee information for each election record?",
        "parsing_tree": "election | #1 = Scan Table [ election ] Output [ Delegate , Committee ]"
    },
    {
        "id": "0051b99649fd07f01bd108e87c4a2938eddc757f026118f77e77f4114264db5e",
        "question": "How many distinct governors are there?",
        "parsing_tree": "election | #1 = Scan Table [ party ] Distinct [ true ] Output [ Governor ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Governor) AS Count_Dist_Governor ]"
    },
    {
        "id": "696c1eba22aaa62240fc67e83bc1747a4a2b2a134a8aebc01da813b8f3988d05",
        "question": "Count the number of distinct governors.",
        "parsing_tree": "election | #1 = Scan Table [ party ] Distinct [ true ] Output [ Governor ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Governor) AS Count_Dist_Governor ]"
    },
    {
        "id": "773b83ae328de772b725c985aeda879e0dcfd9138ba2a942b03ca229d7537337",
        "question": "Show the lieutenant governor and comptroller from the democratic party.",
        "parsing_tree": "election | #1 = Scan Table [ party ] Predicate [ Party = 'Democratic' ] Output [ Party , Comptroller , Lieutenant_Governor ]"
    },
    {
        "id": "1ec1e25b7b53c6bed1810e0eb4c4575e7a95d0e35a02ddf35ccd578312acc07e",
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "parsing_tree": "election | #1 = Scan Table [ party ] Predicate [ Party = 'Democratic' ] Output [ Party , Comptroller , Lieutenant_Governor ]"
    },
    {
        "id": "36c638040b7ea73b2b9f8c3a5c4d350b7c66cc49f8f9a621309599c75da9c1ee",
        "question": "In which distinct years was the governor \"Eliot Spitzer\"?",
        "parsing_tree": "election | #1 = Scan Table [ party ] Predicate [ Governor = 'Eliot Spitzer' ] Distinct [ true ] Output [ Year ]"
    },
    {
        "id": "a5c93e96a90ed81f7aaedd4e1fb17069d702f755832d61e98ac88cdeaa6e05c6",
        "question": "Find the distinct years when the governor was named \"Eliot Spitzer\".",
        "parsing_tree": "election | #1 = Scan Table [ party ] Predicate [ Governor = 'Eliot Spitzer' ] Distinct [ true ] Output [ Year ]"
    },
    {
        "id": "786449d88c9914f68883bcf690cbbff96f12028f44c880341d44cc10cdf1096d",
        "question": "Show all the information about election.",
        "parsing_tree": "election | #1 = Scan Table [ election ] Output [ Counties_Represented , First_Elected , District , Election_ID , Delegate , Committee , Party ]"
    },
    {
        "id": "123940aa5313868a24976eb2f728ea2ac539a575e2001483ed60f79a00335d62",
        "question": "Return all the information for each election record.",
        "parsing_tree": "election | #1 = Scan Table [ election ] Output [ Counties_Represented , First_Elected , District , Election_ID , Delegate , Committee , Party ]"
    },
    {
        "id": "f7af91f439b946df154b124368f907a6ed45f04f2b6206dd1f3deaa2c5f69de2",
        "question": "Show the delegates and the names of county they belong to.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ County_Id , County_name ] ; #2 = Scan Table [ election ] Output [ District , Delegate ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.County_Id = #2.District ] Output [ #2.Delegate , #1.County_name ]"
    },
    {
        "id": "59b9707dcec428e684420936e03bd7c149d280f6eb786371798514f148c218f2",
        "question": "What are the delegate and name of the county they belong to, for each county?",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ County_Id , County_name ] ; #2 = Scan Table [ election ] Output [ District , Delegate ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.County_Id = #2.District ] Output [ #2.Delegate , #1.County_name ]"
    },
    {
        "id": "c7f086945628ecac21a1b4119aee97a6fabbce73ba9e111cbe7f1501c6f04017",
        "question": "Which delegates are from counties with population smaller than 100000?",
        "parsing_tree": "election | #1 = Scan Table [ county ] Predicate [ Population < 100000.0 ] Output [ Population , County_Id ] ; #2 = Scan Table [ election ] Output [ District , Delegate ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.County_Id = #2.District ] Output [ #2.Delegate ]"
    },
    {
        "id": "a7d58cdd521e97acfe4b391fe62255e533c005072957d191def76ea08d99a3f9",
        "question": "Find the delegates who are from counties with population below 100000.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Predicate [ Population < 100000.0 ] Output [ Population , County_Id ] ; #2 = Scan Table [ election ] Output [ District , Delegate ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.County_Id = #2.District ] Output [ #2.Delegate ]"
    },
    {
        "id": "547ff534d1e34936707862bbc5f2f53c83e237f2ec04d1e1f465cab7ce5a2e2c",
        "question": "How many distinct delegates are from counties with population larger than 50000?",
        "parsing_tree": "election | #1 = Scan Table [ county ] Predicate [ Population > 50000.0 ] Output [ Population , County_Id ] ; #2 = Scan Table [ election ] Output [ District , Delegate ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.County_Id = #2.District ] Distinct [ true ] Output [ #2.Delegate ] ; #4 = Aggregate [ #3 ] Output [ COUNT(Delegate) AS Count_Delegate ]"
    },
    {
        "id": "dce4ecdc9955e90f41bf78092d792dc8ec0481edfee50c22e021e08188a986f8",
        "question": "Count the number of distinct delegates who are from counties with population above 50000.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Predicate [ Population > 50000.0 ] Output [ Population , County_Id ] ; #2 = Scan Table [ election ] Output [ District , Delegate ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.County_Id = #2.District ] Distinct [ true ] Output [ #2.Delegate ] ; #4 = Aggregate [ #3 ] Output [ COUNT(Delegate) AS Count_Delegate ]"
    },
    {
        "id": "644a51982d5800a9477197a403622d05a4284ef99d46dd5c7de6a358beb61cb3",
        "question": "What are the names of the county that the delegates on \"Appropriations\" committee belong to?",
        "parsing_tree": "election | #1 = Scan Table [ election ] Predicate [ Committee = 'Appropriations' ] Output [ District , Committee ] ; #2 = Scan Table [ county ] Output [ County_Id , County_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.District = #2.County_Id ] Output [ #2.County_name ]"
    },
    {
        "id": "71d813c3e968f97de156dfb0f6bca253b23882d5dc14f017d573c0fc825ca8c7",
        "question": "Which county do the delegates on \"Appropriations\" committee belong to? Give me the county names.",
        "parsing_tree": "election | #1 = Scan Table [ election ] Predicate [ Committee = 'Appropriations' ] Output [ District , Committee ] ; #2 = Scan Table [ county ] Output [ County_Id , County_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.District = #2.County_Id ] Output [ #2.County_name ]"
    },
    {
        "id": "0528cda91bf16383fe300645eb84ba945997cb7554456481922be72bbe3d7a0f",
        "question": "Show the delegates and the names of the party they belong to.",
        "parsing_tree": "election | #1 = Scan Table [ party ] Output [ Party , Party_ID ] ; #2 = Scan Table [ election ] Output [ Party , Delegate ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party_ID = #2.Party ] Output [ #2.Delegate , #1.Party ]"
    },
    {
        "id": "9c1f44c24c88cf1c4829e1ae0ff496bc8568df6e1d94de63c02b04768c3d2484",
        "question": "For each delegate, find the names of the party they are part of.",
        "parsing_tree": "election | #1 = Scan Table [ party ] Output [ Party , Party_ID ] ; #2 = Scan Table [ election ] Output [ Party , Delegate ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party_ID = #2.Party ] Output [ #2.Delegate , #1.Party ]"
    },
    {
        "id": "d69750e0cec1b2fe39b027fb774aa503f0c7dc32605562b40acd3537d3bfc69b",
        "question": "Who were the governors of the parties associated with delegates from district 1?",
        "parsing_tree": "election | #1 = Scan Table [ election ] Predicate [ District = 1 ] Output [ District , Party ] ; #2 = Scan Table [ party ] Output [ Governor , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party = #2.Party_ID ] Output [ #2.Governor ]"
    },
    {
        "id": "0b80332d76d9d8f4ca368480f7da1d575e34e77a60da4658e92314bda4f21d45",
        "question": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?",
        "parsing_tree": "election | #1 = Scan Table [ election ] Predicate [ District = 1 ] Output [ District , Party ] ; #2 = Scan Table [ party ] Output [ Governor , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party = #2.Party_ID ] Output [ #2.Governor ]"
    },
    {
        "id": "b69ee34510d9200bb776deb74e191add521afe2d54146bb307a8f4bcd038821c",
        "question": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
        "parsing_tree": "election | #1 = Scan Table [ election ] Predicate [ District = 1 OR District = 2 ] Output [ District , Party ] ; #2 = Scan Table [ party ] Output [ Comptroller , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party = #2.Party_ID ] Output [ #2.Comptroller ]"
    },
    {
        "id": "06f9e6a5f859c1dfd8496a92679dc2968cda26c761aaf9ec24cce26a498941bc",
        "question": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?",
        "parsing_tree": "election | #1 = Scan Table [ election ] Predicate [ District = 1 OR District = 2 ] Output [ District , Party ] ; #2 = Scan Table [ party ] Output [ Comptroller , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party = #2.Party_ID ] Output [ #2.Comptroller ]"
    },
    {
        "id": "6fec472dfee04059ea0d13be73a6a799ce2185ab0e60fec73f7d1f166171acb5",
        "question": "Return all the committees that have delegates from Democratic party.",
        "parsing_tree": "election | #1 = Scan Table [ party ] Predicate [ Party = 'Democratic' ] Output [ Party , Party_ID ] ; #2 = Scan Table [ election ] Output [ Party , Committee ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party_ID = #2.Party ] Output [ #2.Committee ]"
    },
    {
        "id": "66f4d7313fe608c990f40ef0f819667d1eadbb6c153066269f73489ac1970a0d",
        "question": "Which committees have delegates from the Democratic party?",
        "parsing_tree": "election | #1 = Scan Table [ party ] Predicate [ Party = 'Democratic' ] Output [ Party , Party_ID ] ; #2 = Scan Table [ election ] Output [ Party , Committee ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party_ID = #2.Party ] Output [ #2.Committee ]"
    },
    {
        "id": "5e796f266f36d1f1fc411b07e0a6257d4aaa2990b370e0fd3d5f57bc47672148",
        "question": "Show the name of each county along with the corresponding number of delegates from that county.",
        "parsing_tree": "election | #1 = Scan Table [ election ] Output [ District ] ; #2 = Aggregate [ #1 ] GroupBy [ District ] Output [ countstar AS Count_Star , District ] ; #3 = Scan Table [ county ] Output [ County_Id , County_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.District = #3.County_Id ] Output [ #3.County_name , #2.Count_Star ]"
    },
    {
        "id": "0b3b7b8d061810930c44ae3b54863e6f27bc04cb6a3fec35c8020e99acda9353",
        "question": "For each county, find the name of the county and the number of delegates from that county.",
        "parsing_tree": "election | #1 = Scan Table [ election ] Output [ District ] ; #2 = Aggregate [ #1 ] GroupBy [ District ] Output [ countstar AS Count_Star , District ] ; #3 = Scan Table [ county ] Output [ County_Id , County_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.District = #3.County_Id ] Output [ #3.County_name , #2.Count_Star ]"
    },
    {
        "id": "4beacb998ff05c10e5cbb5d97786f6ba0ecc0312f5b19a4659f253a6a2a8a434",
        "question": "Show the name of each party and the corresponding number of delegates from that party.",
        "parsing_tree": "election | #1 = Scan Table [ election ] Output [ Party ] ; #2 = Aggregate [ #1 ] GroupBy [ Party ] Output [ countstar AS Count_Star , Party ] ; #3 = Scan Table [ party ] Output [ Party , Party_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Party = #3.Party_ID ] Output [ #3.Party , #2.Count_Star ]"
    },
    {
        "id": "43a7178ae9686a56710c51e755be66480ec15031532752ce42f99490e6975900",
        "question": "For each party, return the name of the party and the number of delegates from that party.",
        "parsing_tree": "election | #1 = Scan Table [ election ] Output [ Party ] ; #2 = Aggregate [ #1 ] GroupBy [ Party ] Output [ countstar AS Count_Star , Party ] ; #3 = Scan Table [ party ] Output [ Party , Party_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Party = #3.Party_ID ] Output [ #3.Party , #2.Count_Star ]"
    },
    {
        "id": "1bc16742736a819e3525d904f921f1537458874eab837adb8efb875a7a227ce3",
        "question": "Return the names of all counties sorted by population in ascending order.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ Population , County_name ] ; #2 = Sort [ #1 ] OrderBy [ Population ASC ] Output [ Population , County_name ]"
    },
    {
        "id": "a88cf8bf93a90aa41b35c8403ce02f71526e04ff7b838d0adfd80141098afb2f",
        "question": "Sort the names of all counties in ascending order of population.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ Population , County_name ] ; #2 = Sort [ #1 ] OrderBy [ Population ASC ] Output [ Population , County_name ]"
    },
    {
        "id": "bde74e78b100d125efd4442270a1c14d64ae99824820731f644bdaa930d9fba7",
        "question": "Return the names of all counties sorted by county name in descending alphabetical order.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ County_name ] ; #2 = Sort [ #1 ] OrderBy [ County_name DESC ] Output [ County_name ]"
    },
    {
        "id": "ecc93ce8ce6ccbca5d31f1a520c3c5ca9b07ae7c77bab20cb4e300d12518506b",
        "question": "Sort the names of all counties in descending alphabetical order.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ County_name ] ; #2 = Sort [ #1 ] OrderBy [ County_name DESC ] Output [ County_name ]"
    },
    {
        "id": "b239b74992d5341953105025e914855e4665e8286c2904d8b3ed2a0dfe1fc77f",
        "question": "Show the name of the county with the biggest population.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ Population , County_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Population DESC ] Output [ Population , County_name ]"
    },
    {
        "id": "401a74d869a43a1ec1b6ae8a02067107f8f1522d089f48fcd619e77d0ba5c611",
        "question": "Which county has the largest population? Give me the name of the county.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ Population , County_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Population DESC ] Output [ Population , County_name ]"
    },
    {
        "id": "fffde75ec91e126abe9c289b7c3fd73f0e84550cb1b419600e049cde0f28626c",
        "question": "Show the 3 counties with the smallest population.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ Population , County_name ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ Population ASC ] Output [ Population , County_name ]"
    },
    {
        "id": "307b2ea21aaf2d38d7864d116470c0f761c7f4deb9aeea5edf24f764266868d7",
        "question": "What are the 3 counties that have the smallest population? Give me the county names.",
        "parsing_tree": "election | #1 = Scan Table [ county ] Output [ Population , County_name ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ Population ASC ] Output [ Population , County_name ]"
    },
    {
        "id": "0e448f66731d0f09f40d391bee8ae8915c23fed3d699a6adcd059c04ccde9bc8",
        "question": "Show the names of counties that have at least two delegates.",
        "parsing_tree": "election | #1 = Scan Table [ election ] Output [ District ] ; #2 = Aggregate [ #1 ] GroupBy [ District ] Output [ countstar AS Count_Star , District ] ; #3 = Scan Table [ county ] Output [ County_Id , County_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.District = #3.County_Id ] Output [ #3.County_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ County_name ]"
    },
    {
        "id": "c62cee855058d6b1d57de91183e571bb290431c1f9e1af7c62d304b27c964245",
        "question": "Which counties have two or more delegates? Give me the county names.",
        "parsing_tree": "election | #1 = Scan Table [ election ] Output [ District ] ; #2 = Aggregate [ #1 ] GroupBy [ District ] Output [ countstar AS Count_Star , District ] ; #3 = Scan Table [ county ] Output [ County_Id , County_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.District = #3.County_Id ] Output [ #3.County_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ County_name ]"
    },
    {
        "id": "416c1b59f69f0f51c1407753c1c82b16d93939bd16d036827602385b48a3f253",
        "question": "Show the name of the party that has at least two records.",
        "parsing_tree": "election | #1 = Scan Table [ party ] Output [ Party ] ; #2 = Aggregate [ #1 ] GroupBy [ Party ] Output [ countstar AS Count_Star , Party ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Party ]"
    },
    {
        "id": "45307aa3ceff2769b1f77f37e39d4b563101bd0a3ba3c0079ebd77bb15d1d518",
        "question": "Which party has two or more records?",
        "parsing_tree": "election | #1 = Scan Table [ party ] Output [ Party ] ; #2 = Aggregate [ #1 ] GroupBy [ Party ] Output [ countstar AS Count_Star , Party ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Party ]"
    },
    {
        "id": "cddf72d099466a236b987c523c6687555d2230fad08a1ecbcd20a31db4233d7b",
        "question": "Show the name of the party that has the most delegates.",
        "parsing_tree": "election | #1 = Scan Table [ election ] Output [ Party ] ; #2 = Aggregate [ #1 ] GroupBy [ Party ] Output [ countstar AS Count_Star , Party ] ; #3 = Scan Table [ party ] Output [ Party , Party_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Party = #3.Party_ID ] Output [ #3.Party , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Party ]"
    },
    {
        "id": "805515c9c6fdae57896fbe9bcc6ee2a26f1bc7092fddebe9463c75c7ff8a4d52",
        "question": "Which party has the largest number of delegates?",
        "parsing_tree": "election | #1 = Scan Table [ election ] Output [ Party ] ; #2 = Aggregate [ #1 ] GroupBy [ Party ] Output [ countstar AS Count_Star , Party ] ; #3 = Scan Table [ party ] Output [ Party , Party_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Party = #3.Party_ID ] Output [ #3.Party , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Party ]"
    },
    {
        "id": "64aa6a7895d04338f18f5cbeae596f4fbf975547be191d4571851e1b74285df0",
        "question": "Show the people that have been governor the most times.",
        "parsing_tree": "election | #1 = Scan Table [ party ] Output [ Governor ] ; #2 = Aggregate [ #1 ] GroupBy [ Governor ] Output [ countstar AS Count_Star , Governor ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Governor ]"
    },
    {
        "id": "3bee8ccc4b65aebad7f2dcde8fe2d3e4b16fc436c31a80f536fdeb9af7706621",
        "question": "Which people severed as governor most frequently?",
        "parsing_tree": "election | #1 = Scan Table [ party ] Output [ Governor ] ; #2 = Aggregate [ #1 ] GroupBy [ Governor ] Output [ countstar AS Count_Star , Governor ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Governor ]"
    },
    {
        "id": "4f0878a6d28b3b7c650fc5081363cf3f997bc7848ff6d1eeef604dddd5e315a1",
        "question": "Show the people that have been comptroller the most times and the corresponding number of times.",
        "parsing_tree": "election | #1 = Scan Table [ party ] Output [ Comptroller ] ; #2 = Aggregate [ #1 ] GroupBy [ Comptroller ] Output [ countstar AS Count_Star , Comptroller ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Comptroller ]"
    },
    {
        "id": "26c311bd96344e68140974988c7033cf92721a80cf8e0db9a79cbbe2aa2b1e16",
        "question": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.",
        "parsing_tree": "election | #1 = Scan Table [ party ] Output [ Comptroller ] ; #2 = Aggregate [ #1 ] GroupBy [ Comptroller ] Output [ countstar AS Count_Star , Comptroller ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Comptroller ]"
    },
    {
        "id": "ba2c7e674ed607d2c4d420cfb7ef32093dcea456b74cb0dd729e240413e6b2ca",
        "question": "What are the names of parties that do not have delegates in election?",
        "parsing_tree": "election | #1 = Scan Table [ party ] Output [ Party , Party_ID ] ; #2 = Scan Table [ election ] Output [ Party ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Party IS NULL OR #1.Party_ID = #2.Party ] Output [ #1.Party ]"
    },
    {
        "id": "d0afcc7d339c24efc79445470c2a59b1acd9b26f8a19f3da752b210422c539fa",
        "question": "Which parties did not have any delegates in elections?",
        "parsing_tree": "election | #1 = Scan Table [ party ] Output [ Party , Party_ID ] ; #2 = Scan Table [ election ] Output [ Party ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Party IS NULL OR #1.Party_ID = #2.Party ] Output [ #1.Party ]"
    },
    {
        "id": "e18f7b0cdc8b51b390b3a0db1be1208377d8948b56420589ebaab12893b47b45",
        "question": "What are the names of parties that have both delegates on \"Appropriations\" committee and",
        "parsing_tree": "election | #1 = Scan Table [ election ] Predicate [ Committee = 'Appropriations' ] Output [ Party , Committee ] ; #2 = Scan Table [ party ] Output [ Party , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party = #2.Party_ID ] Distinct [ true ] Output [ #2.Party ] ; #4 = Scan Table [ election ] Predicate [ Committee = 'Economic Matters' ] Output [ Party , Committee ] ; #5 = Scan Table [ party ] Output [ Party , Party_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Party = #5.Party_ID ] Output [ #5.Party ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Party = #6.Party ] Output [ #3.Party ]"
    },
    {
        "id": "5cff53c89bbba1c1824fa48fabf944eccf397db4915fb9691545f6d6568bd7ac",
        "question": "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?",
        "parsing_tree": "election | #1 = Scan Table [ election ] Predicate [ Committee = 'Appropriations' ] Output [ Party , Committee ] ; #2 = Scan Table [ party ] Output [ Party , Party_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party = #2.Party_ID ] Distinct [ true ] Output [ #2.Party ] ; #4 = Scan Table [ election ] Predicate [ Committee = 'Economic Matters' ] Output [ Party , Committee ] ; #5 = Scan Table [ party ] Output [ Party , Party_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Party = #5.Party_ID ] Output [ #5.Party ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Party = #6.Party ] Output [ #3.Party ]"
    },
    {
        "id": "cae8a70cefe17943cf92b8f0be6a5c42b4e54cc60dfb025222eede444c24d437",
        "question": "Which committees have delegates from both democratic party and liberal party?",
        "parsing_tree": "election | #1 = Scan Table [ party ] Predicate [ Party = 'Democratic' ] Output [ Party , Party_ID ] ; #2 = Scan Table [ election ] Output [ Party , Committee ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party_ID = #2.Party ] Distinct [ true ] Output [ #2.Committee ] ; #4 = Scan Table [ party ] Predicate [ Party = 'Liberal' ] Output [ Party , Party_ID ] ; #5 = Scan Table [ election ] Output [ Party , Committee ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Party_ID = #5.Party ] Output [ #5.Committee ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Committee = #6.Committee ] Output [ #3.Committee ]"
    },
    {
        "id": "2af3c72980a6530f56a5c0b3c64598299971af6cab058a83ede041ecbee672cf",
        "question": "Find the committees that have delegates both from from the democratic party and the liberal party.",
        "parsing_tree": "election | #1 = Scan Table [ party ] Predicate [ Party = 'Democratic' ] Output [ Party , Party_ID ] ; #2 = Scan Table [ election ] Output [ Party , Committee ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Party_ID = #2.Party ] Distinct [ true ] Output [ #2.Committee ] ; #4 = Scan Table [ party ] Predicate [ Party = 'Liberal' ] Output [ Party , Party_ID ] ; #5 = Scan Table [ election ] Output [ Party , Committee ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Party_ID = #5.Party ] Output [ #5.Committee ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Committee = #6.Committee ] Output [ #3.Committee ]"
    },
    {
        "id": "b7f2fece2ccfbdeb3ca7ccf5226c939e5ae95d770ad78e61f0c7c75532b2be77",
        "question": "How many journalists are there?",
        "parsing_tree": "news_report | #1 = Scan Table [ journalist ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "3b83053f7fc5b8efc60064838cc42e2b3f6a44ed24a22c11a2d9f05fc3d15c4d",
        "question": "List the names of journalists in ascending order of years working.",
        "parsing_tree": "news_report | #1 = Scan Table [ journalist ] Output [ Years_working , Name ] ; #2 = Sort [ #1 ] OrderBy [ Years_working ASC ] Output [ Years_working , Name ]"
    },
    {
        "id": "13bcd6c60c933388c3857ece017536aa6ebd8ebda4eca5753c58884ab015a6e9",
        "question": "What are the nationalities and ages of journalists?",
        "parsing_tree": "news_report | #1 = Scan Table [ journalist ] Output [ Nationality , Age ]"
    },
    {
        "id": "68c35222a6daa1b894887e0923dcd51fa98b59bfb131b788e4f027f764bb0e28",
        "question": "Show the names of journalists from \"England\" or \"Wales\".",
        "parsing_tree": "news_report | #1 = Scan Table [ journalist ] Predicate [ Nationality = 'England' OR Nationality = 'Wales' ] Output [ Nationality , Name ]"
    },
    {
        "id": "222b064b05dd01f845748d0672e0c5e254a6bd90d76e80bd8559a58bc053aca9",
        "question": "What is the average number of years spent working as a journalist?",
        "parsing_tree": "news_report | #1 = Scan Table [ journalist ] Output [ Years_working ] ; #2 = Aggregate [ #1 ] Output [ AVG(Years_working) AS Avg_Years_working ]"
    },
    {
        "id": "121cab2c6ee81d8606fa8c45dc87775e9e7858e266b1cdfcfde7f2bc5c0eb5f4",
        "question": "What is the nationality of the journalist with the largest number of years working?",
        "parsing_tree": "news_report | #1 = Scan Table [ journalist ] Output [ Nationality , Years_working ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Years_working DESC ] Output [ Nationality , Years_working ]"
    },
    {
        "id": "89387591bb4d8b4f462e910129e08ffa8312e2e812de08291dbaea7e4ca65363",
        "question": "Show the different nationalities and the number of journalists of each nationality.",
        "parsing_tree": "news_report | #1 = Scan Table [ journalist ] Output [ Nationality ] ; #2 = Aggregate [ #1 ] GroupBy [ Nationality ] Output [ Nationality , countstar AS Count_Star ]"
    },
    {
        "id": "a524447d548cc7426be037b098b767d4c0161d2a5d34beb1c49cd03be99658b8",
        "question": "Show the most common nationality for journalists.",
        "parsing_tree": "news_report | #1 = Scan Table [ journalist ] Output [ Nationality ] ; #2 = Aggregate [ #1 ] GroupBy [ Nationality ] Output [ Nationality , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Nationality , Count_Star ]"
    },
    {
        "id": "5163d8bca4b26c99c473d4ba259f1efc980d6bd2144732801093f4c563a47a91",
        "question": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
        "parsing_tree": "news_report | #1 = Scan Table [ journalist ] Predicate [ Years_working > 10 ] Distinct [ true ] Output [ Nationality , Years_working ] ; #2 = Scan Table [ journalist ] Predicate [ Years_working < 3 ] Output [ Nationality , Years_working ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Nationality = #2.Nationality ] Output [ #1.Nationality ]"
    },
    {
        "id": "927964590739d983ffef15a818667a03a0eea6c31c962814970b31aa0e22fba1",
        "question": "Show the dates, places, and names of events in descending order of the attendance.",
        "parsing_tree": "news_report | #1 = Scan Table [ event ] Output [ Venue , Event_Attendance , Name , Date ] ; #2 = Sort [ #1 ] OrderBy [ Event_Attendance DESC ] Output [ Venue , Event_Attendance , Name , Date ]"
    },
    {
        "id": "7d32e9d209dd668d71fe4196fef4a4c5b567b461e0bbae37364059019572768f",
        "question": "Show the names of journalists and the dates of the events they reported.",
        "parsing_tree": "news_report | #1 = Scan Table [ event ] Output [ Event_ID , Date ] ; #2 = Scan Table [ news_report ] Output [ Event_ID , journalist_ID ] ; #3 = Scan Table [ journalist ] Output [ journalist_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.journalist_ID = #3.journalist_ID ] Output [ #3.Name , #2.Event_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.Event_ID = #4.Event_ID ] Output [ #4.Name , #1.Date ]"
    },
    {
        "id": "70a95fb3da7f744dfa9554a767756f16b7560a73a7751c2597dfa8334510111a",
        "question": "Show the names of journalists and the number of events they reported.",
        "parsing_tree": "news_report | #1 = Scan Table [ news_report ] Output [ journalist_ID ] ; #2 = Scan Table [ journalist ] Output [ journalist_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.journalist_ID = #2.journalist_ID ] Output [ #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "98c76949e6f71ab92f3728550461d30c1e6215e1479af2fc2370733c3cd44ff7",
        "question": "Show the names of journalists that have reported more than one event.",
        "parsing_tree": "news_report | #1 = Scan Table [ news_report ] Output [ journalist_ID ] ; #2 = Scan Table [ journalist ] Output [ journalist_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.journalist_ID = #2.journalist_ID ] Output [ #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name ]"
    },
    {
        "id": "c8c02b15a9fe5dab4ca0aaebe3f03b033508806e469b8faf801372af857fe9d4",
        "question": "List the names of journalists who have not reported any event.",
        "parsing_tree": "news_report | #1 = Scan Table [ journalist ] Output [ journalist_ID , Name ] ; #2 = Scan Table [ news_report ] Output [ journalist_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ journalist_ID ] Output [ journalist_ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.journalist_ID = #1.journalist_ID ] Output [ #1.Name ]"
    },
    {
        "id": "3fce6efb960bdbef113a5ed04dc6856a9a34795baf0ab5bccc32a456366e2960",
        "question": "what are the average and maximum attendances of all events?",
        "parsing_tree": "news_report | #1 = Scan Table [ event ] Output [ Event_Attendance ] ; #2 = Aggregate [ #1 ] Output [ AVG(Event_Attendance) AS Avg_Event_Attendance , MAX(Event_Attendance) AS Max_Event_Attendance ]"
    },
    {
        "id": "bb413256313eb03ad4cb3d90291b64b4d085ff660475e7fe2e312d3c779f4eca",
        "question": "Find the average age and experience working length of journalists working on different role type.",
        "parsing_tree": "news_report | #1 = Scan Table [ news_report ] Output [ Work_Type , journalist_ID ] ; #2 = Scan Table [ journalist ] Output [ Years_working , journalist_ID , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.journalist_ID = #2.journalist_ID ] Output [ #1.Work_Type , #2.Age , #2.Years_working ] ; #4 = Aggregate [ #3 ] GroupBy [ Work_Type ] Output [ Work_Type , AVG(Age) AS Avg_Age , AVG(Years_working) AS Avg_Years_working ]"
    },
    {
        "id": "459edf7392a34e0e3b0133129206e4c9e97d5c26e311b59c2d32338e2cb37bf2",
        "question": "List the event venues and names that have the top 2 most number of people attended.",
        "parsing_tree": "news_report | #1 = Scan Table [ event ] Output [ Venue , Event_Attendance , Name ] ; #2 = TopSort [ #1 ] Rows [ 2 ] OrderBy [ Event_Attendance DESC ] Output [ Venue , Event_Attendance , Name ]"
    },
    {
        "id": "9340e990e4245ecf55b478757377bc926912dd72e1a223c3879db41774df0c2d",
        "question": "Show me all the restaurants.",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Restaurant ] Output [ ResName ]"
    },
    {
        "id": "4d2b7e04e97cc441e254d28b67e1506a8f88ea4c06e41ad46332a3d593a9a68c",
        "question": "What is the address of the restaurant Subway?",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Restaurant ] Predicate [ ResName = 'Subway' ] Output [ ResName , Address ]"
    },
    {
        "id": "7df0fde1a32ae66c98752c028aa369cb6d70680e98ebe1ab154e1af85916e6b4",
        "question": "What is the rating of the restaurant Subway?",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Restaurant ] Predicate [ ResName = 'Subway' ] Output [ Rating , ResName ]"
    },
    {
        "id": "e3449d1e9e2a4d9655232bf82703ddefcdc21ed3b99b4f32c1f3c6354e9fa13b",
        "question": "List all restaurant types.",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Restaurant_Type ] Output [ ResTypeName ]"
    },
    {
        "id": "bdc0d0aa2d2b06e16f868ef71eff2da648dab6705a13ab59ffd166ca6de4fb52",
        "question": "What is the description of the restaurant type Sandwich?",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Restaurant_Type ] Predicate [ ResTypeName = 'Sandwich' ] Output [ ResTypeDescription , ResTypeName ]"
    },
    {
        "id": "5a73a9e1c74be985a97a2fd1c2e68ec83f598e4dd2758714b93bac5c8048e56d",
        "question": "Which restaurants have highest rating? List the restaurant name and its rating.",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Restaurant ] Output [ Rating , ResName ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Rating DESC ] Output [ Rating , ResName ]"
    },
    {
        "id": "818b8fc7ab4a5e4a7b5e6cf582c48e747b35c2bb36f14b6a61b6b0fbc7d088ae",
        "question": "What is the age of student Linda Smith?",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Linda' AND LName = 'Smith' ] Output [ Fname , LName , Age ]"
    },
    {
        "id": "08c3fd9049e9207c97eb5dc010de415c500f3d9ee6d89943825f5e9cd21cc690",
        "question": "What is the gender of the student Linda Smith?",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Linda' AND LName = 'Smith' ] Output [ Fname , LName , Sex ]"
    },
    {
        "id": "6585fadc9a88641e344fb99687c138f4e817219765605317ba93484bfc2b3c98",
        "question": "List all students' first names and last names who majored in 600.",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Student ] Predicate [ Major = 600 ] Output [ LName , Fname , Major ]"
    },
    {
        "id": "874e1295f40a9836074cdda2dc41273e381723ef652869820696689751d4cc1a",
        "question": "Which city does student Linda Smith live in?",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Linda' AND LName = 'Smith' ] Output [ Fname , LName , city_code ]"
    },
    {
        "id": "931e2d16d3787bd6aeeb0f518d7950553e8f69ef62e7a40bddb900387d4302ae",
        "question": "Advisor 1121 has how many students?",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Student ] Predicate [ Advisor = 1121 ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e2b76c41aa0d70ab663fc55bc5b628e730103a879ebc1fc12868882c5868b021",
        "question": "Which Advisor has most of students? List advisor and the number of students.",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor , COUNT(Advisor) AS Count_Advisor ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Advisor DESC ] Output [ Advisor , Count_Star , Count_Advisor ]"
    },
    {
        "id": "3083036b36efb26299413bb5eb471b629a20ea1fde0584b59c5ae51c9946fabd",
        "question": "Which major has least number of students? List the major and the number of students.",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Student ] Output [ Major ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ countstar AS Count_Star , COUNT(Major) AS Count_Major , Major ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Major ASC ] Output [ Count_Star , Major , Count_Major ]"
    },
    {
        "id": "59c7d7ce9fb60e48f9f1e0ea90136fbf8de9afec0509be22acf45906d2571f0d",
        "question": "Which major has between 2 and 30 number of students? List major and the number of students.",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Student ] Output [ Major ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ countstar AS Count_Star , COUNT(Major) AS Count_Major , Major ] ; #3 = Filter [ #2 ] Predicate [ Count_Major >= 2 AND Count_Major <= 30 ] Output [ Count_Star , Major ]"
    },
    {
        "id": "e971ddc64c983da9a1294c5a30e1730bf04782bdaa61a6da642bb4ed89cab549",
        "question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Student ] Predicate [ Age > 18 AND Major = 600 ] Output [ LName , Fname , Major , Age ]"
    },
    {
        "id": "f6c665b823df6e2d69287d4ac4af83e530737c64840a4512182b1825a278f1b4",
        "question": "How long does student Linda Smith spend on the restaurant in total?",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Linda' AND LName = 'Smith' ] Output [ Fname , LName , StuID ] ; #2 = Scan Table [ Visits_Restaurant ] Output [ StuID , Spent ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.Spent ] ; #4 = Aggregate [ #3 ] Output [ SUM(Spent) AS Sum_Spent ]"
    },
    {
        "id": "bb7c4b7b277e071883cce0976fbcbf372ac8f1a8df68fa8e654a05eeb190e37d",
        "question": "How many times has the student Linda Smith visited Subway?",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Linda' AND LName = 'Smith' ] Output [ Fname , LName , StuID ] ; #2 = Scan Table [ Visits_Restaurant ] Output [ ResID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.ResID ] ; #4 = Scan Table [ Restaurant ] Predicate [ ResName = 'Subway' ] Output [ ResName , ResID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ResID = #4.ResID ] Output [ #3.ResID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "22d055f07b074710542a5045c56dfa5b349cf824166a77de91a9a72875531bff",
        "question": "When did Linda Smith visit Subway?",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Linda' AND LName = 'Smith' ] Output [ Fname , LName , StuID ] ; #2 = Scan Table [ Restaurant ] Predicate [ ResName = 'Subway' ] Output [ ResName , ResID ] ; #3 = Scan Table [ Visits_Restaurant ] Output [ ResID , StuID , Time ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ResID = #3.ResID ] Output [ #3.StuID , #3.Time ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.StuID = #4.StuID ] Output [ #4.Time ]"
    },
    {
        "id": "0eaafc7a7fa58621e6d422c21e6dddf298b2940b62d60576298039dcdffcc792",
        "question": "At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Visits_Restaurant ] Output [ ResID , Spent ] ; #2 = Aggregate [ #1 ] GroupBy [ ResID ] Output [ SUM(Spent) AS Sum_Spent , ResID ] ; #3 = Scan Table [ Restaurant ] Output [ ResName , ResID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.ResID = #3.ResID ] Output [ #2.Sum_Spent , #3.ResName ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_Spent ASC ] Output [ ResName , Sum_Spent ]"
    },
    {
        "id": "e91715e6d1a8ebc82b67427331bbee97b3ace507c86db9537728ec0822d31769",
        "question": "Which student visited restaurant most often? List student's first name and last name.",
        "parsing_tree": "restaurant_1 | #1 = Scan Table [ Visits_Restaurant ] Output [ StuID ] ; #2 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.LName , #2.Fname , #2.StuID ] ; #4 = Aggregate [ #3 ] GroupBy [ StuID ] Output [ countstar AS Count_Star , LName , Fname ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ LName , Count_Star , Fname ]"
    },
    {
        "id": "57ae91982cba968644941bdc7a2341690379d5d0acadddadea48140caca6b353",
        "question": "Find the ids of orders whose status is 'Success'.",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Actual_Orders ] Predicate [ order_status_code = 'Success' ] Output [ order_status_code , actual_order_id ]"
    },
    {
        "id": "0974435c04ecdfcfb5c6e7955e86a474f93ebd421e95778b09ecadebf68bb23f",
        "question": "Find the number of customers in total.",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Customers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d6d52d6f97b0df269a0e1ef9b88f789dafffe406ac6fdd0fec537ce143318075",
        "question": "How many different payment methods are there?",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ payment_method ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "bda974fe9deb58b8d99a47739d789e550ab43f6315ee76f860c9458eb5d73ff9",
        "question": "Show the details of all trucks in the order of their license number.",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Trucks ] Output [ truck_licence_number , truck_details ] ; #2 = Sort [ #1 ] OrderBy [ truck_licence_number ASC ] Output [ truck_licence_number , truck_details ]"
    },
    {
        "id": "2b3cc56eb0e2016743cbe60f599d796118ff80d45e4272b38c7c59915105022d",
        "question": "Find the name of the most expensive product.",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Products ] Output [ product_name , product_price ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ product_price DESC ] Output [ product_name , product_price ]"
    },
    {
        "id": "7de7c76d1f2f944e1b84895d9731395e621d75324db7eaf9ecc44ee2f5b0b942",
        "question": "Find the names of customers who are not living in the state of California.",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ customer_name ] ; #2 = Scan Table [ Addresses ] Predicate [ state_province_county = 'California' ] Output [ address_id , state_province_county ] ; #3 = Scan Table [ Customer_Addresses ] Output [ address_id , customer_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.address_id = #3.address_id ] Output [ #3.customer_id ] ; #5 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.customer_id = #5.customer_id ] Output [ #5.customer_name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.customer_name = #6.customer_name ] Output [ #1.customer_name ]"
    },
    {
        "id": "1b6e725ad79850ddd704a677c590ffa78db5aabfbbc30eb4cf6fb883c615cbe3",
        "question": "List the names and emails of customers who payed by Visa card.",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Customers ] Predicate [ payment_method = 'Visa' ] Output [ payment_method , customer_email , customer_name ]"
    },
    {
        "id": "800940e2ffaf6d90a956c4e499142db12a8da2b1d6f919b78868f7e854242b14",
        "question": "Find the names and phone numbers of customers living in California state.",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Addresses ] Predicate [ state_province_county = 'California' ] Output [ address_id , state_province_county ] ; #2 = Scan Table [ Customer_Addresses ] Output [ address_id , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.customer_id ] ; #4 = Scan Table [ Customers ] Output [ customer_id , customer_phone , customer_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.customer_id = #4.customer_id ] Output [ #4.customer_name , #4.customer_phone ]"
    },
    {
        "id": "c38519beb72df158fba53a3bf3b703f8d8145f5bfe344afd62a518a0f92463cc",
        "question": "Find the states which do not have any employee in their record.",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Addresses ] Output [ address_id , state_province_county ] ; #2 = Scan Table [ Employees ] Output [ employee_address_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.employee_address_id = #1.address_id ] Output [ #1.state_province_county ]"
    },
    {
        "id": "4b3c50d00e61e77dfee13e67cd5da68d8f6f6ccf884e10722069caf942bce99c",
        "question": "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Customers ] Output [ customer_phone , customer_email , customer_name , date_became_customer ] ; #2 = Sort [ #1 ] OrderBy [ date_became_customer ASC ] Output [ customer_phone , customer_email , customer_name , date_became_customer ]"
    },
    {
        "id": "65c750f55b289a80c5d3fb527089ed49ae8b586cd3b7c1a460ed482bd64518e2",
        "question": "Find the name of the first 5 customers.",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Customers ] Output [ customer_name , date_became_customer ] ; #2 = TopSort [ #1 ] Rows [ 5 ] OrderBy [ date_became_customer ASC ] Output [ customer_name , date_became_customer ]"
    },
    {
        "id": "f3c5f2936d00af628bd8536d792118fe3648ed56225205be1e13c1e2f858a59c",
        "question": "Find the payment method that is used most frequently.",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Customers ] Output [ payment_method ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method ] Output [ countstar AS Count_Star , payment_method ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , payment_method ]"
    },
    {
        "id": "6d01f2e38e27868585f383bfb4a40df8367a1bc06f0544b929092a4eafffb196",
        "question": "List the names of all routes in alphabetic order.",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Delivery_Routes ] Output [ route_name ] ; #2 = Sort [ #1 ] OrderBy [ route_name ASC ] Output [ route_name ]"
    },
    {
        "id": "09d9a3b3c508478fa558c3505228fc40b203b0dcfbe5b1ef3c549e4732f09985",
        "question": "Find the name of route that has the highest number of deliveries.",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Delivery_Route_Locations ] Output [ route_id ] ; #2 = Aggregate [ #1 ] GroupBy [ route_id ] Output [ countstar AS Count_Star , route_id ] ; #3 = Scan Table [ Delivery_Routes ] Output [ route_name , route_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.route_id = #3.route_id ] Output [ #3.route_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , route_name ]"
    },
    {
        "id": "5e6f1cee38e5bfaeec8576566b9324754e122ae2937a063adf334c7d98c889bd",
        "question": "List the state names and the number of customers living in each state.",
        "parsing_tree": "customer_deliveries | #1 = Scan Table [ Customer_Addresses ] Output [ address_id ] ; #2 = Scan Table [ Addresses ] Output [ address_id , state_province_county ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.state_province_county ] ; #4 = Aggregate [ #3 ] GroupBy [ state_province_county ] Output [ countstar AS Count_Star , state_province_county ]"
    },
    {
        "id": "70e21f1b21f8e9708bd875fac54a1de33f4686fb647a8acff5be2856de0e9d0c",
        "question": "How many authors are there?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "88967a1dec115427e4bf153c2162fa70a507cd8c1bf8152ef38a898bf49af68a",
        "question": "Count the number of authors.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f2943c7c27f9e6a78a94e677ae9d627bec327f2e277ebeab5d15b43870ff8387",
        "question": "How many institutions are there?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "553333fda3e10ac0a03b121ec0d6f8316953ed4dba66d546063f7a8eea6560b3",
        "question": "Count the number of institutions.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a7895eac53c8f48084972f0a49c4681101f4168370f21e45e698d4e9720ae99f",
        "question": "How many papers are published in total?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Papers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "8484254b3e6955b39dd28fd7814de2020e584d7ee78a0f2141908d41d436de19",
        "question": "Count the number of total papers.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Papers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b20d026fe2684649999bd0a3a175cfe6bc7e7362409780d8123d1ef7ef2d7cf7",
        "question": "What are the titles of papers published by \"Jeremy Gibbons\"?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Jeremy' AND lname = 'Gibbons' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Output [ paperID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Output [ #5.title ]"
    },
    {
        "id": "9034c10697c68b8ab0a66b878d37c8e9665493769c8104c296cbe302264f09d9",
        "question": "Find the titles of all the papers written by \"Jeremy Gibbons\"",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Jeremy' AND lname = 'Gibbons' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Output [ paperID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Output [ #5.title ]"
    },
    {
        "id": "451927876d8348cf52f6b2f4fab1a3fd5f3efcf0f296b82dcd3c25a6fc78099e",
        "question": "Find all the papers published by \"Aaron Turon\".",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Aaron' AND lname = 'Turon' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Output [ paperID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Output [ #5.title ]"
    },
    {
        "id": "4805bbef794236f710b2a89d016e6b82245cabc4dc4be12cb61ad6b160b614f4",
        "question": "Find the titles of all the papers written by \"Aaron Turon\".",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Aaron' AND lname = 'Turon' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Output [ paperID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Output [ #5.title ]"
    },
    {
        "id": "98e2f5765085d7749760fe80384a8ee6f06e60e3995dd87ba46bc5d7f5101c90",
        "question": "How many papers have \"Atsushi Ohori\" published?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Atsushi' AND lname = 'Ohori' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Output [ authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #2.authID ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "eb7edadc7c978d054c16f34fdb136a982538972a45b7486fbd70181c077ea1a9",
        "question": "How many papers are \"Atsushi Ohori\" the author of?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Atsushi' AND lname = 'Ohori' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Output [ authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #2.authID ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0102f513069c53d79f5b745ac8ca77aadf6ffb982e9d7448b33be315bea2eba7",
        "question": "What is the name of the institution that \"Matthias Blume\" belongs to?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Matthias' AND lname = 'Blume' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Output [ instID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.instID ] ; #5 = Scan Table [ Inst ] Output [ instID , name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.instID = #5.instID ] Distinct [ true ] Output [ #5.name ]"
    },
    {
        "id": "fd7741631ebe70b2d82291e80eb22687425dca7d080806b6bdddfa0a440fb45a",
        "question": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Matthias' AND lname = 'Blume' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Output [ instID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.instID ] ; #5 = Scan Table [ Inst ] Output [ instID , name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.instID = #5.instID ] Distinct [ true ] Output [ #5.name ]"
    },
    {
        "id": "5005d75b3b686e19cf9c568c4bec0fec33a0cec2eaa60fd314384849fc9ece37",
        "question": "Which institution does \"Katsuhiro Ueno\" belong to?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Katsuhiro' AND lname = 'Ueno' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Output [ instID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.instID ] ; #5 = Scan Table [ Inst ] Output [ instID , name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.instID = #5.instID ] Distinct [ true ] Output [ #5.name ]"
    },
    {
        "id": "0f2f288a32602aad9b4f079301590aa13237eac3459f7bd502424e42685d6f53",
        "question": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Katsuhiro' AND lname = 'Ueno' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Output [ instID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.instID ] ; #5 = Scan Table [ Inst ] Output [ instID , name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.instID = #5.instID ] Distinct [ true ] Output [ #5.name ]"
    },
    {
        "id": "36cd4903305d7bdc6c1fe0af4831c3f85c0f774e37d3efa85bcabdbc2de38ee9",
        "question": "Who belong to the institution \"University of Oxford\"? Show the first names and last names.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'University of Oxford' ] Output [ instID ] ; #3 = Scan Table [ Authorship ] Output [ instID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.instID = #3.instID ] Output [ #3.authID ] ; #5 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.authID = #5.authID ] Distinct [ true ] Output [ #5.fname , #5.lname ]"
    },
    {
        "id": "5daacfb1519409c09cd20b05ae37b1a9f3a939f047be4e7c15352c08233f74c8",
        "question": "Find the first names and last names of the authors whose institution affiliation is \"University of Oxford\".",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'University of Oxford' ] Output [ instID ] ; #3 = Scan Table [ Authorship ] Output [ instID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.instID = #3.instID ] Output [ #3.authID ] ; #5 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.authID = #5.authID ] Distinct [ true ] Output [ #5.fname , #5.lname ]"
    },
    {
        "id": "f769a2bb7b4c071c0f45809c5367089ef5388737fb2ecca730cd40d514052aaa",
        "question": "Which authors belong to the institution \"Google\"? Show the first names and last names.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'Google' ] Output [ instID ] ; #3 = Scan Table [ Authorship ] Output [ instID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.instID = #3.instID ] Output [ #3.authID ] ; #5 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.authID = #5.authID ] Distinct [ true ] Output [ #5.fname , #5.lname ]"
    },
    {
        "id": "0ac99c020150d149626c08c5ad9869ad1a739f2d4bd8e6f8d78459ee1cb10c8c",
        "question": "Find the first names and last names of the authors whose institution affiliation is \"Google\".",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'Google' ] Output [ instID ] ; #3 = Scan Table [ Authorship ] Output [ instID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.instID = #3.instID ] Output [ #3.authID ] ; #5 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.authID = #5.authID ] Distinct [ true ] Output [ #5.fname , #5.lname ]"
    },
    {
        "id": "37eb58599bd4eb2245b429ed947cd41bf785dbbb223843e7d6ac673142c19ca0",
        "question": "What are the last names of the author of the paper titled \"Binders Unbound\"?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Papers ] Output [ paperID , title ] ; #2 = Filter [ #1 ] Predicate [ title = 'Binders Unbound' ] Output [ paperID ] ; #3 = Scan Table [ Authorship ] Output [ paperID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.paperID = #3.paperID ] Output [ #3.authID ] ; #5 = Scan Table [ Authors ] Output [ authID , lname ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.authID = #5.authID ] Output [ #5.lname ]"
    },
    {
        "id": "dcf5d76055602950000944f0cdd4c1a2b0a05d9aaa49745e06245b078e7aff77",
        "question": "Who is the author of the paper titled \"Binders Unbound\"? Give me the last name.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Papers ] Output [ paperID , title ] ; #2 = Filter [ #1 ] Predicate [ title = 'Binders Unbound' ] Output [ paperID ] ; #3 = Scan Table [ Authorship ] Output [ paperID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.paperID = #3.paperID ] Output [ #3.authID ] ; #5 = Scan Table [ Authors ] Output [ authID , lname ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.authID = #5.authID ] Output [ #5.lname ]"
    },
    {
        "id": "2cb216968149a04e46f4162a3ff4f0c598b2d2d0820eb0cd60ae945e54348da2",
        "question": "What are the papers published under the institution \"Indiana University\"?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'Indiana University' ] Output [ instID ] ; #3 = Scan Table [ Authorship ] Output [ instID , paperID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.instID = #3.instID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Distinct [ true ] Output [ #5.title ]"
    },
    {
        "id": "eed3c12c408b2f32b2faef33569ca86d175c5a70f58b54f2505c78e0a5a19589",
        "question": "List the titles of the papers whose authors are from the institution \"Indiana University\".",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'Indiana University' ] Output [ instID ] ; #3 = Scan Table [ Authorship ] Output [ instID , paperID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.instID = #3.instID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Distinct [ true ] Output [ #5.title ]"
    },
    {
        "id": "72c5fc84e9217c66c2585f76b6fdd261c4a815740fcb6149d8d5d0bc14cdf72c",
        "question": "Find all the papers published by the institution \"Google\".",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'Google' ] Output [ instID ] ; #3 = Scan Table [ Authorship ] Output [ instID , paperID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.instID = #3.instID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Distinct [ true ] Output [ #5.title ]"
    },
    {
        "id": "383c507da2107543d8a76af4e6412d9f3784387f80e9bfec5ec031e528366637",
        "question": "Which papers were written by authors from the institution \"Google\"?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'Google' ] Output [ instID ] ; #3 = Scan Table [ Authorship ] Output [ instID , paperID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.instID = #3.instID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Distinct [ true ] Output [ #5.title ]"
    },
    {
        "id": "7de76176cf598527afbde63b21a4e733560b76f9098e9ede109d8071e64d6ecd",
        "question": "How many papers are published by the institution \"Tokohu University\"?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'Tokohu University' ] Output [ instID ] ; #3 = Scan Table [ Authorship ] Output [ instID , paperID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.instID = #3.instID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Distinct [ true ] Output [ #5.title ] ; #7 = Aggregate [ #6 ] Output [ COUNT(title) AS Count_title ]"
    },
    {
        "id": "7dc4ad54de0f1fabeb9aa21b1b1d05e6917cfb72a3548b0b06b5d951d8c6e0d7",
        "question": "Find the number of papers published by authors from the institution \"Tokohu University\".",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'Tokohu University' ] Output [ instID ] ; #3 = Scan Table [ Authorship ] Output [ instID , paperID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.instID = #3.instID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Distinct [ true ] Output [ #5.title ] ; #7 = Aggregate [ #6 ] Output [ COUNT(title) AS Count_title ]"
    },
    {
        "id": "27a24d4c79b7155735d6103047832c8c9a90c1f3f1e7158407b89befd7a8bdb9",
        "question": "Find the number of papers published by the institution \"University of Pennsylvania\".",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'University of Pennsylvania' ] Output [ instID ] ; #3 = Scan Table [ Authorship ] Output [ instID , paperID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.instID = #3.instID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Distinct [ true ] Output [ #5.title ] ; #7 = Aggregate [ #6 ] Output [ COUNT(title) AS Count_title ]"
    },
    {
        "id": "f4ae7c1e947f09c632e69d1714403f3419eac83f65fb8950979c61f2b0495fb1",
        "question": "How many papers are written by authors from the institution \"University of Pennsylvania\"?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'University of Pennsylvania' ] Output [ instID ] ; #3 = Scan Table [ Authorship ] Output [ instID , paperID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.instID = #3.instID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Distinct [ true ] Output [ #5.title ] ; #7 = Aggregate [ #6 ] Output [ COUNT(title) AS Count_title ]"
    },
    {
        "id": "91b76553c5ef398946d6985122731fd1101fe79551d80e837fae401df508e99f",
        "question": "Find the papers which have \"Olin Shivers\" as an author.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Olin' AND lname = 'Shivers' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Output [ paperID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Output [ #5.title ]"
    },
    {
        "id": "f13a9d68f4def644073853be09e72b8f02ec7b97f8d5e33f1779a1764fb06b9d",
        "question": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Olin' AND lname = 'Shivers' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Output [ paperID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Output [ #5.title ]"
    },
    {
        "id": "9108f7e4a99df8c01b649df4b75c7e80c89c2ad5cf456faf88d64ac245a0b15b",
        "question": "Which papers have \"Stephanie Weirich\" as an author?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Stephanie' AND lname = 'Weirich' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Output [ paperID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Output [ #5.title ]"
    },
    {
        "id": "f800894144b4ae06e37da20498ecbec57809b50865b9576601b6e7e685a3e726",
        "question": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Stephanie' AND lname = 'Weirich' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Output [ paperID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.paperID ] ; #5 = Scan Table [ Papers ] Output [ paperID , title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.paperID = #5.paperID ] Output [ #5.title ]"
    },
    {
        "id": "62d170321cff41f27eca770417910e1696112d844a48fbd94da35a6305c739d3",
        "question": "Which paper is published in an institution in \"USA\" and have \"Turon\" as its second author?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ authID , lname ] ; #2 = Filter [ #1 ] Predicate [ lname = 'Turon' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Predicate [ authOrder = 2 ] Output [ instID , paperID , authID , authOrder ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.instID , #3.paperID ] ; #5 = Scan Table [ Inst ] Output [ instID , country ] ; #6 = Filter [ #5 ] Predicate [ country = 'USA' ] Output [ instID ] ; #7 = Join [ #4 , #6 ] Predicate [ #4.instID = #6.instID ] Output [ #4.paperID ] ; #8 = Scan Table [ Papers ] Output [ paperID , title ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.paperID = #8.paperID ] Output [ #8.title ]"
    },
    {
        "id": "a6f9b76565ebcb986dd6d7cb69063ab4feae3c3aa45beeb05952f6ec58f1e6d0",
        "question": "Find papers whose second author has last name \"Turon\" and is affiliated with an institution in the country \"USA\".",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ authID , lname ] ; #2 = Filter [ #1 ] Predicate [ lname = 'Turon' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Predicate [ authOrder = 2 ] Output [ instID , paperID , authID , authOrder ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.instID , #3.paperID ] ; #5 = Scan Table [ Inst ] Output [ instID , country ] ; #6 = Filter [ #5 ] Predicate [ country = 'USA' ] Output [ instID ] ; #7 = Join [ #4 , #6 ] Predicate [ #4.instID = #6.instID ] Output [ #4.paperID ] ; #8 = Scan Table [ Papers ] Output [ paperID , title ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.paperID = #8.paperID ] Output [ #8.title ]"
    },
    {
        "id": "54275d9b997c3b7bdb2b278df64ad1c7b2e8f384fe4b90ba60d99b6d248ce4a8",
        "question": "Find the titles of papers whose first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ authID , lname ] ; #2 = Filter [ #1 ] Predicate [ lname = 'Ohori' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Predicate [ authOrder = 1 ] Output [ instID , paperID , authID , authOrder ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.instID , #3.paperID ] ; #5 = Scan Table [ Inst ] Output [ instID , country ] ; #6 = Filter [ #5 ] Predicate [ country = 'Japan' ] Output [ instID ] ; #7 = Join [ #4 , #6 ] Predicate [ #4.instID = #6.instID ] Output [ #4.paperID ] ; #8 = Scan Table [ Papers ] Output [ paperID , title ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.paperID = #8.paperID ] Output [ #8.title ]"
    },
    {
        "id": "1a9edea2ee59dc40bc75ae78a6f77878a10f502cc1222de26a057de097b97b34",
        "question": "Which papers' first author is affiliated with an institution in the country \"Japan\" and has last name \"Ohori\"? Give me the titles of the papers.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ authID , lname ] ; #2 = Filter [ #1 ] Predicate [ lname = 'Ohori' ] Output [ authID ] ; #3 = Scan Table [ Authorship ] Predicate [ authOrder = 1 ] Output [ instID , paperID , authID , authOrder ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.authID = #3.authID ] Output [ #3.instID , #3.paperID ] ; #5 = Scan Table [ Inst ] Output [ instID , country ] ; #6 = Filter [ #5 ] Predicate [ country = 'Japan' ] Output [ instID ] ; #7 = Join [ #4 , #6 ] Predicate [ #4.instID = #6.instID ] Output [ #4.paperID ] ; #8 = Scan Table [ Papers ] Output [ paperID , title ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.paperID = #8.paperID ] Output [ #8.title ]"
    },
    {
        "id": "53b5740ebbed8e0ea73424b8856957cc0d0a75baebad1fcb913d505352d64761",
        "question": "What is the last name of the author that has published the most papers?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Scan Table [ Authorship ] Output [ authID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.authID = #2.authID ] Output [ #1.lname , #1.fname ] ; #4 = Aggregate [ #3 ] GroupBy [ fname , lname ] Output [ countstar AS Count_Star , lname ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , lname ]"
    },
    {
        "id": "d1ec4e3524c5a43c297b077d0f724edb5766848b58245f6f3a4873dc9602205f",
        "question": "Which author has written the most papers? Find his or her last name.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , authID , lname ] ; #2 = Scan Table [ Authorship ] Output [ authID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.authID = #2.authID ] Output [ #1.lname , #1.fname ] ; #4 = Aggregate [ #3 ] GroupBy [ fname , lname ] Output [ countstar AS Count_Star , lname ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , lname ]"
    },
    {
        "id": "fdfa7d39bf952ad435559290844ebfc26e173ce61a746c212ccc7c9b9ca5ff54",
        "question": "Retrieve the country that has published the most papers.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , country ] ; #2 = Scan Table [ Authorship ] Output [ instID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.instID = #2.instID ] Output [ #1.country ] ; #4 = Aggregate [ #3 ] GroupBy [ country ] Output [ countstar AS Count_Star , country ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ country , Count_Star ]"
    },
    {
        "id": "75708a05dd7a6bde6538f20268ef53f2466c7a26281c5103c6cc54617eb40942",
        "question": "Find the country that the most papers are affiliated with.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , country ] ; #2 = Scan Table [ Authorship ] Output [ instID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.instID = #2.instID ] Output [ #1.country ] ; #4 = Aggregate [ #3 ] GroupBy [ country ] Output [ countstar AS Count_Star , country ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ country , Count_Star ]"
    },
    {
        "id": "7429fa8ab2ce9f48f51a5ec5bec1359311b8523bfdda7de21bcfb16a9d87d0f5",
        "question": "Find the name of the organization that has published the largest number of papers.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , name ] ; #2 = Scan Table [ Authorship ] Output [ instID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.instID = #2.instID ] Output [ #1.name ] ; #4 = Aggregate [ #3 ] GroupBy [ name ] Output [ name , countstar AS Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "efd7edc2e27cd2925121ab0e0cbf2e305976bb726bd3832ac37ddc2bbcbf9b9a",
        "question": "Which institution has the most papers? Find the name of the institution.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Inst ] Output [ instID , name ] ; #2 = Scan Table [ Authorship ] Output [ instID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.instID = #2.instID ] Output [ #1.name ] ; #4 = Aggregate [ #3 ] GroupBy [ name ] Output [ name , countstar AS Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "4c691dc73aea5e6c355be9c9eb4d30b4cdcd34d2a70ea0b383c3aaa6e6b6c11e",
        "question": "Find the titles of the papers that contain the word \"ML\".",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Papers ] Output [ title ] ; #2 = Filter [ #1 ] Predicate [ title like '%ML%' ] Output [ title ]"
    },
    {
        "id": "a30a8d78ec70a65621ab8689ce38721b16ee571ef2531c29dbdb84c9120d1164",
        "question": "Which papers have the substring \"ML\" in their titles? Return the titles of the papers.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Papers ] Output [ title ] ; #2 = Filter [ #1 ] Predicate [ title like '%ML%' ] Output [ title ]"
    },
    {
        "id": "128540ce616ef9adaa4978d82fbfbc9bd21866dff9c1dd3052ded0e6fad21f97",
        "question": "Which paper's title contains the word \"Database\"?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Papers ] Output [ title ] ; #2 = Filter [ #1 ] Predicate [ title like '%Database%' ] Output [ title ]"
    },
    {
        "id": "5bef33edebb164f2d21606f260f7cae61a24314050b92a1caa56059486e7e4b9",
        "question": "Which papers have the substring \"Database\" in their titles? Show the titles of the papers.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Papers ] Output [ title ] ; #2 = Filter [ #1 ] Predicate [ title like '%Database%' ] Output [ title ]"
    },
    {
        "id": "182aa9f38abdb1d394c1ae774bfceea2f421955b613281c7a7005f8d7b9df039",
        "question": "Find the first names of all the authors who have written a paper with title containing the word \"Functional\".",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Papers ] Output [ paperID , title ] ; #2 = Filter [ #1 ] Predicate [ title like '%Functional%' ] Output [ paperID ] ; #3 = Scan Table [ Authorship ] Output [ paperID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.paperID = #3.paperID ] Output [ #3.authID ] ; #5 = Scan Table [ Authors ] Output [ fname , authID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.authID = #5.authID ] Output [ #5.fname ]"
    },
    {
        "id": "6b5b3263c1ed4804e14aa6ee7965556b6824c49a49c8e9ee79ea016cd5212867",
        "question": "Who has written a paper that has the word \"Functional\" in its title? Return the first names of the authors.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Papers ] Output [ paperID , title ] ; #2 = Filter [ #1 ] Predicate [ title like '%Functional%' ] Output [ paperID ] ; #3 = Scan Table [ Authorship ] Output [ paperID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.paperID = #3.paperID ] Output [ #3.authID ] ; #5 = Scan Table [ Authors ] Output [ fname , authID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.authID = #5.authID ] Output [ #5.fname ]"
    },
    {
        "id": "1194f84b1b3473773e5bf60a32314a83143643c848f6d32a268cf5bf506b06da",
        "question": "Find the last names of all the authors that have written a paper with title containing the word \"Monadic\".",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Papers ] Output [ paperID , title ] ; #2 = Filter [ #1 ] Predicate [ title like '%Monadic%' ] Output [ paperID ] ; #3 = Scan Table [ Authorship ] Output [ paperID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.paperID = #3.paperID ] Output [ #3.authID ] ; #5 = Scan Table [ Authors ] Output [ authID , lname ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.authID = #5.authID ] Output [ #5.lname ]"
    },
    {
        "id": "10f96707907a571d72eedf493b9ae398465bfa51f5ab9e6dd3b81b3854ccad0d",
        "question": "Which authors have written a paper with title containing the word \"Monadic\"? Return their last names.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Papers ] Output [ paperID , title ] ; #2 = Filter [ #1 ] Predicate [ title like '%Monadic%' ] Output [ paperID ] ; #3 = Scan Table [ Authorship ] Output [ paperID , authID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.paperID = #3.paperID ] Output [ #3.authID ] ; #5 = Scan Table [ Authors ] Output [ authID , lname ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.authID = #5.authID ] Output [ #5.lname ]"
    },
    {
        "id": "ffdd0789681f4b4025f97e9d34f84640dd4fedbe0b8112915fdfecd2a585dfbd",
        "question": "What is the first name of the author with last name \"Ueno\"?",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , lname ] ; #2 = Filter [ #1 ] Predicate [ lname = 'Ueno' ] Output [ fname ]"
    },
    {
        "id": "489858e970b4b5ad49d07e4621945a4842e3d3ef471bf885628b5fbbc74a4347",
        "question": "Which authors have last name \"Ueno\"? List their first names.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , lname ] ; #2 = Filter [ #1 ] Predicate [ lname = 'Ueno' ] Output [ fname ]"
    },
    {
        "id": "c2c340a4f447c7e415b966626c8daef7b3b72b8ecd90dbc4af4fa7a02b631720",
        "question": "Find the last name of the author with first name \"Amal\".",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Amal' ] Output [ lname ]"
    },
    {
        "id": "f7757b816f75d76444798f2172d96c29530da364de565c37eddb67e2f15eaa18",
        "question": "Which authors have first name \"Amal\"? List their last names.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , lname ] ; #2 = Filter [ #1 ] Predicate [ fname = 'Amal' ] Output [ lname ]"
    },
    {
        "id": "47379eacab74fd4cd43ea3b010cd20272f3cd761bc0c0e5f4924978e5bd3ecce",
        "question": "Find the first names of all the authors ordered in alphabetical order.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname ] ; #2 = Sort [ #1 ] OrderBy [ fname ASC ] Output [ fname ]"
    },
    {
        "id": "5447b6a6819afd5fcbfc71fc62b3fe9b4bc2ba1628268adaf88dd89c886482be",
        "question": "Sort the first names of all the authors in alphabetical order.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname ] ; #2 = Sort [ #1 ] OrderBy [ fname ASC ] Output [ fname ]"
    },
    {
        "id": "15ce8f35607ea059f19cd235916a84efb872e5f58344e502be105ba4a731d68c",
        "question": "Retrieve all the last names of authors in alphabetical order.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ lname ] ; #2 = Sort [ #1 ] OrderBy [ lname ASC ] Output [ lname ]"
    },
    {
        "id": "7ac4de1c944d5f9113ec6695e07cd876df6dddc5788e249c13cf5fd2e967bd5e",
        "question": "Give me a list of all the last names of authors sorted in alphabetical order",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ lname ] ; #2 = Sort [ #1 ] OrderBy [ lname ASC ] Output [ lname ]"
    },
    {
        "id": "8f0dbfab6a9b60faebb0cbe81a52061314f60eb03be223680a68d6926a213887",
        "question": "Retrieve all the first and last names of authors in the alphabetical order of last names.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , lname ] ; #2 = Sort [ #1 ] OrderBy [ lname ASC ] Output [ fname , lname ]"
    },
    {
        "id": "121f4a3c7d302ebfdbb00b95db82ced7ec108f3c70ea7750d64990d47353d916",
        "question": "Sort the list of all the first and last names of authors in alphabetical order of the last names.",
        "parsing_tree": "icfp_1 | #1 = Scan Table [ Authors ] Output [ fname , lname ] ; #2 = Sort [ #1 ] OrderBy [ lname ASC ] Output [ fname , lname ]"
    },
    {
        "id": "915b9174d1db0dd21af197020901b0cea4653665cd1210326435d13196186409",
        "question": "How many different last names do the actors and actresses have?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ actor ] Distinct [ true ] Output [ last_name ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7c25674ec52664f45553f2bdb3acbe73b639090c9a749d790cb38ad0dfc77bb1",
        "question": "Count the number of different last names actors have.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ actor ] Distinct [ true ] Output [ last_name ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "8d92712b8114594b8ba3a89670d2da86b436206dc5ac709a51d67a6102eccc81",
        "question": "What is the most popular first name of the actors?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ actor ] Output [ first_name ] ; #2 = Aggregate [ #1 ] GroupBy [ first_name ] Output [ countstar AS Count_Star , first_name ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , first_name ]"
    },
    {
        "id": "ac9cee8864072fa74a56e65b92538152d36de89402581fc912c9e0c054ffb624",
        "question": "Return the most common first name among all actors.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ actor ] Output [ first_name ] ; #2 = Aggregate [ #1 ] GroupBy [ first_name ] Output [ countstar AS Count_Star , first_name ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , first_name ]"
    },
    {
        "id": "ba3476fb41b774ddc7ea8159eb8c24e6c576dd183cf4d15e5db63a6331ef486e",
        "question": "What is the most popular full name of the actors?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ actor ] Output [ last_name , first_name ] ; #2 = Aggregate [ #1 ] GroupBy [ last_name , first_name ] Output [ last_name , countstar AS Count_Star , first_name ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ last_name , Count_Star , first_name ]"
    },
    {
        "id": "e2bf69b66436e9a15c76cb212d18b384173b397133f41822e6a9709d18f50f5f",
        "question": "Return the most common full name among all actors.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ actor ] Output [ last_name , first_name ] ; #2 = Aggregate [ #1 ] GroupBy [ last_name , first_name ] Output [ last_name , countstar AS Count_Star , first_name ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ last_name , Count_Star , first_name ]"
    },
    {
        "id": "75a2a18102a2de166778f4478719aa5d22e07f26cf808e2521d151aefcb4001d",
        "question": "Which districts have at least two addresses?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ address ] Output [ district ] ; #2 = Aggregate [ #1 ] GroupBy [ district ] Output [ countstar AS Count_Star , district ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ district ]"
    },
    {
        "id": "3919f6e994f2e634566c85246f7f4367cabb0b63b88cf6ca554629ddee2d648f",
        "question": "Give the districts which have two or more addresses.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ address ] Output [ district ] ; #2 = Aggregate [ #1 ] GroupBy [ district ] Output [ countstar AS Count_Star , district ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ district ]"
    },
    {
        "id": "e033400829e1f6321e971806657bad979238b91f5d20f0fd51b0ecb7eed9e63a",
        "question": "What is the phone number and postal code of the address 1031 Daugavpils Parkway?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ address ] Predicate [ address = '1031 Daugavpils Parkway' ] Output [ phone , postal_code , address ]"
    },
    {
        "id": "7b8b613a0249a626f5204038ae402f25ffab56af6ffbb2d6589a0896b2e2d5f2",
        "question": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ address ] Predicate [ address = '1031 Daugavpils Parkway' ] Output [ phone , postal_code , address ]"
    },
    {
        "id": "6c70b672e742d5ecc9e499a13192b5d417c89b6ef3b9e289be4af38d8e6cfcb1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ address ] Output [ city_id ] ; #2 = Aggregate [ #1 ] GroupBy [ city_id ] Output [ city_id , countstar AS Count_Star ] ; #3 = Scan Table [ city ] Output [ city_id , city ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.city_id = #3.city_id ] Output [ #2.city_id , #3.city , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ city_id , Count_Star , city ]"
    },
    {
        "id": "90ea9c5d0482f6cc748462fba2f94a78274b9d76660fb9a4fc5512e2bf5ef167",
        "question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ address ] Output [ city_id ] ; #2 = Aggregate [ #1 ] GroupBy [ city_id ] Output [ city_id , countstar AS Count_Star ] ; #3 = Scan Table [ city ] Output [ city_id , city ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.city_id = #3.city_id ] Output [ #2.city_id , #3.city , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ city_id , Count_Star , city ]"
    },
    {
        "id": "8d4e1bf088447c3238f0afa6d47ed8dc335cbd28b19c4eea888de0be0bc2e8ea",
        "question": "How many addresses are in the district of California?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ address ] Predicate [ district = 'California' ] Output [ district ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "405aa39df1684d0a4013ccea3e8bbc011c79fb09fceb2e8064a93c28da1f5e1b",
        "question": "Count the number of addressed in the California district.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ address ] Predicate [ district = 'California' ] Output [ district ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "021bae5f5daf28744fc4c3ab761dd1f7c3e2d692dd276618ebb3ebb468534fc6",
        "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ inventory ] Output [ film_id ] ; #2 = Aggregate [ #1 ] GroupBy [ film_id ] Output [ countstar AS Count_Star , film_id ] ; #3 = Scan Table [ film ] Output [ film_id , title ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.film_id = #3.film_id ] Output [ #3.title , #3.film_id , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star < 3 ] Output [ film_id , title ] ; #6 = Scan Table [ film ] Predicate [ rental_rate = 0.99 ] Output [ film_id , title , rental_rate ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.title = #6.title ] Output [ #5.title , #5.film_id ]"
    },
    {
        "id": "b4de01077a1c2891bb01fd19dbec0f759d611a91e3fde6f73f3a5131710450b2",
        "question": "What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ inventory ] Output [ film_id ] ; #2 = Aggregate [ #1 ] GroupBy [ film_id ] Output [ countstar AS Count_Star , film_id ] ; #3 = Scan Table [ film ] Output [ film_id , title ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.film_id = #3.film_id ] Output [ #3.title , #3.film_id , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star < 3 ] Output [ film_id , title ] ; #6 = Scan Table [ film ] Predicate [ rental_rate = 0.99 ] Output [ film_id , title , rental_rate ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.title = #6.title ] Output [ #5.title , #5.film_id ]"
    },
    {
        "id": "e1e88d8ce71e6e332edaaa36c95598a7c8d04fe4b9d7aa828429b61a1c923ede",
        "question": "How many cities are in Australia?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ country ] Predicate [ country = 'Australia' ] Output [ country , country_id ] ; #2 = Scan Table [ city ] Output [ country_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.country_id = #2.country_id ] Output [ #1.country_id , #1.country ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b49737b59ae2f4ab0961f05e7344e8c8fbc58b943e837d2eac8c2afeef9c0717",
        "question": "Count the number of cities in Australia.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ country ] Predicate [ country = 'Australia' ] Output [ country , country_id ] ; #2 = Scan Table [ city ] Output [ country_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.country_id = #2.country_id ] Output [ #1.country_id , #1.country ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d92fbfff10f5d5adf9b8ec2e813aac086f4526f1b1dd3ccf27f1784ce1779edf",
        "question": "Which countries have at least 3 cities?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ city ] Output [ country_id ] ; #2 = Aggregate [ #1 ] GroupBy [ country_id ] Output [ countstar AS Count_Star , country_id ] ; #3 = Scan Table [ country ] Output [ country , country_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.country_id = #3.country_id ] Output [ #3.country , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ country ]"
    },
    {
        "id": "7f6a9914011a943ffb0227befa41db8b322c0acf5c87552d56fd89ee51bc2ab4",
        "question": "What are the countries that contain 3 or more cities?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ city ] Output [ country_id ] ; #2 = Aggregate [ #1 ] GroupBy [ country_id ] Output [ countstar AS Count_Star , country_id ] ; #3 = Scan Table [ country ] Output [ country , country_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.country_id = #3.country_id ] Output [ #3.country , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ country ]"
    },
    {
        "id": "1ad757c148f2c71f0d1ad90d7ef3626fbe1fea3dac863fb90174012d8f1800d4",
        "question": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ payment ] Predicate [ amount > 10.0 ] Output [ amount , payment_date ] ; #2 = Scan Table [ staff ] Predicate [ first_name = 'Elsa' ] Output [ first_name , staff_id ] ; #3 = Scan Table [ payment ] Output [ payment_date , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.staff_id = #3.staff_id ] Output [ #3.payment_date ] ; #5 = Union [ #1 , #4 ] Output [ #1.payment_date ]"
    },
    {
        "id": "fe0f527c98340f8587f4c3f9081f74fe6fb0af92b5f511f14da91f11e6e61111",
        "question": "What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ payment ] Predicate [ amount > 10.0 ] Output [ amount , payment_date ] ; #2 = Scan Table [ staff ] Predicate [ first_name = 'Elsa' ] Output [ first_name , staff_id ] ; #3 = Scan Table [ payment ] Output [ payment_date , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.staff_id = #3.staff_id ] Output [ #3.payment_date ] ; #5 = Union [ #1 , #4 ] Output [ #1.payment_date ]"
    },
    {
        "id": "b086cce7525a5d296766bb03cc88d2ccfae3c3c2448e6afc2c78b8807d1b0cfe",
        "question": "How many customers have an active value of 1?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ customer ] Predicate [ active = 1 ] Output [ active ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1d1207b88011ab7346e9a0f161f1da141448099acf9b8adcce8afa047ee0d95c",
        "question": "Count the number of customers who are active.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ customer ] Predicate [ active = 1 ] Output [ active ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1b12ffb6f1bd273cc725df1698c5f7979129fc934fe32c41f8e83e06644fcd1e",
        "question": "Which film has the highest rental rate? And what is the rate?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film ] Output [ title , rental_rate ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ rental_rate DESC ] Output [ title , rental_rate ]"
    },
    {
        "id": "6c495fb9649eb99df1c8e0def4186e9ecacf3e515cd87fd9f8471e451d702730",
        "question": "What are the title and rental rate of the film with the highest rental rate?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film ] Output [ title , rental_rate ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ rental_rate DESC ] Output [ title , rental_rate ]"
    },
    {
        "id": "5ad6d59eb66ef23b54d3995d64d1dcf6cb6feaf9fcb775d526f4f4bd3fd8d383",
        "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film_actor ] Output [ actor_id ] ; #2 = Aggregate [ #1 ] GroupBy [ actor_id ] Output [ countstar AS Count_Star , actor_id ] ; #3 = Scan Table [ actor ] Output [ last_name , first_name , actor_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.actor_id = #3.actor_id ] Output [ #3.last_name , #3.actor_id , #3.first_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ last_name , first_name , Count_Star , actor_id ]"
    },
    {
        "id": "ad48daebfd82f8f3b53129a48cc38293f450b835c3c4c0cc4f88161fdec41f25",
        "question": "Return the full name and id of the actor or actress who starred in the greatest number of films.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film_actor ] Output [ actor_id ] ; #2 = Aggregate [ #1 ] GroupBy [ actor_id ] Output [ countstar AS Count_Star , actor_id ] ; #3 = Scan Table [ actor ] Output [ last_name , first_name , actor_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.actor_id = #3.actor_id ] Output [ #3.last_name , #3.actor_id , #3.first_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ last_name , first_name , Count_Star , actor_id ]"
    },
    {
        "id": "ce14b6b14cf46c49842e68cf11978539136d55e8f4f739f0a46ad1a86bc96c1e",
        "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film_actor ] Output [ actor_id ] ; #2 = Aggregate [ #1 ] GroupBy [ actor_id ] Output [ countstar AS Count_Star , actor_id ] ; #3 = Scan Table [ actor ] Output [ last_name , first_name , actor_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.actor_id = #3.actor_id ] Output [ #3.last_name , #3.first_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 30 ] Output [ last_name , first_name ]"
    },
    {
        "id": "e9ab66fc64855e8958e8416a4c2a06c328eedd2288f8051c6a3f4b553b2af56d",
        "question": "What are the full names of actors who had roles in more than 30 films?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film_actor ] Output [ actor_id ] ; #2 = Aggregate [ #1 ] GroupBy [ actor_id ] Output [ countstar AS Count_Star , actor_id ] ; #3 = Scan Table [ actor ] Output [ last_name , first_name , actor_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.actor_id = #3.actor_id ] Output [ #3.last_name , #3.first_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 30 ] Output [ last_name , first_name ]"
    },
    {
        "id": "4420a8d39729978b679bd130ba79745ca2d5742615f96bd9daa6963ac8865f07",
        "question": "Which store owns most items?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ inventory ] Output [ store_id ] ; #2 = Aggregate [ #1 ] GroupBy [ store_id ] Output [ store_id , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ store_id , Count_Star ]"
    },
    {
        "id": "9b43a747c34d3642d308832f783a49b3a802bcb55b782536789e49170e7b7211",
        "question": "What is the id of the store that has the most items in inventory?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ inventory ] Output [ store_id ] ; #2 = Aggregate [ #1 ] GroupBy [ store_id ] Output [ store_id , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ store_id , Count_Star ]"
    },
    {
        "id": "e49982acb55b3c58f6779bd0299772a28561240894d8a1093b7c3d59b4ee351f",
        "question": "What is the total amount of all payments?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ payment ] Output [ amount ] ; #2 = Aggregate [ #1 ] Output [ SUM(amount) AS Sum_amount ]"
    },
    {
        "id": "712e1c9622d5bc74d1f9dfbcbd066e5f5029257bb1c7da7025d293ec526a6bf0",
        "question": "Return the sum of all payment amounts.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ payment ] Output [ amount ] ; #2 = Aggregate [ #1 ] Output [ SUM(amount) AS Sum_amount ]"
    },
    {
        "id": "9e752363f7532bbea739e51c691fe85fc87532cd70f57cd26204b4927edd3c69",
        "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ payment ] Output [ customer_id , amount ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ customer_id , SUM(amount) AS Sum_amount ] ; #3 = Scan Table [ customer ] Output [ last_name , customer_id , first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.Sum_amount , #3.last_name , #3.customer_id , #3.first_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_amount ASC ] Output [ last_name , customer_id , Sum_amount , first_name ]"
    },
    {
        "id": "ec5702ca1e49bd8fd103370d42aa76106b6d52113607f195c61ba220a841cadb",
        "question": "What is the full name and id of the customer who has the lowest total amount of payment?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ payment ] Output [ customer_id , amount ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ customer_id , SUM(amount) AS Sum_amount ] ; #3 = Scan Table [ customer ] Output [ last_name , customer_id , first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.Sum_amount , #3.last_name , #3.customer_id , #3.first_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_amount ASC ] Output [ last_name , customer_id , Sum_amount , first_name ]"
    },
    {
        "id": "37da263c41af22434eec07732f21ba7b7fde225f15c6f9d4a1653c38cf77af40",
        "question": "What is the genre name of the film HUNGER ROOF?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film ] Predicate [ title = 'HUNGER ROOF' ] Output [ film_id , title ] ; #2 = Scan Table [ film_category ] Output [ category_id , film_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.film_id = #2.film_id ] Output [ #2.category_id ] ; #4 = Scan Table [ category ] Output [ name , category_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.category_id = #4.category_id ] Output [ #4.name ]"
    },
    {
        "id": "958fb8aa15a18924964393c78e2f3a5396d9789ba473480a45d7946db16da0b8",
        "question": "Return the name of the category to which the film 'HUNGER ROOF' belongs.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film ] Predicate [ title = 'HUNGER ROOF' ] Output [ film_id , title ] ; #2 = Scan Table [ film_category ] Output [ category_id , film_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.film_id = #2.film_id ] Output [ #2.category_id ] ; #4 = Scan Table [ category ] Output [ name , category_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.category_id = #4.category_id ] Output [ #4.name ]"
    },
    {
        "id": "c4abf98b7e157649aa40d992bcf7561f0ca48544d614bfc68f58cca81d5416da",
        "question": "How many films are there in each category? List the genre name, genre id and the count.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film_category ] Output [ category_id ] ; #2 = Aggregate [ #1 ] GroupBy [ category_id ] Output [ countstar AS Count_Star , category_id ] ; #3 = Scan Table [ category ] Output [ name , category_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.category_id = #3.category_id ] Output [ #3.name , #2.Count_Star , #2.category_id ]"
    },
    {
        "id": "d45e75797f31782e7f607060cb8cb28c2daf406ebb03b00752025b830a0f571d",
        "question": "What are the names and ids of the different categories, and how many films are in each?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film_category ] Output [ category_id ] ; #2 = Aggregate [ #1 ] GroupBy [ category_id ] Output [ countstar AS Count_Star , category_id ] ; #3 = Scan Table [ category ] Output [ name , category_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.category_id = #3.category_id ] Output [ #3.name , #2.Count_Star , #2.category_id ]"
    },
    {
        "id": "3137aad3a227628bbe75ab97182f6725981789e84f27e6314758273bb7bf91bb",
        "question": "How many languages are in these films?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film ] Distinct [ true ] Output [ language_id ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f9028efabf4dcb5c7728ce5c7ad9b5af9250fb1e370d271d632b79604ec20053",
        "question": "Count the number of different languages in these films.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film ] Distinct [ true ] Output [ language_id ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9b1eba58fbb9da2c4c5b2942b594952b6d74498e77f3f16dba67e6a7ab49ba9a",
        "question": "Where is store 1 located?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ store ] Predicate [ store_id = 1 ] Output [ store_id , address_id ] ; #2 = Scan Table [ address ] Output [ address_id , address ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.address ]"
    },
    {
        "id": "e31ef1903a0461f25b0f6cd0f54d019fa57413f31e6399903291ab9d2df15cec",
        "question": "Return the address of store 1.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ store ] Predicate [ store_id = 1 ] Output [ store_id , address_id ] ; #2 = Scan Table [ address ] Output [ address_id , address ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.address ]"
    },
    {
        "id": "f99b59a9de282602db224fd8566c533bfe8324ed7c08dc7b0a59bfbc292226e9",
        "question": "Which staff handled least number of payments? List the full name and the id.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ payment ] Output [ staff_id ] ; #2 = Aggregate [ #1 ] GroupBy [ staff_id ] Output [ countstar AS Count_Star , staff_id ] ; #3 = Scan Table [ staff ] Output [ last_name , first_name , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.staff_id = #3.staff_id ] Output [ #3.first_name , #3.last_name , #3.staff_id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ last_name , first_name , Count_Star , staff_id ]"
    },
    {
        "id": "9b0cc3882329529d17cacff309034c983a5759b37cbb93af1915d5b0c8786f28",
        "question": "Give the full name and staff id of the staff who has handled the fewest payments.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ payment ] Output [ staff_id ] ; #2 = Aggregate [ #1 ] GroupBy [ staff_id ] Output [ countstar AS Count_Star , staff_id ] ; #3 = Scan Table [ staff ] Output [ last_name , first_name , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.staff_id = #3.staff_id ] Output [ #3.first_name , #3.last_name , #3.staff_id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ last_name , first_name , Count_Star , staff_id ]"
    },
    {
        "id": "e7532e76a7f10b2e8b55900424dc6347dc07f904f88f6881eb4076c5cb95e86e",
        "question": "Which language does the film AIRPORT POLLOCK use? List the language name.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film ] Predicate [ title = 'AIRPORT POLLOCK' ] Output [ language_id , title ] ; #2 = Scan Table [ language ] Output [ name , language_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.language_id = #2.language_id ] Output [ #2.name ]"
    },
    {
        "id": "0168492891535878520ef626691093ac22d5a9a998742c0d03363e10157a6ef8",
        "question": "What is the name of the language that the film 'AIRPORT POLLOCK' is in?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film ] Predicate [ title = 'AIRPORT POLLOCK' ] Output [ language_id , title ] ; #2 = Scan Table [ language ] Output [ name , language_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.language_id = #2.language_id ] Output [ #2.name ]"
    },
    {
        "id": "e0613f28612df5f63701b337be302e4274eadc6e9da8d2d3c489509506e18b77",
        "question": "How many stores are there?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ store ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "802cf4dc497f83f2d034a583eacd146b770a39d0f0ff6a375cba44ef3ea5ab51",
        "question": "Count the number of stores.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ store ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "002122be4940682a35caf029c443280a561008c68ad8cc88dee96f358530e969",
        "question": "Which movies have 'Deleted Scenes' as a substring in the special feature?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film ] Output [ special_features , title ] ; #2 = Filter [ #1 ] Predicate [ special_features like '%Deleted Scenes%' ] Output [ title ]"
    },
    {
        "id": "110aceb529c6aaee54b73a9acf1decba305afbced77f0a6b12de89c4ee96f986",
        "question": "Return the titles of films that include 'Deleted Scenes' in their special feature section.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ film ] Output [ special_features , title ] ; #2 = Filter [ #1 ] Predicate [ special_features like '%Deleted Scenes%' ] Output [ title ]"
    },
    {
        "id": "f2201a54736409515ba2880bbc26a331deefa932a63f43775a5e99e8810cc39f",
        "question": "How many items in inventory does store 1 have?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ inventory ] Predicate [ store_id = 1 ] Output [ store_id ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "12b3e8f0c5335a30ba2c592e4020bf3eb3c144e9a5109302b40f50ac202352c7",
        "question": "Count the number of items store 1 has in stock.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ inventory ] Predicate [ store_id = 1 ] Output [ store_id ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "019bd62544a812f9f5a004fc9dfe2c6e76745ab6717dbb2186e70e1167f32677",
        "question": "When did the first payment happen?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ payment ] Output [ payment_date ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ payment_date ASC ] Output [ payment_date ]"
    },
    {
        "id": "317d5fdd50c6a15847a852622dea79b14d149c3874b90432de3c5d31bee768db",
        "question": "What was the date of the earliest payment?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ payment ] Output [ payment_date ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ payment_date ASC ] Output [ payment_date ]"
    },
    {
        "id": "6cf9208a2759f7236bf86a45d7ebe3414ea9a654cca91fbe11bf8e2738057af1",
        "question": "Where does the customer with the first name Linda live? And what is her email?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ customer ] Predicate [ first_name = 'LINDA' ] Output [ address_id , email , first_name ] ; #2 = Scan Table [ address ] Output [ address_id , address ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.address , #1.email ]"
    },
    {
        "id": "4b625eccd7e6251f0ec4873c83ebfb970af251fb95b7d51a71d551226bf8b193",
        "question": "Return the address and email of the customer with the first name Linda.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ customer ] Predicate [ first_name = 'LINDA' ] Output [ address_id , email , first_name ] ; #2 = Scan Table [ address ] Output [ address_id , address ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.address , #1.email ]"
    },
    {
        "id": "a3086a5e3436e8edc6d177db4986f10ed16db287231569ae52c99393bfc5a860",
        "question": "What is the first name and the last name of the customer who made the earliest rental?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ customer ] Output [ last_name , customer_id , first_name ] ; #2 = Scan Table [ rental ] Output [ rental_date , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.rental_date , #1.last_name , #1.first_name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ rental_date ASC ] Output [ last_name , rental_date , first_name ]"
    },
    {
        "id": "9cb0259f6982abd2dca613ce902573fa21a496417e683e65e88fcd2628499b34",
        "question": "Return the full name of the customer who made the first rental.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ customer ] Output [ last_name , customer_id , first_name ] ; #2 = Scan Table [ rental ] Output [ rental_date , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.rental_date , #1.last_name , #1.first_name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ rental_date ASC ] Output [ last_name , rental_date , first_name ]"
    },
    {
        "id": "d50a5e23b1ff912c62ab452b8c931f1686cc17e35ccd41ea738a1e52df8ecc29",
        "question": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ staff ] Output [ last_name , first_name , staff_id ] ; #2 = Scan Table [ customer ] Predicate [ first_name = 'APRIL' AND last_name = 'BURNS' ] Output [ last_name , customer_id , first_name ] ; #3 = Scan Table [ rental ] Output [ customer_id , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.staff_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.staff_id = #4.staff_id ] Distinct [ true ] Output [ #1.last_name , #1.first_name ]"
    },
    {
        "id": "ef5dc79d897c842f09e057135b162ac30ffb8cfbbbb4c6ed105697ba8dfa13d3",
        "question": "Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ staff ] Output [ last_name , first_name , staff_id ] ; #2 = Scan Table [ customer ] Predicate [ first_name = 'APRIL' AND last_name = 'BURNS' ] Output [ last_name , customer_id , first_name ] ; #3 = Scan Table [ rental ] Output [ customer_id , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.staff_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.staff_id = #4.staff_id ] Distinct [ true ] Output [ #1.last_name , #1.first_name ]"
    },
    {
        "id": "2fabc5971befb261123592c26a562db41e1ab9e000158a4a8090b51356bd20e2",
        "question": "Which store has most the customers?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ customer ] Output [ store_id ] ; #2 = Aggregate [ #1 ] GroupBy [ store_id ] Output [ store_id , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ store_id , Count_Star ]"
    },
    {
        "id": "7fcaed0f5ed9313736a3fb2d3627bf2521ab4cbae6dca527f496070e97be41d8",
        "question": "Return the id of the store with the most customers.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ customer ] Output [ store_id ] ; #2 = Aggregate [ #1 ] GroupBy [ store_id ] Output [ store_id , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ store_id , Count_Star ]"
    },
    {
        "id": "8ba6462a8a9c881c116c05e124c792875fef3c1d661a31ebfd1da4783ec8346b",
        "question": "What is the largest payment amount?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ payment ] Output [ amount ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ amount DESC ] Output [ amount ]"
    },
    {
        "id": "173b702d30c8ff7181c7146a6d4aee99ea3956edee09c02ebae601ac074955c8",
        "question": "Return the amount of the largest payment.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ payment ] Output [ amount ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ amount DESC ] Output [ amount ]"
    },
    {
        "id": "da859d33fff89704506f1889640713ada65a77ebdc057b7349067db6b614f7e9",
        "question": "Where does the staff member with the first name Elsa live?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ staff ] Predicate [ first_name = 'Elsa' ] Output [ address_id , first_name ] ; #2 = Scan Table [ address ] Output [ address_id , address ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.address ]"
    },
    {
        "id": "1d9048e2c6ba6efb36d22326fa9126c4408a1f312639746dd2f394a73482142a",
        "question": "Give the address of the staff member who has the first name Elsa.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ staff ] Predicate [ first_name = 'Elsa' ] Output [ address_id , first_name ] ; #2 = Scan Table [ address ] Output [ address_id , address ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.address ]"
    },
    {
        "id": "e22e80bd7d52b1d8f714f2f35a646f7af9f0bd91564b527956e5ad6b9ce66f40",
        "question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ customer ] Output [ customer_id , first_name ] ; #2 = Scan Table [ rental ] Predicate [ rental_date > '2005-08-23 02:06:01.000' ] Output [ rental_date , customer_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.customer_id = #1.customer_id ] Output [ #1.first_name ]"
    },
    {
        "id": "0529ed18ff6b8057471922ffafae0eee4926c2ad925dc98882a5da718c76db83",
        "question": "Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.",
        "parsing_tree": "sakila_1 | #1 = Scan Table [ customer ] Output [ customer_id , first_name ] ; #2 = Scan Table [ rental ] Predicate [ rental_date > '2005-08-23 02:06:01.000' ] Output [ rental_date , customer_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.customer_id = #1.customer_id ] Output [ #1.first_name ]"
    },
    {
        "id": "6f9c8df3f9505531538caf35a69c2b8549a8c8e90f353f94fc69502b78af49e7",
        "question": "How many bank branches are there?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "801f7def077b67a6c08537d16e84f941c2b7ac19ef5300f10ed5cc679bb580db",
        "question": "Count the number of bank branches.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "10319528327431107f46ab2058e5501e9aa219c82b87e1d935ddcc0efa74aea9",
        "question": "How many customers are there?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Output [ no_of_customers ] ; #2 = Aggregate [ #1 ] Output [ SUM(no_of_customers) AS Sum_no_of_customers ]"
    },
    {
        "id": "bafc6da51bc518c15549e71924c988221d0efa8a376fb64e9bcd20334a574108",
        "question": "What is the total number of customers across banks?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Output [ no_of_customers ] ; #2 = Aggregate [ #1 ] Output [ SUM(no_of_customers) AS Sum_no_of_customers ]"
    },
    {
        "id": "bdbba803e871ba38410e1d2e5f23f17c769434b516a21d9835a973e591bfefa2",
        "question": "Find the number of customers in the banks at New York City.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Predicate [ city = 'New York City' ] Output [ no_of_customers , city ] ; #2 = Aggregate [ #1 ] Output [ SUM(no_of_customers) AS Sum_no_of_customers ]"
    },
    {
        "id": "d56bce326dc468a840c53af0af5b5a5078e599f1e051f41e296e54bac2876a51",
        "question": "What is the total number of customers who use banks in New York City?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Predicate [ city = 'New York City' ] Output [ no_of_customers , city ] ; #2 = Aggregate [ #1 ] Output [ SUM(no_of_customers) AS Sum_no_of_customers ]"
    },
    {
        "id": "01c8c959e517623179c455864dcf41573ab18b1d5d3309156e2b06540a37c430",
        "question": "Find the average number of customers in all banks of Utah state.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Predicate [ state = 'Utah' ] Output [ no_of_customers , state ] ; #2 = Aggregate [ #1 ] Output [ AVG(no_of_customers) AS Avg_no_of_customers ]"
    },
    {
        "id": "efa36b182a1799d67a4359e3248391aa6a7ca1aa4ce6914676df1f1a09abcaf6",
        "question": "What is the average number of customers across banks in the state of Utah?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Predicate [ state = 'Utah' ] Output [ no_of_customers , state ] ; #2 = Aggregate [ #1 ] Output [ AVG(no_of_customers) AS Avg_no_of_customers ]"
    },
    {
        "id": "db46a035c27b4884d2e5c0e3bb5b31f25fd099f7dfd729d6dee5679808df5354",
        "question": "Find the average number of customers cross all banks.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Output [ no_of_customers ] ; #2 = Aggregate [ #1 ] Output [ AVG(no_of_customers) AS Avg_no_of_customers ]"
    },
    {
        "id": "7125c341b59cfdce44a8588ec92faca8a72da6b2353fba38ff2d414b100e44ef",
        "question": "What is the average number of bank customers?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Output [ no_of_customers ] ; #2 = Aggregate [ #1 ] Output [ AVG(no_of_customers) AS Avg_no_of_customers ]"
    },
    {
        "id": "9cad82d9f2a2573cb0b3dd395aa61354564dd21e5c4be17b8f0e377ae08f56b2",
        "question": "Find the city and state of the bank branch named morningside.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Predicate [ bname = 'morningside' ] Output [ state , city , bname ]"
    },
    {
        "id": "11bc9b95e80b41c635493852c7019ca6f36354bef2f513a14cefa372a13c3bc8",
        "question": "What city and state is the bank with the name morningside in?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Predicate [ bname = 'morningside' ] Output [ state , city , bname ]"
    },
    {
        "id": "b0ceaebc5648f4600fb7a4f44f4a70445916a908764ab97d140d1b664d0ca304",
        "question": "Find the branch names of banks in the New York state.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Predicate [ state = 'New York' ] Output [ state , bname ]"
    },
    {
        "id": "d94d6e1d02cf2bf8445463b211acd3b3b47dcbcf5dc9ba6b6b9a205595e3d9d8",
        "question": "What are the names of banks in the state of New York?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Predicate [ state = 'New York' ] Output [ state , bname ]"
    },
    {
        "id": "0147a1af2ec5d61706f5028c6382c2ae4f873a02df4a49c0d017727cad7c19f5",
        "question": "List the name of all customers sorted by their account balance in ascending order.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Output [ cust_name , acc_bal ] ; #2 = Sort [ #1 ] OrderBy [ acc_bal ASC ] Output [ cust_name , acc_bal ]"
    },
    {
        "id": "66320ff5007e2e4db9b9d4c0fe3c3b1bd5b6c886db68714cbfc9af36d19b954f",
        "question": "What are the names of all customers, ordered by account balance?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Output [ cust_name , acc_bal ] ; #2 = Sort [ #1 ] OrderBy [ acc_bal ASC ] Output [ cust_name , acc_bal ]"
    },
    {
        "id": "d3ef41a824e75d54d704e56112ec173d8c00f533bdef225c4ea680d41c410440",
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ no_of_loans = 0 ] Output [ acc_type , state , credit_score , no_of_loans ]"
    },
    {
        "id": "f7ccf392675f768ed432b582a18c2d1d13f00d68fadd0e3bbed69e02e35e6885",
        "question": "What are the states, account types, and credit scores for customers who have 0 loans?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ no_of_loans = 0 ] Output [ acc_type , state , credit_score , no_of_loans ]"
    },
    {
        "id": "4f1407f84db51e3070d9cbb1fc7bf4a09c8be7dba8aaf4e54b1197807bd01ef7",
        "question": "Find the number of different cities which banks are located at.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Distinct [ true ] Output [ city ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT city) AS Count_Dist_city ]"
    },
    {
        "id": "3c5dfb8c08c449bd427cbbb4c0b9aa57f50fe870507814b5f7071b50f4e67ffa",
        "question": "In how many different cities are banks located?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Distinct [ true ] Output [ city ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT city) AS Count_Dist_city ]"
    },
    {
        "id": "47473bfcedbe30d8aaf5f9f6be03dd10f837aaa8a9e756aa0f45ef98e5493b15",
        "question": "Find the number of different states which banks are located at.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Distinct [ true ] Output [ state ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT state) AS Count_Dist_state ]"
    },
    {
        "id": "db207ba6dcbbd623e3dabf5b712b661db9af072ea4b7b7173a2b81d3a2d5611b",
        "question": "In how many different states are banks located?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Distinct [ true ] Output [ state ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT state) AS Count_Dist_state ]"
    },
    {
        "id": "43d2ef56d5611e488cb47a36f1ab4b05e0eb8be407af279f1207e288c821b27b",
        "question": "How many distinct types of accounts are there?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Distinct [ true ] Output [ acc_type ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT acc_type) AS Count_Dist_acc_type ]"
    },
    {
        "id": "cf9f6ae64128ab04a792febee13fdb5149ca66e405ccd26a049f261e9c8672da",
        "question": "Count the number of different account types.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Distinct [ true ] Output [ acc_type ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT acc_type) AS Count_Dist_acc_type ]"
    },
    {
        "id": "7de846f5458cffd4ba951f76632f8f78eb47830f9dda12f0ef823e7537241629",
        "question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ cust_name like '%a%' ] Output [ cust_name , acc_bal ]"
    },
    {
        "id": "3ee19e4c89e67f007470e96eb1b88c528ed2e9e05d0258a6f43409fe712497e0",
        "question": "What are the names and account balances of customers with the letter a in their names?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ cust_name like '%a%' ] Output [ cust_name , acc_bal ]"
    },
    {
        "id": "5f2d68d4f976c58ef1bf2363081e1f85b1ff3914f23e12c5f74a8d9aed71114e",
        "question": "Find the total account balance of each customer from Utah or Texas.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ state = 'Texas' OR state = 'Utah' ] Output [ acc_bal , state ] ; #2 = Aggregate [ #1 ] Output [ SUM(acc_bal) AS Sum_acc_bal ]"
    },
    {
        "id": "74979ed1e9a08cd5cbb7ef290774b25ce4d083e18c71f6c67166608cd5f5dbc2",
        "question": "What are the total account balances for each customer from Utah or Texas?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ state = 'Texas' OR state = 'Utah' ] Output [ acc_bal , state ] ; #2 = Aggregate [ #1 ] Output [ SUM(acc_bal) AS Sum_acc_bal ]"
    },
    {
        "id": "f8e1414ada1cef8fdc98fa24c4b555ca34aa9c7678b85a10acdd940f6bce0b9f",
        "question": "Find the name of customers who have both saving and checking account types.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ acc_type = 'saving' ] Distinct [ true ] Output [ cust_name , acc_type ] ; #2 = Scan Table [ customer ] Predicate [ acc_type = 'checking' ] Output [ cust_name , acc_type ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.cust_name = #2.cust_name ] Output [ #1.cust_name ]"
    },
    {
        "id": "df7540fceb9a9e8eb46a01f590105865cc881d02016a99b70b950dde5cf46af3",
        "question": "What are the names of customers who have both savings and checking accounts?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ acc_type = 'saving' ] Distinct [ true ] Output [ cust_name , acc_type ] ; #2 = Scan Table [ customer ] Predicate [ acc_type = 'checking' ] Output [ cust_name , acc_type ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.cust_name = #2.cust_name ] Output [ #1.cust_name ]"
    },
    {
        "id": "34f7bf52114e58e869e545c265f9b66fa499ccc2b52894374c4debc0235acdde",
        "question": "Find the name of customers who do not have an saving account.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Distinct [ true ] Output [ cust_name ] ; #2 = Scan Table [ customer ] Predicate [ acc_type = 'saving' ] Output [ cust_name , acc_type ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.cust_name = #2.cust_name ] Output [ #1.cust_name ]"
    },
    {
        "id": "6e1ad0ba09fbae8ac1b69604b259a16e13204dd531179a9aa88dc7c3cd96c691",
        "question": "What are the names of customers who do not have saving accounts?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Distinct [ true ] Output [ cust_name ] ; #2 = Scan Table [ customer ] Predicate [ acc_type = 'saving' ] Output [ cust_name , acc_type ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.cust_name = #2.cust_name ] Output [ #1.cust_name ]"
    },
    {
        "id": "0040ee53c648d1add0072ff968cf2d681eb53237dfcb7a2bbda83a521c31da9a",
        "question": "Find the name of customers who do not have a loan with a type of Mortgages.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Distinct [ true ] Output [ cust_name ] ; #2 = Scan Table [ loan ] Predicate [ loan_type = 'Mortgages' ] Output [ loan_type , cust_ID ] ; #3 = Scan Table [ customer ] Output [ cust_name , cust_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.cust_ID = #3.cust_ID ] Output [ #3.cust_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.cust_name = #4.cust_name ] Output [ #1.cust_name ]"
    },
    {
        "id": "d437893d322d0562a2d176617260ec3c6f3e754ab55d6b0f1b5118c90b7579e7",
        "question": "What are the names of customers who have not taken a Mortage loan?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Distinct [ true ] Output [ cust_name ] ; #2 = Scan Table [ loan ] Predicate [ loan_type = 'Mortgages' ] Output [ loan_type , cust_ID ] ; #3 = Scan Table [ customer ] Output [ cust_name , cust_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.cust_ID = #3.cust_ID ] Output [ #3.cust_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.cust_name = #4.cust_name ] Output [ #1.cust_name ]"
    },
    {
        "id": "26ddd005bad7978e40f598fddcfce0f21d0d5aec23815ffcbb0355fa16f77780",
        "question": "Find the name of customers who have loans of both Mortgages and Auto.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Predicate [ loan_type = 'Mortgages' ] Output [ loan_type , cust_ID ] ; #2 = Scan Table [ customer ] Output [ cust_name , cust_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Distinct [ true ] Output [ #2.cust_name ] ; #4 = Scan Table [ loan ] Predicate [ loan_type = 'Auto' ] Output [ loan_type , cust_ID ] ; #5 = Scan Table [ customer ] Output [ cust_name , cust_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.cust_ID = #5.cust_ID ] Output [ #5.cust_name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.cust_name = #6.cust_name ] Output [ #3.cust_name ]"
    },
    {
        "id": "0c69e0a1fe6b45c33e8948ca5bb9f6d969e44ed5e926005206b7bb3c83cf49dd",
        "question": "What are the names of customers who have taken both Mortgage and Auto loans?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Predicate [ loan_type = 'Mortgages' ] Output [ loan_type , cust_ID ] ; #2 = Scan Table [ customer ] Output [ cust_name , cust_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Distinct [ true ] Output [ #2.cust_name ] ; #4 = Scan Table [ loan ] Predicate [ loan_type = 'Auto' ] Output [ loan_type , cust_ID ] ; #5 = Scan Table [ customer ] Output [ cust_name , cust_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.cust_ID = #5.cust_ID ] Output [ #5.cust_name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.cust_name = #6.cust_name ] Output [ #3.cust_name ]"
    },
    {
        "id": "f0878cda4d1a70c7013993ebdc5330b5e4cb3611a05f697942da2d98ae30e1eb",
        "question": "Find the name of customers whose credit score is below the average credit scores of all customers.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Output [ credit_score ] ; #2 = Aggregate [ #1 ] Output [ AVG(credit_score) AS Avg_credit_score ] ; #3 = Scan Table [ customer ] Output [ cust_name , credit_score ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.credit_score < #2.Avg_credit_score ] Output [ #3.cust_name ]"
    },
    {
        "id": "0ed2fe662007d0ae861e8638b33a421330719d75055210096d31a1b62c2b0f60",
        "question": "What are the names of customers with credit score less than the average credit score across customers?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Output [ credit_score ] ; #2 = Aggregate [ #1 ] Output [ AVG(credit_score) AS Avg_credit_score ] ; #3 = Scan Table [ customer ] Output [ cust_name , credit_score ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.credit_score < #2.Avg_credit_score ] Output [ #3.cust_name ]"
    },
    {
        "id": "3b7411fbe6d6041a72d067572ed1da213ab9a7e770776475610d45b4275ac922",
        "question": "Find the branch name of the bank that has the most number of customers.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Output [ no_of_customers , bname ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ no_of_customers DESC ] Output [ no_of_customers , bname ]"
    },
    {
        "id": "de17f3ff8a4769eb1cbbd142f9b925625ce90ff282b4e35857026058c79e46ee",
        "question": "What is the name of the bank branch with the greatest number of customers?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Output [ no_of_customers , bname ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ no_of_customers DESC ] Output [ no_of_customers , bname ]"
    },
    {
        "id": "6b9e5c7e6ed7e867b431dbfd5d4b6c266e58a4f37fa56d341102d78d8d9507bd",
        "question": "Find the name of customer who has the lowest credit score.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Output [ cust_name , credit_score ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ credit_score ASC ] Output [ cust_name , credit_score ]"
    },
    {
        "id": "c7c04dd7b1f7a5ddaf68bc08e37e40042a40d6c49ddb8ca1a886fc70452e2a0c",
        "question": "What is the name of the customer with the worst credit score?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Output [ cust_name , credit_score ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ credit_score ASC ] Output [ cust_name , credit_score ]"
    },
    {
        "id": "3ae9d96191cc0ecaaea22997df32cab0cd132173b31c22e151e7fe9b4cbde6d2",
        "question": "Find the name, account type, and account balance of the customer who has the highest credit score.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Output [ cust_name , acc_bal , acc_type , credit_score ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ credit_score DESC ] Output [ cust_name , acc_bal , acc_type , credit_score ]"
    },
    {
        "id": "1db1a8499244f302db221e6f650fb62846dca1e02b1974cd31eaa31122e28f06",
        "question": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Output [ cust_name , acc_bal , acc_type , credit_score ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ credit_score DESC ] Output [ cust_name , acc_bal , acc_type , credit_score ]"
    },
    {
        "id": "43590ed28b57e71a09ec50aa04e073d977b8fe122a58cf91f7d1f4f7d850c769",
        "question": "Find the name of customer who has the highest amount of loans.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Output [ cust_ID , amount ] ; #2 = Scan Table [ customer ] Output [ cust_name , cust_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Output [ #2.cust_name , #1.amount ] ; #4 = Aggregate [ #3 ] GroupBy [ cust_name ] Output [ cust_name , SUM(amount) AS Sum_amount ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_amount DESC ] Output [ cust_name , Sum_amount ]"
    },
    {
        "id": "4ce415ad67314a59deb07732201b7082062657809a716ceedae3dc91e817165e",
        "question": "What is the name of the customer who has greatest total loan amount?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Output [ cust_ID , amount ] ; #2 = Scan Table [ customer ] Output [ cust_name , cust_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Output [ #2.cust_name , #1.amount ] ; #4 = Aggregate [ #3 ] GroupBy [ cust_name ] Output [ cust_name , SUM(amount) AS Sum_amount ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_amount DESC ] Output [ cust_name , Sum_amount ]"
    },
    {
        "id": "b7321f1e7625bb2bfafdf88fec1d8fbb0793018dcd4e7680ec31386ec03604d4",
        "question": "Find the state which has the most number of customers.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Output [ no_of_customers , state ] ; #2 = Aggregate [ #1 ] GroupBy [ state ] Output [ state , SUM(no_of_customers) AS Sum_no_of_customers ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_no_of_customers DESC ] Output [ Sum_no_of_customers , state ]"
    },
    {
        "id": "e962ef2a4e0dd50af42ca8c8059972ce6528c28e2cad3f6ecbd6dfda0442c20a",
        "question": "Which state has the greatest total number of bank customers?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Output [ no_of_customers , state ] ; #2 = Aggregate [ #1 ] GroupBy [ state ] Output [ state , SUM(no_of_customers) AS Sum_no_of_customers ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Sum_no_of_customers DESC ] Output [ Sum_no_of_customers , state ]"
    },
    {
        "id": "27a5c51f1cd3165690f16a51e7d4133303a6668eca75f98bf55ed121ac59b859",
        "question": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ credit_score < 50 ] Output [ acc_type , acc_bal , credit_score ] ; #2 = Aggregate [ #1 ] GroupBy [ acc_type ] Output [ acc_type , AVG(acc_bal) AS Avg_acc_bal ]"
    },
    {
        "id": "3afeeaf1906cc7687bfebcdfa559a64225aa3aec780e42b1d1622d614b119b8c",
        "question": "What is the average account balance of customers with credit score below 50 for the different account types?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ credit_score < 50 ] Output [ acc_type , acc_bal , credit_score ] ; #2 = Aggregate [ #1 ] GroupBy [ acc_type ] Output [ acc_type , AVG(acc_bal) AS Avg_acc_bal ]"
    },
    {
        "id": "7d8df222bdf95e9226e3fc3019a482b167137559f786f77272e5339cf846abfa",
        "question": "For each state, find the total account balance of customers whose credit score is above 100.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ credit_score > 100 ] Output [ acc_bal , state , credit_score ] ; #2 = Aggregate [ #1 ] GroupBy [ state ] Output [ SUM(acc_bal) AS Sum_acc_bal , state ]"
    },
    {
        "id": "f12854ab80ef79dd755225e94d318ae7dc6c8a16cb4ddc5d61ad864eaf3541ca",
        "question": "What is the total account balance for customers with a credit score of above 100 for the different states?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ credit_score > 100 ] Output [ acc_bal , state , credit_score ] ; #2 = Aggregate [ #1 ] GroupBy [ state ] Output [ SUM(acc_bal) AS Sum_acc_bal , state ]"
    },
    {
        "id": "d13b7bfa2ac61f40719c8b1ec0de92be7c3b029669f157a9ce1c88fd6d0a70d3",
        "question": "Find the total amount of loans offered by each bank branch.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Output [ amount , branch_ID ] ; #2 = Scan Table [ bank ] Output [ branch_ID , bname ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.branch_ID = #2.branch_ID ] Output [ #2.bname , #1.amount ] ; #4 = Aggregate [ #3 ] GroupBy [ bname ] Output [ SUM(amount) AS Sum_amount , bname ]"
    },
    {
        "id": "3a2aa9e4cfc66f93b03d9fcee01d124122d11703315d1e7e69f17203306237f6",
        "question": "What are the names of the different bank branches, and what are their total loan amounts?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Output [ amount , branch_ID ] ; #2 = Scan Table [ bank ] Output [ branch_ID , bname ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.branch_ID = #2.branch_ID ] Output [ #2.bname , #1.amount ] ; #4 = Aggregate [ #3 ] GroupBy [ bname ] Output [ SUM(amount) AS Sum_amount , bname ]"
    },
    {
        "id": "244298da34e272b78d4ea37c812dac587165d57809d4c7be91ef2a1f866bb3b6",
        "question": "Find the name of customers who have more than one loan.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Output [ cust_ID ] ; #2 = Scan Table [ customer ] Output [ cust_name , cust_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Output [ #2.cust_name ] ; #4 = Aggregate [ #3 ] GroupBy [ cust_name ] Output [ cust_name , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ cust_name ]"
    },
    {
        "id": "d51524547f64ff7cbe31e05096f8b92d963cefb93fc424842642069a36f5d0fc",
        "question": "What are the names of customers who have taken out more than one loan?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Output [ cust_ID ] ; #2 = Scan Table [ customer ] Output [ cust_name , cust_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Output [ #2.cust_name ] ; #4 = Aggregate [ #3 ] GroupBy [ cust_name ] Output [ cust_name , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ cust_name ]"
    },
    {
        "id": "aa6618b80135a8e397b322b9e8bed6b63218755441471ffc5e117adfa29670a9",
        "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Output [ cust_ID , amount ] ; #2 = Scan Table [ customer ] Output [ cust_name , acc_type , cust_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Output [ #2.cust_name , #2.acc_type , #1.amount ] ; #4 = Aggregate [ #3 ] GroupBy [ acc_type , cust_name ] Output [ cust_name , SUM(amount) AS Sum_amount , acc_type ] ; #5 = Filter [ #4 ] Predicate [ Sum_amount > 5000 ] Output [ cust_name , acc_type ]"
    },
    {
        "id": "7ef1e33ed670949ca86ad94c0c7d65907eed8739384a308f8d4bf19ddc3caf96",
        "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Output [ cust_ID , amount ] ; #2 = Scan Table [ customer ] Output [ cust_name , acc_type , cust_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Output [ #2.cust_name , #2.acc_type , #1.amount ] ; #4 = Aggregate [ #3 ] GroupBy [ acc_type , cust_name ] Output [ cust_name , SUM(amount) AS Sum_amount , acc_type ] ; #5 = Filter [ #4 ] Predicate [ Sum_amount > 5000 ] Output [ cust_name , acc_type ]"
    },
    {
        "id": "592bfca05f63224286c9e70023b7658aa580a61f6e36addb1cb23014dce253bb",
        "question": "Find the name of bank branch that provided the greatest total amount of loans.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Output [ amount , branch_ID ] ; #2 = Scan Table [ bank ] Output [ branch_ID , bname ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.branch_ID = #2.branch_ID ] Output [ #2.bname , #1.amount ] ; #4 = Aggregate [ #3 ] GroupBy [ bname ] Output [ SUM(amount) AS Sum_amount , bname ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_amount DESC ] Output [ Sum_amount , bname ]"
    },
    {
        "id": "5a0008814ff6443d9bd8d5e87d40d9f1b32c6763aa3421cc7920d52e32e6fa42",
        "question": "What is the name of the bank branch that has lent the greatest amount?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Output [ amount , branch_ID ] ; #2 = Scan Table [ bank ] Output [ branch_ID , bname ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.branch_ID = #2.branch_ID ] Output [ #2.bname , #1.amount ] ; #4 = Aggregate [ #3 ] GroupBy [ bname ] Output [ SUM(amount) AS Sum_amount , bname ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_amount DESC ] Output [ Sum_amount , bname ]"
    },
    {
        "id": "bb54c696bac862b008df4e15c8fcbe39c91157b34e808f8118006a86cf08903d",
        "question": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ credit_score < 100 ] Output [ cust_ID , credit_score ] ; #2 = Scan Table [ loan ] Output [ amount , cust_ID , branch_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Output [ #2.amount , #2.branch_ID ] ; #4 = Scan Table [ bank ] Output [ branch_ID , bname ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.branch_ID = #4.branch_ID ] Output [ #3.amount , #4.bname ] ; #6 = Aggregate [ #5 ] GroupBy [ bname ] Output [ SUM(amount) AS Sum_amount , bname ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_amount DESC ] Output [ Sum_amount , bname ]"
    },
    {
        "id": "f9e61140deea3ec1887496168877a3a8479b1235a8033dc24eb7feb710c310f3",
        "question": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ credit_score < 100 ] Output [ cust_ID , credit_score ] ; #2 = Scan Table [ loan ] Output [ amount , cust_ID , branch_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Output [ #2.amount , #2.branch_ID ] ; #4 = Scan Table [ bank ] Output [ branch_ID , bname ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.branch_ID = #4.branch_ID ] Output [ #3.amount , #4.bname ] ; #6 = Aggregate [ #5 ] GroupBy [ bname ] Output [ SUM(amount) AS Sum_amount , bname ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_amount DESC ] Output [ Sum_amount , bname ]"
    },
    {
        "id": "f0806132d7299cad8172ae9132525ab99caa05e040880e51675e7090868f7442",
        "question": "Find the name of bank branches that provided some loans.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Output [ branch_ID ] ; #2 = Scan Table [ bank ] Output [ branch_ID , bname ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.branch_ID = #2.branch_ID ] Distinct [ true ] Output [ #2.bname ]"
    },
    {
        "id": "f6047189e46c451cb55fdb41d78e7d568ac1834b867e0f338cecc8ef3bb51785",
        "question": "What are the names of the different banks that have provided loans?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Output [ branch_ID ] ; #2 = Scan Table [ bank ] Output [ branch_ID , bname ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.branch_ID = #2.branch_ID ] Distinct [ true ] Output [ #2.bname ]"
    },
    {
        "id": "cc29f541902c6965b11c9d062c38efc99372c76a3baea00b6410312c029e56e1",
        "question": "Find the name and credit score of the customers who have some loans.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Output [ cust_ID ] ; #2 = Scan Table [ customer ] Output [ cust_name , cust_ID , credit_score ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Distinct [ true ] Output [ #2.cust_name , #2.credit_score ]"
    },
    {
        "id": "601ed705f38dd5114e1f2ade0470f08c3fed4aa8bec782cba930bee59f43ce72",
        "question": "What are the different names and credit scores of customers who have taken a loan?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Output [ cust_ID ] ; #2 = Scan Table [ customer ] Output [ cust_name , cust_ID , credit_score ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Distinct [ true ] Output [ #2.cust_name , #2.credit_score ]"
    },
    {
        "id": "a4743360fc60ecf4bb74f617b618fa21994f9a60ddb539c0c92e83e4eee4fade",
        "question": "Find the the name of the customers who have a loan with amount more than 3000.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Predicate [ amount > 3000 ] Output [ cust_ID , amount ] ; #2 = Scan Table [ customer ] Output [ cust_name , cust_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Output [ #2.cust_name ]"
    },
    {
        "id": "cf8252b8f4de531988eef489a6d4437b3612e36ffb182e746e2d2540497c8328",
        "question": "What are the names of customers who have a loan of more than 3000 in amount?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Predicate [ amount > 3000 ] Output [ cust_ID , amount ] ; #2 = Scan Table [ customer ] Output [ cust_name , cust_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Output [ #2.cust_name ]"
    },
    {
        "id": "ca845340b5f769676c33544cdafa90597533992e9916a5a5bd38d37de10f2154",
        "question": "Find the city and name of bank branches that provide business loans.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Predicate [ loan_type = 'Business' ] Output [ loan_type , branch_ID ] ; #2 = Scan Table [ bank ] Output [ city , branch_ID , bname ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.branch_ID = #2.branch_ID ] Output [ #2.city , #2.bname ]"
    },
    {
        "id": "0b8efb023b3f6f3f7ab102c9c71a2e2f7b60fb607ac290f33b725e91a794ea11",
        "question": "What are the names and cities of bank branches that offer loans for business?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ loan ] Predicate [ loan_type = 'Business' ] Output [ loan_type , branch_ID ] ; #2 = Scan Table [ bank ] Output [ city , branch_ID , bname ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.branch_ID = #2.branch_ID ] Output [ #2.city , #2.bname ]"
    },
    {
        "id": "f04af3f1ae52f53871fb4c6b0b2491afc1689d2fba68229830571527dfe94f7c",
        "question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ credit_score < 100 ] Output [ cust_ID , credit_score ] ; #2 = Scan Table [ loan ] Output [ cust_ID , branch_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Output [ #2.branch_ID ] ; #4 = Scan Table [ bank ] Output [ branch_ID , bname ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.branch_ID = #4.branch_ID ] Output [ #4.bname ]"
    },
    {
        "id": "a79a222fa1b1b585952e727d872780e97309252aa677d9726ee29875cec48c67",
        "question": "What are the names of banks that have loaned money to customers with credit scores below 100?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Predicate [ credit_score < 100 ] Output [ cust_ID , credit_score ] ; #2 = Scan Table [ loan ] Output [ cust_ID , branch_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cust_ID = #2.cust_ID ] Output [ #2.branch_ID ] ; #4 = Scan Table [ bank ] Output [ branch_ID , bname ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.branch_ID = #4.branch_ID ] Output [ #4.bname ]"
    },
    {
        "id": "1c5831a72a5a8d1cb1ed7494351cced89dcd08d93b22bfb99c20d6d8f3cf1334",
        "question": "Find the total amount of loans provided by bank branches in the state of New York.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Predicate [ state = 'New York' ] Output [ state , branch_ID ] ; #2 = Scan Table [ loan ] Output [ amount , branch_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.branch_ID = #2.branch_ID ] Output [ #2.amount ] ; #4 = Aggregate [ #3 ] Output [ SUM(amount) AS Sum_amount ]"
    },
    {
        "id": "e9ec0d877b32c39a15883ce1a18a43a7ce3e40788069ae8964fa659fa96d7698",
        "question": "What is the total amount of money loaned by banks in New York state?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ bank ] Predicate [ state = 'New York' ] Output [ state , branch_ID ] ; #2 = Scan Table [ loan ] Output [ amount , branch_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.branch_ID = #2.branch_ID ] Output [ #2.amount ] ; #4 = Aggregate [ #3 ] Output [ SUM(amount) AS Sum_amount ]"
    },
    {
        "id": "9995e969184673207d2138d4f437bebf770f13c272dbb1e6aeb2b1027cfae1eb",
        "question": "Find the average credit score of the customers who have some loan.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Output [ cust_ID , credit_score ] ; #2 = Scan Table [ loan ] Output [ cust_ID ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.cust_ID = #1.cust_ID ] Output [ #1.credit_score ] ; #4 = Aggregate [ #3 ] Output [ AVG(credit_score) AS Avg_credit_score ]"
    },
    {
        "id": "d0d9a8898baf32f1722a851683542a92a51a1a48809dc246403f621b7753d0fc",
        "question": "What is the average credit score for customers who have taken a loan?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Output [ cust_ID , credit_score ] ; #2 = Scan Table [ loan ] Output [ cust_ID ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.cust_ID = #1.cust_ID ] Output [ #1.credit_score ] ; #4 = Aggregate [ #3 ] Output [ AVG(credit_score) AS Avg_credit_score ]"
    },
    {
        "id": "a21103d546fc6786c4d161df5605dc46189f4e7dddc30ef57e88489020003c34",
        "question": "Find the average credit score of the customers who do not have any loan.",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Output [ cust_ID , credit_score ] ; #2 = Scan Table [ loan ] Output [ cust_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.cust_ID IS NULL OR #1.cust_ID = #2.cust_ID ] Output [ #1.credit_score ] ; #4 = Aggregate [ #3 ] Output [ AVG(credit_score) AS Avg_credit_score ]"
    },
    {
        "id": "66de135b45265aa5789385e520278ece33528c42c3f0b814e47d26c6a199592e",
        "question": "What is the average credit score for customers who have never taken a loan?",
        "parsing_tree": "loan_1 | #1 = Scan Table [ customer ] Output [ cust_ID , credit_score ] ; #2 = Scan Table [ loan ] Output [ cust_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.cust_ID IS NULL OR #1.cust_ID = #2.cust_ID ] Output [ #1.credit_score ] ; #4 = Aggregate [ #3 ] Output [ AVG(credit_score) AS Avg_credit_score ]"
    },
    {
        "id": "e5b66614a3cc20366dcd3f6f0100e0fec0689dfebb98433c1933e6359134dd81",
        "question": "How many assessment notes are there in total?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Assessment_Notes ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0da11d4f78e78b5359a93e2143702e24a009cfe979230f378395efc649d779a5",
        "question": "What are the dates of the assessment notes?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Assessment_Notes ] Output [ date_of_notes ]"
    },
    {
        "id": "0c93df27935975d8bb32dc87147cf6375eb3b00ebd27429f11eb01360ed9b39a",
        "question": "How many addresses have zip code 197?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Addresses ] Predicate [ zip_postcode = '197' ] Output [ zip_postcode ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "525f4c17a6082b45e5d9697601457493697dcece3402e80b723aba4d7b7875dd",
        "question": "How many distinct incident type codes are there?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Behavior_Incident ] Distinct [ true ] Output [ incident_type_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "14d36a688d47d401cbbdee0767ebba8387253e4b820f929ed775005c25c85055",
        "question": "Return all distinct detention type codes.",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Detention ] Distinct [ true ] Output [ detention_type_code ]"
    },
    {
        "id": "fe50fa784ea639bd1058d5b26691ee41a223daa24c435a24a5f7ea3afa6793e6",
        "question": "What are the start and end dates for incidents with incident type code \"NOISE\"?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Behavior_Incident ] Predicate [ incident_type_code = 'NOISE' ] Output [ date_incident_start , incident_type_code , date_incident_end ]"
    },
    {
        "id": "2ef1906e9f26aedba9595d10e2b0961f6d9721441a52175ad0d349f69aefe985",
        "question": "Return all detention summaries.",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Detention ] Output [ detention_summary ]"
    },
    {
        "id": "499e17226ecd7aa9fc4d109d5fe87d7f35a5b57d67dbe57818a10004092e396b",
        "question": "Return the cell phone number and email address for all students.",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Students ] Output [ email_address , cell_mobile_number ]"
    },
    {
        "id": "e1a829c80a1a07e891b606d49feff6f90552b598841c3f541e3e223822d0b8b5",
        "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Students ] Predicate [ first_name = 'Emma' AND last_name = 'Rohan' ] Output [ last_name , email_address , first_name ]"
    },
    {
        "id": "c95d4d82b073d878e7f289dac2e397fe2ce0e7d210eafee3e9abdc4dde98c593",
        "question": "How many distinct students have been in detention?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Students_in_Detention ] Distinct [ true ] Output [ student_id ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d8e33e7621fb72ce4a2619d65d833f9e8de2a6d932968f9791fefad9bf62cafe",
        "question": "What is the gender of the teacher with last name \"Medhurst\"?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Teachers ] Predicate [ last_name = 'Medhurst' ] Output [ last_name , gender ]"
    },
    {
        "id": "617f79d3d0e0ad9ef59b1f16d2a0634212536b575c99982083005d86e54ba30a",
        "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Ref_Incident_Type ] Predicate [ incident_type_code = 'VIOLENCE' ] Output [ incident_type_code , incident_type_description ]"
    },
    {
        "id": "1db01d24af8581c3afeb1a172a78693481c3156cdf0f560ea1129a4b57c536aa",
        "question": "Find the maximum and minimum monthly rental for all student addresses.",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Student_Addresses ] Output [ monthly_rental ] ; #2 = Aggregate [ #1 ] Output [ MIN(monthly_rental) AS Min_monthly_rental , MAX(monthly_rental) AS Max_monthly_rental ]"
    },
    {
        "id": "3a54c1c1e5f562a966029a7d277b1b27c63fbd2d33cf4fc7c281cf83dedf23dc",
        "question": "Find the first names of teachers whose email address contains the word \"man\".",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Teachers ] Predicate [ email_address like '%man%' ] Output [ email_address , first_name ]"
    },
    {
        "id": "e91fb9a18b768223c373a6f89daa7feb97a4375257defdffe01429e7702acc48",
        "question": "List all information about the assessment notes sorted by date in ascending order.",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Assessment_Notes ] Output [ other_details , notes_id , teacher_id , date_of_notes , student_id , text_of_notes ] ; #2 = Sort [ #1 ] OrderBy [ date_of_notes ASC ] Output [ other_details , notes_id , teacher_id , date_of_notes , student_id , text_of_notes ]"
    },
    {
        "id": "a2fda4e533c18a14b3062e95d5bdb06fb6b6959162b2ec884055905859d53776",
        "question": "List all cities of addresses in alphabetical order.",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Addresses ] Output [ city ] ; #2 = Sort [ #1 ] OrderBy [ city ASC ] Output [ city ]"
    },
    {
        "id": "1b802230a4490881e93c95337fba855b817d464463eb173c1567b17c8c3fa588",
        "question": "Find the first names and last names of teachers in alphabetical order of last name.",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Teachers ] Output [ last_name , first_name ] ; #2 = Sort [ #1 ] OrderBy [ last_name ASC ] Output [ last_name , first_name ]"
    },
    {
        "id": "69fb68652bbfe64fede0e8a90d49cb82f7768a969f5875768a13b52658c70e9d",
        "question": "Find all information about student addresses, and sort by monthly rental in descending order.",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Student_Addresses ] Output [ monthly_rental , other_details , date_address_from , address_id , student_id , date_address_to ] ; #2 = Sort [ #1 ] OrderBy [ monthly_rental DESC ] Output [ monthly_rental , other_details , date_address_from , address_id , student_id , date_address_to ]"
    },
    {
        "id": "ff05bca718cec7ca7b3e510e7c7230644af2629a493da787900e53d5409354fd",
        "question": "Find the id and first name of the student that has the most number of assessment notes?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Assessment_Notes ] Output [ student_id ] ; #2 = Aggregate [ #1 ] GroupBy [ student_id ] Output [ student_id , countstar AS Count_Star ] ; #3 = Scan Table [ Students ] Output [ student_id , first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.student_id = #3.student_id ] Output [ #2.Count_Star , #3.first_name , #2.student_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ student_id , Count_Star , first_name ]"
    },
    {
        "id": "1a18706722960a79882456d4603821fe1ed60ca3f78083cd243e4aa511db51f2",
        "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Assessment_Notes ] Output [ teacher_id ] ; #2 = Aggregate [ #1 ] GroupBy [ teacher_id ] Output [ countstar AS Count_Star , teacher_id ] ; #3 = Scan Table [ Teachers ] Output [ teacher_id , first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.teacher_id = #3.teacher_id ] Output [ #3.first_name , #2.teacher_id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , teacher_id , first_name ]"
    },
    {
        "id": "328a796cd1bf7904d54b7a64b36724a840833267189c10c9049039083b164994",
        "question": "Find the id and last name of the student that has the most behavior incidents?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Behavior_Incident ] Output [ student_id ] ; #2 = Aggregate [ #1 ] GroupBy [ student_id ] Output [ student_id , countstar AS Count_Star ] ; #3 = Scan Table [ Students ] Output [ student_id , last_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.student_id = #3.student_id ] Output [ #2.Count_Star , #3.last_name , #2.student_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ student_id , Count_Star , last_name ]"
    },
    {
        "id": "29a676f9b403409e6481e192fb0ef4b6af9c1f44bbb3ca8abc86d63ceb9032b9",
        "question": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Detention ] Predicate [ detention_type_code = 'AFTER' ] Output [ teacher_id , detention_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ teacher_id ] Output [ countstar AS Count_Star , teacher_id ] ; #3 = Scan Table [ Teachers ] Output [ last_name , teacher_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.teacher_id = #3.teacher_id ] Output [ #3.last_name , #2.teacher_id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ last_name , Count_Star , teacher_id ]"
    },
    {
        "id": "14e605c7850c794b96bd685806c13a8eb2642777d93614398c243fa623d0f5c3",
        "question": "What are the id and first name of the student whose addresses have the highest average monthly rental?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Student_Addresses ] Output [ student_id , monthly_rental ] ; #2 = Aggregate [ #1 ] GroupBy [ student_id ] Output [ student_id , AVG(monthly_rental) AS Avg_monthly_rental ] ; #3 = Scan Table [ Students ] Output [ student_id , first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.student_id = #3.student_id ] Output [ #2.Avg_monthly_rental , #3.first_name , #2.student_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_monthly_rental DESC ] Output [ student_id , Avg_monthly_rental , first_name ]"
    },
    {
        "id": "74faa186a25bbf9c411f05c96ec946db53f9f0b8a24fcc1f90f30a069d4610d2",
        "question": "Find the id and city of the student address with the highest average monthly rental.",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Student_Addresses ] Output [ monthly_rental , address_id ] ; #2 = Aggregate [ #1 ] GroupBy [ address_id ] Output [ address_id , AVG(monthly_rental) AS Avg_monthly_rental ] ; #3 = Scan Table [ Addresses ] Output [ address_id , city ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.address_id = #3.address_id ] Output [ #2.address_id , #3.city , #2.Avg_monthly_rental ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_monthly_rental DESC ] Output [ address_id , city , Avg_monthly_rental ]"
    },
    {
        "id": "a7a69c04553b6aac34d5720aa0e95924e3ada646126a1489db0ffd45388b9de8",
        "question": "What are the code and description of the most frequent behavior incident type?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Behavior_Incident ] Output [ incident_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ incident_type_code ] Output [ countstar AS Count_Star , incident_type_code ] ; #3 = Scan Table [ Ref_Incident_Type ] Output [ incident_type_description , incident_type_code ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.incident_type_code = #3.incident_type_code ] Output [ #2.Count_Star , #3.incident_type_description , #2.incident_type_code ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , incident_type_description , incident_type_code ]"
    },
    {
        "id": "bbe10f4a8c45fb5cd855513fd888ed61040b1c293b460e3ed42aeee936f1d17f",
        "question": "What are the code and description of the least frequent detention type ?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Detention ] Output [ detention_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ detention_type_code ] Output [ countstar AS Count_Star , detention_type_code ] ; #3 = Scan Table [ Ref_Detention_Type ] Output [ detention_type_description , detention_type_code ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.detention_type_code = #3.detention_type_code ] Output [ #3.detention_type_description , #2.Count_Star , #2.detention_type_code ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ detention_type_description , Count_Star , detention_type_code ]"
    },
    {
        "id": "df7082918a79e7a6bab6e4f78e0cd007ed3e6c885f4ef55a646738d7d140d8f5",
        "question": "Find the dates of assessment notes for students with first name \"Fanny\".",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Students ] Predicate [ first_name = 'Fanny' ] Output [ student_id , first_name ] ; #2 = Scan Table [ Assessment_Notes ] Output [ student_id , date_of_notes ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.student_id ] Output [ #2.date_of_notes ]"
    },
    {
        "id": "d2b37424b3e57aecc3eef62f8edb1a9c7307df5097ab916e88e332d14901df6e",
        "question": "Find the texts of assessment notes for teachers with last name \"Schuster\".",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Teachers ] Predicate [ last_name = 'Schuster' ] Output [ last_name , teacher_id ] ; #2 = Scan Table [ Assessment_Notes ] Output [ teacher_id , text_of_notes ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.teacher_id = #2.teacher_id ] Output [ #2.text_of_notes ]"
    },
    {
        "id": "9e7ed7e08302426c4f6ad44ae0e2e9eaf12dd96d2e3ba42c6b33166afde77163",
        "question": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Students ] Predicate [ last_name = 'Fahey' ] Output [ student_id , last_name ] ; #2 = Scan Table [ Behavior_Incident ] Output [ student_id , date_incident_start , date_incident_end ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.student_id ] Output [ #2.date_incident_end , #2.date_incident_start ]"
    },
    {
        "id": "486c785dc3fd07218306dc65d734dfd745f1b4b4f6814b2262c234ed0cd29ab6",
        "question": "Find the start and end dates of detentions of teachers with last name \"Schultz\".",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Teachers ] Predicate [ last_name = 'Schultz' ] Output [ last_name , teacher_id ] ; #2 = Scan Table [ Detention ] Output [ datetime_detention_end , teacher_id , datetime_detention_start ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.teacher_id = #2.teacher_id ] Output [ #2.datetime_detention_start , #2.datetime_detention_end ]"
    },
    {
        "id": "d991cec860374a9224773f168cf1d241d41b2d9af04983d90d25cde175f30ce4",
        "question": "What are the id and zip code of the address with the highest monthly rental?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Student_Addresses ] Output [ monthly_rental , address_id ] ; #2 = Scan Table [ Addresses ] Output [ address_id , zip_postcode ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #1.address_id , #1.monthly_rental , #2.zip_postcode ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ monthly_rental DESC ] Output [ monthly_rental , address_id , zip_postcode ]"
    },
    {
        "id": "0b6ca14eca1f466ec8da1d68d80a775f8f4acfa80600b71d29e99aac866fb9f9",
        "question": "What is the cell phone number of the student whose address has the lowest monthly rental?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Students ] Output [ student_id , cell_mobile_number ] ; #2 = Scan Table [ Student_Addresses ] Output [ student_id , monthly_rental ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.student_id ] Output [ #1.cell_mobile_number , #2.monthly_rental ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ monthly_rental ASC ] Output [ monthly_rental , cell_mobile_number ]"
    },
    {
        "id": "52383a1079e018002d4a84adadf7bc6a911115c9cdaf49ebd31ee4d8d0dea17b",
        "question": "What are the monthly rentals of student addresses in Texas state?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Addresses ] Predicate [ state_province_county = 'Texas' ] Output [ address_id , state_province_county ] ; #2 = Scan Table [ Student_Addresses ] Output [ monthly_rental , address_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.monthly_rental ]"
    },
    {
        "id": "4c122b0a39b9bf31b69a52c320c66dc0f819008daca17e8725d2d3b9d844cec7",
        "question": "What are the first names and last names of students with address in Wisconsin state?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Addresses ] Predicate [ state_province_county = 'Wisconsin' ] Output [ address_id , state_province_county ] ; #2 = Scan Table [ Students ] Output [ last_name , address_id , first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.first_name , #2.last_name ]"
    },
    {
        "id": "bb26e10d8e64887a849a819ce0d78002fbf857cc6b022776cf9c8d708c7de751",
        "question": "What are the line 1 and average monthly rentals of all student addresses?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Student_Addresses ] Output [ monthly_rental , address_id ] ; #2 = Aggregate [ #1 ] GroupBy [ address_id ] Output [ address_id , AVG(monthly_rental) AS Avg_monthly_rental ] ; #3 = Scan Table [ Addresses ] Output [ address_id , line_1 ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.address_id = #3.address_id ] Output [ #3.line_1 , #2.Avg_monthly_rental ]"
    },
    {
        "id": "acb709858919a89a1996e58e20e8399ad2b2e1253d9d652770a7069b2705f94a",
        "question": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Teachers ] Predicate [ first_name = 'Lyla' ] Output [ address_id , first_name ] ; #2 = Scan Table [ Addresses ] Output [ address_id , zip_postcode ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.zip_postcode ]"
    },
    {
        "id": "abde34444b116ae18e332d7811e35b38fb902c0d5e0d0d99b2e82ac83d1c1f1a",
        "question": "What are the email addresses of teachers whose address has zip code \"918\"?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Addresses ] Predicate [ zip_postcode = '918' ] Output [ address_id , zip_postcode ] ; #2 = Scan Table [ Teachers ] Output [ email_address , address_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.email_address ]"
    },
    {
        "id": "b48e2da0e7619e4217c55610158f80064ea6c81ea021b28bdcc626f417acaefd",
        "question": "How many students are not involved in any behavior incident?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Students ] Output [ student_id ] ; #2 = Scan Table [ Behavior_Incident ] Output [ student_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.student_id = #2.student_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "05030fcb2e26a4b22b28b229d1ea310fe0f06ffe6b6fa3f84780564d68e49e39",
        "question": "Find the last names of teachers who are not involved in any detention.",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Teachers ] Distinct [ true ] Output [ last_name ] ; #2 = Scan Table [ Detention ] Output [ teacher_id ] ; #3 = Scan Table [ Teachers ] Output [ last_name , teacher_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.teacher_id = #3.teacher_id ] Output [ #3.last_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.last_name = #4.last_name ] Output [ #1.last_name ]"
    },
    {
        "id": "de1dd1af258650ff38305cd51b7fa364fb9904dde49822ccde817538bd911563",
        "question": "What are the line 1 of addresses shared by some students and some teachers?",
        "parsing_tree": "behavior_monitoring | #1 = Scan Table [ Students ] Output [ address_id ] ; #2 = Scan Table [ Addresses ] Output [ address_id , line_1 ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Distinct [ true ] Output [ #2.line_1 ] ; #4 = Scan Table [ Teachers ] Output [ address_id ] ; #5 = Scan Table [ Addresses ] Output [ address_id , line_1 ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.address_id = #5.address_id ] Output [ #5.line_1 ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.line_1 = #6.line_1 ] Output [ #3.line_1 ]"
    },
    {
        "id": "e7fa49f48a55a6740d820f492068aa57459e259a43736e37fae64d5f0bd93201",
        "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Asset_Parts ] Output [ asset_id ] ; #2 = Aggregate [ #1 ] GroupBy [ asset_id ] Output [ countstar AS Count_Star , asset_id ] ; #3 = Scan Table [ Assets ] Output [ asset_id , asset_details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.asset_id = #3.asset_id ] Output [ #3.asset_details , #3.asset_id , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star = 2 ] Output [ asset_id , asset_details ] ; #6 = Scan Table [ Fault_Log ] Output [ asset_id ] ; #7 = Aggregate [ #6 ] GroupBy [ asset_id ] Output [ countstar AS Count_Star , asset_id ] ; #8 = Scan Table [ Assets ] Output [ asset_id , asset_details ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.asset_id = #8.asset_id ] Output [ #8.asset_id , #7.Count_Star , #8.asset_details ] ; #10 = Filter [ #9 ] Predicate [ Count_Star < 2 ] Output [ asset_id , asset_details ] ; #11 = Join [ #5 , #10 ] Predicate [ #5.asset_id = #10.asset_id ] Output [ #5.asset_details , #5.asset_id ]"
    },
    {
        "id": "636e71a0d998b8b125787a7c2307b15f0027a2591c6cef21da4e2c9fc9d412a5",
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Assets ] Output [ maintenance_contract_id ] ; #2 = Aggregate [ #1 ] GroupBy [ maintenance_contract_id ] Output [ countstar AS Count_Star , maintenance_contract_id ] ; #3 = Scan Table [ Maintenance_Contracts ] Output [ maintenance_contract_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.maintenance_contract_id = #3.maintenance_contract_id ] Output [ #3.maintenance_contract_id , #2.Count_Star ]"
    },
    {
        "id": "0aa19e1f7d4f7e0c7d90ea3e2d759f94c689b2856e4f7b8a6537f6eb27bdfb7c",
        "question": "How many assets does each third party company supply? List the count and the company id.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Assets ] Output [ supplier_company_id ] ; #2 = Aggregate [ #1 ] GroupBy [ supplier_company_id ] Output [ supplier_company_id , countstar AS Count_Star ] ; #3 = Scan Table [ Third_Party_Companies ] Output [ company_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.supplier_company_id = #3.company_id ] Output [ #3.company_id , #2.Count_Star ]"
    },
    {
        "id": "f53b0758b776d238357acb4d341bf94dea14f2aaf17c73957703ba5b1b7a46d7",
        "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Maintenance_Engineers ] Output [ company_id ] ; #2 = Scan Table [ Third_Party_Companies ] Output [ company_id , company_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.company_id = #2.company_id ] Output [ #2.company_name , #2.company_id ] ; #4 = Aggregate [ #3 ] GroupBy [ company_id ] Output [ company_id , countstar AS Count_Star , company_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ company_id , company_name ] ; #6 = Scan Table [ Maintenance_Contracts ] Output [ maintenance_contract_company_id ] ; #7 = Scan Table [ Third_Party_Companies ] Output [ company_id , company_name ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.maintenance_contract_company_id = #7.company_id ] Output [ #7.company_name , #7.company_id ] ; #9 = Aggregate [ #8 ] GroupBy [ company_id ] Output [ company_id , countstar AS Count_Star , company_name ] ; #10 = Filter [ #9 ] Predicate [ Count_Star >= 2 ] Output [ company_id , company_name ] ; #11 = Union [ #5 , #10 ] Output [ #5.company_id , #5.company_name ]"
    },
    {
        "id": "52b59ea09446f3194fb06236c40167569cbcce2988406069f2acaee2b2448ee5",
        "question": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Staff ] Output [ staff_name , staff_id ] ; #2 = Scan Table [ Fault_Log ] Output [ recorded_by_staff_id ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.recorded_by_staff_id = #1.staff_id ] Output [ #1.staff_name , #1.staff_id ] ; #4 = Scan Table [ Staff ] Output [ staff_name , staff_id ] ; #5 = Scan Table [ Engineer_Visits ] Output [ contact_staff_id ] ; #6 = Intersect [ #4 , #5 ] Predicate [ #5.contact_staff_id = #4.staff_id ] Output [ #4.staff_id , #4.staff_name ] ; #7 = Except [ #3 , #6 ] Predicate [ #3.staff_name = #6.staff_name ] Output [ #3.staff_name , #3.staff_id ]"
    },
    {
        "id": "5ca584213e7b09403a55f54bcff5e7da456218d6f1bb51a14085cfdaa193dea9",
        "question": "Which parts have more than 2 faults? Show the part name and id.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Part_Faults ] Output [ part_id ] ; #2 = Aggregate [ #1 ] GroupBy [ part_id ] Output [ countstar AS Count_Star , part_id ] ; #3 = Scan Table [ Parts ] Output [ part_id , part_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.part_id = #3.part_id ] Output [ #2.Count_Star , #3.part_name , #3.part_id ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ part_id , part_name ]"
    },
    {
        "id": "79f09580f922aeaacd1d1de4e4097c3e4457d0167bfbeaa91902b60efacc155d",
        "question": "List all every engineer's first name, last name, details and coresponding skill description.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Maintenance_Engineers ] Output [ last_name , engineer_id , other_details , first_name ] ; #2 = Scan Table [ Skills ] Output [ skill_description , skill_id ] ; #3 = Scan Table [ Engineer_Skills ] Output [ skill_id , engineer_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.skill_id = #3.skill_id ] Output [ #2.skill_description , #3.engineer_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.engineer_id = #4.engineer_id ] Output [ #1.other_details , #4.skill_description , #1.last_name , #1.first_name ]"
    },
    {
        "id": "6dfbcc27aab04e12cd325f8d123abc59dd9f2158a1941fbbb654a8cc0279c9d6",
        "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Skills ] Output [ skill_description , skill_id ] ; #2 = Scan Table [ Skills_Required_To_Fix ] Output [ part_fault_id , skill_id ] ; #3 = Scan Table [ Part_Faults ] Output [ part_fault_id , fault_short_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.part_fault_id = #3.part_fault_id ] Output [ #3.fault_short_name , #2.skill_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.skill_id = #4.skill_id ] Output [ #4.fault_short_name , #1.skill_description ]"
    },
    {
        "id": "f954c9600595e2df114b497432722143eb45bdc57411dc43cb3b29e790edfa07",
        "question": "How many assets can each parts be used in? List the part name and the number.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Parts ] Output [ part_id , part_name ] ; #2 = Scan Table [ Asset_Parts ] Output [ part_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.part_id = #2.part_id ] Output [ #1.part_name ] ; #4 = Aggregate [ #3 ] GroupBy [ part_name ] Output [ countstar AS Count_Star , part_name ]"
    },
    {
        "id": "35e010aa7659a168932aba6910f80eed4ff3300d7785d6386d35be7e221223d6",
        "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Fault_Log_Parts ] Output [ fault_log_entry_id , fault_status ] ; #2 = Scan Table [ Fault_Log ] Output [ fault_log_entry_id , fault_description ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.fault_log_entry_id = #2.fault_log_entry_id ] Output [ #2.fault_description , #1.fault_status ]"
    },
    {
        "id": "a0517d7f5b095f531a6d2d7f7e3f52dfdeb7cf0b1e7e04257590f8aee6848bf4",
        "question": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Engineer_Visits ] Output [ fault_log_entry_id ] ; #2 = Aggregate [ #1 ] GroupBy [ fault_log_entry_id ] Output [ countstar AS Count_Star , fault_log_entry_id ] ; #3 = Scan Table [ Fault_Log ] Output [ fault_log_entry_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.fault_log_entry_id = #3.fault_log_entry_id ] Output [ #3.fault_log_entry_id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , fault_log_entry_id ]"
    },
    {
        "id": "dcd26da8d738856f7a8d2379c1f804d31601ecb1f645b5c1ca287ba2f5c7d512",
        "question": "What are all the distinct last names of all the engineers?",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Maintenance_Engineers ] Distinct [ true ] Output [ last_name ]"
    },
    {
        "id": "3af71556195fb33b213baf3d83d1922ef5daf96caa2a080f458f4f08919ff2cd",
        "question": "How many fault status codes are recorded in the fault log parts table?",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Fault_Log_Parts ] Distinct [ true ] Output [ fault_status ]"
    },
    {
        "id": "4272c500b7dc1e08de8b3290aaf373151dc17a1db3b9e5b7c572640fa31c3d50",
        "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Maintenance_Engineers ] Output [ last_name , engineer_id , first_name ] ; #2 = Scan Table [ Engineer_Visits ] Output [ engineer_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.engineer_id = #1.engineer_id ] Output [ #1.last_name , #1.first_name ]"
    },
    {
        "id": "99f65562465e63c66e0d01b2836f738be7bc6dd5c049c3a3bb6e5239fb63958a",
        "question": "List the asset id, details, make and model for every asset.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Assets ] Output [ asset_model , asset_id , asset_make , asset_details ]"
    },
    {
        "id": "6ecd71296e88c064176b9a1b8d0f36a0182375c9cd03fb748cc398b231344536",
        "question": "When was the first asset acquired?",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Assets ] Output [ asset_acquired_date ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ asset_acquired_date ASC ] Output [ asset_acquired_date ]"
    },
    {
        "id": "eb3b6a16a5f50ad24bf3aaae111241d7e6ab36f2e2ca8d13754c50faff46297c",
        "question": "Which part fault requires the most number of skills to fix? List part id and name.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Skills_Required_To_Fix ] Output [ part_fault_id ] ; #2 = Scan Table [ Parts ] Output [ part_id , part_name ] ; #3 = Scan Table [ Part_Faults ] Output [ part_id , part_fault_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.part_id = #3.part_id ] Output [ #3.part_fault_id , #2.part_id , #2.part_name ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.part_fault_id = #4.part_fault_id ] Output [ #4.part_id , #4.part_name ] ; #6 = Aggregate [ #5 ] GroupBy [ part_id ] Output [ countstar AS Count_Star , part_id , part_name ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ part_id , Count_Star , part_name ]"
    },
    {
        "id": "0553fc2d764d47ed41c28e6ff3a9ff577b4bdefe79f36948b906c159fbcbf595",
        "question": "Which kind of part has the least number of faults? List the part name.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Parts ] Output [ part_id , part_name ] ; #2 = Scan Table [ Part_Faults ] Output [ part_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.part_id = #2.part_id ] Output [ #1.part_name ] ; #4 = Aggregate [ #3 ] GroupBy [ part_name ] Output [ countstar AS Count_Star , part_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , part_name ]"
    },
    {
        "id": "1de22bf75483098a95dc184f66c43c03a0e15f1e062faf5c8cecfb2f22dc91bc",
        "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Engineer_Visits ] Output [ engineer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ engineer_id ] Output [ countstar AS Count_Star , engineer_id ] ; #3 = Scan Table [ Maintenance_Engineers ] Output [ last_name , engineer_id , first_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.engineer_id = #3.engineer_id ] Output [ #2.Count_Star , #3.last_name , #3.first_name , #3.engineer_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ last_name , Count_Star , engineer_id , first_name ]"
    },
    {
        "id": "09630050d88dbb813d39b959a627058be50fa4664ba5f424b5802c4a5e0328e3",
        "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Maintenance_Engineers ] Output [ last_name , engineer_id , first_name ] ; #2 = Scan Table [ Engineer_Visits ] Output [ engineer_id , contact_staff_id ] ; #3 = Scan Table [ Staff ] Output [ staff_name , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.contact_staff_id = #3.staff_id ] Output [ #3.staff_name , #2.engineer_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.engineer_id = #4.engineer_id ] Output [ #4.staff_name , #1.last_name , #1.first_name ]"
    },
    {
        "id": "918dc82ce8a660d10a512795158bc6486e1a22dbda8d6feafbb9ed75dda76f04",
        "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Fault_Log_Parts ] Output [ fault_log_entry_id ] ; #2 = Aggregate [ #1 ] GroupBy [ fault_log_entry_id ] Output [ countstar AS Count_Star , fault_log_entry_id ] ; #3 = Scan Table [ Fault_Log ] Output [ fault_log_entry_id , fault_log_entry_datetime , fault_description ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.fault_log_entry_id = #3.fault_log_entry_id ] Output [ #3.fault_log_entry_id , #2.Count_Star , #3.fault_description , #3.fault_log_entry_datetime ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , fault_log_entry_id , fault_log_entry_datetime , fault_description ]"
    },
    {
        "id": "33186ca8c7bd4ad2f260420efbf5e5d68804a574d9838d1335f01c582d710669",
        "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Skills_Required_To_Fix ] Output [ skill_id ] ; #2 = Aggregate [ #1 ] GroupBy [ skill_id ] Output [ countstar AS Count_Star , skill_id ] ; #3 = Scan Table [ Skills ] Output [ skill_description , skill_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.skill_id = #3.skill_id ] Output [ #3.skill_description , #2.Count_Star , #3.skill_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ skill_description , Count_Star , skill_id ]"
    },
    {
        "id": "69a25b44de08bb6dd6c82e76e5c189eb874c086df2306847a8b51a83c5d2ae6f",
        "question": "What are all the distinct asset models?",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Assets ] Distinct [ true ] Output [ asset_model ]"
    },
    {
        "id": "83c01c3f594e1c066d24736479ef545aa2a38b246ee7fd4c707ce63761aff84b",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Assets ] Output [ asset_model , asset_make , asset_details , asset_disposed_date ] ; #2 = Sort [ #1 ] OrderBy [ asset_disposed_date ASC ] Output [ asset_model , asset_make , asset_details , asset_disposed_date ]"
    },
    {
        "id": "98b1c4f4225b36622fabe939bd963eaeb7e41b99d5e441ac584a5d09f6daa302",
        "question": "Which part has the least chargeable amount? List the part id and amount.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Parts ] Output [ part_id , chargeable_amount ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ chargeable_amount ASC ] Output [ part_id , chargeable_amount ]"
    },
    {
        "id": "c82de8af3d0b437d43018f1654f734c52270ff58f41625e93a2347b8ec2a2979",
        "question": "Which company started the earliest the maintenance contract? Show the company name.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Maintenance_Contracts ] Output [ contract_start_date , maintenance_contract_company_id ] ; #2 = Scan Table [ Third_Party_Companies ] Output [ company_id , company_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.maintenance_contract_company_id = #2.company_id ] Output [ #1.contract_start_date , #2.company_name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ contract_start_date ASC ] Output [ company_name , contract_start_date ]"
    },
    {
        "id": "7853072dcff2140e121a866beb3eccd6e875f52ec10d8710943434146748bae1",
        "question": "Which gender makes up the majority of the staff?",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Staff ] Output [ gender ] ; #2 = Aggregate [ #1 ] GroupBy [ gender ] Output [ countstar AS Count_Star , gender ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , gender ]"
    },
    {
        "id": "3f8b6b7c6940e2c3e2f5fa07f43cd46974d6a8ea38214bddb336a1744cec519f",
        "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Engineer_Visits ] Output [ contact_staff_id ] ; #2 = Scan Table [ Staff ] Output [ staff_name , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.contact_staff_id = #2.staff_id ] Output [ #2.staff_name ] ; #4 = Aggregate [ #3 ] GroupBy [ staff_name ] Output [ staff_name , countstar AS Count_Star ]"
    },
    {
        "id": "e32c9295e59219e7fa661922cc64f4bc94ed22df950e9255d1d224fb959df041",
        "question": "Which assets did not incur any fault log? List the asset model.",
        "parsing_tree": "assets_maintenance | #1 = Scan Table [ Assets ] Output [ asset_model , asset_id ] ; #2 = Scan Table [ Fault_Log ] Output [ asset_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.asset_id = #1.asset_id ] Output [ #1.asset_model ]"
    },
    {
        "id": "de86f2566583ea07cf3c9353113a23a042d9c374aa96725a8d6575b49f615ceb",
        "question": "list the local authorities and services provided by all stations.",
        "parsing_tree": "station_weather | #1 = Scan Table [ station ] Output [ local_authority , services ]"
    },
    {
        "id": "b3e2491750797a38f9e2523ff2a5ee9888e002c37adf5e6ad1e509a6440488ba",
        "question": "show all train numbers and names ordered by their time from early to late.",
        "parsing_tree": "station_weather | #1 = Scan Table [ train ] Output [ train_number , time , name ] ; #2 = Sort [ #1 ] OrderBy [ time ASC ] Output [ train_number , time , name ]"
    },
    {
        "id": "71f6604ef8e9c2e6ea48bd2585d9f58bc90aba0ae0cf52b1168d34308ff2e9d1",
        "question": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "parsing_tree": "station_weather | #1 = Scan Table [ train ] Predicate [ destination = 'Chennai' ] Output [ train_number , time , destination ] ; #2 = Sort [ #1 ] OrderBy [ time ASC ] Output [ train_number , time ]"
    },
    {
        "id": "83e18db45cd98c3261b5b2f721a953be76f9b50d393b87b1e41040dfa46c436f",
        "question": "How many trains have 'Express' in their names?",
        "parsing_tree": "station_weather | #1 = Scan Table [ train ] Predicate [ name like '%Express%' ] Output [ name ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4016f5bc3b87ae01bf4c171d61c3ba65606263dd5fcb19092679fe510e9191bf",
        "question": "Find the number and time of the train that goes from Chennai to Guruvayur.",
        "parsing_tree": "station_weather | #1 = Scan Table [ train ] Predicate [ origin = 'Chennai' AND destination = 'Guruvayur' ] Output [ train_number , time , destination , origin ]"
    },
    {
        "id": "559007479735f2bccf61db881c3904fae40e2c4bb41f9d9da5745a163b56cbfd",
        "question": "Find the number of trains starting from each origin.",
        "parsing_tree": "station_weather | #1 = Scan Table [ train ] Output [ origin ] ; #2 = Aggregate [ #1 ] GroupBy [ origin ] Output [ countstar AS Count_Star , origin ]"
    },
    {
        "id": "2a37bf7c094ff61cb2d6561d695011649629641d0437020bc68667902ab83dec",
        "question": "Find the number of trains for each station, as well as the station network name and services.",
        "parsing_tree": "station_weather | #1 = Scan Table [ route ] Output [ station_id ] ; #2 = Aggregate [ #1 ] GroupBy [ station_id ] Output [ countstar AS Count_Star , station_id ] ; #3 = Scan Table [ station ] Output [ network_name , services , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.station_id = #3.id ] Output [ #3.services , #3.network_name , #2.Count_Star ]"
    },
    {
        "id": "3901210dc2f263b35e40199083b41de22bdcb401c01ff3c6691bd6ddc6f2b036",
        "question": "What is the average high temperature for each day of week?",
        "parsing_tree": "station_weather | #1 = Scan Table [ weekly_weather ] Output [ day_of_week , high_temperature ] ; #2 = Aggregate [ #1 ] GroupBy [ day_of_week ] Output [ AVG(high_temperature) AS Avg_high_temperature , day_of_week ]"
    },
    {
        "id": "b821c4315c786cbeeae9bd279aa3363ba8bb4f009c26d9f30ed24f6ea08f9920",
        "question": "Give me the maximum low temperature and average precipitation at the Amersham station.",
        "parsing_tree": "station_weather | #1 = Scan Table [ station ] Predicate [ network_name = 'Amersham' ] Output [ network_name , id ] ; #2 = Scan Table [ weekly_weather ] Output [ low_temperature , station_id , precipitation ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.station_id ] Output [ #2.low_temperature , #2.precipitation ] ; #4 = Aggregate [ #3 ] Output [ AVG(precipitation) AS Avg_precipitation , MAX(low_temperature) AS Max_low_temperature ]"
    },
    {
        "id": "5dd8001ec4d91e4385c66154f302636499b897aead501eefac7bff1dbfc7825c",
        "question": "Find names and times of trains that run through stations for the local authority Chiltern.",
        "parsing_tree": "station_weather | #1 = Scan Table [ station ] Predicate [ local_authority = 'Chiltern' ] Output [ local_authority , id ] ; #2 = Scan Table [ route ] Output [ train_id , station_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.station_id ] Output [ #2.train_id ] ; #4 = Scan Table [ train ] Output [ name , time , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.train_id = #4.id ] Output [ #4.time , #4.name ]"
    },
    {
        "id": "50869d859f80a12676f2ee18553961bf2f15aaa685aecc20ca379faf2e10b1da",
        "question": "How many different services are provided by all stations?",
        "parsing_tree": "station_weather | #1 = Scan Table [ station ] Distinct [ true ] Output [ services ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT services) AS Count_Dist_services ]"
    },
    {
        "id": "22fc9b8eb6a1eea64d7fa1d1224da419ea44a00d2db60dfb4a592f9690388e5c",
        "question": "Find the id and local authority of the station with has the highest average high temperature.",
        "parsing_tree": "station_weather | #1 = Scan Table [ weekly_weather ] Output [ station_id , high_temperature ] ; #2 = Aggregate [ #1 ] GroupBy [ station_id ] Output [ AVG(high_temperature) AS Avg_high_temperature , station_id ] ; #3 = Scan Table [ station ] Output [ local_authority , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.station_id = #3.id ] Output [ #2.Avg_high_temperature , #3.id , #3.local_authority ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_high_temperature DESC ] Output [ Avg_high_temperature , local_authority , id ]"
    },
    {
        "id": "90c7ddfa4f9b094b81e6c08333a3228019a176ae25d88b003c21d92c2d44e90d",
        "question": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "parsing_tree": "station_weather | #1 = Scan Table [ weekly_weather ] Output [ station_id , precipitation ] ; #2 = Aggregate [ #1 ] GroupBy [ station_id ] Output [ MAX(precipitation) AS Max_precipitation , station_id ] ; #3 = Scan Table [ station ] Output [ local_authority , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.station_id = #3.id ] Output [ #2.Max_precipitation , #3.id , #3.local_authority ] ; #5 = Filter [ #4 ] Predicate [ Max_precipitation > 50.0 ] Output [ local_authority , id ]"
    },
    {
        "id": "15135dc2e52bac6486e97c289a8a563d8b200e7fdd364368c2b17c0cbbdebf57",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "parsing_tree": "station_weather | #1 = Scan Table [ weekly_weather ] Output [ wind_speed_mph , low_temperature ] ; #2 = Aggregate [ #1 ] Output [ MAX(wind_speed_mph) AS Max_wind_speed_mph , MIN(low_temperature) AS Min_low_temperature ]"
    },
    {
        "id": "3f6eb9ca5c66999fff323bfc759cb3a96029c9a8dbbd70c7563f8af45aee4809",
        "question": "Find the origins from which more than 1 train starts.",
        "parsing_tree": "station_weather | #1 = Scan Table [ train ] Output [ origin ] ; #2 = Aggregate [ #1 ] GroupBy [ origin ] Output [ countstar AS Count_Star , origin ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ origin ]"
    },
    {
        "id": "05dbff77386524135046d53e61fc33872d517fb72c2a5d404b6cd9cc1fc8b27d",
        "question": "How many professors are teaching class with code ACCT-211?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Distinct [ true ] Output [ PROF_NUM , CRS_CODE ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT PROF_NUM) AS Count_Dist_PROF_NUM ]"
    },
    {
        "id": "6d075ab8291a94727b771061c26dc5734659ca531674755742e5f437a6693781",
        "question": "How many professors teach a class with the code ACCT-211?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Distinct [ true ] Output [ PROF_NUM , CRS_CODE ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT PROF_NUM) AS Count_Dist_PROF_NUM ]"
    },
    {
        "id": "2df64e482597daf3b57e3a14be3df284ed1bfacab88a467860b1dde1d2fd5ed6",
        "question": "What are the first names and date of birth of professors teaching course ACCT-211?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Output [ PROF_NUM , CRS_CODE ] ; #2 = Scan Table [ EMPLOYEE ] Output [ EMP_DOB , EMP_FNAME , EMP_NUM ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.PROF_NUM = #2.EMP_NUM ] Distinct [ true ] Output [ #2.EMP_DOB , #2.EMP_FNAME ]"
    },
    {
        "id": "ca0b07a9d9b5e59ccd78a2fd19c885f486ff2822c15ea96d9919d5d4c352c6a5",
        "question": "What are the first names and birthdates of the professors in charge of ACCT-211?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Output [ PROF_NUM , CRS_CODE ] ; #2 = Scan Table [ EMPLOYEE ] Output [ EMP_DOB , EMP_FNAME , EMP_NUM ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.PROF_NUM = #2.EMP_NUM ] Distinct [ true ] Output [ #2.EMP_DOB , #2.EMP_FNAME ]"
    },
    {
        "id": "f87da123b49ba9ce8bdbcfd2e24ebb1d6b5b27d69072cce258d68f38fbbd2398",
        "question": "How many classes are professor whose last name is Graztevski has?",
        "parsing_tree": "college_1 | #1 = Scan Table [ EMPLOYEE ] Predicate [ EMP_LNAME = 'Graztevski' ] Output [ EMP_LNAME , EMP_NUM ] ; #2 = Scan Table [ CLASS ] Output [ PROF_NUM ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.EMP_NUM = #2.PROF_NUM ] Output [ #1.EMP_LNAME , #1.EMP_NUM ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e9ae7eb2fa36f093f8e52837ece84479806639918e0310019ff10ce2e18580c1",
        "question": "How many classes does the professor whose last name is Graztevski teach?",
        "parsing_tree": "college_1 | #1 = Scan Table [ EMPLOYEE ] Predicate [ EMP_LNAME = 'Graztevski' ] Output [ EMP_LNAME , EMP_NUM ] ; #2 = Scan Table [ CLASS ] Output [ PROF_NUM ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.EMP_NUM = #2.PROF_NUM ] Output [ #1.EMP_LNAME , #1.EMP_NUM ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "850d219e82d1b564d27132a736bbe7696a2f253b1a2d974501adb720503a1585",
        "question": "What is the code of the school where the accounting department belongs to?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Predicate [ DEPT_NAME = 'Accounting' ] Output [ SCHOOL_CODE , DEPT_NAME ]"
    },
    {
        "id": "5ec4bca1c9f81d5f0e9237b63e4485886e8296f4e3730804c04007d19925be78",
        "question": "What is the school code of the accounting department?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Predicate [ DEPT_NAME = 'Accounting' ] Output [ SCHOOL_CODE , DEPT_NAME ]"
    },
    {
        "id": "3e92dfb8f4056090a56034339bfd2b03dacfeff27ed5a3404b8407d404529a12",
        "question": "How many credits does course CIS-220 have, and what its description?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Predicate [ CRS_CODE = 'CIS-220' ] Output [ CRS_DESCRIPTION , CRS_CREDIT , CRS_CODE ]"
    },
    {
        "id": "8f89df8cfaf9f3c759017adc610dfbfb7dc3291d11759f0a56f57620002e7da5",
        "question": "What is the description for the CIS-220 and how many credits does it have?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Predicate [ CRS_CODE = 'CIS-220' ] Output [ CRS_DESCRIPTION , CRS_CREDIT , CRS_CODE ]"
    },
    {
        "id": "e6053669fb07290ee0f7b23f9d9cf4453e4367091794298dad045e0089785a0e",
        "question": "what is the address of history department?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Predicate [ DEPT_NAME = 'History' ] Output [ DEPT_ADDRESS , DEPT_NAME ]"
    },
    {
        "id": "11aa9693a47102ff6869920c7b41ac8427ab05423baa616fb5158b2ed558223e",
        "question": "Where is the history department?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Predicate [ DEPT_NAME = 'History' ] Output [ DEPT_ADDRESS , DEPT_NAME ]"
    },
    {
        "id": "fbbfb9c72b8417b17dfb48ff043f78fc95373da03f2d400b8e842df04d802c4c",
        "question": "How many different locations does the school with code BUS has?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Predicate [ SCHOOL_CODE = 'BUS' ] Distinct [ true ] Output [ SCHOOL_CODE , DEPT_ADDRESS ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT DEPT_ADDRESS) AS Count_Dist_DEPT_ADDRESS ]"
    },
    {
        "id": "668a9dbabec3f777df3c4bd075ada7699f1d04f34b8f788e066a790e6ce59855",
        "question": "What are the different locations of the school with the code BUS?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Predicate [ SCHOOL_CODE = 'BUS' ] Distinct [ true ] Output [ SCHOOL_CODE , DEPT_ADDRESS ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT DEPT_ADDRESS) AS Count_Dist_DEPT_ADDRESS ]"
    },
    {
        "id": "ebc005e3772ca58ea4b2207bb618ddc6ef7cf8a75e8624e1771501ab99e13d50",
        "question": "How many different locations does each school have?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Distinct [ true ] Output [ SCHOOL_CODE , DEPT_ADDRESS ] ; #2 = Aggregate [ #1 ] GroupBy [ SCHOOL_CODE ] Output [ COUNT(DISTINCT DEPT_ADDRESS) AS Count_Dist_DEPT_ADDRESS , SCHOOL_CODE ]"
    },
    {
        "id": "bc32c2b56898517cc730995aae662d58735650048172bde39369ed6a82e52e29",
        "question": "Count different addresses of each school.",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Distinct [ true ] Output [ SCHOOL_CODE , DEPT_ADDRESS ] ; #2 = Aggregate [ #1 ] GroupBy [ SCHOOL_CODE ] Output [ COUNT(DISTINCT DEPT_ADDRESS) AS Count_Dist_DEPT_ADDRESS , SCHOOL_CODE ]"
    },
    {
        "id": "0519cd58d876a8a186fb8c828f9c0c7396928c99f4886b4446d84a0e740f60f6",
        "question": "Find the description and credit for the course QM-261?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Predicate [ CRS_CODE = 'QM-261' ] Output [ CRS_DESCRIPTION , CRS_CREDIT , CRS_CODE ]"
    },
    {
        "id": "7e36f14102f366d9e121d2170896078d626f3698e281597652f37004c8494355",
        "question": "What is the course description and number of credits for QM-261?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Predicate [ CRS_CODE = 'QM-261' ] Output [ CRS_DESCRIPTION , CRS_CREDIT , CRS_CODE ]"
    },
    {
        "id": "a513cac40c1224555fe287cab511a1657c2c14c48321a81633847cc91c3896d2",
        "question": "Find the number of departments in each school.",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Distinct [ true ] Output [ SCHOOL_CODE , DEPT_NAME ] ; #2 = Aggregate [ #1 ] GroupBy [ SCHOOL_CODE ] Output [ SCHOOL_CODE , COUNT(DISTINCT DEPT_NAME) AS Count_Dist_DEPT_NAME ]"
    },
    {
        "id": "91a25b5f199bc5f8341f4bac4d33a3cad47ef5d61409f94f6fb46f57c3bade1f",
        "question": "How many departments are in each school?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Distinct [ true ] Output [ SCHOOL_CODE , DEPT_NAME ] ; #2 = Aggregate [ #1 ] GroupBy [ SCHOOL_CODE ] Output [ SCHOOL_CODE , COUNT(DISTINCT DEPT_NAME) AS Count_Dist_DEPT_NAME ]"
    },
    {
        "id": "74d818183463895ca177616bb4f904938cb831478f7fa9edbe2ee5ab7a9cacd4",
        "question": "How many sections does each course has?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Output [ CRS_CODE ] ; #2 = Aggregate [ #1 ] GroupBy [ CRS_CODE ] Output [ countstar AS Count_Star , CRS_CODE ]"
    },
    {
        "id": "0256d1acbefe61a15715183f330d0f7ab151da3940fd8e643c7014aa73d13e2a",
        "question": "How many sections does each course have?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Output [ CRS_CODE ] ; #2 = Aggregate [ #1 ] GroupBy [ CRS_CODE ] Output [ countstar AS Count_Star , CRS_CODE ]"
    },
    {
        "id": "b89134fca25a64112f078f57024d932bb29d37fad2f70a601ac6fb0595acb95c",
        "question": "What is the total credit does each department offer?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ CRS_CREDIT , DEPT_CODE ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPT_CODE ] Output [ SUM(CRS_CREDIT) AS Sum_CRS_CREDIT , DEPT_CODE ]"
    },
    {
        "id": "8c26d6b49356a369bcb97469cd437587d723c1be44376d20167c63ab9a69343f",
        "question": "How many credits does the department offer?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ CRS_CREDIT , DEPT_CODE ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPT_CODE ] Output [ SUM(CRS_CREDIT) AS Sum_CRS_CREDIT , DEPT_CODE ]"
    },
    {
        "id": "c3e991cb9b0f7c336acb3f4fd774405af985acc9d84679379300c9e04edf91ca",
        "question": "Find the number of classes offered for all class rooms that held at least 2 classes.",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Output [ CLASS_ROOM ] ; #2 = Aggregate [ #1 ] GroupBy [ CLASS_ROOM ] Output [ countstar AS Count_Star , CLASS_ROOM ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Count_Star , CLASS_ROOM ]"
    },
    {
        "id": "72000e5b22cab2aa1e806fc4da57120b51d562a7915aa0f367b8acbf2e1e2ebd",
        "question": "For each classroom with at least 2 classes, how many classes are offered?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Output [ CLASS_ROOM ] ; #2 = Aggregate [ #1 ] GroupBy [ CLASS_ROOM ] Output [ countstar AS Count_Star , CLASS_ROOM ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Count_Star , CLASS_ROOM ]"
    },
    {
        "id": "b58abc466726218e8a5f86b2ee272d105a85217c26eed2f95fc8e775589effa0",
        "question": "Find the number of classes in each department.",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ DEPT_CODE , CRS_CODE ] ; #2 = Scan Table [ CLASS ] Output [ CRS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CRS_CODE = #2.CRS_CODE ] Output [ #1.DEPT_CODE ] ; #4 = Aggregate [ #3 ] GroupBy [ DEPT_CODE ] Output [ countstar AS Count_Star , DEPT_CODE ]"
    },
    {
        "id": "ee00ce1bf6d9b0139407ba35b533a488fc8b3e5c743e4dd7c306a520722b48a0",
        "question": "How many classes are held in each department?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ DEPT_CODE , CRS_CODE ] ; #2 = Scan Table [ CLASS ] Output [ CRS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CRS_CODE = #2.CRS_CODE ] Output [ #1.DEPT_CODE ] ; #4 = Aggregate [ #3 ] GroupBy [ DEPT_CODE ] Output [ countstar AS Count_Star , DEPT_CODE ]"
    },
    {
        "id": "f3ff1314be4e55f5419c9431ecff1a387afaff5498c66f23b5cf4b209e581228",
        "question": "Find the number of classes in each school.",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ DEPT_CODE , CRS_CODE ] ; #2 = Scan Table [ DEPARTMENT ] Output [ SCHOOL_CODE , DEPT_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #1.CRS_CODE , #2.SCHOOL_CODE ] ; #4 = Scan Table [ CLASS ] Output [ CRS_CODE ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.CRS_CODE = #4.CRS_CODE ] Output [ #3.SCHOOL_CODE ] ; #6 = Aggregate [ #5 ] GroupBy [ SCHOOL_CODE ] Output [ countstar AS Count_Star , SCHOOL_CODE ]"
    },
    {
        "id": "1e9684f8222087f89a591a59e9a6705b309c4dbde51cce2bfd005c6b3f8e3a9a",
        "question": "How many classes exist for each school?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ DEPT_CODE , CRS_CODE ] ; #2 = Scan Table [ DEPARTMENT ] Output [ SCHOOL_CODE , DEPT_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #1.CRS_CODE , #2.SCHOOL_CODE ] ; #4 = Scan Table [ CLASS ] Output [ CRS_CODE ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.CRS_CODE = #4.CRS_CODE ] Output [ #3.SCHOOL_CODE ] ; #6 = Aggregate [ #5 ] GroupBy [ SCHOOL_CODE ] Output [ countstar AS Count_Star , SCHOOL_CODE ]"
    },
    {
        "id": "2f0c1a20a7a40bce3ceaa9191db18841bb5362ce724227143a4f1b4795d523ca",
        "question": "Find the count and code of the job has most employees.",
        "parsing_tree": "college_1 | #1 = Scan Table [ EMPLOYEE ] Output [ EMP_JOBCODE ] ; #2 = Aggregate [ #1 ] GroupBy [ EMP_JOBCODE ] Output [ EMP_JOBCODE , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ EMP_JOBCODE , Count_Star ]"
    },
    {
        "id": "7190d7f891255646fee57762150054919499ba329475dab1dbf33a23de542f95",
        "question": "What is the count and code of the job with the most employee?",
        "parsing_tree": "college_1 | #1 = Scan Table [ EMPLOYEE ] Output [ EMP_JOBCODE ] ; #2 = Aggregate [ #1 ] GroupBy [ EMP_JOBCODE ] Output [ EMP_JOBCODE , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ EMP_JOBCODE , Count_Star ]"
    },
    {
        "id": "8d5a441e1bf40526878b0ad58bc435197903374131ec28c825612401508c65c1",
        "question": "Find the number of students for each department.",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ DEPT_CODE ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPT_CODE ] Output [ countstar AS Count_Star , DEPT_CODE ]"
    },
    {
        "id": "3edde81a500210759ca4db6e52027c62b257659456001c877f8603fe8187dd0e",
        "question": "How many students are in each department?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ DEPT_CODE ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPT_CODE ] Output [ countstar AS Count_Star , DEPT_CODE ]"
    },
    {
        "id": "54caf5d1245c755eb1f73831060187092e458727c5d56a25811842a8cb0b7e2c",
        "question": "Find the total number of hours have done for all students in each department.",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ DEPT_CODE , STU_HRS ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPT_CODE ] Output [ SUM(STU_HRS) AS Sum_STU_HRS , DEPT_CODE ]"
    },
    {
        "id": "f7054d8603a889c5f62b506cdc7be0aa4af6550368737ab181f08205614a8998",
        "question": "How many hours do the students spend studying in each department?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ DEPT_CODE , STU_HRS ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPT_CODE ] Output [ SUM(STU_HRS) AS Sum_STU_HRS , DEPT_CODE ]"
    },
    {
        "id": "65ae74cd3244dbdf0514eced789fd37384a887203dcef144e835297306d2b403",
        "question": "Find the max, average, and minimum gpa of all students in each department.",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ DEPT_CODE , STU_GPA ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPT_CODE ] Output [ MAX(STU_GPA) AS Max_STU_GPA , MIN(STU_GPA) AS Min_STU_GPA , AVG(STU_GPA) AS Avg_STU_GPA , DEPT_CODE ]"
    },
    {
        "id": "d17d54ad0a05834cf5956cd6adde413eba07d1e4f740d50105a3dfed216db94f",
        "question": "What is the highest, lowest, and average student GPA for every department?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ DEPT_CODE , STU_GPA ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPT_CODE ] Output [ MAX(STU_GPA) AS Max_STU_GPA , MIN(STU_GPA) AS Min_STU_GPA , AVG(STU_GPA) AS Avg_STU_GPA , DEPT_CODE ]"
    },
    {
        "id": "c34f2dd40695b2a1e7968e8250f0d83525382aa12c74a20a5578b3e4e34ae92b",
        "question": "What is the name and the average gpa of department whose students have the highest average gpa?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ DEPT_CODE , STU_GPA ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPT_CODE ] Output [ AVG(STU_GPA) AS Avg_STU_GPA , DEPT_CODE ] ; #3 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.DEPT_CODE = #3.DEPT_CODE ] Output [ #2.Avg_STU_GPA , #3.DEPT_NAME ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_STU_GPA DESC ] Output [ Avg_STU_GPA , DEPT_NAME ]"
    },
    {
        "id": "d0f63b92473b9c3a2a398ac29781ff7eafb0074b7adf2a4af3a69f24bb5c3058",
        "question": "Which department has the highest average student GPA, and what is the average gpa?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ DEPT_CODE , STU_GPA ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPT_CODE ] Output [ AVG(STU_GPA) AS Avg_STU_GPA , DEPT_CODE ] ; #3 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.DEPT_CODE = #3.DEPT_CODE ] Output [ #2.Avg_STU_GPA , #3.DEPT_NAME ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_STU_GPA DESC ] Output [ Avg_STU_GPA , DEPT_NAME ]"
    },
    {
        "id": "9ce72df5bf5b5a13774de063be32d36ee36366074ba98bb98b30894b77a43be3",
        "question": "how many schools exist in total?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Distinct [ true ] Output [ SCHOOL_CODE ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT SCHOOL_CODE) AS Count_Dist_SCHOOL_CODE ]"
    },
    {
        "id": "3f8fa293fda5bf37cc09445a0201ed070de65c43b6c362400d8f5d0d2256da98",
        "question": "How many schools are there in the department?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Distinct [ true ] Output [ SCHOOL_CODE ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT SCHOOL_CODE) AS Count_Dist_SCHOOL_CODE ]"
    },
    {
        "id": "400fec58a176f06b1bb2840ed9303133b6c4d535eee32eb8c440fcadaf858d96",
        "question": "How many different classes are there?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "739acb63e7c1583fc28be658c2218b7d26f8540ca1e6bf2e95e5fd2fb4c4c848",
        "question": "How many unique classes are offered?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5fbce45558d284c4e360b4a03535b7d0170a8ae9cdefc4a7cded00a5a60908a5",
        "question": "How many courses are offered?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Distinct [ true ] Output [ CRS_CODE ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT CRS_CODE) AS Count_Dist_CRS_CODE ]"
    },
    {
        "id": "64dc3c7b5ce328b80b6de5f79595f8f14a1ffbc1df61933a25cab4181d508493",
        "question": "What are the number of different course codes?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Distinct [ true ] Output [ CRS_CODE ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT CRS_CODE) AS Count_Dist_CRS_CODE ]"
    },
    {
        "id": "69a4d4075202e08e66cb67843d5682248b336a95ea26e90d27de424656687323",
        "question": "How many departments does the college has?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Distinct [ true ] Output [ DEPT_NAME ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT DEPT_NAME) AS Count_Dist_DEPT_NAME ]"
    },
    {
        "id": "ecfe9ac8b457de3107cacfd2898109484ddd0d39eda00cc46ff548eaaab8a4d0",
        "question": "How many different departments are there?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Distinct [ true ] Output [ DEPT_NAME ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT DEPT_NAME) AS Count_Dist_DEPT_NAME ]"
    },
    {
        "id": "7bccfcad1b5e6d018b4c81152601daf1fcdebc7674d278fef9d2fbf95f71e5f7",
        "question": "How many courses are offered by the Computer Info. Systems department?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Predicate [ DEPT_NAME = 'Computer Info. Systems' ] Output [ DEPT_NAME , DEPT_CODE ] ; #2 = Scan Table [ COURSE ] Output [ DEPT_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #1.DEPT_CODE , #1.DEPT_NAME ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "45a8275570162bfbf05452e341fdc6a526e34783aa11f45d73405c1549ea45c5",
        "question": "How many courses does the department of Computer Information Systmes offer?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Predicate [ DEPT_NAME = 'Computer Info. Systems' ] Output [ DEPT_NAME , DEPT_CODE ] ; #2 = Scan Table [ COURSE ] Output [ DEPT_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #1.DEPT_CODE , #1.DEPT_NAME ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "34203dd4b4bddb0f6bf5d9f33ac43d8db8ec82f90d72a32d48e85bbfc0237ca4",
        "question": "How many sections does course ACCT-211 has?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Distinct [ true ] Output [ CRS_CODE , CLASS_SECTION ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT CLASS_SECTION) AS Count_Dist_CLASS_SECTION ]"
    },
    {
        "id": "920679d6f0de9ef0ea665873ce06556deaf9c579ec3f03e7cf360ffc46848176",
        "question": "What is the number of different class sections offered in the course ACCT-211?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Distinct [ true ] Output [ CRS_CODE , CLASS_SECTION ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT CLASS_SECTION) AS Count_Dist_CLASS_SECTION ]"
    },
    {
        "id": "35351520cd3d66f1b7706ed4fe9c0405373423fcc85efcdc336b8ecbf0d2e047",
        "question": "Find the total credits of all classes offered by each department.",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ CRS_CREDIT , DEPT_CODE , CRS_CODE ] ; #2 = Scan Table [ CLASS ] Output [ CRS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CRS_CODE = #2.CRS_CODE ] Output [ #1.DEPT_CODE , #1.CRS_CREDIT ] ; #4 = Aggregate [ #3 ] GroupBy [ DEPT_CODE ] Output [ SUM(CRS_CREDIT) AS Sum_CRS_CREDIT , DEPT_CODE ]"
    },
    {
        "id": "90e061663a1957fdb4afc75c64689c044f25916384ea2d2edcc5a23034914b7d",
        "question": "What are the total number of credits offered by each department?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ CRS_CREDIT , DEPT_CODE , CRS_CODE ] ; #2 = Scan Table [ CLASS ] Output [ CRS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CRS_CODE = #2.CRS_CODE ] Output [ #1.DEPT_CODE , #1.CRS_CREDIT ] ; #4 = Aggregate [ #3 ] GroupBy [ DEPT_CODE ] Output [ SUM(CRS_CREDIT) AS Sum_CRS_CREDIT , DEPT_CODE ]"
    },
    {
        "id": "e771e4ceee4f830b5c72dcc018ffec3c1212ccb7018303ec17eaddfbe97c4b0a",
        "question": "Find the name of the department that offers the largest number of credits of all classes.",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ CRS_CREDIT , DEPT_CODE , CRS_CODE ] ; #2 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #2.DEPT_NAME , #1.CRS_CODE , #1.DEPT_CODE , #1.CRS_CREDIT ] ; #4 = Scan Table [ CLASS ] Output [ CRS_CODE ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.CRS_CODE = #4.CRS_CODE ] Output [ #3.DEPT_NAME , #3.DEPT_CODE , #3.CRS_CREDIT ] ; #6 = Aggregate [ #5 ] GroupBy [ DEPT_CODE ] Output [ SUM(CRS_CREDIT) AS Sum_CRS_CREDIT , DEPT_NAME ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_CRS_CREDIT DESC ] Output [ Sum_CRS_CREDIT , DEPT_NAME ]"
    },
    {
        "id": "934d8af57485cd38297f79c590020a0dbbf0630020e5cb1994ab60708cb8fb09",
        "question": "Which department offers the most credits all together?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ CRS_CREDIT , DEPT_CODE , CRS_CODE ] ; #2 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #2.DEPT_NAME , #1.CRS_CODE , #1.DEPT_CODE , #1.CRS_CREDIT ] ; #4 = Scan Table [ CLASS ] Output [ CRS_CODE ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.CRS_CODE = #4.CRS_CODE ] Output [ #3.DEPT_NAME , #3.DEPT_CODE , #3.CRS_CREDIT ] ; #6 = Aggregate [ #5 ] GroupBy [ DEPT_CODE ] Output [ SUM(CRS_CREDIT) AS Sum_CRS_CREDIT , DEPT_NAME ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_CRS_CREDIT DESC ] Output [ Sum_CRS_CREDIT , DEPT_NAME ]"
    },
    {
        "id": "e0afaae6d06bf08796195fb593c8fab0e5639c956df49ed2c82e0c8284710abf",
        "question": "How many students enrolled in class ACCT-211?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Output [ CLASS_CODE , CRS_CODE ] ; #2 = Scan Table [ ENROLL ] Output [ CLASS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CLASS_CODE = #2.CLASS_CODE ] Output [ #1.CRS_CODE , #1.CLASS_CODE ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a976384c4b98d101be574ed33ce14f746895b5d3874ef8aae9c6ee8d23a2af3a",
        "question": "What are the total number of students enrolled in ACCT-211?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Output [ CLASS_CODE , CRS_CODE ] ; #2 = Scan Table [ ENROLL ] Output [ CLASS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CLASS_CODE = #2.CLASS_CODE ] Output [ #1.CRS_CODE , #1.CLASS_CODE ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f351b41ecfa1a93fd42d85ef4637ff001fd998286b3063487500be20c5425fa1",
        "question": "What is the first name of each student enrolled in class ACCT-211?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Output [ CLASS_CODE , CRS_CODE ] ; #2 = Scan Table [ ENROLL ] Output [ STU_NUM , CLASS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CLASS_CODE = #2.CLASS_CODE ] Output [ #2.STU_NUM ] ; #4 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_FNAME ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.STU_NUM = #4.STU_NUM ] Output [ #4.STU_FNAME ]"
    },
    {
        "id": "d0255686280995a4d8a4713691df305a4e45cdb3b48f196c0edc2fba8bba12cf",
        "question": "What are the first names of all students in course ACCT-211?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Output [ CLASS_CODE , CRS_CODE ] ; #2 = Scan Table [ ENROLL ] Output [ STU_NUM , CLASS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CLASS_CODE = #2.CLASS_CODE ] Output [ #2.STU_NUM ] ; #4 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_FNAME ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.STU_NUM = #4.STU_NUM ] Output [ #4.STU_FNAME ]"
    },
    {
        "id": "4119aa92787535f28f9c931cdbab9084666cdbdec9c1cb3103679cbfb869fe36",
        "question": "What is the first name of students enrolled in class ACCT-211 and got grade C?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Output [ CLASS_CODE , CRS_CODE ] ; #2 = Scan Table [ ENROLL ] Predicate [ ENROLL_GRADE = 'C' ] Output [ STU_NUM , ENROLL_GRADE , CLASS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CLASS_CODE = #2.CLASS_CODE ] Output [ #2.STU_NUM ] ; #4 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_FNAME ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.STU_NUM = #4.STU_NUM ] Output [ #4.STU_FNAME ]"
    },
    {
        "id": "3a2c4e4603191be6c6f2a48e0875138152b354ca74da77e84c1d4b69bba636ef",
        "question": "What are the first names of all students who took ACCT-211 and received a C?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Output [ CLASS_CODE , CRS_CODE ] ; #2 = Scan Table [ ENROLL ] Predicate [ ENROLL_GRADE = 'C' ] Output [ STU_NUM , ENROLL_GRADE , CLASS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CLASS_CODE = #2.CLASS_CODE ] Output [ #2.STU_NUM ] ; #4 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_FNAME ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.STU_NUM = #4.STU_NUM ] Output [ #4.STU_FNAME ]"
    },
    {
        "id": "a2fd104b45b8627f00e01a4e4629119b509f3bc0816a4f1f63b52576aa2ac608",
        "question": "Find the total number of employees.",
        "parsing_tree": "college_1 | #1 = Scan Table [ EMPLOYEE ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "8ea5b9532eaa708502fc68f511f0cf5ec0e92691007766316aa36db464557612",
        "question": "How many employees are there all together?",
        "parsing_tree": "college_1 | #1 = Scan Table [ EMPLOYEE ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "3503ead41ff48ba2f96e1e3971cde15d99730860cf7852ecf2d670b096a78267",
        "question": "How many professors do have a Ph.D. degree?",
        "parsing_tree": "college_1 | #1 = Scan Table [ PROFESSOR ] Predicate [ PROF_HIGH_DEGREE = 'Ph.D.' ] Output [ PROF_HIGH_DEGREE ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "35f8bac5d2c43e8af52a31fc6be5bdc7c395f87db43fbe6b15cb59d9cf1e5a4f",
        "question": "What is the total number of professors with a Ph.D. ?",
        "parsing_tree": "college_1 | #1 = Scan Table [ PROFESSOR ] Predicate [ PROF_HIGH_DEGREE = 'Ph.D.' ] Output [ PROF_HIGH_DEGREE ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "3c88988369ceddb816e961c6f8342178516a93ef564d66f30ae54c6c445eeec7",
        "question": "How many students are enrolled in the class taught by some professor from the accounting department?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Predicate [ DEPT_NAME = 'Accounting' ] Output [ DEPT_NAME , DEPT_CODE ] ; #2 = Scan Table [ COURSE ] Output [ DEPT_CODE , CRS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #2.CRS_CODE ] ; #4 = Scan Table [ CLASS ] Output [ CLASS_CODE , CRS_CODE ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.CRS_CODE = #4.CRS_CODE ] Output [ #4.CLASS_CODE ] ; #6 = Scan Table [ ENROLL ] Output [ CLASS_CODE ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.CLASS_CODE = #6.CLASS_CODE ] Output [ #5.CLASS_CODE ] ; #8 = Aggregate [ #7 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cc9aa7ce4340791a5b1dcf00c407bb6adf7e6fd01c67aa309737ad5151b4be0b",
        "question": "How many students are enrolled in some classes that are taught by an accounting professor?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Predicate [ DEPT_NAME = 'Accounting' ] Output [ DEPT_NAME , DEPT_CODE ] ; #2 = Scan Table [ COURSE ] Output [ DEPT_CODE , CRS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #2.CRS_CODE ] ; #4 = Scan Table [ CLASS ] Output [ CLASS_CODE , CRS_CODE ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.CRS_CODE = #4.CRS_CODE ] Output [ #4.CLASS_CODE ] ; #6 = Scan Table [ ENROLL ] Output [ CLASS_CODE ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.CLASS_CODE = #6.CLASS_CODE ] Output [ #5.CLASS_CODE ] ; #8 = Aggregate [ #7 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "aa8b9c3d6b2d5cb37c54a160d76e69c9f013ed2a0263ff2187286caf6d7dfa84",
        "question": "What is the name of the department that has the largest number of students enrolled?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ DEPT_CODE , CRS_CODE ] ; #2 = Scan Table [ ENROLL ] Output [ CLASS_CODE ] ; #3 = Scan Table [ CLASS ] Output [ CLASS_CODE , CRS_CODE ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.CLASS_CODE = #3.CLASS_CODE ] Output [ #3.CRS_CODE ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.CRS_CODE = #4.CRS_CODE ] Output [ #1.DEPT_CODE ] ; #6 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.DEPT_CODE = #6.DEPT_CODE ] Output [ #5.DEPT_CODE , #6.DEPT_NAME ] ; #8 = Aggregate [ #7 ] GroupBy [ DEPT_CODE ] Output [ countstar AS Count_Star , DEPT_NAME ] ; #9 = TopSort [ #8 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , DEPT_NAME ]"
    },
    {
        "id": "6e7db54872451a67732a6c58573660220839f48fb45cb69e6f535882e6f4e351",
        "question": "What is the name of the department with the most students enrolled?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ DEPT_CODE , CRS_CODE ] ; #2 = Scan Table [ ENROLL ] Output [ CLASS_CODE ] ; #3 = Scan Table [ CLASS ] Output [ CLASS_CODE , CRS_CODE ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.CLASS_CODE = #3.CLASS_CODE ] Output [ #3.CRS_CODE ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.CRS_CODE = #4.CRS_CODE ] Output [ #1.DEPT_CODE ] ; #6 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.DEPT_CODE = #6.DEPT_CODE ] Output [ #5.DEPT_CODE , #6.DEPT_NAME ] ; #8 = Aggregate [ #7 ] GroupBy [ DEPT_CODE ] Output [ countstar AS Count_Star , DEPT_NAME ] ; #9 = TopSort [ #8 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , DEPT_NAME ]"
    },
    {
        "id": "7e178e67eff3f4386371b8f3da09fae703215a5dd3f851ecb6b45984dda58733",
        "question": "list names of all departments ordered by their names.",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME ] ; #2 = Sort [ #1 ] OrderBy [ DEPT_NAME ASC ] Output [ DEPT_NAME ]"
    },
    {
        "id": "027ab845665b11be4e0d35fcbad8801cdb6bc0c5216242ed9b2709b35a3c510b",
        "question": "What are the names of all departments in alphabetical order?",
        "parsing_tree": "college_1 | #1 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME ] ; #2 = Sort [ #1 ] OrderBy [ DEPT_NAME ASC ] Output [ DEPT_NAME ]"
    },
    {
        "id": "6dbcce6b878fde267d4b238ebe09def997b4add6770a03796d7cf529ae2fce87",
        "question": "List the codes of all courses that take place in room KLR209.",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CLASS_ROOM = 'KLR209' ] Output [ CLASS_CODE , CLASS_ROOM ]"
    },
    {
        "id": "eecd97977f1c526a4368ef73a3517f414b8864b38b16e38d245fe59546289bd8",
        "question": "What are the codes of all the courses that are located in room KLR209?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CLASS_ROOM = 'KLR209' ] Output [ CLASS_CODE , CLASS_ROOM ]"
    },
    {
        "id": "3747fdbb54cb015a526396f6a61d4b85bb821d5d3bf9ed8cb0441f29685f232f",
        "question": "List the first name of all employees with job code PROF ordered by their date of birth.",
        "parsing_tree": "college_1 | #1 = Scan Table [ EMPLOYEE ] Predicate [ EMP_JOBCODE = 'PROF' ] Output [ EMP_JOBCODE , EMP_DOB , EMP_FNAME ] ; #2 = Sort [ #1 ] OrderBy [ EMP_DOB ASC ] Output [ EMP_DOB , EMP_FNAME ]"
    },
    {
        "id": "a211b85b78ee3a7a4dba983468b9261ee70de99ba3494d0a7f290a47e7c708d7",
        "question": "What are the first names of all employees that are professors ordered by date of birth?",
        "parsing_tree": "college_1 | #1 = Scan Table [ EMPLOYEE ] Predicate [ EMP_JOBCODE = 'PROF' ] Output [ EMP_JOBCODE , EMP_DOB , EMP_FNAME ] ; #2 = Sort [ #1 ] OrderBy [ EMP_DOB ASC ] Output [ EMP_DOB , EMP_FNAME ]"
    },
    {
        "id": "b6e1af81cc0f57dbe27ab1b9f8fce07c857b946c3c4612b893b1af19e70aec09",
        "question": "What is the first and last name of the oldest employee?",
        "parsing_tree": "college_1 | #1 = Scan Table [ EMPLOYEE ] Output [ EMP_DOB , EMP_FNAME , EMP_LNAME ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ EMP_DOB ASC ] Output [ EMP_DOB , EMP_FNAME , EMP_LNAME ]"
    },
    {
        "id": "486d200c3ce739031eaa5d63821c1e241e2b1285bfe936ceb3365df05461618e",
        "question": "What are the first and last names of the employee with the earliest date of birth?",
        "parsing_tree": "college_1 | #1 = Scan Table [ EMPLOYEE ] Output [ EMP_DOB , EMP_FNAME , EMP_LNAME ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ EMP_DOB ASC ] Output [ EMP_DOB , EMP_FNAME , EMP_LNAME ]"
    },
    {
        "id": "51660593d9077a733885e4064c3c3b86751d18b5123ef359d198fc221130c802",
        "question": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Predicate [ STU_GPA > 3.0 ] Output [ STU_FNAME , STU_GPA , STU_LNAME , STU_DOB ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ STU_DOB DESC ] Output [ STU_FNAME , STU_GPA , STU_LNAME , STU_DOB ]"
    },
    {
        "id": "8d8a58087cf1b00afc6cbb13494b1bff44c94be1a58e14558358a943862e09b9",
        "question": "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Predicate [ STU_GPA > 3.0 ] Output [ STU_FNAME , STU_GPA , STU_LNAME , STU_DOB ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ STU_DOB DESC ] Output [ STU_FNAME , STU_GPA , STU_LNAME , STU_DOB ]"
    },
    {
        "id": "6f0d0ce8eb16c942ca25f07009e974ccde14fe0652e74bb685fc3a15dab5e206",
        "question": "What is the first name of students who got grade C in any class?",
        "parsing_tree": "college_1 | #1 = Scan Table [ ENROLL ] Predicate [ ENROLL_GRADE = 'C' ] Output [ STU_NUM , ENROLL_GRADE ] ; #2 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_FNAME ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.STU_NUM = #2.STU_NUM ] Distinct [ true ] Output [ #2.STU_FNAME ]"
    },
    {
        "id": "d73411572c416d9c3d57683fefeb4747c8334ffba3f9b803bb7474f4d76b44e4",
        "question": "What are the first names of all students who got a grade C in a class?",
        "parsing_tree": "college_1 | #1 = Scan Table [ ENROLL ] Predicate [ ENROLL_GRADE = 'C' ] Output [ STU_NUM , ENROLL_GRADE ] ; #2 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_FNAME ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.STU_NUM = #2.STU_NUM ] Distinct [ true ] Output [ #2.STU_FNAME ]"
    },
    {
        "id": "275a8e93eaf5c2687f5d1c603128b490c0765c135daa196c83047bd73dd00de9",
        "question": "What are the first names of the professors who do not teach a class.",
        "parsing_tree": "college_1 | #1 = Scan Table [ EMPLOYEE ] Predicate [ EMP_JOBCODE = 'PROF' ] Distinct [ true ] Output [ EMP_JOBCODE , EMP_FNAME ] ; #2 = Scan Table [ CLASS ] Output [ PROF_NUM ] ; #3 = Scan Table [ EMPLOYEE ] Output [ EMP_FNAME , EMP_NUM ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.PROF_NUM = #3.EMP_NUM ] Output [ #3.EMP_FNAME ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.EMP_FNAME = #4.EMP_FNAME ] Output [ #1.EMP_FNAME ]"
    },
    {
        "id": "528ad0fce75c34a12a9174ffde686213b7ad0e5cb049a57a0aa64a95e5cb0261",
        "question": "What are the first names of all professors not teaching any classes?",
        "parsing_tree": "college_1 | #1 = Scan Table [ EMPLOYEE ] Predicate [ EMP_JOBCODE = 'PROF' ] Distinct [ true ] Output [ EMP_JOBCODE , EMP_FNAME ] ; #2 = Scan Table [ CLASS ] Output [ PROF_NUM ] ; #3 = Scan Table [ EMPLOYEE ] Output [ EMP_FNAME , EMP_NUM ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.PROF_NUM = #3.EMP_NUM ] Output [ #3.EMP_FNAME ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.EMP_FNAME = #4.EMP_FNAME ] Output [ #1.EMP_FNAME ]"
    },
    {
        "id": "efb2ec47c2a36392d67b1f8b48c3b22cabc73b2b487b398d3d83829f11ebfb85",
        "question": "What is the code of the course which the student whose last name is Smithson took?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Predicate [ STU_LNAME = 'Smithson' ] Output [ STU_NUM , STU_LNAME ] ; #2 = Scan Table [ ENROLL ] Output [ STU_NUM , CLASS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.STU_NUM = #2.STU_NUM ] Output [ #2.CLASS_CODE ] ; #4 = Scan Table [ CLASS ] Output [ CLASS_CODE , CRS_CODE ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.CLASS_CODE = #4.CLASS_CODE ] Output [ #4.CRS_CODE ]"
    },
    {
        "id": "85c6e76cdcc5fca4f9a916063cc6bb705e793cb61c0b10c944be4be297b54abf",
        "question": "What are the course codes for every class that the student with the last name Smithson took?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Predicate [ STU_LNAME = 'Smithson' ] Output [ STU_NUM , STU_LNAME ] ; #2 = Scan Table [ ENROLL ] Output [ STU_NUM , CLASS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.STU_NUM = #2.STU_NUM ] Output [ #2.CLASS_CODE ] ; #4 = Scan Table [ CLASS ] Output [ CLASS_CODE , CRS_CODE ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.CLASS_CODE = #4.CLASS_CODE ] Output [ #4.CRS_CODE ]"
    },
    {
        "id": "01f400b028773690b179025e6e29803b680e03abc43807041367ed81e4e9d4aa",
        "question": "What are the description and credit of the course which the student whose last name is Smithson took?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Predicate [ STU_LNAME = 'Smithson' ] Output [ STU_NUM , STU_LNAME ] ; #2 = Scan Table [ ENROLL ] Output [ STU_NUM , CLASS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.STU_NUM = #2.STU_NUM ] Output [ #2.CLASS_CODE ] ; #4 = Scan Table [ CLASS ] Output [ CLASS_CODE , CRS_CODE ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.CLASS_CODE = #4.CLASS_CODE ] Output [ #4.CRS_CODE ] ; #6 = Scan Table [ COURSE ] Output [ CRS_DESCRIPTION , CRS_CREDIT , CRS_CODE ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.CRS_CODE = #6.CRS_CODE ] Output [ #6.CRS_DESCRIPTION , #6.CRS_CREDIT ]"
    },
    {
        "id": "61700510798de23e3ae58afd0aa3c6f940cac1e1423bc9a607056b740c79799e",
        "question": "How many credits is the course that the student with the last name Smithson took, and what is its description?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Predicate [ STU_LNAME = 'Smithson' ] Output [ STU_NUM , STU_LNAME ] ; #2 = Scan Table [ ENROLL ] Output [ STU_NUM , CLASS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.STU_NUM = #2.STU_NUM ] Output [ #2.CLASS_CODE ] ; #4 = Scan Table [ CLASS ] Output [ CLASS_CODE , CRS_CODE ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.CLASS_CODE = #4.CLASS_CODE ] Output [ #4.CRS_CODE ] ; #6 = Scan Table [ COURSE ] Output [ CRS_DESCRIPTION , CRS_CREDIT , CRS_CODE ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.CRS_CODE = #6.CRS_CODE ] Output [ #6.CRS_DESCRIPTION , #6.CRS_CREDIT ]"
    },
    {
        "id": "0e61c57b6e09e4aa35955e359ab31cc83c74d6182c7f484b18f5f1da2e1e2c46",
        "question": "How many professors who has a either Ph.D. or MA degree?",
        "parsing_tree": "college_1 | #1 = Scan Table [ PROFESSOR ] Predicate [ PROF_HIGH_DEGREE = 'MA' OR PROF_HIGH_DEGREE = 'D .' ] Output [ PROF_HIGH_DEGREE ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4195f56c11feed7bc01d0204aed61c9136e64a8f745fda90c080ed9201326b10",
        "question": "How many professors attained either Ph.D. or Masters degrees?",
        "parsing_tree": "college_1 | #1 = Scan Table [ PROFESSOR ] Predicate [ PROF_HIGH_DEGREE = 'MA' OR PROF_HIGH_DEGREE = 'D .' ] Output [ PROF_HIGH_DEGREE ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7c8e1127fa25ee4e9402c3914cb9e7aaa81386cdab61075b4374039f07366278",
        "question": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'CIS-220' ] Output [ PROF_NUM , CRS_CODE ] ; #2 = Scan Table [ EMPLOYEE ] Output [ EMP_FNAME , EMP_NUM ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.PROF_NUM = #2.EMP_NUM ] Distinct [ true ] Output [ #2.EMP_FNAME ] ; #4 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'QM-261' ] Output [ PROF_NUM , CRS_CODE ] ; #5 = Scan Table [ EMPLOYEE ] Output [ EMP_FNAME , EMP_NUM ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.PROF_NUM = #5.EMP_NUM ] Output [ #5.EMP_FNAME ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.EMP_FNAME = #6.EMP_FNAME ] Output [ #3.EMP_FNAME ]"
    },
    {
        "id": "8bdc706f417056ff294bbf5a434f047c64eb3e04462886852b849087bcc655c1",
        "question": "What is the first name of the professor who is teaching CIS-220 and QM-261?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'CIS-220' ] Output [ PROF_NUM , CRS_CODE ] ; #2 = Scan Table [ EMPLOYEE ] Output [ EMP_FNAME , EMP_NUM ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.PROF_NUM = #2.EMP_NUM ] Distinct [ true ] Output [ #2.EMP_FNAME ] ; #4 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'QM-261' ] Output [ PROF_NUM , CRS_CODE ] ; #5 = Scan Table [ EMPLOYEE ] Output [ EMP_FNAME , EMP_NUM ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.PROF_NUM = #5.EMP_NUM ] Output [ #5.EMP_FNAME ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.EMP_FNAME = #6.EMP_FNAME ] Output [ #3.EMP_FNAME ]"
    },
    {
        "id": "471af49935ba51d0d740f9b0d20a91fe26ae531fd97f8e4693cfa00ec91e2d5e",
        "question": "What is the average gpa of the students enrolled in the course with code ACCT-211?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Output [ CLASS_CODE , CRS_CODE ] ; #2 = Scan Table [ ENROLL ] Output [ STU_NUM , CLASS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CLASS_CODE = #2.CLASS_CODE ] Output [ #2.STU_NUM ] ; #4 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_GPA ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.STU_NUM = #4.STU_NUM ] Output [ #4.STU_GPA ] ; #6 = Aggregate [ #5 ] Output [ AVG(STU_GPA) AS Avg_STU_GPA ]"
    },
    {
        "id": "fbc15d76cea9e8b3b60f2c14b71ea12279df7e306d222b2feeb2baf71afc71b7",
        "question": "What is the average GPA of students taking ACCT-211?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Output [ CLASS_CODE , CRS_CODE ] ; #2 = Scan Table [ ENROLL ] Output [ STU_NUM , CLASS_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.CLASS_CODE = #2.CLASS_CODE ] Output [ #2.STU_NUM ] ; #4 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_GPA ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.STU_NUM = #4.STU_NUM ] Output [ #4.STU_GPA ] ; #6 = Aggregate [ #5 ] Output [ AVG(STU_GPA) AS Avg_STU_GPA ]"
    },
    {
        "id": "8552acc8d9deaa33af1b1dd07339f7d8587ba8be1cf2513e97d428cbc718c630",
        "question": "What is the first name, gpa and phone number of the top 5 students with highest gpa?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ STU_FNAME , STU_PHONE , STU_GPA ] ; #2 = TopSort [ #1 ] Rows [ 5 ] OrderBy [ STU_GPA DESC ] Output [ STU_FNAME , STU_PHONE , STU_GPA ]"
    },
    {
        "id": "cdc852da5e1c93a8d9e137b6bbdead3e0b4f2ca3b282c21ac484e8b8dfb99d83",
        "question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ STU_FNAME , STU_PHONE , STU_GPA ] ; #2 = TopSort [ #1 ] Rows [ 5 ] OrderBy [ STU_GPA DESC ] Output [ STU_FNAME , STU_PHONE , STU_GPA ]"
    },
    {
        "id": "10fa9c054d058cfa8b2d1b4f1d20b513cbfee8d6e284f525f4ef512385524598",
        "question": "What is the department name of the students with lowest gpa belongs to?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ DEPT_CODE , STU_GPA ] ; #2 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #2.DEPT_NAME , #1.STU_GPA ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ STU_GPA ASC ] Output [ DEPT_NAME , STU_GPA ]"
    },
    {
        "id": "2424a991a10b902088194c2b38760e1c5708a10302397de4f9f3c22c847e6276",
        "question": "What is the name of the department with the student that has the lowest GPA?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ DEPT_CODE , STU_GPA ] ; #2 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #2.DEPT_NAME , #1.STU_GPA ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ STU_GPA ASC ] Output [ DEPT_NAME , STU_GPA ]"
    },
    {
        "id": "3f5684a177c576ea751a951029e8233c7a233a316177a393f19be709373ea0f1",
        "question": "Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ STU_GPA ] ; #2 = Aggregate [ #1 ] Output [ AVG(STU_GPA) AS Avg_STU_GPA ] ; #3 = Scan Table [ STUDENT ] Output [ STU_FNAME , STU_GPA ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.STU_GPA < #2.Avg_STU_GPA ] Output [ #3.STU_FNAME , #3.STU_GPA ]"
    },
    {
        "id": "15468fdf41f53ee17939fa43d790ff30fd6ed46c48b809733d16576d56ebc382",
        "question": "What is the first name and GPA of every student that has a GPA lower than average?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ STU_GPA ] ; #2 = Aggregate [ #1 ] Output [ AVG(STU_GPA) AS Avg_STU_GPA ] ; #3 = Scan Table [ STUDENT ] Output [ STU_FNAME , STU_GPA ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.STU_GPA < #2.Avg_STU_GPA ] Output [ #3.STU_FNAME , #3.STU_GPA ]"
    },
    {
        "id": "a81b643d995d7dc6b425921c6721d1171f7781d4ef7392a6b1616bc091c2a52e",
        "question": "Find the name and address of the department that has the highest number of students.",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ DEPT_CODE ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPT_CODE ] Output [ countstar AS Count_Star , DEPT_CODE ] ; #3 = Scan Table [ DEPARTMENT ] Output [ DEPT_ADDRESS , DEPT_NAME , DEPT_CODE ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.DEPT_CODE = #3.DEPT_CODE ] Output [ #3.DEPT_ADDRESS , #2.Count_Star , #3.DEPT_NAME ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , DEPT_ADDRESS , DEPT_NAME ]"
    },
    {
        "id": "4aa0e3efacdfa12d89abd119294695d4cbc6ba9b23c297d6416597560de9bf5f",
        "question": "What is the name and address of the department with the most students?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ DEPT_CODE ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPT_CODE ] Output [ countstar AS Count_Star , DEPT_CODE ] ; #3 = Scan Table [ DEPARTMENT ] Output [ DEPT_ADDRESS , DEPT_NAME , DEPT_CODE ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.DEPT_CODE = #3.DEPT_CODE ] Output [ #3.DEPT_ADDRESS , #2.Count_Star , #3.DEPT_NAME ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , DEPT_ADDRESS , DEPT_NAME ]"
    },
    {
        "id": "e991fa1f2327639b73b30128c087377e6f91d5e35e0b83e40a4c69c56b1e1cef",
        "question": "Find the name, address, number of students in the departments that have the top 3 highest number of students.",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ DEPT_CODE ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPT_CODE ] Output [ countstar AS Count_Star , DEPT_CODE ] ; #3 = Scan Table [ DEPARTMENT ] Output [ DEPT_ADDRESS , DEPT_NAME , DEPT_CODE ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.DEPT_CODE = #3.DEPT_CODE ] Output [ #3.DEPT_ADDRESS , #2.Count_Star , #3.DEPT_NAME ] ; #5 = TopSort [ #4 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , DEPT_ADDRESS , DEPT_NAME ]"
    },
    {
        "id": "e6a03745f5c2b1fa162bce86604316fcf3dcc2648ac5d06c5afb69c0f9dc8457",
        "question": "What is the name, address, and number of students in the departments that have the 3 most students?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Output [ DEPT_CODE ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPT_CODE ] Output [ countstar AS Count_Star , DEPT_CODE ] ; #3 = Scan Table [ DEPARTMENT ] Output [ DEPT_ADDRESS , DEPT_NAME , DEPT_CODE ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.DEPT_CODE = #3.DEPT_CODE ] Output [ #3.DEPT_ADDRESS , #2.Count_Star , #3.DEPT_NAME ] ; #5 = TopSort [ #4 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , DEPT_ADDRESS , DEPT_NAME ]"
    },
    {
        "id": "3a4633ded37dbfb9303a72019bcd21b93393aa143092779eb10b4d4fc05bec6d",
        "question": "Find the first names of all instructors who have taught some course and the course code.",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Output [ PROF_NUM , CRS_CODE ] ; #2 = Scan Table [ EMPLOYEE ] Output [ EMP_FNAME , EMP_NUM ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.PROF_NUM = #2.EMP_NUM ] Output [ #1.CRS_CODE , #2.EMP_FNAME ]"
    },
    {
        "id": "6daafc86eb6c5a85905b6c188b940f183d7510eac24774f9f8e4ed2a68c54a0a",
        "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Output [ PROF_NUM , CRS_CODE ] ; #2 = Scan Table [ EMPLOYEE ] Output [ EMP_FNAME , EMP_NUM ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.PROF_NUM = #2.EMP_NUM ] Output [ #1.CRS_CODE , #2.EMP_FNAME ]"
    },
    {
        "id": "6c1b1eaee2026895634cd165f96b6d8f0db398e9bbcc76c82554fb74b4587e98",
        "question": "Find the first names of all instructors who have taught some course and the course description.",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ CRS_DESCRIPTION , CRS_CODE ] ; #2 = Scan Table [ CLASS ] Output [ PROF_NUM , CRS_CODE ] ; #3 = Scan Table [ EMPLOYEE ] Output [ EMP_FNAME , EMP_NUM ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.PROF_NUM = #3.EMP_NUM ] Output [ #3.EMP_FNAME , #2.CRS_CODE ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.CRS_CODE = #4.CRS_CODE ] Output [ #4.EMP_FNAME , #1.CRS_DESCRIPTION ]"
    },
    {
        "id": "30f0bd91bb4b6b236454572050574ea5c1952f43f102d2fd88358f9179f73148",
        "question": "What are the first names of all teachers who have taught a course and the corresponding descriptions?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ CRS_DESCRIPTION , CRS_CODE ] ; #2 = Scan Table [ CLASS ] Output [ PROF_NUM , CRS_CODE ] ; #3 = Scan Table [ EMPLOYEE ] Output [ EMP_FNAME , EMP_NUM ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.PROF_NUM = #3.EMP_NUM ] Output [ #3.EMP_FNAME , #2.CRS_CODE ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.CRS_CODE = #4.CRS_CODE ] Output [ #4.EMP_FNAME , #1.CRS_DESCRIPTION ]"
    },
    {
        "id": "53ed65752f37af84435adc371742a4f109b9963f33e23ce5039ba5d8a5eeb78d",
        "question": "Find names of all students who took some course and the course description.",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ CRS_DESCRIPTION , CRS_CODE ] ; #2 = Scan Table [ ENROLL ] Output [ STU_NUM , CLASS_CODE ] ; #3 = Scan Table [ CLASS ] Output [ CLASS_CODE , CRS_CODE ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.CLASS_CODE = #3.CLASS_CODE ] Output [ #2.STU_NUM , #3.CRS_CODE ] ; #5 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_FNAME , STU_LNAME ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.STU_NUM = #5.STU_NUM ] Output [ #4.CRS_CODE , #5.STU_LNAME , #5.STU_FNAME ] ; #7 = Join [ #1 , #6 ] Predicate [ #1.CRS_CODE = #6.CRS_CODE ] Output [ #1.CRS_DESCRIPTION , #6.STU_FNAME , #6.STU_LNAME ]"
    },
    {
        "id": "85dad1ec86898874dd4ef37d6bc3e84f9fb27a97cf6dd9931d39be763bcf2130",
        "question": "What are the names of all students who took a class and the corresponding course descriptions?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Output [ CRS_DESCRIPTION , CRS_CODE ] ; #2 = Scan Table [ ENROLL ] Output [ STU_NUM , CLASS_CODE ] ; #3 = Scan Table [ CLASS ] Output [ CLASS_CODE , CRS_CODE ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.CLASS_CODE = #3.CLASS_CODE ] Output [ #2.STU_NUM , #3.CRS_CODE ] ; #5 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_FNAME , STU_LNAME ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.STU_NUM = #5.STU_NUM ] Output [ #4.CRS_CODE , #5.STU_LNAME , #5.STU_FNAME ] ; #7 = Join [ #1 , #6 ] Predicate [ #1.CRS_CODE = #6.CRS_CODE ] Output [ #1.CRS_DESCRIPTION , #6.STU_FNAME , #6.STU_LNAME ]"
    },
    {
        "id": "06462d0a528aca3d2a89b3460e5401652ec2054fac2b21c11246ad000060756d",
        "question": "Find names of all students who took some course and got A or C.",
        "parsing_tree": "college_1 | #1 = Scan Table [ ENROLL ] Predicate [ ENROLL_GRADE = 'A' OR ENROLL_GRADE = 'C' ] Output [ STU_NUM , ENROLL_GRADE ] ; #2 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_FNAME , STU_LNAME ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.STU_NUM = #2.STU_NUM ] Output [ #2.STU_FNAME , #2.STU_LNAME ]"
    },
    {
        "id": "e41c21bbe9596aaf39b925ca98eb1de8a404984f74a6a1deae80eabcf40a0d66",
        "question": "What are the names of all students taking a course who received an A or C?",
        "parsing_tree": "college_1 | #1 = Scan Table [ ENROLL ] Predicate [ ENROLL_GRADE = 'A' OR ENROLL_GRADE = 'C' ] Output [ STU_NUM , ENROLL_GRADE ] ; #2 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_FNAME , STU_LNAME ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.STU_NUM = #2.STU_NUM ] Output [ #2.STU_FNAME , #2.STU_LNAME ]"
    },
    {
        "id": "dca9ffd349eb4d54f9326e4bf6ced74fb8a40c941e78759210f3c42ac1f82c51",
        "question": "What is the last name of the student who got a grade A in the class with code 10018.",
        "parsing_tree": "college_1 | #1 = Scan Table [ ENROLL ] Predicate [ ENROLL_GRADE = 'A' AND CLASS_CODE = 10018 ] Output [ STU_NUM , ENROLL_GRADE , CLASS_CODE ] ; #2 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_LNAME ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.STU_NUM = #2.STU_NUM ] Output [ #2.STU_LNAME ]"
    },
    {
        "id": "b0d0ad573aac4e3224bb6dde3e483b13b39e50bd253f0c451962f3d6a19295cb",
        "question": "What is the last name of the student who received an A in the class with the code 10018?",
        "parsing_tree": "college_1 | #1 = Scan Table [ ENROLL ] Predicate [ ENROLL_GRADE = 'A' AND CLASS_CODE = 10018 ] Output [ STU_NUM , ENROLL_GRADE , CLASS_CODE ] ; #2 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_LNAME ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.STU_NUM = #2.STU_NUM ] Output [ #2.STU_LNAME ]"
    },
    {
        "id": "3316089bc5080b4e3c3e983a08083c8165b93a07ab227d43930ba70819a27ef8",
        "question": "Find the first names of professors who are teaching more than one class.",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Output [ PROF_NUM ] ; #2 = Aggregate [ #1 ] GroupBy [ PROF_NUM ] Output [ countstar AS Count_Star , PROF_NUM ] ; #3 = Scan Table [ EMPLOYEE ] Output [ EMP_FNAME , EMP_NUM ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.PROF_NUM = #3.EMP_NUM ] Output [ #3.EMP_FNAME , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ EMP_FNAME ]"
    },
    {
        "id": "4a248a598bd79ae2c6b649cd6a37c98643426180e3eb61f4768af6728df6e9aa",
        "question": "What are the first names of all professors who teach more than one class?",
        "parsing_tree": "college_1 | #1 = Scan Table [ CLASS ] Output [ PROF_NUM ] ; #2 = Aggregate [ #1 ] GroupBy [ PROF_NUM ] Output [ countstar AS Count_Star , PROF_NUM ] ; #3 = Scan Table [ EMPLOYEE ] Output [ EMP_FNAME , EMP_NUM ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.PROF_NUM = #3.EMP_NUM ] Output [ #3.EMP_FNAME , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ EMP_FNAME ]"
    },
    {
        "id": "5fbe1c4d5ddcbe2d8c457d6756957d428e3f674de8a4e80ccd6d28e07cf95d9e",
        "question": "Find the first names of students who took exactly one class.",
        "parsing_tree": "college_1 | #1 = Scan Table [ ENROLL ] Output [ STU_NUM ] ; #2 = Aggregate [ #1 ] GroupBy [ STU_NUM ] Output [ countstar AS Count_Star , STU_NUM ] ; #3 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_FNAME ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.STU_NUM = #3.STU_NUM ] Output [ #3.STU_FNAME , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star = 1 ] Output [ STU_FNAME ]"
    },
    {
        "id": "1f194e33dc4106e4b49564c14948086a7c7fb00b66bc5cec4416ae2243174454",
        "question": "What are the first names of student who only took one course?",
        "parsing_tree": "college_1 | #1 = Scan Table [ ENROLL ] Output [ STU_NUM ] ; #2 = Aggregate [ #1 ] GroupBy [ STU_NUM ] Output [ countstar AS Count_Star , STU_NUM ] ; #3 = Scan Table [ STUDENT ] Output [ STU_NUM , STU_FNAME ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.STU_NUM = #3.STU_NUM ] Output [ #3.STU_FNAME , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star = 1 ] Output [ STU_FNAME ]"
    },
    {
        "id": "f7b1a34a706b2451d153ba5004344da7f2be46301a383f707224d1dd96cb9927",
        "question": "Find the name of department that offers the class whose description has the word \"Statistics\".",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Predicate [ CRS_DESCRIPTION like '%Statistics%' ] Output [ CRS_DESCRIPTION , DEPT_CODE ] ; #2 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #2.DEPT_NAME ]"
    },
    {
        "id": "572b19c1741d075f5053335793f39ba16fd9d8c5f7a5c7c24beaee3195fb28fa",
        "question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?",
        "parsing_tree": "college_1 | #1 = Scan Table [ COURSE ] Predicate [ CRS_DESCRIPTION like '%Statistics%' ] Output [ CRS_DESCRIPTION , DEPT_CODE ] ; #2 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #2.DEPT_NAME ]"
    },
    {
        "id": "52c8a0b08dcdd4f8c23f1a3431d29eb715464da16f43943e60ee9e6c8646db63",
        "question": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Predicate [ STU_LNAME like 'S%' ] Output [ STU_NUM , STU_FNAME , STU_LNAME ] ; #2 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Output [ CLASS_CODE , CRS_CODE ] ; #3 = Scan Table [ ENROLL ] Output [ STU_NUM , CLASS_CODE ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.CLASS_CODE = #3.CLASS_CODE ] Output [ #3.STU_NUM ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.STU_NUM = #4.STU_NUM ] Output [ #1.STU_FNAME ]"
    },
    {
        "id": "402c4cb3e630df73c3188129d8263aed5627e35381fd70402eb6416acda89cb9",
        "question": "What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?",
        "parsing_tree": "college_1 | #1 = Scan Table [ STUDENT ] Predicate [ STU_LNAME like 'S%' ] Output [ STU_NUM , STU_FNAME , STU_LNAME ] ; #2 = Scan Table [ CLASS ] Predicate [ CRS_CODE = 'ACCT-211' ] Output [ CLASS_CODE , CRS_CODE ] ; #3 = Scan Table [ ENROLL ] Output [ STU_NUM , CLASS_CODE ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.CLASS_CODE = #3.CLASS_CODE ] Output [ #3.STU_NUM ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.STU_NUM = #4.STU_NUM ] Output [ #1.STU_FNAME ]"
    },
    {
        "id": "b836ba548752f3317120cd69f0691af516ada73e2879519009a60c0da3f70b80",
        "question": "How many clubs are there?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9fe856b1edc8df367c79fbf70d997ea5b60503e7c19f594efd9c7760484b2ed7",
        "question": "What is the total number of clubs?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "32698f318019a325fce51ad870ab8bf4584e1da6cfaeee3453239f0cb9002705",
        "question": "List the distinct region of clubs in ascending alphabetical order.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club ] Output [ Region ] ; #2 = Sort [ #1 ] OrderBy [ Region ASC ] Distinct [ true ] Output [ Region ]"
    },
    {
        "id": "ba854aeb4d3845aa65432ec1d5ce731dd16a905ede080b17f07567c309519bdd",
        "question": "What are the different regions of clubs in ascending alphabetical order?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club ] Output [ Region ] ; #2 = Sort [ #1 ] OrderBy [ Region ASC ] Distinct [ true ] Output [ Region ]"
    },
    {
        "id": "053f77d5254d2ab2d7142e396ef2414b67aca86cc132d2db5d4c4f08824b1432",
        "question": "What is the average number of gold medals for clubs?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club_rank ] Output [ Gold ] ; #2 = Aggregate [ #1 ] Output [ AVG(Gold) AS Avg_Gold ]"
    },
    {
        "id": "81e988f69f4a2eb44e39601ac8e47f3bf069f9f215d661263d93f67385ab30d0",
        "question": "What is the average number of gold medals for a club?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club_rank ] Output [ Gold ] ; #2 = Aggregate [ #1 ] Output [ AVG(Gold) AS Avg_Gold ]"
    },
    {
        "id": "62dff0afe20ad0663df8a904ffc1dfc605d7ee8aa6e8495c67beeeb62201b42f",
        "question": "What are the types and countries of competitions?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Output [ Country , Competition_type ]"
    },
    {
        "id": "e873060ae1dea0e31aff0a3e1a571d91a63bb9c230dfe6cc3c37aa18b98c7886",
        "question": "What are the types of every competition and in which countries are they located?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Output [ Country , Competition_type ]"
    },
    {
        "id": "0ec307c94d7f22c22beb13ec5b00756ff53145292f3614b08f11646d616896dc",
        "question": "What are the distinct years in which the competitions type is not \"Tournament\"?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Predicate [ Competition_type <> 'Tournament' ] Distinct [ true ] Output [ Year ]"
    },
    {
        "id": "82ab5aa7197eb7894d022799710486b7d54415bca00eb2cd991722aa00ac2e24",
        "question": "What are the different years for all competitions that are not of type equal to tournament?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Predicate [ Competition_type <> 'Tournament' ] Distinct [ true ] Output [ Year ]"
    },
    {
        "id": "534f6716fc44b3448b37c9deab784460ba499fb2924f835471ea64e60f2c7142",
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club_rank ] Output [ Silver ] ; #2 = Aggregate [ #1 ] Output [ MIN(Silver) AS Min_Silver , MAX(Silver) AS Max_Silver ]"
    },
    {
        "id": "113e4536feadf56706fb00887f7c6128de0037a1584b133fb0f9b8312d87504b",
        "question": "What are the maximum and minimum number of silver medals for all the clubs?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club_rank ] Output [ Silver ] ; #2 = Aggregate [ #1 ] Output [ MIN(Silver) AS Min_Silver , MAX(Silver) AS Max_Silver ]"
    },
    {
        "id": "d0fd04de84efc2ee7f891255802b46a1132e3cb9f3516f335d12efa1d9e3fe57",
        "question": "How many clubs have total medals less than 10?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club_rank ] Predicate [ Total < 10.0 ] Output [ Total ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "275ba16b4cd2a91c4b26bc056ee042b023871d9fc26967f7b2db27da38257f7d",
        "question": "What is the total number of clubs that have less than 10 medals in total?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club_rank ] Predicate [ Total < 10.0 ] Output [ Total ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "06ca2a2852055e740ff5c4c6a9c05ea4857cf796f92ece04b3c67a52e13f3caa",
        "question": "List all club names in ascending order of start year.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club ] Output [ name , Start_year ] ; #2 = Sort [ #1 ] OrderBy [ Start_year ASC ] Output [ name , Start_year ]"
    },
    {
        "id": "c4196c5b34224424320fbf31ab5f3475d48d047011da4403693c3eefeff6d55f",
        "question": "What are the names of all the clubs starting with the oldest?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club ] Output [ name , Start_year ] ; #2 = Sort [ #1 ] OrderBy [ Start_year ASC ] Output [ name , Start_year ]"
    },
    {
        "id": "4752d3434310fdb9fe16c9525354b738fea84fa74d6be77faf8eb1a2162d8470",
        "question": "List all club names in descending alphabetical order.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club ] Output [ name ] ; #2 = Sort [ #1 ] OrderBy [ name DESC ] Output [ name ]"
    },
    {
        "id": "05dac722a0e898b6a18b0973fb9a738b1406a798ca575b4f9321ab8c3dcd4249",
        "question": "What are the names of all the clubs ordered in descending alphabetical order?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club ] Output [ name ] ; #2 = Sort [ #1 ] OrderBy [ name DESC ] Output [ name ]"
    },
    {
        "id": "398ecc550ddbc31112a5e9d5c439a7b5239f73ce25efe07393ab1947d2542ed4",
        "question": "Please show the names and the players of clubs.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club ] Output [ name , Club_ID ] ; #2 = Scan Table [ player ] Output [ Player_ID , Club_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Club_ID = #2.Club_ID ] Output [ #1.name , #2.Player_ID ]"
    },
    {
        "id": "103f74e72aa74903cf8cfecd05462b8b777fa1757a49eceaede2e578bbba6afa",
        "question": "What are the names and players of all the clubs?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club ] Output [ name , Club_ID ] ; #2 = Scan Table [ player ] Output [ Player_ID , Club_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Club_ID = #2.Club_ID ] Output [ #1.name , #2.Player_ID ]"
    },
    {
        "id": "496999bcff788ebcd6bccb0a502b8d0336c35f446accb9106b57bb317ff727db",
        "question": "Show the names of clubs that have players with position \"Right Wing\".",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Predicate [ Position = 'Right Wing' ] Output [ Position , Club_ID ] ; #2 = Scan Table [ club ] Output [ name , Club_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Club_ID = #2.Club_ID ] Output [ #2.name ]"
    },
    {
        "id": "550e34d968d8e7ad9b65a0790bf18c93e85d2101aa32f651385aa672f163be4c",
        "question": "What are the names of the clubs that have players in the position of \"Right Wing\"?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Predicate [ Position = 'Right Wing' ] Output [ Position , Club_ID ] ; #2 = Scan Table [ club ] Output [ name , Club_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Club_ID = #2.Club_ID ] Output [ #2.name ]"
    },
    {
        "id": "2f1c98216c427d25bfc2fd91dbe045f0ef9f629b79fdeb3a63b2e20997043120",
        "question": "What is the average points of players from club with name \"AIB\".",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club ] Predicate [ name = 'AIB' ] Output [ name , Club_ID ] ; #2 = Scan Table [ player ] Output [ Points , Club_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Club_ID = #2.Club_ID ] Output [ #2.Points ] ; #4 = Aggregate [ #3 ] Output [ AVG(Points) AS Avg_Points ]"
    },
    {
        "id": "c55c7f091b10d9aa261492a87c5547b51ab81ef9f2ceee7b619cabcc11b2d264",
        "question": "What is the average number of points for players from the \"AIB\" club?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club ] Predicate [ name = 'AIB' ] Output [ name , Club_ID ] ; #2 = Scan Table [ player ] Output [ Points , Club_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Club_ID = #2.Club_ID ] Output [ #2.Points ] ; #4 = Aggregate [ #3 ] Output [ AVG(Points) AS Avg_Points ]"
    },
    {
        "id": "0cd8ede2175452ba43e685640d51bc759b16138f61b9c22383d8614a204f767c",
        "question": "List the position of players and the average number of points of players of each position.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Output [ Position , Points ] ; #2 = Aggregate [ #1 ] GroupBy [ Position ] Output [ Position , AVG(Points) AS Avg_Points ]"
    },
    {
        "id": "e580abdd5ec86aa8565185856245f37549fb77efe2b0d34966f71adb4ed76bad",
        "question": "For each position, what is the average number of points for players in that position?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Output [ Position , Points ] ; #2 = Aggregate [ #1 ] GroupBy [ Position ] Output [ Position , AVG(Points) AS Avg_Points ]"
    },
    {
        "id": "1887ea97ff38b192923689f6bb2fbb7ed566bff5d8a8d055ce99cd2cfa32cad5",
        "question": "List the position of players with average number of points scored by players of that position bigger than 20.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Output [ name , Position , Points ] ; #2 = Aggregate [ #1 ] GroupBy [ name , Position ] Output [ Position , AVG(Points) AS Avg_Points ] ; #3 = Filter [ #2 ] Predicate [ Avg_Points >= 20.0 ] Output [ Position ]"
    },
    {
        "id": "172d141e946baa02a008fc4378d5a3d248fff9a7128e2d75ac2b60e2f0eeb5a1",
        "question": "What are the positions of players whose average number of points scored by that position is larger than 20?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Output [ name , Position , Points ] ; #2 = Aggregate [ #1 ] GroupBy [ name , Position ] Output [ Position , AVG(Points) AS Avg_Points ] ; #3 = Filter [ #2 ] Predicate [ Avg_Points >= 20.0 ] Output [ Position ]"
    },
    {
        "id": "d5d99b9506abcab600f6b77bbb2dfe2bb62cde77c1ec166ea5d9d482b24bc742",
        "question": "List the types of competition and the number of competitions of each type.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Output [ Competition_type ] ; #2 = Aggregate [ #1 ] GroupBy [ Competition_type ] Output [ countstar AS Count_Star , Competition_type ]"
    },
    {
        "id": "92a61ce21bca633739f3b9b8282631a4388d110609c4b3eeb522f9d2d5cbc2f9",
        "question": "What are the types of competition and number of competitions for that type?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Output [ Competition_type ] ; #2 = Aggregate [ #1 ] GroupBy [ Competition_type ] Output [ countstar AS Count_Star , Competition_type ]"
    },
    {
        "id": "d97abbbc909e9eaefc641b6057fc08094f8d1396538c54492a8520add12bf8d4",
        "question": "List the most common type of competition.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Output [ Competition_type ] ; #2 = Aggregate [ #1 ] GroupBy [ Competition_type ] Output [ countstar AS Count_Star , Competition_type ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Competition_type ]"
    },
    {
        "id": "88a4aa54ecd04b879ca9cca8f293268a09fb8c70f4fe9da34a92f51faa1a6cf8",
        "question": "What is the most common competition type?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Output [ Competition_type ] ; #2 = Aggregate [ #1 ] GroupBy [ Competition_type ] Output [ countstar AS Count_Star , Competition_type ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Competition_type ]"
    },
    {
        "id": "d106694bf373bf4546b0c7dc44fec70ae9043d8668e802952672a562dfb9e25c",
        "question": "List the types of competition that have at most five competitions of that type.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Output [ Competition_type ] ; #2 = Aggregate [ #1 ] GroupBy [ Competition_type ] Output [ countstar AS Count_Star , Competition_type ] ; #3 = Filter [ #2 ] Predicate [ Count_Star <= 5 ] Output [ Competition_type ]"
    },
    {
        "id": "306951a9f80877c78229d8918e7f5e0605561b062c528363864dc89ab606c6f6",
        "question": "What are the types of competition that have most 5 competitions for that type?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Output [ Competition_type ] ; #2 = Aggregate [ #1 ] GroupBy [ Competition_type ] Output [ countstar AS Count_Star , Competition_type ] ; #3 = Filter [ #2 ] Predicate [ Count_Star <= 5 ] Output [ Competition_type ]"
    },
    {
        "id": "d4b8f5741c183f1e02dfc3c77d4127a43ebd9348c58e5ddc5efa08f44e6cb667",
        "question": "List the names of clubs that do not have any players.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club ] Output [ name , Club_ID ] ; #2 = Scan Table [ player ] Output [ Club_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Club_ID IS NULL OR #1.Club_ID = #2.Club_ID ] Output [ #1.name ]"
    },
    {
        "id": "e61ed3f9dd829984886bceb467f5e796abac9cf0d6e8d929855fb77e60fd354f",
        "question": "What are the names of all clubs that do not have any players?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ club ] Output [ name , Club_ID ] ; #2 = Scan Table [ player ] Output [ Club_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Club_ID IS NULL OR #1.Club_ID = #2.Club_ID ] Output [ #1.name ]"
    },
    {
        "id": "016861619599f00315f02170edbca35b5fa8a6716523c931be8ba066c9899069",
        "question": "What are the positions with both players having more than 20 points and less than 10 points.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Predicate [ Points > 20.0 ] Distinct [ true ] Output [ Position , Points ] ; #2 = Scan Table [ player ] Predicate [ Points < 10.0 ] Output [ Position , Points ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Position = #2.Position ] Output [ #1.Position ]"
    },
    {
        "id": "36de8239831202fb1025541638b8a976425c93e24a71cea5fd60511f8bcc99fe",
        "question": "What are the positions of both players that have more than 20 20 points and less than 10 points?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Predicate [ Points > 20.0 ] Distinct [ true ] Output [ Position , Points ] ; #2 = Scan Table [ player ] Predicate [ Points < 10.0 ] Output [ Position , Points ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Position = #2.Position ] Output [ #1.Position ]"
    },
    {
        "id": "d049f9907f2d9b0e3996cc3db04448d6327aa89b4feebc0e690591327d2e7462",
        "question": "Show total points of all players.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Output [ Points ] ; #2 = Aggregate [ #1 ] Output [ SUM(Points) AS Sum_Points ]"
    },
    {
        "id": "76e63ff34cc405f845efb8d25060c9c6875b5fc52957bb1cff8ad901d30aa783",
        "question": "What is the total number of points for all players?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Output [ Points ] ; #2 = Aggregate [ #1 ] Output [ SUM(Points) AS Sum_Points ]"
    },
    {
        "id": "1a2512a56c6a2bab52f02540d8a68f28acffa08a51ac569e26cff20bc542b9e9",
        "question": "how many different positions are there?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Distinct [ true ] Output [ Position ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Position) AS Count_Dist_Position ]"
    },
    {
        "id": "a166675c8170644a2cd4f8b35244c353939530ca2c94f1d63e3551144c88be26",
        "question": "How many different position for players are listed?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Distinct [ true ] Output [ Position ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Position) AS Count_Dist_Position ]"
    },
    {
        "id": "8471ab964876176e1e11ed35d344eafea110e84893b7c151c3a3d6adcb31806e",
        "question": "what are the name of players who get more than the average points.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Output [ Points ] ; #2 = Aggregate [ #1 ] Output [ AVG(Points) AS Avg_Points ] ; #3 = Scan Table [ player ] Output [ name , Points ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Points > #2.Avg_Points ] Output [ #3.name ]"
    },
    {
        "id": "02343ab4f9e613783b5ac308ea4474dd2f587494fe3eef7ecfa5affdbcc89b98",
        "question": "What are the names of all players that got more than the average number of points?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Output [ Points ] ; #2 = Aggregate [ #1 ] Output [ AVG(Points) AS Avg_Points ] ; #3 = Scan Table [ player ] Output [ name , Points ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Points > #2.Avg_Points ] Output [ #3.name ]"
    },
    {
        "id": "4c504e1ad289431be3ee8810744d355a9125f850179728a1a3414859ba4a8ef6",
        "question": "find the number of players whose points are lower than 30 in each position.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Predicate [ Points < 30.0 ] Output [ Position , Points ] ; #2 = Aggregate [ #1 ] GroupBy [ Position ] Output [ countstar AS Count_Star , Position ]"
    },
    {
        "id": "93cbc1bd10aaaff87dfc9ad7426d26dd544f2d101b651fe79d104a39eb500782",
        "question": "What is the number of players who have points less than 30 for each position?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ player ] Predicate [ Points < 30.0 ] Output [ Position , Points ] ; #2 = Aggregate [ #1 ] GroupBy [ Position ] Output [ countstar AS Count_Star , Position ]"
    },
    {
        "id": "e44ceb2f9832f42e63a6c0419cf84403d0a4f17fec316ca1249b0f901a3e3bdf",
        "question": "which country did participated in the most number of Tournament competitions?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Predicate [ Competition_type = 'Tournament' ] Output [ Country , Competition_type ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Country ]"
    },
    {
        "id": "35aba67e05be04e16b8f0fc5a6dc6661c533349ee71a293c54455c759a6c7dba",
        "question": "what is the name of the country that participated in the most tournament competitions?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Predicate [ Competition_type = 'Tournament' ] Output [ Country , Competition_type ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Country ]"
    },
    {
        "id": "0c0621302c9843b3917b21b3ca3cf355e00f0a89874177996959bf3ecfd2be32",
        "question": "which countries did participated in both Friendly and Tournament type competitions.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Predicate [ Competition_type = 'Friendly' ] Distinct [ true ] Output [ Country , Competition_type ] ; #2 = Scan Table [ competition ] Predicate [ Competition_type = 'Tournament' ] Output [ Country , Competition_type ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Country = #2.Country ] Output [ #1.Country ]"
    },
    {
        "id": "80b3bc24eb1e2984c132d99fabbf58755746b96bdf708302f45f20c708548f0c",
        "question": "What are the countries that participated in both friendly and tournament type competitions?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Predicate [ Competition_type = 'Friendly' ] Distinct [ true ] Output [ Country , Competition_type ] ; #2 = Scan Table [ competition ] Predicate [ Competition_type = 'Tournament' ] Output [ Country , Competition_type ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Country = #2.Country ] Output [ #1.Country ]"
    },
    {
        "id": "b0dde1257a1b974d0f857fadcb96e9d454e2724a219b8db12d28f6bacaca2f9f",
        "question": "Find the countries that have never participated in any competition with Friendly type.",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Distinct [ true ] Output [ Country ] ; #2 = Scan Table [ competition ] Predicate [ Competition_type = 'Friendly' ] Output [ Country , Competition_type ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Country = #2.Country ] Output [ #1.Country ]"
    },
    {
        "id": "227e178f9900a25bd20fc6248e7ef124d98427cb935561368126fb3dfb38b813",
        "question": "What are the countries that have never participated in any friendly-type competitions?",
        "parsing_tree": "sports_competition | #1 = Scan Table [ competition ] Distinct [ true ] Output [ Country ] ; #2 = Scan Table [ competition ] Predicate [ Competition_type = 'Friendly' ] Output [ Country , Competition_type ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Country = #2.Country ] Output [ #1.Country ]"
    },
    {
        "id": "73abe9a5e27dd213ad6d044b3d18a432f4f8d73b786b74312025e96d78c32eb1",
        "question": "How many furniture components are there in total?",
        "parsing_tree": "manufacturer | #1 = Scan Table [ furniture ] Output [ Num_of_Component ] ; #2 = Aggregate [ #1 ] Output [ SUM(Num_of_Component) AS Sum_Num_of_Component ]"
    },
    {
        "id": "afe9104a3125137565f341f022173e3dfe50004279b0d0cbe670ac46c9512fcf",
        "question": "Return the name and id of the furniture with the highest market rate.",
        "parsing_tree": "manufacturer | #1 = Scan Table [ furniture ] Output [ Name , Market_Rate , Furniture_ID ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Market_Rate DESC ] Output [ Name , Market_Rate , Furniture_ID ]"
    },
    {
        "id": "6ffae73c389a109120823df69153515bf9ed5d5bdf08b2b36d66b1fcdf9d83c0",
        "question": "Find the component amounts and names of all furnitures that have more than 10 components.",
        "parsing_tree": "manufacturer | #1 = Scan Table [ furniture ] Predicate [ Num_of_Component > 10 ] Output [ Num_of_Component , Name ]"
    },
    {
        "id": "7ef2b4c164d0eae4b235d09dc27ea254f0130c4cad0c867d5b59c9ee19f1f838",
        "question": "Find the name and component amount of the least popular furniture.",
        "parsing_tree": "manufacturer | #1 = Scan Table [ furniture ] Output [ Num_of_Component , Name , Market_Rate ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Market_Rate ASC ] Output [ Num_of_Component , Name , Market_Rate ]"
    },
    {
        "id": "e207910e3d1deb5d5207b04ab40f0c8398ae4fe675bd526837be75a715485438",
        "question": "Find the names of furnitures whose prices are lower than the highest price.",
        "parsing_tree": "manufacturer | #1 = Scan Table [ furniture ] Output [ Name , Furniture_ID ] ; #2 = Scan Table [ furniture_manufacte ] Output [ Price_in_Dollar ] ; #3 = Aggregate [ #2 ] Output [ MAX(Price_in_Dollar) AS Max_Price_in_Dollar ] ; #4 = Scan Table [ furniture_manufacte ] Output [ Price_in_Dollar , Furniture_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.Price_in_Dollar < #3.Max_Price_in_Dollar ] Output [ #4.Furniture_ID ] ; #6 = Join [ #1 , #5 ] Predicate [ #5.Furniture_ID = #1.Furniture_ID ] Output [ #1.Name ]"
    },
    {
        "id": "2724c840f29dc4e302be7064b6d79212ad55bd29744de8b879d1a75727cc8b4f",
        "question": "Which manufacturer has the most number of shops? List its name and year of opening.",
        "parsing_tree": "manufacturer | #1 = Scan Table [ manufacturer ] Output [ Open_Year , Name , Num_of_Shops ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Num_of_Shops DESC ] Output [ Open_Year , Name , Num_of_Shops ]"
    },
    {
        "id": "ef491cdaf90cc6fb131ebe66901b81837cdddccf3ed002a9a1f7af57bcc80624",
        "question": "Find the average number of factories for the manufacturers that have more than 20 shops.",
        "parsing_tree": "manufacturer | #1 = Scan Table [ manufacturer ] Predicate [ Num_of_Shops > 20 ] Output [ Num_of_Factories , Num_of_Shops ] ; #2 = Aggregate [ #1 ] Output [ AVG(Num_of_Factories) AS Avg_Num_of_Factories ]"
    },
    {
        "id": "d9ba549a3d815b9cec72191c040c5756bcb4b5783769ce3f9f9db7a9324b4d8a",
        "question": "List all manufacturer names and ids ordered by their opening year.",
        "parsing_tree": "manufacturer | #1 = Scan Table [ manufacturer ] Output [ Manufacturer_ID , Open_Year , Name ] ; #2 = Sort [ #1 ] OrderBy [ Open_Year ASC ] Output [ Manufacturer_ID , Open_Year , Name ]"
    },
    {
        "id": "a2ce07f1fb995e99c9fa4bcd65c06e19adc3d431ecfdd239e16f5bf6d615deb1",
        "question": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.",
        "parsing_tree": "manufacturer | #1 = Scan Table [ manufacturer ] Predicate [ Num_of_Shops > 10 OR Num_of_Factories < 10 ] Output [ Num_of_Factories , Open_Year , Name , Num_of_Shops ]"
    },
    {
        "id": "13c315d76c50340350428ae391d596b11921a1c5356211e834ec37b3c18cbe87",
        "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
        "parsing_tree": "manufacturer | #1 = Scan Table [ manufacturer ] Predicate [ Open_Year < 1990.0 ] Output [ Num_of_Factories , Open_Year , Num_of_Shops ] ; #2 = Aggregate [ #1 ] Output [ MAX(Num_of_Shops) AS Max_Num_of_Shops , AVG(Num_of_Factories) AS Avg_Num_of_Factories ]"
    },
    {
        "id": "48ea645edac193a1d07e00bb677e4747c07688d3dc264cf6fd5f4c6821c1dfe3",
        "question": "Find the id and number of shops for the company that produces the most expensive furniture.",
        "parsing_tree": "manufacturer | #1 = Scan Table [ furniture_manufacte ] Output [ Manufacturer_ID , Price_in_Dollar ] ; #2 = Scan Table [ manufacturer ] Output [ Manufacturer_ID , Num_of_Shops ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Manufacturer_ID = #2.Manufacturer_ID ] Output [ #2.Manufacturer_ID , #2.Num_of_Shops , #1.Price_in_Dollar ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Price_in_Dollar DESC ] Output [ Manufacturer_ID , Price_in_Dollar , Num_of_Shops ]"
    },
    {
        "id": "3a0ae787fbccfa4f5d8bde92066c89a0cd647bef09620c031e8057cd80b9e876",
        "question": "Find the number of funiture types produced by each manufacturer as well as the company names.",
        "parsing_tree": "manufacturer | #1 = Scan Table [ furniture_manufacte ] Output [ Manufacturer_ID ] ; #2 = Scan Table [ manufacturer ] Output [ Manufacturer_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Manufacturer_ID = #2.Manufacturer_ID ] Output [ #2.Manufacturer_ID , #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Manufacturer_ID ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "ff40d43f873e7e793ebcb1fd3b31216f1a0ac200ad7892d97de18ff1d3e8d80c",
        "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
        "parsing_tree": "manufacturer | #1 = Scan Table [ furniture_manufacte ] Output [ Price_in_Dollar , Furniture_ID ] ; #2 = Scan Table [ furniture ] Output [ Name , Furniture_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Furniture_ID = #2.Furniture_ID ] Output [ #2.Name , #1.Price_in_Dollar ]"
    },
    {
        "id": "10127dc24846851c26aff50c7b3fc25e82361e5b9c1caa571399854f107a0554",
        "question": "Find the market shares and names of furnitures which no any company is producing in our records.",
        "parsing_tree": "manufacturer | #1 = Scan Table [ furniture ] Output [ Name , Market_Rate , Furniture_ID ] ; #2 = Scan Table [ furniture_manufacte ] Output [ Furniture_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Furniture_ID = #1.Furniture_ID ] Output [ #1.Market_Rate , #1.Name ]"
    },
    {
        "id": "8e3065735b6fc6c723967301a951d586a773fb8573e5f896ed01ec84ff7af3db",
        "question": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.",
        "parsing_tree": "manufacturer | #1 = Scan Table [ furniture ] Predicate [ Num_of_Component < 6 ] Output [ Num_of_Component , Furniture_ID ] ; #2 = Scan Table [ furniture_manufacte ] Output [ Manufacturer_ID , Furniture_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Furniture_ID = #2.Furniture_ID ] Output [ #2.Manufacturer_ID ] ; #4 = Scan Table [ manufacturer ] Output [ Manufacturer_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Manufacturer_ID = #4.Manufacturer_ID ] Distinct [ true ] Output [ #4.Name ] ; #6 = Scan Table [ furniture ] Predicate [ Num_of_Component > 10 ] Output [ Num_of_Component , Furniture_ID ] ; #7 = Scan Table [ furniture_manufacte ] Output [ Manufacturer_ID , Furniture_ID ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.Furniture_ID = #7.Furniture_ID ] Output [ #7.Manufacturer_ID ] ; #9 = Scan Table [ manufacturer ] Output [ Manufacturer_ID , Name ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.Manufacturer_ID = #9.Manufacturer_ID ] Output [ #9.Name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.Name = #10.Name ] Output [ #5.Name ]"
    },
    {
        "id": "7cf515c3ed367b4afcd75c0f132d424b84041a8a20029873728572d03b21430d",
        "question": "Display the first name and department name for each employee.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ departments ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID ] ; #2 = Scan Table [ employees ] Output [ FIRST_NAME , DEPARTMENT_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.DEPARTMENT_NAME , #2.FIRST_NAME ]"
    },
    {
        "id": "fb2a3249548ade55ef15757ea554793b3afa07d0c32676ee80a8749b03bebf3f",
        "question": "What are the first name and department name of all employees?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ departments ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID ] ; #2 = Scan Table [ employees ] Output [ FIRST_NAME , DEPARTMENT_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.DEPARTMENT_NAME , #2.FIRST_NAME ]"
    },
    {
        "id": "7af2aa6f6c7af2b4b92bbcaaad1daf6bec36573787609bf8eedf505a40f0548d",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ SALARY < 6000.0 ] Output [ FIRST_NAME , SALARY , LAST_NAME ]"
    },
    {
        "id": "b41998547e8bdd384a9a048d948a51512c794b734e8420cf843278c63ca84438",
        "question": "What are the full names and salaries for any employees earning less than 6000?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ SALARY < 6000.0 ] Output [ FIRST_NAME , SALARY , LAST_NAME ]"
    },
    {
        "id": "e67af2cc2c3c77a56333ed49978f8f83df5247e2610fbfc69cb026d562f735fd",
        "question": "Display the first name, and department number for all employees whose last name is \"McEwen\".",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ LAST_NAME = 'McEwen' ] Output [ FIRST_NAME , DEPARTMENT_ID , LAST_NAME ]"
    },
    {
        "id": "7c51d56787254fcd7af6e89bc5848553eec8c054894ba1456d676acdd233b8ed",
        "question": "What are the first names and department numbers for employees with last name McEwen?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ LAST_NAME = 'McEwen' ] Output [ FIRST_NAME , DEPARTMENT_ID , LAST_NAME ]"
    },
    {
        "id": "e5bbc09ff9996a32d1fab10fa9e8412cc0100e000185cec61349c0100bde061f",
        "question": "Display all the information about the department Marketing.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ departments ] Predicate [ DEPARTMENT_NAME = 'Marketing' ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID , LOCATION_ID , MANAGER_ID ]"
    },
    {
        "id": "f61bb6c5db79022ee5decf671730b4a4ff22c10eca72e2ab13314c79e9527fe4",
        "question": "What is all the information about the Marketing department?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ departments ] Predicate [ DEPARTMENT_NAME = 'Marketing' ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID , LOCATION_ID , MANAGER_ID ]"
    },
    {
        "id": "6c6bfbd225621d78bc1d7af3bd00a9bb1da30a166656afa62c517577bef7f4e8",
        "question": "what is the phone number of employees whose salary is in the range of 8000 and 12000?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ SALARY >= 8000.0 AND SALARY <= 12000.0 ] Output [ PHONE_NUMBER , SALARY ]"
    },
    {
        "id": "460b3324808ca515a72d853250fd466aecdfea90e94ae9ff635ddc1c29aae5f9",
        "question": "Return the phone numbers of employees with salaries between 8000 and 12000.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ SALARY >= 8000.0 AND SALARY <= 12000.0 ] Output [ PHONE_NUMBER , SALARY ]"
    },
    {
        "id": "b809f90d7a72149e84cce0ae188362edf18ab034e5c66c2a2e3b054a8972512c",
        "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%m' ] Output [ FIRST_NAME , SALARY , LAST_NAME ]"
    },
    {
        "id": "7ddf145b18ebff73c1dd6c270f345100d2586ff9dfa3cff66966ce3bd75e3028",
        "question": "Return the full names and salaries for employees with first names that end with the letter m.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%m' ] Output [ FIRST_NAME , SALARY , LAST_NAME ]"
    },
    {
        "id": "b1b2d645f189105b223ac24ab1ceee85c9d83b96653bb246583f783573354567",
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ HIRE_DATE >= '2007-11-05' AND HIRE_DATE <= '2009-07-05' ] Output [ JOB_ID , HIRE_DATE ]"
    },
    {
        "id": "dc301b510e89af596ad3b81a384a44e5af2d909e646bbea437621b1405461803",
        "question": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ HIRE_DATE >= '2007-11-05' AND HIRE_DATE <= '2009-07-05' ] Output [ JOB_ID , HIRE_DATE ]"
    },
    {
        "id": "c9a4d6674d129c0931c5a031d4b9eca390fd1a26cee490b9a1c76b1aa5dbbb83",
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ DEPARTMENT_ID = 70.0 OR DEPARTMENT_ID = 90.0 ] Output [ FIRST_NAME , DEPARTMENT_ID , LAST_NAME ]"
    },
    {
        "id": "7cee440b83496881bd05b7e28334fd10f0dec8c8e443aa6298ee17c794040a50",
        "question": "What are the full names of employees who with in department 70 or 90?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ DEPARTMENT_ID = 70.0 OR DEPARTMENT_ID = 90.0 ] Output [ FIRST_NAME , DEPARTMENT_ID , LAST_NAME ]"
    },
    {
        "id": "d17e5ce03f30923971e2636cb03e52205f90ac188decc9f040a58add2e27164b",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%D%' OR FIRST_NAME like '%S%' ] Output [ PHONE_NUMBER , MANAGER_ID , COMMISSION_PCT , FIRST_NAME , EMAIL , JOB_ID , DEPARTMENT_ID , HIRE_DATE , EMPLOYEE_ID , SALARY , LAST_NAME ] ; #2 = Sort [ #1 ] OrderBy [ SALARY DESC ] Output [ PHONE_NUMBER , COMMISSION_PCT , FIRST_NAME , EMAIL , HIRE_DATE , JOB_ID , DEPARTMENT_ID , MANAGER_ID , EMPLOYEE_ID , SALARY , LAST_NAME ]"
    },
    {
        "id": "a04ec43b64e6316557c3aa6db3a43cf79900264166a986f3ce91368ba8e40ea7",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%D%' OR FIRST_NAME like '%S%' ] Output [ PHONE_NUMBER , MANAGER_ID , COMMISSION_PCT , FIRST_NAME , EMAIL , JOB_ID , DEPARTMENT_ID , HIRE_DATE , EMPLOYEE_ID , SALARY , LAST_NAME ] ; #2 = Sort [ #1 ] OrderBy [ SALARY DESC ] Output [ PHONE_NUMBER , COMMISSION_PCT , FIRST_NAME , EMAIL , HIRE_DATE , JOB_ID , DEPARTMENT_ID , MANAGER_ID , EMPLOYEE_ID , SALARY , LAST_NAME ]"
    },
    {
        "id": "4068499668d474168a90a300b4edfd4b27021f41ba7b77e039160b8739d95791",
        "question": "display those employees who joined after 7th September, 1987.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ HIRE_DATE > '1987-09-07' ] Output [ PHONE_NUMBER , MANAGER_ID , COMMISSION_PCT , FIRST_NAME , EMAIL , JOB_ID , DEPARTMENT_ID , HIRE_DATE , EMPLOYEE_ID , SALARY , LAST_NAME ]"
    },
    {
        "id": "42d992bd38fcc38a668a784eb86befc5eb314b52c967138470f9c88bc478efd2",
        "question": "Which employees were hired after September 7th, 1987?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ HIRE_DATE > '1987-09-07' ] Output [ PHONE_NUMBER , MANAGER_ID , COMMISSION_PCT , FIRST_NAME , EMAIL , JOB_ID , DEPARTMENT_ID , HIRE_DATE , EMPLOYEE_ID , SALARY , LAST_NAME ]"
    },
    {
        "id": "e14fedd828a1a7d7e7f24d8f73cf7c68cb3ff57c09041bf1a8c91124a51613d6",
        "question": "display the job title of jobs which minimum salary is greater than 9000.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ jobs ] Predicate [ MIN_SALARY > 9000.0 ] Output [ JOB_TITLE , MIN_SALARY ]"
    },
    {
        "id": "a4a612be31908f8f2ac483e2b0fc385452fd189e13096db5d910f14ab8eb777c",
        "question": "Which job titles correspond to jobs with salaries over 9000?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ jobs ] Predicate [ MIN_SALARY > 9000.0 ] Output [ JOB_TITLE , MIN_SALARY ]"
    },
    {
        "id": "9f300d0767b3fb64c4f198148108e3e4a027afd0716ce6f904f7d2dadd35e047",
        "question": "display the employee ID for each employee and the date on which he ended his previous job.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ job_history ] Output [ EMPLOYEE_ID , END_DATE ] ; #2 = Aggregate [ #1 ] GroupBy [ EMPLOYEE_ID ] Output [ EMPLOYEE_ID , MAX(END_DATE) AS Max_END_DATE ]"
    },
    {
        "id": "ae9a136ac4cf00b34dc0d74a2188d7ea2012189296ec61b350a831f2f187bce1",
        "question": "What are the employee ids for each employee and final dates of employment at their last job?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ job_history ] Output [ EMPLOYEE_ID , END_DATE ] ; #2 = Aggregate [ #1 ] GroupBy [ EMPLOYEE_ID ] Output [ EMPLOYEE_ID , MAX(END_DATE) AS Max_END_DATE ]"
    },
    {
        "id": "16563ae868274650942d611aef7ab392728f717e003622c016a01de3e90666c6",
        "question": "display those departments where more than ten employees work who got a commission percentage.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ DEPARTMENT_ID , COMMISSION_PCT ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID ] Output [ COUNT(COMMISSION_PCT) AS Count_COMMISSION_PCT , DEPARTMENT_ID ] ; #3 = Filter [ #2 ] Predicate [ Count_COMMISSION_PCT > 10 ] Output [ DEPARTMENT_ID ]"
    },
    {
        "id": "8380658b6edf493700efa6e442511fde7f3704c65b41dca1c8123fb52013cc74",
        "question": "What are the department ids for which more than 10 employees had a commission?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ DEPARTMENT_ID , COMMISSION_PCT ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID ] Output [ COUNT(COMMISSION_PCT) AS Count_COMMISSION_PCT , DEPARTMENT_ID ] ; #3 = Filter [ #2 ] Predicate [ Count_COMMISSION_PCT > 10 ] Output [ DEPARTMENT_ID ]"
    },
    {
        "id": "c81af8b8246f3fee04fca70c56af658847966bbeae1ae0e5787e5cdfe71aca7e",
        "question": "Find the ids of the departments where any manager is managing 4 or more employees.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ DEPARTMENT_ID , MANAGER_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID , MANAGER_ID ] Output [ countstar AS Count_Star , DEPARTMENT_ID ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 4 ] Output [ DEPARTMENT_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_ID ] Output [ DEPARTMENT_ID ]"
    },
    {
        "id": "612e4354d7a10e0e8f95cddfeb1259629384c89b9e1b34fdc2bca073b0d295de",
        "question": "What are department ids for departments with managers managing more than 3 employees?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ DEPARTMENT_ID , MANAGER_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID , MANAGER_ID ] Output [ countstar AS Count_Star , DEPARTMENT_ID ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 4 ] Output [ DEPARTMENT_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_ID ] Output [ DEPARTMENT_ID ]"
    },
    {
        "id": "a4d75a1282bb25c48d13caa20b24ec6e3f8898d30ca6fae34af9d53415b1a4ca",
        "question": "display the country ID and number of cities for each country.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ locations ] Output [ COUNTRY_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ COUNTRY_ID ] Output [ countstar AS Count_Star , COUNTRY_ID ]"
    },
    {
        "id": "7e8d5ab86a87b6d52de98614fe12fa60058b84495f296b2859534a2dd3c66d03",
        "question": "Give the country id and corresponding count of cities in each country.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ locations ] Output [ COUNTRY_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ COUNTRY_ID ] Output [ countstar AS Count_Star , COUNTRY_ID ]"
    },
    {
        "id": "a31c4c2d53a650c0a51dc3931ef0a33da85e6bafbf156342d9085467a62d34b9",
        "question": "What are the employee ids for employees who have held two or more jobs?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ job_history ] Output [ EMPLOYEE_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ EMPLOYEE_ID ] Output [ EMPLOYEE_ID , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ EMPLOYEE_ID ]"
    },
    {
        "id": "59e47a654114025c0234355ccfbec93bdfef21ae9182e222ff818d56225a13c4",
        "question": "Find employee with ID and name of the country presently where (s)he is working.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ locations ] Output [ COUNTRY_ID , LOCATION_ID ] ; #2 = Scan Table [ countries ] Output [ COUNTRY_ID , COUNTRY_NAME ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.COUNTRY_ID = #2.COUNTRY_ID ] Output [ #2.COUNTRY_NAME , #1.LOCATION_ID ] ; #4 = Scan Table [ departments ] Output [ DEPARTMENT_ID , LOCATION_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.LOCATION_ID = #4.LOCATION_ID ] Output [ #4.DEPARTMENT_ID , #3.COUNTRY_NAME ] ; #6 = Scan Table [ employees ] Output [ EMPLOYEE_ID , DEPARTMENT_ID ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.DEPARTMENT_ID = #6.DEPARTMENT_ID ] Output [ #6.EMPLOYEE_ID , #5.COUNTRY_NAME ]"
    },
    {
        "id": "3522afca1f551c390b0b419d994b7a7264a000eece2b58372df1d4b681707b46",
        "question": "What are all the employee ids and the names of the countries in which they work?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ locations ] Output [ COUNTRY_ID , LOCATION_ID ] ; #2 = Scan Table [ countries ] Output [ COUNTRY_ID , COUNTRY_NAME ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.COUNTRY_ID = #2.COUNTRY_ID ] Output [ #2.COUNTRY_NAME , #1.LOCATION_ID ] ; #4 = Scan Table [ departments ] Output [ DEPARTMENT_ID , LOCATION_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.LOCATION_ID = #4.LOCATION_ID ] Output [ #4.DEPARTMENT_ID , #3.COUNTRY_NAME ] ; #6 = Scan Table [ employees ] Output [ EMPLOYEE_ID , DEPARTMENT_ID ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.DEPARTMENT_ID = #6.DEPARTMENT_ID ] Output [ #6.EMPLOYEE_ID , #5.COUNTRY_NAME ]"
    },
    {
        "id": "168aa51bab5c302962ed0359c34e9fee290f252a53cf8c84a655aa7710967243",
        "question": "display the department name and number of employees in each of the department.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ departments ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID ] ; #2 = Scan Table [ employees ] Output [ DEPARTMENT_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.DEPARTMENT_NAME ] ; #4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_NAME ] Output [ countstar AS Count_Star , DEPARTMENT_NAME ]"
    },
    {
        "id": "88fb3d1bb3b0529bcfa174318316c85e9021524580f77a3847ab107222a5373f",
        "question": "Give the name of each department and the number of employees in each.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ departments ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID ] ; #2 = Scan Table [ employees ] Output [ DEPARTMENT_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.DEPARTMENT_NAME ] ; #4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_NAME ] Output [ countstar AS Count_Star , DEPARTMENT_NAME ]"
    },
    {
        "id": "81a32357732eceb5edb6a6ed43e84a548d95b6cfbe7c59241a684a7355515b56",
        "question": "display job title and average salary of employees.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ jobs ] Output [ JOB_TITLE , JOB_ID ] ; #2 = Scan Table [ employees ] Output [ SALARY , JOB_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.JOB_ID = #2.JOB_ID ] Output [ #2.SALARY , #1.JOB_TITLE ] ; #4 = Aggregate [ #3 ] GroupBy [ JOB_TITLE ] Output [ AVG(SALARY) AS Avg_SALARY , JOB_TITLE ]"
    },
    {
        "id": "e71e36d7e15cdf790ec695d3eb90bccb7c3916e98c8ca758cf2d84ce27742693",
        "question": "What is the average salary for each job title?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ jobs ] Output [ JOB_TITLE , JOB_ID ] ; #2 = Scan Table [ employees ] Output [ SALARY , JOB_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.JOB_ID = #2.JOB_ID ] Output [ #2.SALARY , #1.JOB_TITLE ] ; #4 = Aggregate [ #3 ] GroupBy [ JOB_TITLE ] Output [ AVG(SALARY) AS Avg_SALARY , JOB_TITLE ]"
    },
    {
        "id": "cecfa7c34cf8c01a9cd73d212db17586ba6306a4d68274e1cfdda37a66c24b24",
        "question": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ EMPLOYEE_ID = 163.0 ] Output [ EMPLOYEE_ID , SALARY ] ; #2 = Scan Table [ employees ] Output [ FIRST_NAME , SALARY , LAST_NAME ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SALARY > #2.SALARY ] Output [ #2.LAST_NAME , #2.FIRST_NAME ]"
    },
    {
        "id": "6eaf2017d97a676e26f45a938248d52e318428f3a99f67e00235ff8834d7d4e2",
        "question": "Provide the full names of employees earning more than the employee with id 163.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ EMPLOYEE_ID = 163.0 ] Output [ EMPLOYEE_ID , SALARY ] ; #2 = Scan Table [ employees ] Output [ FIRST_NAME , SALARY , LAST_NAME ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SALARY > #2.SALARY ] Output [ #2.LAST_NAME , #2.FIRST_NAME ]"
    },
    {
        "id": "d2ec468ea73a2c3a78bf991e0691213a6ece628b23dc542dd85bd4f0d9605a03",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ SALARY ] ; #2 = Aggregate [ #1 ] Output [ AVG(SALARY) AS Avg_SALARY ] ; #3 = Scan Table [ employees ] Output [ EMPLOYEE_ID , SALARY ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.SALARY > #2.Avg_SALARY ] Output [ #3.EMPLOYEE_ID ]"
    },
    {
        "id": "9e3c19b5e8a1962e42a188fbdb76af6515fc9bfb5d27791a87864417b8fe8ff6",
        "question": "What are the employee ids for employees who make more than the average?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ SALARY ] ; #2 = Aggregate [ #1 ] Output [ AVG(SALARY) AS Avg_SALARY ] ; #3 = Scan Table [ employees ] Output [ EMPLOYEE_ID , SALARY ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.SALARY > #2.Avg_SALARY ] Output [ #3.EMPLOYEE_ID ]"
    },
    {
        "id": "ff767c662977eacf4db37730b5dfdc998e2a2f4185ff3b66f5b87d24a64cc44b",
        "question": "find the name of all departments that do actually have one or more employees assigned to them.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ departments ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID ] ; #2 = Scan Table [ employees ] Output [ DEPARTMENT_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Distinct [ true ] Output [ #1.DEPARTMENT_NAME ]"
    },
    {
        "id": "a2f51e0603e7f06a33639512229acfd5bfb91f8882783fa07e5dff81cf48eea0",
        "question": "What are the names of departments that have at least one employee.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ departments ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID ] ; #2 = Scan Table [ employees ] Output [ DEPARTMENT_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Distinct [ true ] Output [ #1.DEPARTMENT_NAME ]"
    },
    {
        "id": "1b1f1d27e9b1609fcc66ae17c5c1de7f2159bea731f81f595e3801846ced47c7",
        "question": "display all the information about the department Marketing.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ departments ] Predicate [ DEPARTMENT_NAME = 'Marketing' ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID , LOCATION_ID , MANAGER_ID ]"
    },
    {
        "id": "0a1750910ce9fe89cefbf06a1692bea0f5f90424d54bc7cccf0c0711268ab73a",
        "question": "display the ID for those employees who did two or more jobs in the past.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ job_history ] Output [ EMPLOYEE_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ EMPLOYEE_ID ] Output [ EMPLOYEE_ID , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ EMPLOYEE_ID ]"
    },
    {
        "id": "d86f1af3b097c29143b28a954aace76774bf057218e57d2a30b816691a89e3df",
        "question": "What are the employee ids for those who had two or more jobs.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ job_history ] Output [ EMPLOYEE_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ EMPLOYEE_ID ] Output [ EMPLOYEE_ID , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ EMPLOYEE_ID ]"
    },
    {
        "id": "7498cb4d2db17fd271afd704ed044854261d58531027fab650a609992b885b15",
        "question": "What are the unique ids of those departments where any manager is managing 4 or more employees.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ DEPARTMENT_ID , MANAGER_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID , MANAGER_ID ] Output [ countstar AS Count_Star , DEPARTMENT_ID ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 4 ] Output [ DEPARTMENT_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_ID ] Output [ DEPARTMENT_ID ]"
    },
    {
        "id": "1478dd8b05533fc017a962c6a9cce9281de059a0220c43e9bc79db97da639c51",
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ DEPARTMENT_ID , MANAGER_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID , MANAGER_ID ] Output [ countstar AS Count_Star , DEPARTMENT_ID ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 4 ] Output [ DEPARTMENT_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_ID ] Output [ DEPARTMENT_ID ]"
    },
    {
        "id": "c2923b8fcfd224a2771c46f48591633457bdc15e2d3887d806e67f02f2335eda",
        "question": "Find the job ID for those jobs which average salary is above 8000.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ SALARY , JOB_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ JOB_ID ] Output [ AVG(SALARY) AS Avg_SALARY , JOB_ID ] ; #3 = Filter [ #2 ] Predicate [ Avg_SALARY > 8000.0 ] Output [ JOB_ID ]"
    },
    {
        "id": "a4ad254b747bdfc78f371a2cde1a190d9d0b5aa27d7163a7eab5812e3ec0e0b4",
        "question": "What are the job ids corresponding to jobs with average salary above 8000?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ SALARY , JOB_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ JOB_ID ] Output [ AVG(SALARY) AS Avg_SALARY , JOB_ID ] ; #3 = Filter [ #2 ] Predicate [ Avg_SALARY > 8000.0 ] Output [ JOB_ID ]"
    },
    {
        "id": "e5fc1f935d30d6aefffa15471177a1c4a19998ca7ea98f51a22adbbfb0faf59e",
        "question": "display the employee ID and job name for all those jobs in department 80.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ jobs ] Output [ JOB_TITLE , JOB_ID ] ; #2 = Scan Table [ employees ] Predicate [ DEPARTMENT_ID = 80.0 ] Output [ EMPLOYEE_ID , DEPARTMENT_ID , JOB_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.JOB_ID = #2.JOB_ID ] Output [ #1.JOB_TITLE , #2.EMPLOYEE_ID ]"
    },
    {
        "id": "50b5c094cd3b99140e9759c5294b0fe03f86b8ad95c105fb3183c8ef441411e3",
        "question": "what are the employee ids and job titles for employees in department 80?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ jobs ] Output [ JOB_TITLE , JOB_ID ] ; #2 = Scan Table [ employees ] Predicate [ DEPARTMENT_ID = 80.0 ] Output [ EMPLOYEE_ID , DEPARTMENT_ID , JOB_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.JOB_ID = #2.JOB_ID ] Output [ #1.JOB_TITLE , #2.EMPLOYEE_ID ]"
    },
    {
        "id": "6774b8a5a817b0abf2b5ccfcfd35f9e675f818d85b98f328602de8cd78203110",
        "question": "What is the first name and job id for all employees in the Finance department?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ departments ] Predicate [ DEPARTMENT_NAME = 'Finance' ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID ] ; #2 = Scan Table [ employees ] Output [ FIRST_NAME , DEPARTMENT_ID , JOB_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #2.JOB_ID , #2.FIRST_NAME ]"
    },
    {
        "id": "5b5f1485ce789705f82999b389d49c336a2f9b8c1ffe64ff42250953318ec906",
        "question": "Give the first name and job id for all employees in the Finance department.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ departments ] Predicate [ DEPARTMENT_NAME = 'Finance' ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID ] ; #2 = Scan Table [ employees ] Output [ FIRST_NAME , DEPARTMENT_ID , JOB_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #2.JOB_ID , #2.FIRST_NAME ]"
    },
    {
        "id": "d8f6cf5cb8f2c0ebebf0b345973e4ec9fd5d0187f0cbdaeb82a71171366f9339",
        "question": "display all the information of the employees whose salary if within the range of smallest salary and 2500.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ SALARY ] ; #2 = Aggregate [ #1 ] Output [ MIN(SALARY) AS Min_SALARY ] ; #3 = Scan Table [ employees ] Predicate [ SALARY <= 2500.0 ] Output [ PHONE_NUMBER , MANAGER_ID , COMMISSION_PCT , FIRST_NAME , EMAIL , JOB_ID , DEPARTMENT_ID , HIRE_DATE , EMPLOYEE_ID , SALARY , LAST_NAME ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.SALARY >= #2.Min_SALARY ] Output [ #3.JOB_ID , #3.SALARY , #3.COMMISSION_PCT , #3.MANAGER_ID , #3.FIRST_NAME , #3.EMPLOYEE_ID , #3.EMAIL , #3.PHONE_NUMBER , #3.HIRE_DATE , #3.LAST_NAME , #3.DEPARTMENT_ID ]"
    },
    {
        "id": "73e92aacda6951952edc35be445f761ebbad0f7ef1fff8af7877868906a2d0a7",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ SALARY ] ; #2 = Aggregate [ #1 ] Output [ MIN(SALARY) AS Min_SALARY ] ; #3 = Scan Table [ employees ] Predicate [ SALARY <= 2500.0 ] Output [ PHONE_NUMBER , MANAGER_ID , COMMISSION_PCT , FIRST_NAME , EMAIL , JOB_ID , DEPARTMENT_ID , HIRE_DATE , EMPLOYEE_ID , SALARY , LAST_NAME ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.SALARY >= #2.Min_SALARY ] Output [ #3.JOB_ID , #3.SALARY , #3.COMMISSION_PCT , #3.MANAGER_ID , #3.FIRST_NAME , #3.EMPLOYEE_ID , #3.EMAIL , #3.PHONE_NUMBER , #3.HIRE_DATE , #3.LAST_NAME , #3.DEPARTMENT_ID ]"
    },
    {
        "id": "b3380848221a097caed4e27d285bb190b09aaea00c761512c6d67669b63a4bff",
        "question": "Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ PHONE_NUMBER , MANAGER_ID , COMMISSION_PCT , FIRST_NAME , EMAIL , JOB_ID , DEPARTMENT_ID , HIRE_DATE , EMPLOYEE_ID , SALARY , LAST_NAME ] ; #2 = Scan Table [ departments ] Predicate [ MANAGER_ID >= 100.0 AND MANAGER_ID <= 200.0 ] Output [ DEPARTMENT_ID , MANAGER_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID IS NULL OR #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.EMPLOYEE_ID , #1.DEPARTMENT_ID , #1.HIRE_DATE , #1.MANAGER_ID , #1.SALARY , #1.LAST_NAME , #1.PHONE_NUMBER , #1.FIRST_NAME , #1.COMMISSION_PCT , #1.EMAIL , #1.JOB_ID ]"
    },
    {
        "id": "f72e25e02d5830ecf5279ed1846f512f302e6fb67d6f0fbebb4e5d3fc064d0ad",
        "question": "What are the ids for employees who do not work in departments with managers that have ids between 100 and 200?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ PHONE_NUMBER , MANAGER_ID , COMMISSION_PCT , FIRST_NAME , EMAIL , JOB_ID , DEPARTMENT_ID , HIRE_DATE , EMPLOYEE_ID , SALARY , LAST_NAME ] ; #2 = Scan Table [ departments ] Predicate [ MANAGER_ID >= 100.0 AND MANAGER_ID <= 200.0 ] Output [ DEPARTMENT_ID , MANAGER_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID IS NULL OR #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.EMPLOYEE_ID , #1.DEPARTMENT_ID , #1.HIRE_DATE , #1.MANAGER_ID , #1.SALARY , #1.LAST_NAME , #1.PHONE_NUMBER , #1.FIRST_NAME , #1.COMMISSION_PCT , #1.EMAIL , #1.JOB_ID ]"
    },
    {
        "id": "72deb608310be00b7d7428612410f84d7edc7c46cf7607de1e2d7c7020ff1269",
        "question": "display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a \u2019T\u2019.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ EMPLOYEE_ID , FIRST_NAME , DEPARTMENT_ID , LAST_NAME ] ; #2 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%T%' ] Output [ FIRST_NAME , DEPARTMENT_ID ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.EMPLOYEE_ID , #1.LAST_NAME , #1.FIRST_NAME ]"
    },
    {
        "id": "995bc94ac3b46336fc8944c8f45f72875b7a993456201716d97d297e7014c823",
        "question": "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ EMPLOYEE_ID , FIRST_NAME , DEPARTMENT_ID , LAST_NAME ] ; #2 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%T%' ] Output [ FIRST_NAME , DEPARTMENT_ID ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.EMPLOYEE_ID , #1.LAST_NAME , #1.FIRST_NAME ]"
    },
    {
        "id": "e658f7155bc31fb220c015986d889ba1e4bfd5c61dd5a543f35da017731cbe72",
        "question": "display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ SALARY ] ; #2 = Aggregate [ #1 ] Output [ AVG(SALARY) AS Avg_SALARY ] ; #3 = Scan Table [ employees ] Output [ FIRST_NAME , DEPARTMENT_ID , EMPLOYEE_ID , SALARY , LAST_NAME ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.SALARY > #2.Avg_SALARY ] Output [ #3.SALARY , #3.FIRST_NAME , #3.EMPLOYEE_ID , #3.LAST_NAME , #3.DEPARTMENT_ID ] ; #5 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%J%' ] Output [ FIRST_NAME , DEPARTMENT_ID ] ; #6 = Intersect [ #4 , #5 ] Predicate [ #4.DEPARTMENT_ID = #5.DEPARTMENT_ID ] Output [ #4.EMPLOYEE_ID , #4.LAST_NAME , #4.SALARY , #4.FIRST_NAME ]"
    },
    {
        "id": "48b79c5923725996c147887bff0a3faa2abb3bd925e11119e4a6f6977dc32724",
        "question": "What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ SALARY ] ; #2 = Aggregate [ #1 ] Output [ AVG(SALARY) AS Avg_SALARY ] ; #3 = Scan Table [ employees ] Output [ FIRST_NAME , DEPARTMENT_ID , EMPLOYEE_ID , SALARY , LAST_NAME ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.SALARY > #2.Avg_SALARY ] Output [ #3.SALARY , #3.FIRST_NAME , #3.EMPLOYEE_ID , #3.LAST_NAME , #3.DEPARTMENT_ID ] ; #5 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%J%' ] Output [ FIRST_NAME , DEPARTMENT_ID ] ; #6 = Intersect [ #4 , #5 ] Predicate [ #4.DEPARTMENT_ID = #5.DEPARTMENT_ID ] Output [ #4.EMPLOYEE_ID , #4.LAST_NAME , #4.SALARY , #4.FIRST_NAME ]"
    },
    {
        "id": "ed290124e5ee72a3633ed3cc72a3789b45efb721d6e6734b3b094c7a7a35f6c9",
        "question": "display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ JOB_ID = 'MK_MAN' ] Output [ SALARY , JOB_ID ] ; #2 = Aggregate [ #1 ] Output [ MIN(SALARY) AS Min_SALARY ] ; #3 = Scan Table [ employees ] Output [ EMPLOYEE_ID , SALARY , JOB_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.SALARY < #2.Min_SALARY ] Output [ #3.JOB_ID , #3.EMPLOYEE_ID ]"
    },
    {
        "id": "166827791c598b070099ad674fb24174fd571c23ab351d205232a2bbd4a4d7d9",
        "question": "What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ JOB_ID = 'MK_MAN' ] Output [ SALARY , JOB_ID ] ; #2 = Aggregate [ #1 ] Output [ MIN(SALARY) AS Min_SALARY ] ; #3 = Scan Table [ employees ] Output [ EMPLOYEE_ID , SALARY , JOB_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.SALARY < #2.Min_SALARY ] Output [ #3.JOB_ID , #3.EMPLOYEE_ID ]"
    },
    {
        "id": "b92ba63cc7cdb6c6b3bf413e686e6adcffe1b9e92c7d71f4a09be5323fc072b0",
        "question": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ JOB_ID = 'PU_MAN' ] Output [ SALARY , JOB_ID ] ; #2 = Aggregate [ #1 ] Output [ MAX(SALARY) AS Max_SALARY ] ; #3 = Scan Table [ employees ] Output [ FIRST_NAME , JOB_ID , EMPLOYEE_ID , SALARY , LAST_NAME ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.SALARY > #2.Max_SALARY ] Output [ #3.JOB_ID , #3.LAST_NAME , #3.FIRST_NAME , #3.EMPLOYEE_ID ]"
    },
    {
        "id": "cc2fde16bfe8f8051a4d67c957433d256006addea44aeabfd4eca2658d00278d",
        "question": "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ JOB_ID = 'PU_MAN' ] Output [ SALARY , JOB_ID ] ; #2 = Aggregate [ #1 ] Output [ MAX(SALARY) AS Max_SALARY ] ; #3 = Scan Table [ employees ] Output [ FIRST_NAME , JOB_ID , EMPLOYEE_ID , SALARY , LAST_NAME ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.SALARY > #2.Max_SALARY ] Output [ #3.JOB_ID , #3.LAST_NAME , #3.FIRST_NAME , #3.EMPLOYEE_ID ]"
    },
    {
        "id": "d30b3a32ac0a5f674d1452836d14f021f9db794ae36cd7d8da91e92c57834ea8",
        "question": "display the department id and the total salary for those departments which contains at least two employees.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ SALARY , DEPARTMENT_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID ] Output [ countstar AS Count_Star , SUM(SALARY) AS Sum_SALARY , DEPARTMENT_ID ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Sum_SALARY , DEPARTMENT_ID ]"
    },
    {
        "id": "2dcf76508b9cd063cd6aaf1bde51c678295ebc66808bd520aebc26c8f0d76a40",
        "question": "What are total salaries and department id for each department that has more than 2 employees?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Output [ SALARY , DEPARTMENT_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID ] Output [ countstar AS Count_Star , SUM(SALARY) AS Sum_SALARY , DEPARTMENT_ID ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Sum_SALARY , DEPARTMENT_ID ]"
    },
    {
        "id": "04fddeb91d965adad59058498d5f83f1cbdb3688eedbf598debb167f3e9b4998",
        "question": "display the first and last name, department, city, and state province for each employee.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ locations ] Output [ CITY , LOCATION_ID , STATE_PROVINCE ] ; #2 = Scan Table [ departments ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID , LOCATION_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.LOCATION_ID = #2.LOCATION_ID ] Output [ #2.DEPARTMENT_NAME , #1.STATE_PROVINCE , #2.DEPARTMENT_ID , #1.CITY ] ; #4 = Scan Table [ employees ] Output [ FIRST_NAME , DEPARTMENT_ID , LAST_NAME ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.DEPARTMENT_ID = #4.DEPARTMENT_ID ] Output [ #4.LAST_NAME , #3.DEPARTMENT_NAME , #4.FIRST_NAME , #3.STATE_PROVINCE , #3.CITY ]"
    },
    {
        "id": "7ec49bde50d5f1297ec8c3b4a43c65d932151aeaaeb8b8f3d6b6c94a57a151f7",
        "question": "What are the full names, departments, cities, and state provinces for each employee?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ locations ] Output [ CITY , LOCATION_ID , STATE_PROVINCE ] ; #2 = Scan Table [ departments ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID , LOCATION_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.LOCATION_ID = #2.LOCATION_ID ] Output [ #2.DEPARTMENT_NAME , #1.STATE_PROVINCE , #2.DEPARTMENT_ID , #1.CITY ] ; #4 = Scan Table [ employees ] Output [ FIRST_NAME , DEPARTMENT_ID , LAST_NAME ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.DEPARTMENT_ID = #4.DEPARTMENT_ID ] Output [ #4.LAST_NAME , #3.DEPARTMENT_NAME , #4.FIRST_NAME , #3.STATE_PROVINCE , #3.CITY ]"
    },
    {
        "id": "b46a52d76d778113ab590a9712e49eafc066f6c0f48b6c283d72b007291ecd88",
        "question": "display those employees who contain a letter z to their first name and also display their last name, city.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%z%' ] Output [ FIRST_NAME , DEPARTMENT_ID , LAST_NAME ] ; #2 = Scan Table [ departments ] Output [ DEPARTMENT_ID , LOCATION_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #2.LOCATION_ID , #1.LAST_NAME , #1.FIRST_NAME ] ; #4 = Scan Table [ locations ] Output [ CITY , LOCATION_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.LOCATION_ID = #4.LOCATION_ID ] Output [ #3.FIRST_NAME , #3.LAST_NAME , #4.CITY ]"
    },
    {
        "id": "c22e64d859a01b4498db99d1b120f91ba7c541a9dc23fe1b95719e91a2242c35",
        "question": "What are the full names and cities of employees who have the letter Z in their first names?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%z%' ] Output [ FIRST_NAME , DEPARTMENT_ID , LAST_NAME ] ; #2 = Scan Table [ departments ] Output [ DEPARTMENT_ID , LOCATION_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #2.LOCATION_ID , #1.LAST_NAME , #1.FIRST_NAME ] ; #4 = Scan Table [ locations ] Output [ CITY , LOCATION_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.LOCATION_ID = #4.LOCATION_ID ] Output [ #3.FIRST_NAME , #3.LAST_NAME , #4.CITY ]"
    },
    {
        "id": "42a25eabe04d325d1c6892aa85c9d6158f95b3fe96813ea9e0d727f6c3a662e8",
        "question": "display the department name, city, and state province for each department.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ locations ] Output [ CITY , LOCATION_ID , STATE_PROVINCE ] ; #2 = Scan Table [ departments ] Output [ DEPARTMENT_NAME , LOCATION_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.LOCATION_ID = #2.LOCATION_ID ] Output [ #2.DEPARTMENT_NAME , #1.STATE_PROVINCE , #1.CITY ]"
    },
    {
        "id": "964948b9492a9e3b1ae3c31babe5c2bfe97fd4afc26b5629bfbf303c41c81e32",
        "question": "What are the department names, cities, and state provinces for each department?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ locations ] Output [ CITY , LOCATION_ID , STATE_PROVINCE ] ; #2 = Scan Table [ departments ] Output [ DEPARTMENT_NAME , LOCATION_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.LOCATION_ID = #2.LOCATION_ID ] Output [ #2.DEPARTMENT_NAME , #1.STATE_PROVINCE , #1.CITY ]"
    },
    {
        "id": "9fa24e745df7b211d45096b1b35efb50337bae3e374bf7a095abcb159a428e55",
        "question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ locations ] Output [ COUNTRY_ID , LOCATION_ID ] ; #2 = Scan Table [ countries ] Output [ COUNTRY_ID , COUNTRY_NAME ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.COUNTRY_ID = #2.COUNTRY_ID ] Output [ #2.COUNTRY_NAME , #1.LOCATION_ID ] ; #4 = Scan Table [ departments ] Output [ DEPARTMENT_ID , LOCATION_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.LOCATION_ID = #4.LOCATION_ID ] Output [ #4.DEPARTMENT_ID , #3.COUNTRY_NAME ] ; #6 = Scan Table [ employees ] Output [ EMPLOYEE_ID , FIRST_NAME , DEPARTMENT_ID , LAST_NAME ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.DEPARTMENT_ID = #6.DEPARTMENT_ID ] Output [ #6.EMPLOYEE_ID , #6.FIRST_NAME , #5.COUNTRY_NAME , #6.LAST_NAME ]"
    },
    {
        "id": "680b52f6882bd35115aff863533c466986565a833038c9fc80546436864a5b27",
        "question": "What the full names, ids of each employee and the name of the country they are in?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ locations ] Output [ COUNTRY_ID , LOCATION_ID ] ; #2 = Scan Table [ countries ] Output [ COUNTRY_ID , COUNTRY_NAME ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.COUNTRY_ID = #2.COUNTRY_ID ] Output [ #2.COUNTRY_NAME , #1.LOCATION_ID ] ; #4 = Scan Table [ departments ] Output [ DEPARTMENT_ID , LOCATION_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.LOCATION_ID = #4.LOCATION_ID ] Output [ #4.DEPARTMENT_ID , #3.COUNTRY_NAME ] ; #6 = Scan Table [ employees ] Output [ EMPLOYEE_ID , FIRST_NAME , DEPARTMENT_ID , LAST_NAME ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.DEPARTMENT_ID = #6.DEPARTMENT_ID ] Output [ #6.EMPLOYEE_ID , #6.FIRST_NAME , #5.COUNTRY_NAME , #6.LAST_NAME ]"
    },
    {
        "id": "f78207509a099d290883a977eae877fb964e6b1929116520f36927c697f79c12",
        "question": "display the department name and number of employees in each of the department.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ departments ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID ] ; #2 = Scan Table [ employees ] Output [ DEPARTMENT_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.DEPARTMENT_NAME ] ; #4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_NAME ] Output [ countstar AS Count_Star , DEPARTMENT_NAME ]"
    },
    {
        "id": "a8d9a7d34a2a8bc2a2bcab91e583a5c501bd412aa8a746a5aa6ab60b8804ccf0",
        "question": "What are the department names and how many employees work in each of them?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ departments ] Output [ DEPARTMENT_NAME , DEPARTMENT_ID ] ; #2 = Scan Table [ employees ] Output [ DEPARTMENT_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.DEPARTMENT_NAME ] ; #4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_NAME ] Output [ countstar AS Count_Star , DEPARTMENT_NAME ]"
    },
    {
        "id": "359817f03be9b4bc18e0c014cbf03ea7bf9db4398e43adef4fd2b5ea9348b116",
        "question": "display the full name (first and last name), and salary of those employees who working in any department located in London.",
        "parsing_tree": "hr_1 | #1 = Scan Table [ locations ] Predicate [ CITY = 'London' ] Output [ CITY , LOCATION_ID ] ; #2 = Scan Table [ departments ] Output [ DEPARTMENT_ID , LOCATION_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.LOCATION_ID = #2.LOCATION_ID ] Output [ #2.DEPARTMENT_ID ] ; #4 = Scan Table [ employees ] Output [ FIRST_NAME , SALARY , DEPARTMENT_ID , LAST_NAME ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.DEPARTMENT_ID = #4.DEPARTMENT_ID ] Output [ #4.FIRST_NAME , #4.LAST_NAME , #4.SALARY ]"
    },
    {
        "id": "e611524f534065f922926b5ac46780ae87a41caaf1c76855ad46e35c8cb33295",
        "question": "What are full names and salaries of employees working in the city of London?",
        "parsing_tree": "hr_1 | #1 = Scan Table [ locations ] Predicate [ CITY = 'London' ] Output [ CITY , LOCATION_ID ] ; #2 = Scan Table [ departments ] Output [ DEPARTMENT_ID , LOCATION_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.LOCATION_ID = #2.LOCATION_ID ] Output [ #2.DEPARTMENT_ID ] ; #4 = Scan Table [ employees ] Output [ FIRST_NAME , SALARY , DEPARTMENT_ID , LAST_NAME ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.DEPARTMENT_ID = #4.DEPARTMENT_ID ] Output [ #4.FIRST_NAME , #4.LAST_NAME , #4.SALARY ]"
    },
    {
        "id": "cd67ce04561a6ebcf260ba637fe8256f6cca6eacfd7d7da19f5173dbc1b83eb8",
        "question": "What is the name of the song that was released in the most recent year?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Output [ song_name , releasedate ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ releasedate DESC ] Output [ song_name , releasedate ]"
    },
    {
        "id": "4382780ebf1023d7a85630cc52c420b989fec60567452b9272019b561b5c63b7",
        "question": "What is the name of the song that was released most recently?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Output [ song_name , releasedate ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ releasedate DESC ] Output [ song_name , releasedate ]"
    },
    {
        "id": "5129baca3d689626f18019712a2bc5876891fd1b5d6ceeed4bf386e580f1d616",
        "question": "What is the id of the longest song?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Output [ f_id , duration ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ duration DESC ] Output [ f_id , duration ]"
    },
    {
        "id": "dcc57aa0376fe25d3532c06f039de90ac0c70831781545ca42be66bbb4269b52",
        "question": "Find the id of the song that lasts the longest.",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Output [ f_id , duration ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ duration DESC ] Output [ f_id , duration ]"
    },
    {
        "id": "f4ccec271d81cc896e1ed776a33e9f78091ea8ddf17b44421ae03f36a606f46e",
        "question": "Find the names of all English songs.",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ song_name , languages ]"
    },
    {
        "id": "7c3a770192e8bc96e5dad5001a4a81ae6d886c26eb0a2a615063d84240e03912",
        "question": "What are the names of all songs in English?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ song_name , languages ]"
    },
    {
        "id": "9da2cbaaef5b1699be8c0b227e7dd8bb421474a1d5f5cc63541a4dc8c7355d0f",
        "question": "What are the id of songs whose format is mp3.",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Predicate [ formats = 'mp3' ] Output [ formats , f_id ]"
    },
    {
        "id": "da70e45afe08254f1ffd72c001d395451c8893cabe590a59707927678c8aca00",
        "question": "What are the id of all the files in mp3 format?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Predicate [ formats = 'mp3' ] Output [ formats , f_id ]"
    },
    {
        "id": "c6213ee3bbbda72aa7531ec58e2ad9491460fb1d5413375dfdb260ebf85671bb",
        "question": "List the name and country of origin for all singers who have produced songs with rating above 9.",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Output [ country , artist_name ] ; #2 = Scan Table [ song ] Predicate [ rating > 9 ] Output [ rating , artist_name ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.artist_name = #1.artist_name ] Output [ #1.country , #1.artist_name ]"
    },
    {
        "id": "f15f98e0bee3306252dfb7444bf4b59893bea2aa597e8284b0d7b67bb30c296a",
        "question": "What are the different names and countries of origins for all artists whose song ratings are above 9?",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Output [ country , artist_name ] ; #2 = Scan Table [ song ] Predicate [ rating > 9 ] Output [ rating , artist_name ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.artist_name = #1.artist_name ] Output [ #1.country , #1.artist_name ]"
    },
    {
        "id": "31016257c4d9b54129f9b1f6112de6cdf2a4a415e7fe083639ad8f505b671f53",
        "question": "List the file size and format for all songs that have resolution lower than 800.",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ resolution < 800 ] Output [ resolution , f_id ] ; #2 = Scan Table [ files ] Output [ formats , file_size , f_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Distinct [ true ] Output [ #2.file_size , #2.formats ]"
    },
    {
        "id": "cd5b317674bcd6a865b85fc9b17ac725c33522a9918ef217378bbdfec1d9fed2",
        "question": "What are the file sizes and formats for all songs with a resolution lower than 800?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ resolution < 800 ] Output [ resolution , f_id ] ; #2 = Scan Table [ files ] Output [ formats , file_size , f_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Distinct [ true ] Output [ #2.file_size , #2.formats ]"
    },
    {
        "id": "5fcdf6f29fc1a171ba9c8b3074af2a0ed63309d87eece63925d47ff78a56913f",
        "question": "What is the name of the artist who produced the shortest song?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Output [ f_id , duration ] ; #2 = Scan Table [ song ] Output [ f_id , artist_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #1.duration , #2.artist_name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ duration ASC ] Output [ duration , artist_name ]"
    },
    {
        "id": "25c500759f3153dfac76e6f706a562a5ab6622cde4097b87283fb250bb6e581a",
        "question": "What are the names of the artists who sang the shortest song?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Output [ f_id , duration ] ; #2 = Scan Table [ song ] Output [ f_id , artist_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #1.duration , #2.artist_name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ duration ASC ] Output [ duration , artist_name ]"
    },
    {
        "id": "20fd596ceebe31a9bb765021832473c200211f2e77d45513da4dcfe96a615cb6",
        "question": "How many songs have 4 minute duration?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Predicate [ duration like '4:%' ] Output [ duration ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7918eb4080a3f0e6ce062a8fb0b8067c43ca3af73f4e1ef20e467fa0f30ce961",
        "question": "What is the count of the songs that last approximately 4 minutes?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Predicate [ duration like '4:%' ] Output [ duration ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5edb45b5ca5a3af3bd57ceacda51812b550d5967ef3d2bec7a7aa22791f58f14",
        "question": "How many artists are from Bangladesh?",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Predicate [ country = 'Bangladesh' ] Output [ country ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "64d554b5eca400cea09228f7168830c2cb2a491a88ef0c720e2f144aecc1478a",
        "question": "How many Bangladeshi artists are listed?",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Predicate [ country = 'Bangladesh' ] Output [ country ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a91b92c1710f778ae0c7d63e9ebeb5c877bd7483b8d892cf5fda0981465eaff8",
        "question": "What is the average rating of songs produced by female artists?",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Predicate [ gender = 'Female' ] Output [ gender , artist_name ] ; #2 = Scan Table [ song ] Output [ rating , artist_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #2.rating ] ; #4 = Aggregate [ #3 ] Output [ AVG(rating) AS Avg_rating ]"
    },
    {
        "id": "c65104c7836b24a7fa6a35f2d6516cb3d065c4e996d2e5e773b7210d1a834fdf",
        "question": "How many songs, on average, are sung by a female artist?",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Predicate [ gender = 'Female' ] Output [ gender , artist_name ] ; #2 = Scan Table [ song ] Output [ rating , artist_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #2.rating ] ; #4 = Aggregate [ #3 ] Output [ AVG(rating) AS Avg_rating ]"
    },
    {
        "id": "a2d5ab25faaf7c01afa99405396805db7143069e7cfc8c2ea15b8d59f34ae75e",
        "question": "What is the most popular file format?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Output [ formats ] ; #2 = Aggregate [ #1 ] GroupBy [ formats ] Output [ formats , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ formats , Count_Star ]"
    },
    {
        "id": "8c57c9be025763e5987e72c7a663a645859f55c56ff436b5c1ac8a2478d08985",
        "question": "Find the file format that is used by the most files.",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Output [ formats ] ; #2 = Aggregate [ #1 ] GroupBy [ formats ] Output [ formats , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ formats , Count_Star ]"
    },
    {
        "id": "98440aafffbcc542b829c85f22345eb72ba1befa688ad33639f4ae2dac9e2f72",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Predicate [ country = 'UK' ] Output [ country , artist_name ] ; #2 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ languages , artist_name ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #1.artist_name ]"
    },
    {
        "id": "92c811e65329763f4c7d6ba036815fca76958acb126ddf9f7d5df6e48af05f6b",
        "question": "What are the names of the artists that are from the UK and sang songs in English?",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Predicate [ country = 'UK' ] Output [ country , artist_name ] ; #2 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ languages , artist_name ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #1.artist_name ]"
    },
    {
        "id": "b88316a1616828cfeb69968149d69a2906328a921c700fe5e539a56ac73ca1f4",
        "question": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Predicate [ formats = 'mp4' ] Output [ formats , f_id ] ; #2 = Scan Table [ song ] Predicate [ resolution < 1000 ] Output [ resolution , f_id ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.f_id = #1.f_id ] Output [ #1.f_id ]"
    },
    {
        "id": "fd0496b3a63e9c090040fa255bed2ec9fe0176af9613a2df8f93ce69a84e795d",
        "question": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Predicate [ formats = 'mp4' ] Output [ formats , f_id ] ; #2 = Scan Table [ song ] Predicate [ resolution < 1000 ] Output [ resolution , f_id ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.f_id = #1.f_id ] Output [ #1.f_id ]"
    },
    {
        "id": "d4cdd568cab057dd1b46913d0ab83c2acbbb5ea70dcec4833caa1b200c1449dd",
        "question": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Predicate [ gender = 'Female' ] Output [ country , gender , artist_name ] ; #2 = Scan Table [ song ] Predicate [ languages = 'bangla' ] Output [ languages , artist_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #1.country ]"
    },
    {
        "id": "74e11f543b0afce19bb92902b8c5bffc302c7db3e9e28924074c68743b54e9b1",
        "question": "What countries are the female artists who sung in the language Bangla from?",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Predicate [ gender = 'Female' ] Output [ country , gender , artist_name ] ; #2 = Scan Table [ song ] Predicate [ languages = 'bangla' ] Output [ languages , artist_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #1.country ]"
    },
    {
        "id": "deee3a551621b281b842a2b76f49a88193ec15ff95bf5e11d8b53274da215f04",
        "question": "What is the number of artists for each gender?",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Output [ gender ] ; #2 = Aggregate [ #1 ] GroupBy [ gender ] Output [ countstar AS Count_Star , gender ]"
    },
    {
        "id": "7e1f3c3bd0f95331bc19a964435134d94054089a1b4c6af41a5ef3ad53633b42",
        "question": "How many artists are male and how many are female?",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Output [ gender ] ; #2 = Aggregate [ #1 ] GroupBy [ gender ] Output [ countstar AS Count_Star , gender ]"
    },
    {
        "id": "689c5d2eb71b30abdb7fa7fe0d89ef097296cea33e98c988ed540a01f80b8379",
        "question": "What is the average rating of songs for each language?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Output [ rating , languages ] ; #2 = Aggregate [ #1 ] GroupBy [ languages ] Output [ AVG(rating) AS Avg_rating , languages ]"
    },
    {
        "id": "acfa3dc7844d02d798df30271ef45c365d912b383bf37d4723b98e7fb1cb89de",
        "question": "What is the average song rating for each language?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Output [ rating , languages ] ; #2 = Aggregate [ #1 ] GroupBy [ languages ] Output [ AVG(rating) AS Avg_rating , languages ]"
    },
    {
        "id": "bf91fa4d71efb105510a722636957c36a6debc91bb133c9eed8446661546916d",
        "question": "For each file format, return the number of artists who released songs in that format.",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Output [ formats ] ; #2 = Aggregate [ #1 ] GroupBy [ formats ] Output [ formats , countstar AS Count_Star ]"
    },
    {
        "id": "8f454bd485b5de96b9bd505c4c5a1e00cbc0ce1363d25b07a5043ab191f426db",
        "question": "How many songs were released for each format?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Output [ formats ] ; #2 = Aggregate [ #1 ] GroupBy [ formats ] Output [ formats , countstar AS Count_Star ]"
    },
    {
        "id": "286c7b36e3b1fc39096ababda95c0122583bae1a007846ef446fff6013991243",
        "question": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ resolution , languages ] ; #2 = Aggregate [ #1 ] Output [ MIN(resolution) AS Min_resolution ] ; #3 = Scan Table [ song ] Output [ song_name , resolution ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.resolution > #2.Min_resolution ] Output [ #3.song_name ]"
    },
    {
        "id": "c7f6404beb73ff9cd7ef366c68ba311b0d11520bfc07bfd90d75ef43d6f6fad6",
        "question": "What are the different names for all songs that have a higher resolution than English songs?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ resolution , languages ] ; #2 = Aggregate [ #1 ] Output [ MIN(resolution) AS Min_resolution ] ; #3 = Scan Table [ song ] Output [ song_name , resolution ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.resolution > #2.Min_resolution ] Output [ #3.song_name ]"
    },
    {
        "id": "c61b29bb1c7f4921b7f087642d3a2f673522559c32fba95e4b9f700a9f1b537a",
        "question": "What are the names of all songs that have a lower rating than some song of blues genre?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ genre_is = 'blues' ] Output [ rating , genre_is ] ; #2 = Aggregate [ #1 ] Output [ MAX(rating) AS Max_rating ] ; #3 = Scan Table [ song ] Output [ song_name , rating ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.rating < #2.Max_rating ] Output [ #3.song_name ]"
    },
    {
        "id": "0e8564a2785a3312f297a645b859b16e0bd95d54740896be6ad2340f2750fcc8",
        "question": "What are the names of the songs that have a lower rating than at least one blues song?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ genre_is = 'blues' ] Output [ rating , genre_is ] ; #2 = Aggregate [ #1 ] Output [ MAX(rating) AS Max_rating ] ; #3 = Scan Table [ song ] Output [ song_name , rating ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.rating < #2.Max_rating ] Output [ #3.song_name ]"
    },
    {
        "id": "7fa633615e8be6ed9b43be959b73d0b0fda597bc9c64d1e0115c0f8221a05d03",
        "question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ song_name like '%love%' ] Output [ song_name , artist_name ] ; #2 = Scan Table [ artist ] Output [ country , artist_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #2.country , #2.artist_name ]"
    },
    {
        "id": "fd8511d9c5a14c51afe6acf65f5fab743d8c4f6a115fc723aedd98112644bbe9",
        "question": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ song_name like '%love%' ] Output [ song_name , artist_name ] ; #2 = Scan Table [ artist ] Output [ country , artist_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #2.country , #2.artist_name ]"
    },
    {
        "id": "fab9c82dd1ad397c1f9a8ff5f7821e80f0148ab6c3df94085e68b5f1239d2266",
        "question": "List the names of all genres in alphabetical oder, together with its ratings.",
        "parsing_tree": "music_1 | #1 = Scan Table [ genre ] Output [ g_name , rating ] ; #2 = Sort [ #1 ] OrderBy [ g_name ASC ] Output [ g_name , rating ]"
    },
    {
        "id": "1f5d7595134e0381694cef4921124023e25af220a42e458e3c21265d94940e65",
        "question": "What are the names of all genres in alphabetical order, combined with its ratings?",
        "parsing_tree": "music_1 | #1 = Scan Table [ genre ] Output [ g_name , rating ] ; #2 = Sort [ #1 ] OrderBy [ g_name ASC ] Output [ g_name , rating ]"
    },
    {
        "id": "0a2db87ea882c9667e723621bd5b5cb692f24e91c35c886adb632e44a4e588bb",
        "question": "Give me a list of the names of all songs ordered by their resolution.",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Output [ song_name , resolution ] ; #2 = Sort [ #1 ] OrderBy [ resolution ASC ] Output [ song_name , resolution ]"
    },
    {
        "id": "964f9035d206810cfa6553486eb682c243b3da1d5fb57ddab0eff1eb6fdeee9a",
        "question": "What are the names of all songs that are ordered by their resolution numbers?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Output [ song_name , resolution ] ; #2 = Sort [ #1 ] OrderBy [ resolution ASC ] Output [ song_name , resolution ]"
    },
    {
        "id": "c00a432c6fa4d45d18e9695a28139c7f9db51fca0c3813de04e527abad680b5c",
        "question": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Predicate [ formats = 'mp4' ] Output [ formats , f_id ] ; #2 = Scan Table [ song ] Predicate [ resolution > 720 ] Output [ resolution , f_id ] ; #3 = Union [ #1 , #2 ] Output [ #1.f_id ]"
    },
    {
        "id": "2af043bbe9b540955f2bbc465a497ed14a8218c4226cf5fe94c4117dbd3803e8",
        "question": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Predicate [ formats = 'mp4' ] Output [ formats , f_id ] ; #2 = Scan Table [ song ] Predicate [ resolution > 720 ] Output [ resolution , f_id ] ; #3 = Union [ #1 , #2 ] Output [ #1.f_id ]"
    },
    {
        "id": "ef3c3942da5ddf37a97b2c3ec5676c42fff3ac399566dd5956b65b4927329f41",
        "question": "List the names of all songs that have 4 minute duration or are in English.",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Predicate [ duration like '4:%' ] Output [ f_id , duration ] ; #2 = Scan Table [ song ] Output [ song_name , f_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #2.song_name ] ; #4 = Scan Table [ song ] Predicate [ languages = ' english' ] Output [ song_name , languages ] ; #5 = Union [ #3 , #4 ] Output [ #3.song_name ]"
    },
    {
        "id": "38b42000e4ae28c213d868b43d894b108f62375a4ea205f8516247d21c3b5302",
        "question": "What are the names of all songs that are approximately 4 minutes long or are in English?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Predicate [ duration like '4:%' ] Output [ f_id , duration ] ; #2 = Scan Table [ song ] Output [ song_name , f_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #2.song_name ] ; #4 = Scan Table [ song ] Predicate [ languages = ' english' ] Output [ song_name , languages ] ; #5 = Union [ #3 , #4 ] Output [ #3.song_name ]"
    },
    {
        "id": "c45549f546cc985b8e3234a5fa1b07bd60f12199cc355ce85575d200c82df165",
        "question": "What is the language used most often in the songs?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Output [ languages ] ; #2 = Aggregate [ #1 ] GroupBy [ languages ] Output [ countstar AS Count_Star , languages ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , languages ]"
    },
    {
        "id": "0c399d1599d5b3f5d64896a9e78c401f46a2c22c6b5b6921cc67e6f60f5f9c32",
        "question": "What are the languages that are used most often in songs?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Output [ languages ] ; #2 = Aggregate [ #1 ] GroupBy [ languages ] Output [ countstar AS Count_Star , languages ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , languages ]"
    },
    {
        "id": "c11992c8ebd4b3f478d755211b676c5f0f9ecb19b12efbd251ada3f20daecc0a",
        "question": "What is the language that was used most often in songs with resolution above 500?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ resolution > 500 ] Output [ resolution , languages , artist_name ] ; #2 = Aggregate [ #1 ] GroupBy [ languages , artist_name ] Output [ countstar AS Count_Star , artist_name ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ True ] Output [ Count_Star , artist_name ]"
    },
    {
        "id": "860d3cb1d85d9ef8c7817c16d84b900133b0aa7b35f1dfd169cd169182dce638",
        "question": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ resolution > 500 ] Output [ resolution , languages , artist_name ] ; #2 = Aggregate [ #1 ] GroupBy [ languages , artist_name ] Output [ countstar AS Count_Star , artist_name ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ True ] Output [ Count_Star , artist_name ]"
    },
    {
        "id": "2e7534f4e708a75e3a7f68b042af7e74bb0b65cd2cd5cf21bb340a6081aa4d91",
        "question": "What are the names of artists who are Male and are from UK?",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Predicate [ country = 'UK' AND gender = 'Male' ] Output [ country , gender , artist_name ]"
    },
    {
        "id": "6f06155f4a79a3cdb5b017d899135d757a037d175546503f1d2c563a09a6f616",
        "question": "What are the names of all male British artists?",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Predicate [ country = 'UK' AND gender = 'Male' ] Output [ country , gender , artist_name ]"
    },
    {
        "id": "ee992c16f1ec21f3ed236994e6111deafbb648cc14af6a6bc4a7f26bdb1b79a5",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ genre_is = 'modern' OR languages = 'english' ] Output [ song_name , genre_is , languages ]"
    },
    {
        "id": "fa72c89310448049a17ca862fa32e6e09787a06567b7308d35c91160f4439a68",
        "question": "What are the names of the songs that are modern or sung in English?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ genre_is = 'modern' OR languages = 'english' ] Output [ song_name , genre_is , languages ]"
    },
    {
        "id": "12261f8d2126a4ae81e898ec9c7497a2b54de11c4ce5d83ca81cc7071d713d11",
        "question": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Predicate [ formats = 'mp3' ] Output [ formats , f_id ] ; #2 = Scan Table [ song ] Output [ song_name , f_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #2.song_name ] ; #4 = Scan Table [ song ] Predicate [ resolution < 1000 ] Output [ song_name , resolution ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.song_name = #4.song_name ] Output [ #3.song_name ]"
    },
    {
        "id": "b4bfb0cd637999882dbe3e25a7fdbbd489f7832baa779ac46c4065d01899ff14",
        "question": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Predicate [ formats = 'mp3' ] Output [ formats , f_id ] ; #2 = Scan Table [ song ] Output [ song_name , f_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #2.song_name ] ; #4 = Scan Table [ song ] Predicate [ resolution < 1000 ] Output [ song_name , resolution ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.song_name = #4.song_name ] Output [ #3.song_name ]"
    },
    {
        "id": "0425eab24ed35dab632cc9bf53ade18e17af745f46af82150e2914b6580d2322",
        "question": "Return the names of singers who are from UK and released an English song.",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Predicate [ country = 'UK' ] Output [ country , artist_name ] ; #2 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ languages , artist_name ] ; #3 = Scan Table [ artist ] Output [ artist_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.artist_name = #3.artist_name ] Output [ #3.artist_name ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #1.artist_name = #4.artist_name ] Output [ #1.artist_name ]"
    },
    {
        "id": "67f2ff292c5eedf1e8e3c1775a8adf0d96f3064c9935ddaaec81604b0c12ae29",
        "question": "What are the names of all singers that are from the UK and released a song in English?",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Predicate [ country = 'UK' ] Output [ country , artist_name ] ; #2 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ languages , artist_name ] ; #3 = Scan Table [ artist ] Output [ artist_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.artist_name = #3.artist_name ] Output [ #3.artist_name ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #1.artist_name = #4.artist_name ] Output [ #1.artist_name ]"
    },
    {
        "id": "81ade4c1be4f9f7f66bbb5f6df1bc30e2b0bfc00c394cb443d9210ed371058de",
        "question": "What are the average rating and resolution of songs that are in Bangla?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ languages = 'bangla' ] Output [ resolution , rating , languages ] ; #2 = Aggregate [ #1 ] Output [ AVG(resolution) AS Avg_resolution , AVG(rating) AS Avg_rating ]"
    },
    {
        "id": "df573a20c36093be3153e275ed8624c77aaf4adf0df0467a570be544af863914",
        "question": "What is the average rating and resolution of all bangla songs?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ languages = 'bangla' ] Output [ resolution , rating , languages ] ; #2 = Aggregate [ #1 ] Output [ AVG(resolution) AS Avg_resolution , AVG(rating) AS Avg_rating ]"
    },
    {
        "id": "91b4ad7f71a4db80089be36b828b1a89320b0af52b563efeb0a0e66129002d47",
        "question": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Predicate [ duration like '3:%' ] Output [ f_id , duration ] ; #2 = Scan Table [ song ] Output [ resolution , f_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #2.resolution ] ; #4 = Aggregate [ #3 ] Output [ MIN(resolution) AS Min_resolution , MAX(resolution) AS Max_resolution ]"
    },
    {
        "id": "d89e0cdc11b5ca11600fa8cbf9ecd42c4c974acc7e91dd2c78679fa438ed553e",
        "question": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Predicate [ duration like '3:%' ] Output [ f_id , duration ] ; #2 = Scan Table [ song ] Output [ resolution , f_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #2.resolution ] ; #4 = Aggregate [ #3 ] Output [ MIN(resolution) AS Min_resolution , MAX(resolution) AS Max_resolution ]"
    },
    {
        "id": "e0910152bafcea93590a55cd8626074162d5ee85914926bb07e20ce3c9c44058",
        "question": "What are the maximum duration and resolution of songs grouped and ordered by languages?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Output [ f_id , duration ] ; #2 = Scan Table [ song ] Output [ resolution , f_id , languages ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #1.duration , #2.languages , #2.resolution ] ; #4 = Aggregate [ #3 ] GroupBy [ languages ] Output [ MAX(resolution) AS Max_resolution , MAX(duration) AS Max_duration , languages ] ; #5 = Sort [ #4 ] OrderBy [ languages ASC ] Output [ Max_resolution , Max_duration , languages ]"
    },
    {
        "id": "a7a0e8a96fe1bb96a292219c34af392fb40dc4f29799cc0b78d2fd70a107acf6",
        "question": "What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Output [ f_id , duration ] ; #2 = Scan Table [ song ] Output [ resolution , f_id , languages ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #1.duration , #2.languages , #2.resolution ] ; #4 = Aggregate [ #3 ] GroupBy [ languages ] Output [ MAX(resolution) AS Max_resolution , MAX(duration) AS Max_duration , languages ] ; #5 = Sort [ #4 ] OrderBy [ languages ASC ] Output [ Max_resolution , Max_duration , languages ]"
    },
    {
        "id": "a7c619b945e01009830fa454d5a1eb70d9d0a9a968cd863c70346996085b33e8",
        "question": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Output [ f_id , duration ] ; #2 = Scan Table [ song ] Output [ rating , f_id , genre_is ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #1.duration , #2.genre_is , #2.rating ] ; #4 = Aggregate [ #3 ] GroupBy [ genre_is ] Output [ MIN(duration) AS Min_duration , genre_is , MIN(rating) AS Min_rating ] ; #5 = Sort [ #4 ] OrderBy [ genre_is ASC ] Output [ Min_duration , genre_is , Min_rating ]"
    },
    {
        "id": "9a46fc970aea30dc061974071d30096cb86a31a0836ef70c7f7b29b1b4f5b0f6",
        "question": "What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?",
        "parsing_tree": "music_1 | #1 = Scan Table [ files ] Output [ f_id , duration ] ; #2 = Scan Table [ song ] Output [ rating , f_id , genre_is ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #1.duration , #2.genre_is , #2.rating ] ; #4 = Aggregate [ #3 ] GroupBy [ genre_is ] Output [ MIN(duration) AS Min_duration , genre_is , MIN(rating) AS Min_rating ] ; #5 = Sort [ #4 ] OrderBy [ genre_is ASC ] Output [ Min_duration , genre_is , Min_rating ]"
    },
    {
        "id": "a23b09a9a1841c6a6aa0a2a7b2726a126b12011ae9e77b5f37c252acb3de1229",
        "question": "Find the names and number of works of all artists who have at least one English songs.",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ languages , artist_name ] ; #2 = Scan Table [ artist ] Output [ artist_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #2.artist_name ] ; #4 = Aggregate [ #3 ] GroupBy [ artist_name ] Output [ countstar AS Count_Star , artist_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 1 ] Output [ Count_Star , artist_name ]"
    },
    {
        "id": "e733d3a262317c1671902f59f33dc8f9963baecbe2419b4114742913613010c4",
        "question": "What are the names and number of works for all artists who have sung at least one song in English?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ languages , artist_name ] ; #2 = Scan Table [ artist ] Output [ artist_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #2.artist_name ] ; #4 = Aggregate [ #3 ] GroupBy [ artist_name ] Output [ countstar AS Count_Star , artist_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 1 ] Output [ Count_Star , artist_name ]"
    },
    {
        "id": "e6dc6bf7cea3d99d902fbf571838c460a7fe89c34b230c42e75a87a14df407e2",
        "question": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ resolution > 900 ] Output [ resolution , artist_name ] ; #2 = Scan Table [ artist ] Output [ country , artist_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #2.country , #2.artist_name ] ; #4 = Aggregate [ #3 ] GroupBy [ artist_name ] Output [ countstar AS Count_Star , country , artist_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 1 ] Output [ country , artist_name ]"
    },
    {
        "id": "2834763fc2258cac3203dba67bdd8eff17720ef9cc5e4059d2c4556ea0d33b1f",
        "question": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ resolution > 900 ] Output [ resolution , artist_name ] ; #2 = Scan Table [ artist ] Output [ country , artist_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #2.country , #2.artist_name ] ; #4 = Aggregate [ #3 ] GroupBy [ artist_name ] Output [ countstar AS Count_Star , country , artist_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 1 ] Output [ country , artist_name ]"
    },
    {
        "id": "64eb8b684117272159715d5793f0a3a9dfc1a0b8bdee8869dde3a4567c6420e0",
        "question": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ rating , languages ] ; #2 = Aggregate [ #1 ] Output [ MIN(rating) AS Min_rating ] ; #3 = Scan Table [ song ] Output [ song_name , rating ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.rating < #2.Min_rating ] Output [ #3.song_name ]"
    },
    {
        "id": "40b3cf5c62fa3e2dceb93a7c25d4366bf0ccff05aa56859d2206cdfb00c73dc3",
        "question": "What are the song names for every song whose rating is less than the minimum rating for English songs?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ rating , languages ] ; #2 = Aggregate [ #1 ] Output [ MIN(rating) AS Min_rating ] ; #3 = Scan Table [ song ] Output [ song_name , rating ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.rating < #2.Min_rating ] Output [ #3.song_name ]"
    },
    {
        "id": "e8ec7632af357f0a66b70ba5984c83f425fabf8a25aaeed56ebf2b39f48f8569",
        "question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ rating < 8 ] Output [ resolution , rating ] ; #2 = Aggregate [ #1 ] Output [ MAX(resolution) AS Max_resolution ] ; #3 = Scan Table [ song ] Output [ resolution , f_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.resolution > #2.Max_resolution ] Output [ #3.f_id ]"
    },
    {
        "id": "526bc87ef911a00076e3d6572e38ccc33b14c0c396a87d4882a1879e65b347c4",
        "question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ rating < 8 ] Output [ resolution , rating ] ; #2 = Aggregate [ #1 ] Output [ MAX(resolution) AS Max_resolution ] ; #3 = Scan Table [ song ] Output [ resolution , f_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.resolution > #2.Max_resolution ] Output [ #3.f_id ]"
    },
    {
        "id": "10694a05cf605c76dabcb658541b9a5c469ffef214fb930a400fe0af47430be6",
        "question": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ genre_is = 'modern' ] Output [ resolution , genre_is ] ; #2 = Aggregate [ #1 ] Output [ AVG(resolution) AS Avg_resolution ] ; #3 = Scan Table [ song ] Output [ resolution , f_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.resolution > #2.Avg_resolution ] Output [ #3.f_id ]"
    },
    {
        "id": "54dbe0955d323a2c0ed50da561bdfa984147f12e4206aaaa1bb40e8c0964f6ca",
        "question": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ genre_is = 'modern' ] Output [ resolution , genre_is ] ; #2 = Aggregate [ #1 ] Output [ AVG(resolution) AS Avg_resolution ] ; #3 = Scan Table [ song ] Output [ resolution , f_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.resolution > #2.Avg_resolution ] Output [ #3.f_id ]"
    },
    {
        "id": "d4908a66889f742fa3827bb7f05e8a1a11eeb7826d7e2da8739f206c9b32e22e",
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ genre_is , artist_name , f_id , rating , languages ] ; #2 = Sort [ #1 ] OrderBy [ rating ASC ] Output [ f_id , rating , artist_name , genre_is ]"
    },
    {
        "id": "2890797c4479d15a45617fa63f6f09b9429d04d2f201f4f8023d566ff349ed2d",
        "question": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ genre_is , artist_name , f_id , rating , languages ] ; #2 = Sort [ #1 ] OrderBy [ rating ASC ] Output [ f_id , rating , artist_name , genre_is ]"
    },
    {
        "id": "8b34e80666b8bda6eaa2a5b01689584e902ab97eaf00024cee33f3194f8e1513",
        "question": "List the duration, file size and format of songs whose genre is pop, ordered by title?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ genre_is = 'pop' ] Output [ song_name , f_id , genre_is ] ; #2 = Scan Table [ files ] Output [ formats , file_size , f_id , duration ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #2.file_size , #2.formats , #2.duration , #1.song_name ] ; #4 = Sort [ #3 ] OrderBy [ song_name ASC ] Output [ formats , file_size , duration , song_name ]"
    },
    {
        "id": "f7b279e37f18e30a2752eeb1b023de96da441d645baf174ce966bed246ebd848",
        "question": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ genre_is = 'pop' ] Output [ song_name , f_id , genre_is ] ; #2 = Scan Table [ files ] Output [ formats , file_size , f_id , duration ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #2.file_size , #2.formats , #2.duration , #1.song_name ] ; #4 = Sort [ #3 ] OrderBy [ song_name ASC ] Output [ formats , file_size , duration , song_name ]"
    },
    {
        "id": "06c8c5c544ff813631a778cb2c426095d544dab95a2708e01779a3a869c9efa4",
        "question": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ languages = 'english' ] Distinct [ true ] Output [ languages , artist_name ] ; #2 = Scan Table [ song ] Predicate [ rating > 8 ] Distinct [ true ] Output [ rating , artist_name ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #1.artist_name ]"
    },
    {
        "id": "74483e2a0023921c095facd24f13f6365736119154338a6e2174992017909f00",
        "question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?",
        "parsing_tree": "music_1 | #1 = Scan Table [ song ] Predicate [ languages = 'english' ] Distinct [ true ] Output [ languages , artist_name ] ; #2 = Scan Table [ song ] Predicate [ rating > 8 ] Distinct [ true ] Output [ rating , artist_name ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #1.artist_name ]"
    },
    {
        "id": "7aaa8dc8efc1176b7ccd33666694ddd79e67368b9ded323415f306830181219f",
        "question": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Predicate [ country = 'Bangladesh' ] Output [ country , artist_name ] ; #2 = Scan Table [ song ] Predicate [ rating > 7 ] Distinct [ true ] Output [ rating , artist_name ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #1.artist_name ]"
    },
    {
        "id": "44dd3c8f7284eca0133b1edfdb6f1c11fbaf3d3474730e5326a4f631327acce6",
        "question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?",
        "parsing_tree": "music_1 | #1 = Scan Table [ artist ] Predicate [ country = 'Bangladesh' ] Output [ country , artist_name ] ; #2 = Scan Table [ song ] Predicate [ rating > 7 ] Distinct [ true ] Output [ rating , artist_name ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #1.artist_name ]"
    },
    {
        "id": "ca9bfb0d6abd188d58c96e15a6bf76ebabf8544f9cf32ca8b51164e108e24d4f",
        "question": "what is the full name and id of the college with the largest number of baseball players?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ player_college ] Output [ college_id ] ; #2 = Aggregate [ #1 ] GroupBy [ college_id ] Output [ countstar AS Count_Star , college_id ] ; #3 = Scan Table [ college ] Output [ name_full , college_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.college_id = #3.college_id ] Output [ #3.college_id , #3.name_full , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , name_full , college_id ]"
    },
    {
        "id": "88e9406f6124c4959268e41652fafc5ae50ff95a4d4ee715d8dd00aa8421cd9d",
        "question": "Find the full name and id of the college that has the most baseball players.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ player_college ] Output [ college_id ] ; #2 = Aggregate [ #1 ] GroupBy [ college_id ] Output [ countstar AS Count_Star , college_id ] ; #3 = Scan Table [ college ] Output [ name_full , college_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.college_id = #3.college_id ] Output [ #3.college_id , #3.name_full , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , name_full , college_id ]"
    },
    {
        "id": "00f950993a2646621cf9a8a0af071c5044c0f0eecad3513f35bda493967d9bca",
        "question": "What are first and last names of players participating in all star game in 1998?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ all_star ] Predicate [ year = 1998 ] Output [ player_id , year ] ; #2 = Scan Table [ player ] Output [ name_last , player_id , name_first ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.player_id = #2.player_id ] Output [ #2.name_first , #2.name_last ]"
    },
    {
        "id": "0a8c39a60316825fe44a81346b5eca35c075d1ae82040f6be1ca96f0f52780bd",
        "question": "List the first and last name for players who participated in all star game in 1998.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ all_star ] Predicate [ year = 1998 ] Output [ player_id , year ] ; #2 = Scan Table [ player ] Output [ name_last , player_id , name_first ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.player_id = #2.player_id ] Output [ #2.name_first , #2.name_last ]"
    },
    {
        "id": "90c7139cdccdb0d5647cda9a5c00571bf846846d89db2624eba0c68b1bf11fbc",
        "question": "What are the first name, last name and id of the player with the most all star game experiences? Also list the count.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ all_star ] Output [ player_id ] ; #2 = Aggregate [ #1 ] GroupBy [ player_id ] Output [ countstar AS Count_Star , player_id ] ; #3 = Scan Table [ player ] Output [ name_last , player_id , name_first ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.player_id = #3.player_id ] Output [ #3.name_first , #3.player_id , #3.name_last , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , name_last , player_id , name_first ]"
    },
    {
        "id": "feec0de33227aa7593f7d084149835b7c11231eaa45af8bdb39f3b96114298d0",
        "question": "Which player has the most all star game experiences? Give me the first name, last name and id of the player, as well as the number of times the player participated in all star game.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ all_star ] Output [ player_id ] ; #2 = Aggregate [ #1 ] GroupBy [ player_id ] Output [ countstar AS Count_Star , player_id ] ; #3 = Scan Table [ player ] Output [ name_last , player_id , name_first ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.player_id = #3.player_id ] Output [ #3.name_first , #3.player_id , #3.name_last , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , name_last , player_id , name_first ]"
    },
    {
        "id": "865d80003180982f2254a55eb011cca7449f22a4437493be60ba898ed16a1ab2",
        "question": "How many players enter hall of fame each year?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ hall_of_fame ] Output [ yearid ] ; #2 = Aggregate [ #1 ] GroupBy [ yearid ] Output [ countstar AS Count_Star , yearid ]"
    },
    {
        "id": "47e70a679ed0432792184e9fef96ab9ed089e5f6add001a253840ae366a11fb3",
        "question": "Count the number of players who enter hall of fame for each year.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ hall_of_fame ] Output [ yearid ] ; #2 = Aggregate [ #1 ] GroupBy [ yearid ] Output [ countstar AS Count_Star , yearid ]"
    },
    {
        "id": "6fd6dad1f121caac233d2d7fa9098807ddf265c2eea615b4600775163dcfc8fd",
        "question": "What is the average number of attendance at home games for each year?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ home_game ] Output [ attendance , year ] ; #2 = Aggregate [ #1 ] GroupBy [ year ] Output [ AVG(attendance) AS Avg_attendance , year ]"
    },
    {
        "id": "13cc0f6bb922d53b51a15667e62d78730bd718def6eb5b206f2667c38227b4fd",
        "question": "For each year, return the year and the average number of attendance at home games.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ home_game ] Output [ attendance , year ] ; #2 = Aggregate [ #1 ] GroupBy [ year ] Output [ AVG(attendance) AS Avg_attendance , year ]"
    },
    {
        "id": "6102ae7f6a0ce8281db1a48cd04311f45db68e4af9cb94c950556f6079df1dc2",
        "question": "What are the manager's first name, last name and id who won the most manager award?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ manager_award ] Output [ player_id ] ; #2 = Aggregate [ #1 ] GroupBy [ player_id ] Output [ countstar AS Count_Star , player_id ] ; #3 = Scan Table [ player ] Output [ name_last , player_id , name_first ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.player_id = #3.player_id ] Output [ #2.Count_Star , #3.name_first , #3.name_last , #2.player_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ player_id , Count_Star , name_last , name_first ]"
    },
    {
        "id": "1617e1cafcd0fa9e9e5e0eb28122227046741451cc199697a8d623b598af98a3",
        "question": "Which manager won the most manager award? Give me the manager's first name, last name and id.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ manager_award ] Output [ player_id ] ; #2 = Aggregate [ #1 ] GroupBy [ player_id ] Output [ countstar AS Count_Star , player_id ] ; #3 = Scan Table [ player ] Output [ name_last , player_id , name_first ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.player_id = #3.player_id ] Output [ #2.Count_Star , #3.name_first , #3.name_last , #2.player_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ player_id , Count_Star , name_last , name_first ]"
    },
    {
        "id": "b2d45a320f02c2d4360e32aea8497b3cd1d8a60010897a762b056e5c90864344",
        "question": "How many parks are there in the state of NY?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ park ] Output [ state ] ; #2 = Filter [ #1 ] Predicate [ state = 'NY' ] Output [ 1 AS One ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "8e731a8bb0855215ea00e0791a965b6fdd5de90d778632899d30db76c2456275",
        "question": "Show me the number of parks the state of NY has.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ park ] Output [ state ] ; #2 = Filter [ #1 ] Predicate [ state = 'NY' ] Output [ 1 AS One ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0264311db654f43fb84a2a12b8cfb00db2c882710aff3f660244469f213aa6a3",
        "question": "Which 3 players won the most player awards? List their full name and id.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ player_award ] Output [ player_id ] ; #2 = Aggregate [ #1 ] GroupBy [ player_id ] Output [ countstar AS Count_Star , player_id ] ; #3 = Scan Table [ player ] Output [ name_last , player_id , name_first ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.player_id = #3.player_id ] Output [ #3.name_first , #3.player_id , #3.name_last , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , name_last , player_id , name_first ]"
    },
    {
        "id": "ab17c634c17f9cf7db37c9cc4a9e353c2d604027b0e887a403a5b84153406a24",
        "question": "Find the first name, last name and id for the top three players won the most player awards.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ player_award ] Output [ player_id ] ; #2 = Aggregate [ #1 ] GroupBy [ player_id ] Output [ countstar AS Count_Star , player_id ] ; #3 = Scan Table [ player ] Output [ name_last , player_id , name_first ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.player_id = #3.player_id ] Output [ #3.name_first , #3.player_id , #3.name_last , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , name_last , player_id , name_first ]"
    },
    {
        "id": "3f812ce7cc2b808c756b2fc6351c54990c1eea260d037dd5b531fabb02113302",
        "question": "How many players born in USA are right-handed batters? That is, have the batter value 'R'.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ player ] Output [ birth_country , bats ] ; #2 = Filter [ #1 ] Predicate [ birth_country = 'USA' AND bats = 'R' ] Output [ 1 AS One ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a1deaa6968f0fa9dad385b6fb28673ad3551a3033825e2a539355a9b874fb977",
        "question": "Count the number of players who were born in USA and have bats information 'R'.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ player ] Output [ birth_country , bats ] ; #2 = Filter [ #1 ] Predicate [ birth_country = 'USA' AND bats = 'R' ] Output [ 1 AS One ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "28a73a68a8b86e08142530667363baaf75ac9336b8f5af33fcb3d09ba8767565",
        "question": "What is the average height of the players from the college named 'Yale University'?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ college ] Output [ name_full , college_id ] ; #2 = Filter [ #1 ] Predicate [ name_full = 'Yale University' ] Output [ college_id ] ; #3 = Scan Table [ player_college ] Output [ college_id , player_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.college_id = #3.college_id ] Output [ #3.player_id ] ; #5 = Scan Table [ player ] Output [ player_id , height ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.player_id = #5.player_id ] Output [ #5.height ] ; #7 = Aggregate [ #6 ] Output [ AVG(height) AS Avg_height ]"
    },
    {
        "id": "15b72dc44546b1169ca5e1e28e7b81ecbd6dec55e5b40ec09de3150969fb82ab",
        "question": "Find the average height of the players who belong to the college called 'Yale University'.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ college ] Output [ name_full , college_id ] ; #2 = Filter [ #1 ] Predicate [ name_full = 'Yale University' ] Output [ college_id ] ; #3 = Scan Table [ player_college ] Output [ college_id , player_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.college_id = #3.college_id ] Output [ #3.player_id ] ; #5 = Scan Table [ player ] Output [ player_id , height ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.player_id = #5.player_id ] Output [ #5.height ] ; #7 = Aggregate [ #6 ] Output [ AVG(height) AS Avg_height ]"
    },
    {
        "id": "da6a560fa34c473a0da1aede9d5e5dc87ce0e37c013cbf2067631a80305c1dda",
        "question": "Find the players' first name and last name who won award both in 1960 and in 1961.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ player_award ] Predicate [ year = 1961 ] Output [ year ] ; #2 = Top [ #1 ] Rows [ 1 ] Output [ year ] ; #3 = Scan Table [ player ] Output [ name_last , name_first ] ; #4 = Join [ #2 , #3 ] Distinct [ true ] Output [ #3.name_first , #3.name_last ] ; #5 = Scan Table [ player_award ] Predicate [ year = 1960 ] Output [ year ] ; #6 = Top [ #5 ] Rows [ 1 ] Output [ year ] ; #7 = Scan Table [ player ] Output [ name_last , name_first ] ; #8 = Join [ #6 , #7 ] Distinct [ true ] Output [ #7.name_last , #7.name_first ] ; #9 = Join [ #4 , #8 ] Predicate [ #4.name_first = #8.name_first ] Distinct [ true ] Output [ #4.name_last , #4.name_first ]"
    },
    {
        "id": "4a37f5cd60a1da87a69bc4520bf308e8e8d0a4b66ed27ff29135bc778a3d94b9",
        "question": "Which players won awards in both 1960 and 1961? Return their first names and last names.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ player_award ] Predicate [ year = 1961 ] Output [ year ] ; #2 = Top [ #1 ] Rows [ 1 ] Output [ year ] ; #3 = Scan Table [ player ] Output [ name_last , name_first ] ; #4 = Join [ #2 , #3 ] Distinct [ true ] Output [ #3.name_first , #3.name_last ] ; #5 = Scan Table [ player_award ] Predicate [ year = 1960 ] Output [ year ] ; #6 = Top [ #5 ] Rows [ 1 ] Output [ year ] ; #7 = Scan Table [ player ] Output [ name_last , name_first ] ; #8 = Join [ #6 , #7 ] Distinct [ true ] Output [ #7.name_last , #7.name_first ] ; #9 = Join [ #4 , #8 ] Predicate [ #4.name_first = #8.name_first ] Distinct [ true ] Output [ #4.name_last , #4.name_first ]"
    },
    {
        "id": "3aa220d5c0e392c5d506fcecaed01032da8a279110909c300414bed4296c791c",
        "question": "List players' first name and last name who have weight greater than 220 or height shorter than 75.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ player ] Predicate [ weight > 220 OR height < 75 ] Output [ name_last , name_first , weight , height ]"
    },
    {
        "id": "56e91a92dd0709dc83d6f80695b1de66926d65ec8ffb887c387d596f39115a03",
        "question": "What are the first name and last name of the players who have weight above 220 or height below 75?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ player ] Predicate [ weight > 220 OR height < 75 ] Output [ name_last , name_first , weight , height ]"
    },
    {
        "id": "434a8c02ea579d78f3a96b8de04fe86911fd669b4144419a503c89f0815eec25",
        "question": "List the maximum scores of the team Boston Red Stockings when the team won in postseason?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ team ] Predicate [ name = 'Boston Red Stockings' ] Output [ team_id_br , name ] ; #2 = Scan Table [ postseason ] Output [ wins , team_id_winner ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.team_id_br = #2.team_id_winner ] Output [ #2.wins ] ; #4 = Aggregate [ #3 ] Output [ MAX(wins) AS Max_wins ]"
    },
    {
        "id": "de47395f3d7017059fd4f50d33ef48e461425eb63445092ee75c4b2494c786ca",
        "question": "What are the maximum scores the team Boston Red Stockings got when the team won in postseason?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ team ] Predicate [ name = 'Boston Red Stockings' ] Output [ team_id_br , name ] ; #2 = Scan Table [ postseason ] Output [ wins , team_id_winner ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.team_id_br = #2.team_id_winner ] Output [ #2.wins ] ; #4 = Aggregate [ #3 ] Output [ MAX(wins) AS Max_wins ]"
    },
    {
        "id": "a44c9c1444ec32273dfeb9ba046c7ca1d69d9e269f77775d0470ef9ef506b86b",
        "question": "How many times did Boston Red Stockings lose in 2009 postseason?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ team ] Predicate [ name = 'Boston Red Stockings' ] Output [ team_id_br , name ] ; #2 = Scan Table [ postseason ] Predicate [ year = 2009 ] Output [ team_id_loser , year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.team_id_br = #2.team_id_loser ] Output [ #1.team_id_br , #1.name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "46db8835274608cf5dea12bbab918f37bbeef0ca48aa4f384bb8c431a0f4d13d",
        "question": "Count the number of times the team \"Boston Red Stockings\" lost in 2009 postseason.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ team ] Predicate [ name = 'Boston Red Stockings' ] Output [ team_id_br , name ] ; #2 = Scan Table [ postseason ] Predicate [ year = 2009 ] Output [ team_id_loser , year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.team_id_br = #2.team_id_loser ] Output [ #1.team_id_br , #1.name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "70b29d2bbb8f4c4eab3ff901612cae4915f4165a8668efcef191c047bc90f483",
        "question": "What are the name and id of the team with the most victories in 2008 postseason?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ postseason ] Predicate [ year = 2008 ] Output [ team_id_winner , year ] ; #2 = Scan Table [ team ] Output [ name , team_id_br ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.team_id_winner = #2.team_id_br ] Output [ #2.name , #1.team_id_winner ] ; #4 = Aggregate [ #3 ] GroupBy [ team_id_winner , name ] Output [ name , countstar AS Count_Star , team_id_winner ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , team_id_winner ]"
    },
    {
        "id": "9f8bbae040ae1d2ad2862edf8bf8557f02bf2118970aa03cc0984da46b600d25",
        "question": "Find the name and id of the team that won the most times in 2008 postseason.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ postseason ] Predicate [ year = 2008 ] Output [ team_id_winner , year ] ; #2 = Scan Table [ team ] Output [ name , team_id_br ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.team_id_winner = #2.team_id_br ] Output [ #2.name , #1.team_id_winner ] ; #4 = Aggregate [ #3 ] GroupBy [ team_id_winner , name ] Output [ name , countstar AS Count_Star , team_id_winner ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , team_id_winner ]"
    },
    {
        "id": "c625ae791d8ce55e40cf06bd8462ba51f884d2cc044c67bd2f99281dc7c01543",
        "question": "What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ team ] Predicate [ name = 'Boston Red Stockings' ] Output [ team_id_br , name ] ; #2 = Scan Table [ postseason ] Output [ team_id_winner , year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.team_id_br = #2.team_id_winner ] Output [ #2.year ] ; #4 = Aggregate [ #3 ] GroupBy [ year ] Output [ countstar AS Count_Star , year ]"
    },
    {
        "id": "f554cef696e8d363d00198787986eb5387cf73b849c63e9ccb4e6ff34f9b1872",
        "question": "For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ team ] Predicate [ name = 'Boston Red Stockings' ] Output [ team_id_br , name ] ; #2 = Scan Table [ postseason ] Output [ team_id_winner , year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.team_id_br = #2.team_id_winner ] Output [ #2.year ] ; #4 = Aggregate [ #3 ] GroupBy [ year ] Output [ countstar AS Count_Star , year ]"
    },
    {
        "id": "d90432f6eedf499f6c67746dc79f9b2997ce2f8acfc09387a14f1a3747eaf865",
        "question": "How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ postseason ] Predicate [ year = 1885 AND ties = 1 ] Output [ ties , year ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f5f47304dc3ad07d3a3ce0ce68f603447c21c7388969d8085685c5aaa5802d75",
        "question": "Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ postseason ] Predicate [ year = 1885 AND ties = 1 ] Output [ ties , year ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9be50d4e1d94d7c53628c4693ed6befd4cd88ba06f8e6c38be26d07163a64afc",
        "question": "List the 3 highest salaries of the players in 2001?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ salary ] Predicate [ year = 2001 ] Output [ salary , year ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ salary DESC ] Output [ salary ]"
    },
    {
        "id": "5a8ca8e2200674f097e0a47ccbc279d80e4706b39ae0076d319ed62d9ca26741",
        "question": "How much salary did the top 3 well-paid players get in 2001?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ salary ] Predicate [ year = 2001 ] Output [ salary , year ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ salary DESC ] Output [ salary ]"
    },
    {
        "id": "fad1a7d6b81c4ec37aaa357d7e269e809055e5ec43840369eb05b18c2a568498",
        "question": "What were all the salary values of players in 2010 and 2001?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ salary ] Predicate [ year = 2010 ] Output [ salary , year ] ; #2 = Scan Table [ salary ] Predicate [ year = 2001 ] Output [ salary , year ] ; #3 = Union [ #1 , #2 ] Output [ #1.salary ]"
    },
    {
        "id": "ecfb198665050f17c283327eee7fa2173882e2a10fabd420acc256f1754716cc",
        "question": "List all the salary values players received in 2010 and 2001.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ salary ] Predicate [ year = 2010 ] Output [ salary , year ] ; #2 = Scan Table [ salary ] Predicate [ year = 2001 ] Output [ salary , year ] ; #3 = Union [ #1 , #2 ] Output [ #1.salary ]"
    },
    {
        "id": "f9a9384580dcac987a75c28de423febbb07bb2e9d59883eb8482b61b9010b931",
        "question": "In which year did the least people enter hall of fame?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ hall_of_fame ] Output [ yearid ] ; #2 = Aggregate [ #1 ] GroupBy [ yearid ] Output [ countstar AS Count_Star , yearid ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , yearid ]"
    },
    {
        "id": "bcc5cd61becc91acde592f55bee5549340a5fdd058a05c5eb66e7d06dc00edf1",
        "question": "Find the year in which the least people enter hall of fame.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ hall_of_fame ] Output [ yearid ] ; #2 = Aggregate [ #1 ] GroupBy [ yearid ] Output [ countstar AS Count_Star , yearid ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , yearid ]"
    },
    {
        "id": "e8d029bff2e4f3efe221b90e7d7d475228ccd2a8fe45b8b4d307f6719eef5542",
        "question": "How many parks are there in Atlanta city?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ park ] Output [ city ] ; #2 = Filter [ #1 ] Predicate [ city = 'Atlanta' ] Output [ 1 AS One ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "81952775157dd9020cd347b0a007da89d9287892965a7ed583ef9cae07132bcd",
        "question": "How many parks does Atlanta city have?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ park ] Output [ city ] ; #2 = Filter [ #1 ] Predicate [ city = 'Atlanta' ] Output [ 1 AS One ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d99ab680c5ff88cbbb212a778d5f24531c98d28cbf5d70b2ecb7269ddcec5a99",
        "question": "How many games were played in park \"Columbia Park\" in 1907?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ home_game ] Predicate [ year = 1907 ] Output [ park_id , year ] ; #2 = Scan Table [ park ] Output [ park_name , park_id ] ; #3 = Filter [ #2 ] Predicate [ park_name = 'Columbia Park' ] Output [ park_id ] ; #4 = Join [ #1 , #3 ] Predicate [ #1.park_id = #3.park_id ] Output [ #1.year , #1.park_id ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "04141de17d6d1b06aefbd4aac1c88c80c3c4a5bddf3f81ea32db5bcd7a718927",
        "question": "Count the number of games taken place in park \"Columbia Park\" in 1907.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ home_game ] Predicate [ year = 1907 ] Output [ park_id , year ] ; #2 = Scan Table [ park ] Output [ park_name , park_id ] ; #3 = Filter [ #2 ] Predicate [ park_name = 'Columbia Park' ] Output [ park_id ] ; #4 = Join [ #1 , #3 ] Predicate [ #1.park_id = #3.park_id ] Output [ #1.year , #1.park_id ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b70a95b2764d6bf8065266b14e94a30f5edcf3d1ee9bd202fcedb77fd0648482",
        "question": "How many games were played in city Atlanta in 2000?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ home_game ] Predicate [ year = 2000 ] Output [ park_id , year ] ; #2 = Scan Table [ park ] Output [ city , park_id ] ; #3 = Filter [ #2 ] Predicate [ city = 'Atlanta' ] Output [ park_id ] ; #4 = Join [ #1 , #3 ] Predicate [ #1.park_id = #3.park_id ] Output [ #1.year , #1.park_id ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "07822c6c03dd91aa40ad7d7eb4d303881565a0bc5ac03d66447d5136a4a9a21d",
        "question": "Find the number of games taken place in city Atlanta in 2000.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ home_game ] Predicate [ year = 2000 ] Output [ park_id , year ] ; #2 = Scan Table [ park ] Output [ city , park_id ] ; #3 = Filter [ #2 ] Predicate [ city = 'Atlanta' ] Output [ park_id ] ; #4 = Join [ #1 , #3 ] Predicate [ #1.park_id = #3.park_id ] Output [ #1.year , #1.park_id ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ac7c38befb04846a9be0d11d40015182093477fc4bc169628d8536e27bf4d97b",
        "question": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ team ] Predicate [ name = 'Boston Red Stockings' ] Output [ team_id_br , name ] ; #2 = Scan Table [ home_game ] Predicate [ year >= 2000 AND year <= 2010 ] Output [ attendance , year , team_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.team_id_br = #2.team_id ] Output [ #2.attendance ] ; #4 = Aggregate [ #3 ] Output [ SUM(attendance) AS Sum_attendance ]"
    },
    {
        "id": "11fb1c93475573f00709fa6b8f5fb704875a46b988f209cf6eecbcd90d6c585d",
        "question": "How many games in total did team Boston Red Stockings attend from 2000 to 2010?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ team ] Predicate [ name = 'Boston Red Stockings' ] Output [ team_id_br , name ] ; #2 = Scan Table [ home_game ] Predicate [ year >= 2000 AND year <= 2010 ] Output [ attendance , year , team_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.team_id_br = #2.team_id ] Output [ #2.attendance ] ; #4 = Aggregate [ #3 ] Output [ SUM(attendance) AS Sum_attendance ]"
    },
    {
        "id": "ddeedac29e2454ed344178bb8387693834aad24542b06dfe0ea9213b41712671",
        "question": "How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ player ] Output [ name_last , player_id , name_first ] ; #2 = Filter [ #1 ] Predicate [ name_first = 'Len' AND name_last = 'Barker' ] Output [ player_id ] ; #3 = Scan Table [ salary ] Predicate [ year >= 1985 AND year <= 1990 ] Output [ salary , player_id , year ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.player_id = #3.player_id ] Output [ #3.salary ] ; #5 = Aggregate [ #4 ] Output [ SUM(salary) AS Sum_salary ]"
    },
    {
        "id": "ce3629ee688041d78c906cf229450fdf11171be8d4d0d2378575205b48fbb906",
        "question": "Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ player ] Output [ name_last , player_id , name_first ] ; #2 = Filter [ #1 ] Predicate [ name_first = 'Len' AND name_last = 'Barker' ] Output [ player_id ] ; #3 = Scan Table [ salary ] Predicate [ year >= 1985 AND year <= 1990 ] Output [ salary , player_id , year ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.player_id = #3.player_id ] Output [ #3.salary ] ; #5 = Aggregate [ #4 ] Output [ SUM(salary) AS Sum_salary ]"
    },
    {
        "id": "dfaa5b3ef992ffeb842c9c16ee42ee4e28dc63b318a8c3bae26bf0069f2c47f5",
        "question": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ team ] Predicate [ name = 'Boston Red Stockings' ] Output [ team_id_br , name ] ; #2 = Scan Table [ home_game ] Predicate [ year >= 1990 AND year <= 2000 ] Output [ games , year , team_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.team_id_br = #2.team_id ] Output [ #2.games ] ; #4 = Aggregate [ #3 ] Output [ SUM(games) AS Sum_games ]"
    },
    {
        "id": "ed5db15b90d2c70d7e3ec4aca2bd8d2e4da906f01e76a796c93bf2358125ecd2",
        "question": "Count the total number of games the team Boston Red Stockings attended from 1990 to 2000.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ team ] Predicate [ name = 'Boston Red Stockings' ] Output [ team_id_br , name ] ; #2 = Scan Table [ home_game ] Predicate [ year >= 1990 AND year <= 2000 ] Output [ games , year , team_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.team_id_br = #2.team_id ] Output [ #2.games ] ; #4 = Aggregate [ #3 ] Output [ SUM(games) AS Sum_games ]"
    },
    {
        "id": "e9f132db5a1da1af4fe6098724ad979b756b3192113dc2e2795affbdc65017ae",
        "question": "List the names of states that have more than 2 parks.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ park ] Output [ state ] ; #2 = Aggregate [ #1 ] GroupBy [ state ] Output [ countstar AS Count_Star , state ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ state ]"
    },
    {
        "id": "452dff0753d9cdd4ea347083e8abd6ffaf7aa7e656c2660f119f6efc448bf057",
        "question": "Which states have more than 2 parks?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ park ] Output [ state ] ; #2 = Aggregate [ #1 ] GroupBy [ state ] Output [ countstar AS Count_Star , state ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ state ]"
    },
    {
        "id": "6c928a9a095e6633f7c84daf0892016d65f94ffc52548a7c44e9574cfe013aa0",
        "question": "How many team franchises are active, with active value 'Y'?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ team_franchise ] Output [ active ] ; #2 = Filter [ #1 ] Predicate [ active = 'Y' ] Output [ 1 AS One ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7c5401317b31f58e2e79dd38c512137cef698d65521efa56a547ce6832e3b6dd",
        "question": "Find the number of team franchises that are active (have 'Y' as \"active\" information).",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ team_franchise ] Output [ active ] ; #2 = Filter [ #1 ] Predicate [ active = 'Y' ] Output [ 1 AS One ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e731824ab73bf6f2d06604cf80470d7748d1aeed435916afb8558884ec5c8663",
        "question": "Which cities have 2 to 4 parks?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ park ] Output [ city ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 AND Count_Star <= 4 ] Output [ city ]"
    },
    {
        "id": "78b2bcc6db7ab7a463c9bb19e4432765634138791e3db17498554139aa9c4c78",
        "question": "Find all the cities that have 2 to 4 parks.",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ park ] Output [ city ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 AND Count_Star <= 4 ] Output [ city ]"
    },
    {
        "id": "08b9d658b089c9d23eca83ed661a8acc7f736eb70625473ce232bcc8e4f1e5b4",
        "question": "Which park had most attendances in 2008?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ home_game ] Predicate [ year = 2008 ] Output [ attendance , park_id , year ] ; #2 = Scan Table [ park ] Output [ park_name , park_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.park_id = #2.park_id ] Output [ #1.attendance , #2.park_name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ attendance DESC ] Output [ attendance , park_name ]"
    },
    {
        "id": "dbc35154c4c24cf38312866612e14b4e733479ec317cef3db5b5f572301736de",
        "question": "Which park did the most people attend in 2008?",
        "parsing_tree": "baseball_1 | #1 = Scan Table [ home_game ] Predicate [ year = 2008 ] Output [ attendance , park_id , year ] ; #2 = Scan Table [ park ] Output [ park_name , park_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.park_id = #2.park_id ] Output [ #1.attendance , #2.park_name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ attendance DESC ] Output [ attendance , park_name ]"
    },
    {
        "id": "b6c66ec73f1a4a3eb6ead0c0392ac0d51aab4202e9c5472bfd0b97b289a73769",
        "question": "How many camera lenses have a focal length longer than 15 mm?",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ camera_lens ] Predicate [ focal_length_mm > 15.0 ] Output [ focal_length_mm ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "09a333ae3a2d0f8a9b0e3a712dcafd0233c0f9ee8cbebbf0556e47f02220334e",
        "question": "Find the brand and name for each camera lens, and sort in descending order of maximum aperture.",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ camera_lens ] Output [ name , brand , max_aperture ] ; #2 = Sort [ #1 ] OrderBy [ max_aperture DESC ] Output [ name , brand , max_aperture ]"
    },
    {
        "id": "508624c6ebd7b02dc82d16a030b5affd295772354df99e756afe8f7fa1c382f4",
        "question": "List the id, color scheme, and name for all the photos.",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ photos ] Output [ name , color , id ]"
    },
    {
        "id": "2453ba1c085af820bb41134720f5c3d00238d9f48c1a1a4071c0a2a95dd92a51",
        "question": "What are the maximum and average height of the mountains?",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ mountain ] Output [ Height ] ; #2 = Aggregate [ #1 ] Output [ AVG(Height) AS Avg_Height , MAX(Height) AS Max_Height ]"
    },
    {
        "id": "bf5e89e0c21e90d68111d6e0174603a6b0150354f5ef5d2ff488b238299e5b04",
        "question": "What are the average prominence of the mountains in country 'Morocco'?",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ mountain ] Predicate [ Country = 'Morocco' ] Output [ Country , Prominence ] ; #2 = Aggregate [ #1 ] Output [ AVG(Prominence) AS Avg_Prominence ]"
    },
    {
        "id": "e53f528366cd7412527f582ff722ea8567d591f6c258417d4b5e196701c84576",
        "question": "What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ mountain ] Predicate [ Range <> 'Aberdare Range' ] Output [ name , Prominence , Range , Height ]"
    },
    {
        "id": "4a96471e3bedfbd9cc18e4eb7330fbacf7f3c3aaf97b63e9f61a39f930996a82",
        "question": "What are the id and name of the photos for mountains?",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ photos ] Output [ mountain_id ] ; #2 = Scan Table [ mountain ] Predicate [ Height > 4000.0 ] Output [ name , id , Height ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mountain_id = #2.id ] Output [ #2.id , #2.name ]"
    },
    {
        "id": "4c1df4e5e451fabe2ea6e4210bcf78be62a544ac2ec1e8e16d9a0d0588e5542e",
        "question": "What are the id and name of the mountains that have at least 2 photos?",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ photos ] Output [ mountain_id ] ; #2 = Aggregate [ #1 ] GroupBy [ mountain_id ] Output [ countstar AS Count_Star , mountain_id ] ; #3 = Scan Table [ mountain ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.mountain_id = #3.id ] Output [ #3.name , #3.id , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name , id ]"
    },
    {
        "id": "51c978319f49fc687923414f4c9e4753df8361076ef0dfdf02f799321c57f489",
        "question": "What are the names of the cameras that have taken picture of the most mountains?",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ photos ] Output [ camera_lens_id ] ; #2 = Aggregate [ #1 ] GroupBy [ camera_lens_id ] Output [ countstar AS Count_Star , camera_lens_id ] ; #3 = Scan Table [ camera_lens ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.camera_lens_id = #3.id ] Output [ #3.name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "d26c3463c3f7ff5f12e48d892b0ba38f8f317f533efbc5bda3570a4a4f2447fc",
        "question": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ camera_lens ] Predicate [ brand = 'Olympus' OR brand = 'Sigma' ] Output [ name , brand , id ] ; #2 = Scan Table [ photos ] Output [ camera_lens_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.camera_lens_id ] Output [ #1.name ]"
    },
    {
        "id": "708271e617ff09c563fb4ee138f60a1a3efd90539a945f737d7aef445e193c13",
        "question": "How many different kinds of lens brands are there?",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ camera_lens ] Distinct [ true ] Output [ brand ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT brand) AS Count_Dist_brand ]"
    },
    {
        "id": "de52893e71dd7fe729deef392c37cb3942b7fd9b3036f37468e631461fbbe255",
        "question": "How many camera lenses are not used in taking any photos?",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ camera_lens ] Output [ id ] ; #2 = Scan Table [ photos ] Output [ camera_lens_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.camera_lens_id IS NULL OR #1.id = #2.camera_lens_id ] Output [ #1.id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "af3ab2d50efc554953d146bf65bdc5ab7351f97fca1fd499ad2d7ab43e97cbf0",
        "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ photos ] Output [ camera_lens_id , mountain_id ] ; #2 = Scan Table [ mountain ] Predicate [ Country = 'Ethiopia' ] Output [ Country , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.mountain_id = #2.id ] Distinct [ true ] Output [ #1.camera_lens_id ] ; #4 = Aggregate [ #3 ] Output [ COUNT(camera_lens_id) AS Count_camera_lens_id ]"
    },
    {
        "id": "509ad717a5b7cc1cf3cdf48d58af265968c3dc235028b3b9bfabb7cecc70f3b2",
        "question": "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ mountain ] Predicate [ Range = 'Toubkal Atlas' ] Output [ Range , id ] ; #2 = Scan Table [ photos ] Output [ camera_lens_id , mountain_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.mountain_id ] Output [ #2.camera_lens_id ] ; #4 = Scan Table [ camera_lens ] Output [ brand , id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.camera_lens_id = #4.id ] Distinct [ true ] Output [ #4.brand ] ; #6 = Scan Table [ mountain ] Predicate [ Range = 'Lasta Massif' ] Output [ Range , id ] ; #7 = Scan Table [ photos ] Output [ camera_lens_id , mountain_id ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.id = #7.mountain_id ] Output [ #7.camera_lens_id ] ; #9 = Scan Table [ camera_lens ] Output [ brand , id ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.camera_lens_id = #9.id ] Output [ #9.brand ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.brand = #10.brand ] Output [ #5.brand ]"
    },
    {
        "id": "919e01924975523761fe5eb3aa62d1b7dabd62dbc761dd85179eedb367684c82",
        "question": "Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ mountain ] Distinct [ true ] Output [ name , Prominence ] ; #2 = Scan Table [ camera_lens ] Predicate [ brand = 'Sigma' ] Output [ brand , id ] ; #3 = Scan Table [ photos ] Output [ camera_lens_id , mountain_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.id = #3.camera_lens_id ] Output [ #3.mountain_id ] ; #5 = Scan Table [ mountain ] Output [ name , id , Prominence ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.mountain_id = #5.id ] Output [ #5.name , #5.Prominence ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.name = #6.name ] Output [ #1.Prominence , #1.name ]"
    },
    {
        "id": "605b36824987a76d370b33f82a385b4b30ce6af23c2d2fe21fece930e532a226",
        "question": "List the camera lens names containing substring \"Digital\".",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ camera_lens ] Predicate [ name like '%Digital%' ] Output [ name ]"
    },
    {
        "id": "14495c1f7cef1bc0fdbbed60fbb1fa44be07e86aa7da9e872332a7938eb2f832",
        "question": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.",
        "parsing_tree": "mountain_photos | #1 = Scan Table [ photos ] Output [ camera_lens_id ] ; #2 = Aggregate [ #1 ] GroupBy [ camera_lens_id ] Output [ countstar AS Count_Star , camera_lens_id ] ; #3 = Scan Table [ camera_lens ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.camera_lens_id = #3.id ] Output [ #3.name , #2.Count_Star ] ; #5 = Sort [ #4 ] OrderBy [ Count_Star ASC ] Output [ name , Count_Star ]"
    },
    {
        "id": "13cebd54c3338bec01edb28387212baf4414b469374b29c66e76bb0a375ebfdc",
        "question": "Find the names of channels that are not owned by CCTV.",
        "parsing_tree": "program_share | #1 = Scan Table [ channel ] Predicate [ Owner <> 'CCTV' ] Output [ Name , Owner ]"
    },
    {
        "id": "ca61f42b5d33dec471bf7ee31a8817f30db8360dc482ffcf063730a8db681455",
        "question": "Which channels are not owned by CCTV? Give me the channel names.",
        "parsing_tree": "program_share | #1 = Scan Table [ channel ] Predicate [ Owner <> 'CCTV' ] Output [ Name , Owner ]"
    },
    {
        "id": "18e68efb47c2826e70d0dfae9ed8f82bf6edf147a5e574910930a4bd36277aa3",
        "question": "List all channel names ordered by their rating in percent from big to small.",
        "parsing_tree": "program_share | #1 = Scan Table [ channel ] Output [ Rating_in_percent , Name ] ; #2 = Sort [ #1 ] OrderBy [ Rating_in_percent DESC ] Output [ Rating_in_percent , Name ]"
    },
    {
        "id": "75b33a89284d8ca1904db0ee0c234578512ad7ab8dcc28d666d446fafc394bc9",
        "question": "Give me a list of all the channel names sorted by the channel rating in descending order.",
        "parsing_tree": "program_share | #1 = Scan Table [ channel ] Output [ Rating_in_percent , Name ] ; #2 = Sort [ #1 ] OrderBy [ Rating_in_percent DESC ] Output [ Rating_in_percent , Name ]"
    },
    {
        "id": "1ecfb5caaf79e88958afda8b31435caa1688756195acb30affacc5f421537c92",
        "question": "What is the owner of the channel that has the highest rating ratio?",
        "parsing_tree": "program_share | #1 = Scan Table [ channel ] Output [ Rating_in_percent , Owner ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Rating_in_percent DESC ] Output [ Rating_in_percent , Owner ]"
    },
    {
        "id": "4c2b5cc3d2356e3e97514cbe6b3f62d3e30ab34e571526e030f057ef41f5ca6b",
        "question": "Show me the owner of the channel with the highest rating.",
        "parsing_tree": "program_share | #1 = Scan Table [ channel ] Output [ Rating_in_percent , Owner ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Rating_in_percent DESC ] Output [ Rating_in_percent , Owner ]"
    },
    {
        "id": "dc0d9dd77e7ba8a155392cdb9e5ec4de6a91f43f8030c485da5e06a63d3ed072",
        "question": "how many programs are there?",
        "parsing_tree": "program_share | #1 = Scan Table [ program ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "894ddeb2e0bfb8751be722afcd1c624e22fc69893ebda785140992293b9504fd",
        "question": "Count the number of programs.",
        "parsing_tree": "program_share | #1 = Scan Table [ program ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0f9167d674771840fc33bb8bb25e5f21629a72acc480bdc31d51d7acea1e9249",
        "question": "list all the names of programs, ordering by launch time.",
        "parsing_tree": "program_share | #1 = Scan Table [ program ] Output [ Launch , Name ] ; #2 = Sort [ #1 ] OrderBy [ Launch ASC ] Output [ Launch , Name ]"
    },
    {
        "id": "dffcd2cf6f81e5d175074258dc7fd128e5ba099cbec4e762bdd0284c6035f073",
        "question": "What is the list of program names, sorted by the order of launch date?",
        "parsing_tree": "program_share | #1 = Scan Table [ program ] Output [ Launch , Name ] ; #2 = Sort [ #1 ] OrderBy [ Launch ASC ] Output [ Launch , Name ]"
    },
    {
        "id": "70789b7e39768daecd4358c412c420d891370a17daeecd4ecc82d314e7eed2b5",
        "question": "List the name, origin and owner of each program.",
        "parsing_tree": "program_share | #1 = Scan Table [ program ] Output [ Name , Owner , Origin ]"
    },
    {
        "id": "9a3610aaddd2b9b319b776d5572e1735905322cb2a0d118483810619070c6e5b",
        "question": "What are the name, origin and owner of each program?",
        "parsing_tree": "program_share | #1 = Scan Table [ program ] Output [ Name , Owner , Origin ]"
    },
    {
        "id": "ecb37dff6bd07a7b1266cd30a1e0b279f05c4cd5472c82a71c8609e9c1d82f9b",
        "question": "find the name of the program that was launched most recently.",
        "parsing_tree": "program_share | #1 = Scan Table [ program ] Output [ Launch , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Launch DESC ] Output [ Launch , Name ]"
    },
    {
        "id": "1561ab367362f4512d59679ce9bec5db3e7a8a4ac4852c6b0c9802ad029a7db2",
        "question": "Which program was launched most recently? Return the program name.",
        "parsing_tree": "program_share | #1 = Scan Table [ program ] Output [ Launch , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Launch DESC ] Output [ Launch , Name ]"
    },
    {
        "id": "78f87cfa977c9d105e8e1fbe44c5f05666805691d657be95234505d0d1117cf0",
        "question": "find the total percentage share of all channels owned by CCTV.",
        "parsing_tree": "program_share | #1 = Scan Table [ channel ] Predicate [ Owner = 'CCTV' ] Output [ Share_in_percent , Owner ] ; #2 = Aggregate [ #1 ] Output [ SUM(Share_in_percent) AS Sum_Share_in_percent ]"
    },
    {
        "id": "85395211870764adff7bdb79dd83174634d06c20218fc6bc3912c978fef25406",
        "question": "What is the total share (in percent) of all the channels owned by CCTV?",
        "parsing_tree": "program_share | #1 = Scan Table [ channel ] Predicate [ Owner = 'CCTV' ] Output [ Share_in_percent , Owner ] ; #2 = Aggregate [ #1 ] Output [ SUM(Share_in_percent) AS Sum_Share_in_percent ]"
    },
    {
        "id": "75132e2b560a2d84aa382e425d30004d857ec91805abf4bddee581005a1b00de",
        "question": "Find the names of the channels that are broadcast in the morning.",
        "parsing_tree": "program_share | #1 = Scan Table [ broadcast ] Predicate [ Time_of_day = 'Morning' ] Output [ Time_of_day , Channel_ID ] ; #2 = Scan Table [ channel ] Output [ Name , Channel_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Channel_ID = #2.Channel_ID ] Output [ #2.Name ]"
    },
    {
        "id": "5c943ca918bf20888603b1d82e472236d5bb3806447e9c350c400d9cd505dfde",
        "question": "Which channels are broadcast in the morning? Give me the channel names.",
        "parsing_tree": "program_share | #1 = Scan Table [ broadcast ] Predicate [ Time_of_day = 'Morning' ] Output [ Time_of_day , Channel_ID ] ; #2 = Scan Table [ channel ] Output [ Name , Channel_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Channel_ID = #2.Channel_ID ] Output [ #2.Name ]"
    },
    {
        "id": "357fc22d0c616f799794cd8e9edb6866f245ab783530519e3751570383cb0410",
        "question": "what are the names of the channels that broadcast in both morning and night?",
        "parsing_tree": "program_share | #1 = Scan Table [ broadcast ] Predicate [ Time_of_day = 'Morning' ] Output [ Time_of_day , Channel_ID ] ; #2 = Scan Table [ channel ] Output [ Name , Channel_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Channel_ID = #2.Channel_ID ] Distinct [ true ] Output [ #2.Name ] ; #4 = Scan Table [ broadcast ] Predicate [ Time_of_day = 'Night' ] Output [ Time_of_day , Channel_ID ] ; #5 = Scan Table [ channel ] Output [ Name , Channel_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Channel_ID = #5.Channel_ID ] Output [ #5.Name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Name = #6.Name ] Output [ #3.Name ]"
    },
    {
        "id": "e6d60d7c2c09003c9ef485d37378cc2b73caa3847b2fc2bfd08b230b5bec0ec5",
        "question": "Which channels broadcast both in the morning and at night? Give me the channel names.",
        "parsing_tree": "program_share | #1 = Scan Table [ broadcast ] Predicate [ Time_of_day = 'Morning' ] Output [ Time_of_day , Channel_ID ] ; #2 = Scan Table [ channel ] Output [ Name , Channel_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Channel_ID = #2.Channel_ID ] Distinct [ true ] Output [ #2.Name ] ; #4 = Scan Table [ broadcast ] Predicate [ Time_of_day = 'Night' ] Output [ Time_of_day , Channel_ID ] ; #5 = Scan Table [ channel ] Output [ Name , Channel_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Channel_ID = #5.Channel_ID ] Output [ #5.Name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Name = #6.Name ] Output [ #3.Name ]"
    },
    {
        "id": "40b0b91558c7f965f1a6439367c9be0d6bab072724ee6d33b6f85e2999a727cc",
        "question": "how many programs are broadcast in each time section of the day?",
        "parsing_tree": "program_share | #1 = Scan Table [ broadcast ] Output [ Time_of_day ] ; #2 = Aggregate [ #1 ] GroupBy [ Time_of_day ] Output [ countstar AS Count_Star , Time_of_day ]"
    },
    {
        "id": "227a7102527dc2a8f7c00d92e88fc2b84426ad41b68c16a02958a224f01c22a1",
        "question": "Count the number of programs broadcast for each time section of a day.",
        "parsing_tree": "program_share | #1 = Scan Table [ broadcast ] Output [ Time_of_day ] ; #2 = Aggregate [ #1 ] GroupBy [ Time_of_day ] Output [ countstar AS Count_Star , Time_of_day ]"
    },
    {
        "id": "467db19140bfb13dcd41844f0c8f42d1a2933bb3b5191545498caeba4b3417cc",
        "question": "find the number of different programs that are broadcast during night time.",
        "parsing_tree": "program_share | #1 = Scan Table [ broadcast ] Predicate [ Time_of_day = 'Night' ] Distinct [ true ] Output [ Program_ID , Time_of_day ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f391940debe3d7dab1799a37a5358e8c2d2eb4aebdde2c0fd4b88b330a13f545",
        "question": "How many distinct programs are broadcast at \"Night\" time?",
        "parsing_tree": "program_share | #1 = Scan Table [ broadcast ] Predicate [ Time_of_day = 'Night' ] Distinct [ true ] Output [ Program_ID , Time_of_day ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7fc9ff6636c129904f33abcab1dfd129681639b7ce2ff25479d99dce2c600ebf",
        "question": "Find the names of programs that are never broadcasted in the morning.",
        "parsing_tree": "program_share | #1 = Scan Table [ program ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ broadcast ] Predicate [ Time_of_day = 'Morning' ] Output [ Program_ID , Time_of_day ] ; #3 = Scan Table [ program ] Output [ Program_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Program_ID = #3.Program_ID ] Output [ #3.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Name ]"
    },
    {
        "id": "322b00e70830ae023a32f77ba5760cb917bed6260d4965e9847ead3662c6f446",
        "question": "Which programs are never broadcasted in the morning? Give me the names of the programs.",
        "parsing_tree": "program_share | #1 = Scan Table [ program ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ broadcast ] Predicate [ Time_of_day = 'Morning' ] Output [ Program_ID , Time_of_day ] ; #3 = Scan Table [ program ] Output [ Program_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Program_ID = #3.Program_ID ] Output [ #3.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Name ]"
    },
    {
        "id": "3e7b90366bdcb64d12ba78be7201b22e5624d6d279505779a578986de65a44a1",
        "question": "find the program owners that have some programs in both morning and night time.",
        "parsing_tree": "program_share | #1 = Scan Table [ broadcast ] Predicate [ Time_of_day = 'Morning' ] Output [ Program_ID , Time_of_day ] ; #2 = Scan Table [ program ] Output [ Program_ID , Owner ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Program_ID = #2.Program_ID ] Distinct [ true ] Output [ #2.Owner ] ; #4 = Scan Table [ broadcast ] Predicate [ Time_of_day = 'Night' ] Output [ Program_ID , Time_of_day ] ; #5 = Scan Table [ program ] Output [ Program_ID , Owner ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Program_ID = #5.Program_ID ] Output [ #5.Owner ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Owner = #6.Owner ] Output [ #3.Owner ]"
    },
    {
        "id": "6b65e6978dfc5f149c60681c315772b782448c719aa332600c7fba3e659effe9",
        "question": "Who are the owners of the programs that broadcast both in the morning and at night?",
        "parsing_tree": "program_share | #1 = Scan Table [ broadcast ] Predicate [ Time_of_day = 'Morning' ] Output [ Program_ID , Time_of_day ] ; #2 = Scan Table [ program ] Output [ Program_ID , Owner ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Program_ID = #2.Program_ID ] Distinct [ true ] Output [ #2.Owner ] ; #4 = Scan Table [ broadcast ] Predicate [ Time_of_day = 'Night' ] Output [ Program_ID , Time_of_day ] ; #5 = Scan Table [ program ] Output [ Program_ID , Owner ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Program_ID = #5.Program_ID ] Output [ #5.Owner ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Owner = #6.Owner ] Output [ #3.Owner ]"
    },
    {
        "id": "a1857642fa93b1ad75677a8a1b62303299465530c57032d2254bf3a53507d083",
        "question": "List all program origins in the alphabetical order.",
        "parsing_tree": "program_share | #1 = Scan Table [ program ] Output [ Origin ] ; #2 = Sort [ #1 ] OrderBy [ Origin ASC ] Output [ Origin ]"
    },
    {
        "id": "6ae31d43c54d75f6866c1f62e017cd0b4ed968532ec704b5ef499f348d839a35",
        "question": "What is the list of program origins ordered alphabetically?",
        "parsing_tree": "program_share | #1 = Scan Table [ program ] Output [ Origin ] ; #2 = Sort [ #1 ] OrderBy [ Origin ASC ] Output [ Origin ]"
    },
    {
        "id": "26071a2748fe65ceca38dd7bc7baf8cd5a056488f267ae51c5daf97c42ad74da",
        "question": "what is the number of different channel owners?",
        "parsing_tree": "program_share | #1 = Scan Table [ channel ] Distinct [ true ] Output [ Owner ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Owner) AS Count_Dist_Owner ]"
    },
    {
        "id": "4abc4e55ad569db26427d4070d2a7fd47aa2b0e85ac886fda1efabc26351f286",
        "question": "Count the number of distinct channel owners.",
        "parsing_tree": "program_share | #1 = Scan Table [ channel ] Distinct [ true ] Output [ Owner ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Owner) AS Count_Dist_Owner ]"
    },
    {
        "id": "c54839064a11e3a2f815fc40b181db33b8fcbb408da262084191ef1c8195640b",
        "question": "find the names of programs whose origin is not in Beijing.",
        "parsing_tree": "program_share | #1 = Scan Table [ program ] Predicate [ Origin <> 'Beijing' ] Output [ Name , Origin ]"
    },
    {
        "id": "cda0cb1627f71d9d1b5a68941e6c2617c39ce78b722e50fe60582a952ff16f30",
        "question": "Which programs' origins are not \"Beijing\"? Give me the program names.",
        "parsing_tree": "program_share | #1 = Scan Table [ program ] Predicate [ Origin <> 'Beijing' ] Output [ Name , Origin ]"
    },
    {
        "id": "c247c27edfbe27e8c69a9ae25782617b73a4abb42ec49f639325e39b4871362e",
        "question": "What are the names of the channels owned by CCTV or HBS?",
        "parsing_tree": "program_share | #1 = Scan Table [ channel ] Predicate [ Owner = 'CCTV' OR Owner = 'HBS' ] Output [ Name , Owner ]"
    },
    {
        "id": "6b87f64bf9a9dcecf06d70bcbf98558339afc5a5f7727463494d22baa813c404",
        "question": "List the names of all the channels owned by either CCTV or HBS",
        "parsing_tree": "program_share | #1 = Scan Table [ channel ] Predicate [ Owner = 'CCTV' OR Owner = 'HBS' ] Output [ Name , Owner ]"
    },
    {
        "id": "fa2648b7605e418dfd82cc8db11f2401c92a756005b319b1aa1780d28d1de799",
        "question": "Find the total rating ratio for each channel owner.",
        "parsing_tree": "program_share | #1 = Scan Table [ channel ] Output [ Rating_in_percent , Owner ] ; #2 = Aggregate [ #1 ] GroupBy [ Owner ] Output [ SUM(Rating_in_percent) AS Sum_Rating_in_percent , Owner ]"
    },
    {
        "id": "0f4e95d5dcdad3dac4499bdbe66c3409af08a560d7011969b3348634d4308403",
        "question": "What is the total rating of channel for each channel owner?",
        "parsing_tree": "program_share | #1 = Scan Table [ channel ] Output [ Rating_in_percent , Owner ] ; #2 = Aggregate [ #1 ] GroupBy [ Owner ] Output [ SUM(Rating_in_percent) AS Sum_Rating_in_percent , Owner ]"
    },
    {
        "id": "a4ba479f4552dd343c59753ada7c605e859171918c1c48cd0162c570345e809f",
        "question": "How many courses are there in total?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "07648adcbfeb3a08b1da010a091230faf3a5f4999c7935b00659b57f863edd6e",
        "question": "Find the total number of courses offered.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6cc3e8d08a2028aa48f397320b3a91b260dfbccd7e6eaef9240b7b4b68ecd0ec",
        "question": "What are the descriptions of the courses with name \"database\"?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Predicate [ course_name = 'database' ] Output [ course_description , course_name ]"
    },
    {
        "id": "c6707a101ccb60a0bd5dde5d01e2e482bae49b8d0a33d203dac765adfb24d5d6",
        "question": "Return the description for the courses named \"database\".",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Predicate [ course_name = 'database' ] Output [ course_description , course_name ]"
    },
    {
        "id": "983151263f7b64a247b3f6413e570fb9f1e3a8afdc00c085f77b27dc2c8f99fe",
        "question": "What are the addresses of the course authors or tutors with personal name \"Cathrine\"",
        "parsing_tree": "e_learning | #1 = Scan Table [ Course_Authors_and_Tutors ] Predicate [ personal_name = 'Cathrine' ] Output [ address_line_1 , personal_name ]"
    },
    {
        "id": "487565537bc5f93dcc12a4a4f8b3b586e5606f263419cd49bb5b4dd1ea0bee77",
        "question": "Return the addresses of the course authors or tutors whose personal name is \"Cathrine\".",
        "parsing_tree": "e_learning | #1 = Scan Table [ Course_Authors_and_Tutors ] Predicate [ personal_name = 'Cathrine' ] Output [ address_line_1 , personal_name ]"
    },
    {
        "id": "277780ed7e2a59476e443d029187e7bcdab478308e9f364f26ed92d1ed45ee22",
        "question": "List the addresses of all the course authors or tutors.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Course_Authors_and_Tutors ] Output [ address_line_1 ]"
    },
    {
        "id": "4949d7a03f671c1d8a3c3a47a4fd84b2ffc169144754b5542ef7df0d27c1dfe2",
        "question": "What is the address of each course author or tutor?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Course_Authors_and_Tutors ] Output [ address_line_1 ]"
    },
    {
        "id": "666c4495b02364c11f534214459c3e746f9602fce702e11c22062028d3f04a9e",
        "question": "List all the login names and family names of course author and tutors.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Course_Authors_and_Tutors ] Output [ login_name , family_name ]"
    },
    {
        "id": "79f11b4b1d117ba230c08d7411e910b9337c1e81b98c7e7535320f31bf439c5c",
        "question": "What are the login names and family names of course author and tutors?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Course_Authors_and_Tutors ] Output [ login_name , family_name ]"
    },
    {
        "id": "7f5b19e440dd384538ad39e979f5635b503c9a104a9440e31993a4429b75eebc",
        "question": "List all the dates of enrollment and completion of students.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Course_Enrolment ] Output [ date_of_enrolment , date_of_completion ]"
    },
    {
        "id": "99a2155efb01003bb1d6e2867edb12b7ffc7228d95ea19f6f23becf9ca3f4594",
        "question": "What are all the dates of enrollment and completion in record?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Course_Enrolment ] Output [ date_of_enrolment , date_of_completion ]"
    },
    {
        "id": "79706ae3f718775dfdeba5758d63789823122c3477f3850bc26f1afb2ddcca4d",
        "question": "How many distinct students are enrolled in courses?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Course_Enrolment ] Distinct [ true ] Output [ student_id ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "026e44a6b3a0abb08f42172d7697ec1e327492a277cfe46dc9c301aef00560cc",
        "question": "Find the number of distinct students enrolled in courses.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Course_Enrolment ] Distinct [ true ] Output [ student_id ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f34f5cbe9e92aebdc102d66d419a3cb29915b08af8a33ecad5c636b2c10109ac",
        "question": "How many distinct courses are enrolled in by students?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Course_Enrolment ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "62713d60e8c022d795a7b7dd394024e5c3f36bc17d38358dbad7e488b241f8df",
        "question": "Find the number of distinct courses that have enrolled students.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Course_Enrolment ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ed6dd09a97c7b661489556e0f0eb602b4be6c16f7e4797bb04de3cd476585898",
        "question": "Find the dates of the tests taken with result \"Pass\".",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Tests_Taken ] Predicate [ test_result = 'Pass' ] Output [ date_test_taken , test_result ]"
    },
    {
        "id": "1b7ad906358f09c6f3d6b6f35c462db645127384ae816bd8beac32d4c1ce4f51",
        "question": "Which tests have \"Pass\" results? Return the dates when the tests were taken.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Tests_Taken ] Predicate [ test_result = 'Pass' ] Output [ date_test_taken , test_result ]"
    },
    {
        "id": "4d62446b2088ea2bbfb12f0993c2b82c663f13daa2ef5d99459ff5e2b7e79f8f",
        "question": "How many tests have result \"Fail\"?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Tests_Taken ] Predicate [ test_result = 'Fail' ] Output [ test_result ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "969c1f494e26942c382e0eb54589ea8d5e3ab2b1af035e4f8cf084ea066c9a0a",
        "question": "Count the number of tests with \"Fail\" result.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Tests_Taken ] Predicate [ test_result = 'Fail' ] Output [ test_result ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b97279ccb9519c65bd4878f077eb148afca702d913168fdff65a6ad64e9d0981",
        "question": "What are the login names of the students with family name \"Ward\"?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Predicate [ family_name = 'Ward' ] Output [ login_name , family_name ]"
    },
    {
        "id": "31a447af90ac819b22b20cf8035a06232cc072552cdfc661be054010ac087eb7",
        "question": "Return the login names of the students whose family name is \"Ward\".",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Predicate [ family_name = 'Ward' ] Output [ login_name , family_name ]"
    },
    {
        "id": "5f80d658c7b828983022f594bd11e61a960ca473fb4c0e9ea9ff3da1adab85a3",
        "question": "What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Predicate [ family_name = 'Jaskolski' OR family_name = 'Langosh' ] Output [ family_name , date_of_latest_logon ]"
    },
    {
        "id": "163f752b4cdfdaeaaa1ee6cb08419a2f49da3d4e03b53dde47e95ab757f59b0d",
        "question": "Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\".",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Predicate [ family_name = 'Jaskolski' OR family_name = 'Langosh' ] Output [ family_name , date_of_latest_logon ]"
    },
    {
        "id": "9d84245999c11416f279138ac683c1aa1199d6bace40b64b4b5b5177ad54c395",
        "question": "How many students have personal names that contain the word \"son\"?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Predicate [ personal_name like '%son%' ] Output [ personal_name ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5cb2cb615d038dc0e6a638bd3a1c06a2eb3cc9e6926875db11a255c45227376f",
        "question": "Find the number of students who have the word \"son\" in their personal names.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Predicate [ personal_name like '%son%' ] Output [ personal_name ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "01e709e488355836456c5d6ae2cfac988fee9c3e68ec30ff3047102c3e174f92",
        "question": "List all the subject names.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Subjects ] Output [ subject_name ]"
    },
    {
        "id": "72116d43615283b7f410830444f1ccb0ca8d8be6c622ccb20f6657d4a8ca5b5d",
        "question": "What are the names of all the subjects.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Subjects ] Output [ subject_name ]"
    },
    {
        "id": "5fc35bb8a51ed585699d6ef2b9b8d986e1559369ea4530f79cd82fad559caab7",
        "question": "List all the information about course authors and tutors in alphabetical order of the personal name.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Course_Authors_and_Tutors ] Output [ address_line_1 , author_id , login_name , password , family_name , personal_name , middle_name , author_tutor_ATB , gender_mf ] ; #2 = Sort [ #1 ] OrderBy [ personal_name ASC ] Output [ address_line_1 , author_id , login_name , password , family_name , personal_name , middle_name , author_tutor_ATB , gender_mf ]"
    },
    {
        "id": "6550e0ec359aef1e25488c1d1b1b5d0cf21d6f530cc523b3ba1c0203733245f6",
        "question": "Sort the information about course authors and tutors in alphabetical order of the personal name.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Course_Authors_and_Tutors ] Output [ address_line_1 , author_id , login_name , password , family_name , personal_name , middle_name , author_tutor_ATB , gender_mf ] ; #2 = Sort [ #1 ] OrderBy [ personal_name ASC ] Output [ address_line_1 , author_id , login_name , password , family_name , personal_name , middle_name , author_tutor_ATB , gender_mf ]"
    },
    {
        "id": "1d54bd56c59cc52b33ced33188eddee40bd01e67ea602df2390e52fe7a005567",
        "question": "List the personal names and family names of all the students in alphabetical order of family name.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Output [ family_name , personal_name ] ; #2 = Sort [ #1 ] OrderBy [ family_name ASC ] Output [ family_name , personal_name ]"
    },
    {
        "id": "7c84d078f3483ebc1e055aeaf513bdcd6c65dfef3a27fbc47df5076b7fcfb6c7",
        "question": "What are the personal names and family names of the students? Sort the result in alphabetical order of the family name.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Output [ family_name , personal_name ] ; #2 = Sort [ #1 ] OrderBy [ family_name ASC ] Output [ family_name , personal_name ]"
    },
    {
        "id": "855e16f08c63ef0d587b648e28eb66b4cfec1ef75fc64a3293147b703e2c311a",
        "question": "List each test result and its count in descending order of count.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Tests_Taken ] Output [ test_result ] ; #2 = Aggregate [ #1 ] GroupBy [ test_result ] Output [ countstar AS Count_Star , test_result ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , test_result ]"
    },
    {
        "id": "377ff6e3fbe9f65ce24ca114beb07b70da2e258585082b4237349ac3fdf32fae",
        "question": "For each distinct test result, find the number of students who got the result.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Tests_Taken ] Output [ test_result ] ; #2 = Aggregate [ #1 ] GroupBy [ test_result ] Output [ countstar AS Count_Star , test_result ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , test_result ]"
    },
    {
        "id": "89679469be0c92ffa0fa66f6b8f870c2f31dd16ed6c54a1f847f9b84e8685b9c",
        "question": "Find the login name of the course author that teaches the course with name \"advanced database\".",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Predicate [ course_name = 'advanced database' ] Output [ course_name , author_id ] ; #2 = Scan Table [ Course_Authors_and_Tutors ] Output [ login_name , author_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.author_id = #2.author_id ] Output [ #2.login_name ]"
    },
    {
        "id": "8ab64733861398372c2f1352a2d8d61a53db868c3880f3e31e02baed82a1fa86",
        "question": "Which course author teaches the \"advanced database\" course? Give me his or her login name.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Predicate [ course_name = 'advanced database' ] Output [ course_name , author_id ] ; #2 = Scan Table [ Course_Authors_and_Tutors ] Output [ login_name , author_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.author_id = #2.author_id ] Output [ #2.login_name ]"
    },
    {
        "id": "e9b259b075ca1a6a1104bc000691622e03d682cc9642a048c12ef61caf1b4a4c",
        "question": "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\".",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Predicate [ course_name = 'data structure' OR course_name = 'operating system' ] Output [ course_name , author_id ] ; #2 = Scan Table [ Course_Authors_and_Tutors ] Output [ address_line_1 , author_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.author_id = #2.author_id ] Output [ #2.address_line_1 ]"
    },
    {
        "id": "8c50177d85e42cfd3b62e9e5f22110c8abc341af7b44ae2e464649f4339cb6e3",
        "question": "What are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Predicate [ course_name = 'data structure' OR course_name = 'operating system' ] Output [ course_name , author_id ] ; #2 = Scan Table [ Course_Authors_and_Tutors ] Output [ address_line_1 , author_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.author_id = #2.author_id ] Output [ #2.address_line_1 ]"
    },
    {
        "id": "bcdc3b9b8a8319c16afdb3248b180ac5eb0b1e074dbc352eab201294a60b5e2c",
        "question": "Find the personal name, family name, and author ID of the course author that teaches the most courses.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ author_id ] ; #2 = Aggregate [ #1 ] GroupBy [ author_id ] Output [ countstar AS Count_Star , author_id ] ; #3 = Scan Table [ Course_Authors_and_Tutors ] Output [ family_name , personal_name , author_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.author_id = #3.author_id ] Output [ #2.Count_Star , #3.family_name , #2.author_id , #3.personal_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ family_name , Count_Star , personal_name , author_id ]"
    },
    {
        "id": "0522ff51370c7a11b87c7e6c4d8f90899dc7abc906715d5bac8788a57f066583",
        "question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ author_id ] ; #2 = Aggregate [ #1 ] GroupBy [ author_id ] Output [ countstar AS Count_Star , author_id ] ; #3 = Scan Table [ Course_Authors_and_Tutors ] Output [ family_name , personal_name , author_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.author_id = #3.author_id ] Output [ #2.Count_Star , #3.family_name , #2.author_id , #3.personal_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ family_name , Count_Star , personal_name , author_id ]"
    },
    {
        "id": "488b803b1852bbb8e2e18e2787cb44310a9cc4aafc8bcc407b6f1fdc2cefc09c",
        "question": "Find the addresses and author IDs of the course authors that teach at least two courses.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ author_id ] ; #2 = Aggregate [ #1 ] GroupBy [ author_id ] Output [ countstar AS Count_Star , author_id ] ; #3 = Scan Table [ Course_Authors_and_Tutors ] Output [ address_line_1 , author_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.author_id = #3.author_id ] Output [ #3.address_line_1 , #2.author_id , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ address_line_1 , author_id ]"
    },
    {
        "id": "4d9c6bfaba657b2046e1268aaef3198e1fed817980a6171704c7520932c540aa",
        "question": "Which course authors teach two or more courses? Give me their addresses and author IDs.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ author_id ] ; #2 = Aggregate [ #1 ] GroupBy [ author_id ] Output [ countstar AS Count_Star , author_id ] ; #3 = Scan Table [ Course_Authors_and_Tutors ] Output [ address_line_1 , author_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.author_id = #3.author_id ] Output [ #3.address_line_1 , #2.author_id , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ address_line_1 , author_id ]"
    },
    {
        "id": "5cb6904731e64a58a9984e7f79c2edd68f987aa118576721842e8c37f6ce3bbd",
        "question": "Find the names of courses taught by the tutor who has personal name \"Julio\".",
        "parsing_tree": "e_learning | #1 = Scan Table [ Course_Authors_and_Tutors ] Predicate [ personal_name = 'Julio' ] Output [ personal_name , author_id ] ; #2 = Scan Table [ Courses ] Output [ course_name , author_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.author_id = #2.author_id ] Output [ #2.course_name ]"
    },
    {
        "id": "5f4ca3eaf7c75394bdd7c4930ddf123556d04338c9b6c3feaeef9d3c972688ed",
        "question": "What are the names of the courses taught by the tutor whose personal name is \"Julio\"?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Course_Authors_and_Tutors ] Predicate [ personal_name = 'Julio' ] Output [ personal_name , author_id ] ; #2 = Scan Table [ Courses ] Output [ course_name , author_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.author_id = #2.author_id ] Output [ #2.course_name ]"
    },
    {
        "id": "5bfe620bdcbb69769048f524096585956a174447e0a55765e212af5404aa01e4",
        "question": "Find the names and descriptions of courses that belong to the subject named \"Computer Science\".",
        "parsing_tree": "e_learning | #1 = Scan Table [ Subjects ] Predicate [ subject_name = 'Computer Science' ] Output [ subject_name , subject_id ] ; #2 = Scan Table [ Courses ] Output [ course_description , course_name , subject_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.subject_id = #2.subject_id ] Output [ #2.course_description , #2.course_name ]"
    },
    {
        "id": "270a1fa8af97c8583ab057b7851ad40c62f4cfa7846fd37b975dcb0736e50db6",
        "question": "What are the names and descriptions of the all courses under the \"Computer Science\" subject?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Subjects ] Predicate [ subject_name = 'Computer Science' ] Output [ subject_name , subject_id ] ; #2 = Scan Table [ Courses ] Output [ course_description , course_name , subject_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.subject_id = #2.subject_id ] Output [ #2.course_description , #2.course_name ]"
    },
    {
        "id": "c8a909fa4b6008e5a158e3a6f57ee076427de966d2c29f90ae0dbebfe314624b",
        "question": "Find the subject ID, subject name, and the corresponding number of available courses for each subject.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ subject_id ] ; #2 = Aggregate [ #1 ] GroupBy [ subject_id ] Output [ countstar AS Count_Star , subject_id ] ; #3 = Scan Table [ Subjects ] Output [ subject_name , subject_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.subject_id = #3.subject_id ] Output [ #2.subject_id , #3.subject_name , #2.Count_Star ]"
    },
    {
        "id": "6d384119c39d21ca77b0132a66ecc63827c8af27800bd71dc477c0259b0fb919",
        "question": "What are the subject ID, subject name, and the number of available courses for each subject?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ subject_id ] ; #2 = Aggregate [ #1 ] GroupBy [ subject_id ] Output [ countstar AS Count_Star , subject_id ] ; #3 = Scan Table [ Subjects ] Output [ subject_name , subject_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.subject_id = #3.subject_id ] Output [ #2.subject_id , #3.subject_name , #2.Count_Star ]"
    },
    {
        "id": "5cd55f7cd872fb4e54fc9674b3352499749a7e4f800b4da4d83ad4780a2c986f",
        "question": "Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ subject_id ] ; #2 = Aggregate [ #1 ] GroupBy [ subject_id ] Output [ countstar AS Count_Star , subject_id ] ; #3 = Scan Table [ Subjects ] Output [ subject_name , subject_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.subject_id = #3.subject_id ] Output [ #2.subject_id , #3.subject_name , #2.Count_Star ] ; #5 = Sort [ #4 ] OrderBy [ Count_Star ASC ] Output [ subject_name , Count_Star , subject_id ]"
    },
    {
        "id": "61f267416a2265a1a2121f0ebd3b3b2d310c32ed3c87b285e2d6f582a9a4f81f",
        "question": "List the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ subject_id ] ; #2 = Aggregate [ #1 ] GroupBy [ subject_id ] Output [ countstar AS Count_Star , subject_id ] ; #3 = Scan Table [ Subjects ] Output [ subject_name , subject_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.subject_id = #3.subject_id ] Output [ #2.subject_id , #3.subject_name , #2.Count_Star ] ; #5 = Sort [ #4 ] OrderBy [ Count_Star ASC ] Output [ subject_name , Count_Star , subject_id ]"
    },
    {
        "id": "525b138bf996c1292a06651824325545678c2147049d1400b4b649be9b580fad",
        "question": "What is the date of enrollment of the course named \"Spanish\"?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Predicate [ course_name = 'Spanish' ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ date_of_enrolment , course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.date_of_enrolment ]"
    },
    {
        "id": "e6138fbcfdfd771159c6dfda3c588213d9795fb93f8952aeb41b46904974eb85",
        "question": "Find the the date of enrollment of the \"Spanish\" course.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Predicate [ course_name = 'Spanish' ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ date_of_enrolment , course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.date_of_enrolment ]"
    },
    {
        "id": "7f46f5c5028c2734e6a86ec6c29b4ffd7058373fabcea8c1344fbecf08446e33",
        "question": "What is the name of the course that has the most student enrollment?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #1.course_name ] ; #4 = Aggregate [ #3 ] GroupBy [ course_name ] Output [ countstar AS Count_Star , course_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ course_name , Count_Star ]"
    },
    {
        "id": "1c04d87db79263bebcfa3f1e5e79d5d7795e2f8f3d91d9821c9eedd0c311706e",
        "question": "Which course is enrolled in by the most students? Give me the course name.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #1.course_name ] ; #4 = Aggregate [ #3 ] GroupBy [ course_name ] Output [ countstar AS Count_Star , course_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ course_name , Count_Star ]"
    },
    {
        "id": "403d76431e3136b47978e108985286a345905028b9b8a81761d03ad5b1bb49e9",
        "question": "What are the names of the courses that have exactly 1 student enrollment?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #1.course_name ] ; #4 = Aggregate [ #3 ] GroupBy [ course_name ] Output [ countstar AS Count_Star , course_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star = 1 ] Output [ course_name ]"
    },
    {
        "id": "7e07b79fa2af8850eef1e102256b4de77f8f836e416cebc69722b4b9714fc7f3",
        "question": "Find the names of the courses that have just one student enrollment.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #1.course_name ] ; #4 = Aggregate [ #3 ] GroupBy [ course_name ] Output [ countstar AS Count_Star , course_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star = 1 ] Output [ course_name ]"
    },
    {
        "id": "6d4237e9406f68aa84945a407dd8092eb95d18caf7260584b98256ff9d5a6117",
        "question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ course_description , course_name , course_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #1.course_name , #1.course_description ] ; #4 = Aggregate [ #3 ] GroupBy [ course_name , course_description ] Output [ course_description , course_name , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ course_description , course_name ]"
    },
    {
        "id": "ab8f052216957c69dae1b1eb97b7a5217f4cb6005134651e8aef6f8f86566b42",
        "question": "Return the descriptions and names of the courses that have more than two students enrolled in.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ course_description , course_name , course_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #1.course_name , #1.course_description ] ; #4 = Aggregate [ #3 ] GroupBy [ course_name , course_description ] Output [ course_description , course_name , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ course_description , course_name ]"
    },
    {
        "id": "9ec76d555a9769e6a27929fa4f4be69ce0554d63dcdaf72bbd80c60f8bf8fdb0",
        "question": "What is the name of each course and the corresponding number of student enrollment?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #1.course_name ] ; #4 = Aggregate [ #3 ] GroupBy [ course_name ] Output [ countstar AS Count_Star , course_name ]"
    },
    {
        "id": "465361317b8de0b8c28402b8d6a6238d4c52a87bf9547207060116ea426df1eb",
        "question": "List the name and the number of enrolled student for each course.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Courses ] Output [ course_name , course_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ course_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #1.course_name ] ; #4 = Aggregate [ #3 ] GroupBy [ course_name ] Output [ countstar AS Count_Star , course_name ]"
    },
    {
        "id": "c9fe5565d6a99db99bf093c575fc236861a5a0ef433b5dd649ad4aab71e41fd0",
        "question": "What are the enrollment dates of all the tests that have result \"Pass\"?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Tests_Taken ] Predicate [ test_result = 'Pass' ] Output [ test_result , registration_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ date_of_enrolment , registration_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.registration_id = #2.registration_id ] Output [ #2.date_of_enrolment ]"
    },
    {
        "id": "a13d86f542564392664a1d5b6e84651db6ce71a8e0d921c1cbec9400afe7a1a9",
        "question": "Find the enrollment date for all the tests that have \"Pass\" result.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Tests_Taken ] Predicate [ test_result = 'Pass' ] Output [ test_result , registration_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ date_of_enrolment , registration_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.registration_id = #2.registration_id ] Output [ #2.date_of_enrolment ]"
    },
    {
        "id": "bf87dc65faee6614e431bd240a63e8432ee2d3da8deb796279e8680eb14862f2",
        "question": "What are the completion dates of all the tests that have result \"Fail\"?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Tests_Taken ] Predicate [ test_result = 'Fail' ] Output [ test_result , registration_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ date_of_completion , registration_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.registration_id = #2.registration_id ] Output [ #2.date_of_completion ]"
    },
    {
        "id": "3019aaf28d1dfad4b3c061808c0c8cede5f36ecd2e4443fc9723b3b1ff4da5e7",
        "question": "Return the completion date for all the tests that have \"Fail\" result.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Tests_Taken ] Predicate [ test_result = 'Fail' ] Output [ test_result , registration_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ date_of_completion , registration_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.registration_id = #2.registration_id ] Output [ #2.date_of_completion ]"
    },
    {
        "id": "07a3c7f4dc3ea3a3097bc4b92c9996969edf9e51fd527b2628f31e76b859bca6",
        "question": "List the dates of enrollment and completion of the student with personal name \"Karson\".",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Predicate [ personal_name = 'Karson' ] Output [ student_id , personal_name ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ student_id , date_of_enrolment , date_of_completion ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.student_id ] Output [ #2.date_of_completion , #2.date_of_enrolment ]"
    },
    {
        "id": "a5ff331e66c03b74f6814e73d7123427e0d45d40a6779281ecf75774ad0ab31d",
        "question": "On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Predicate [ personal_name = 'Karson' ] Output [ student_id , personal_name ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ student_id , date_of_enrolment , date_of_completion ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.student_id ] Output [ #2.date_of_completion , #2.date_of_enrolment ]"
    },
    {
        "id": "255c6f8c51182dcf1f52f8e9f4993a176bf12139edc285c69beabe933e198bda",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Predicate [ family_name = 'Zieme' AND personal_name = 'Bernie' ] Output [ student_id , family_name , personal_name ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ student_id , date_of_enrolment , date_of_completion ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.student_id ] Output [ #2.date_of_completion , #2.date_of_enrolment ]"
    },
    {
        "id": "e62d4f4d4ecf9be675b5943d73238efdfbe7f2af3d7d44d5ed5dfc156843ee3b",
        "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Predicate [ family_name = 'Zieme' AND personal_name = 'Bernie' ] Output [ student_id , family_name , personal_name ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ student_id , date_of_enrolment , date_of_completion ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.student_id ] Output [ #2.date_of_completion , #2.date_of_enrolment ]"
    },
    {
        "id": "6c4f660ae8a575af74819f8417f4bdb5b0f6cbe77aece6930bbaccfeaefdfead",
        "question": "Find the student ID and login name of the student with the most course enrollments",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Course_Enrolment ] Output [ student_id ] ; #2 = Aggregate [ #1 ] GroupBy [ student_id ] Output [ student_id , countstar AS Count_Star ] ; #3 = Scan Table [ Students ] Output [ student_id , login_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.student_id = #3.student_id ] Output [ #2.Count_Star , #3.login_name , #2.student_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ student_id , login_name , Count_Star ]"
    },
    {
        "id": "95121c65c273cc008aa004ce12670ebe42af51ee919cf44eee0980471b1c02b8",
        "question": "What are the student ID and login name of the student who are enrolled in the most courses?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Course_Enrolment ] Output [ student_id ] ; #2 = Aggregate [ #1 ] GroupBy [ student_id ] Output [ student_id , countstar AS Count_Star ] ; #3 = Scan Table [ Students ] Output [ student_id , login_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.student_id = #3.student_id ] Output [ #2.Count_Star , #3.login_name , #2.student_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ student_id , login_name , Count_Star ]"
    },
    {
        "id": "4b41737f417c1f8ff10a8282b35c85d460ee2949e89d9fc3730c0b83a2c89523",
        "question": "Find the student ID and personal name of the student with at least two enrollments.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Course_Enrolment ] Output [ student_id ] ; #2 = Aggregate [ #1 ] GroupBy [ student_id ] Output [ student_id , countstar AS Count_Star ] ; #3 = Scan Table [ Students ] Output [ student_id , personal_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.student_id = #3.student_id ] Output [ #2.Count_Star , #3.personal_name , #2.student_id ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ student_id , personal_name ]"
    },
    {
        "id": "6c8e9c0f10229d37dfde8c8415c8f403252acea33042d79768d9faf0f0da8dce",
        "question": "Which student are enrolled in at least two courses? Give me the student ID and personal name.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Course_Enrolment ] Output [ student_id ] ; #2 = Aggregate [ #1 ] GroupBy [ student_id ] Output [ student_id , countstar AS Count_Star ] ; #3 = Scan Table [ Students ] Output [ student_id , personal_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.student_id = #3.student_id ] Output [ #2.Count_Star , #3.personal_name , #2.student_id ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ student_id , personal_name ]"
    },
    {
        "id": "b6b5e339c5724e44f3e981500e6bf52cf66ec54b725c8ec2ded1dd8f91111622",
        "question": "Find the student ID and middle name for all the students with at most two enrollments.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Course_Enrolment ] Output [ student_id ] ; #2 = Aggregate [ #1 ] GroupBy [ student_id ] Output [ student_id , countstar AS Count_Star ] ; #3 = Scan Table [ Students ] Output [ student_id , middle_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.student_id = #3.student_id ] Output [ #2.Count_Star , #3.middle_name , #2.student_id ] ; #5 = Filter [ #4 ] Predicate [ Count_Star <= 2 ] Output [ student_id , middle_name ]"
    },
    {
        "id": "1eea62ddffe5ab8626fa7115b8a926542000cf57aaeebac42c6075e05b15a598",
        "question": "What are the student IDs and middle names of the students enrolled in at most two courses?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Student_Course_Enrolment ] Output [ student_id ] ; #2 = Aggregate [ #1 ] GroupBy [ student_id ] Output [ student_id , countstar AS Count_Star ] ; #3 = Scan Table [ Students ] Output [ student_id , middle_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.student_id = #3.student_id ] Output [ #2.Count_Star , #3.middle_name , #2.student_id ] ; #5 = Filter [ #4 ] Predicate [ Count_Star <= 2 ] Output [ student_id , middle_name ]"
    },
    {
        "id": "0d9cad428c4d778ef77d37bcdf8dbd6cb1865321e9936f053c905bc44ea5fa38",
        "question": "Find the personal names of students not enrolled in any course.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Distinct [ true ] Output [ personal_name ] ; #2 = Scan Table [ Students ] Output [ student_id , personal_name ] ; #3 = Scan Table [ Student_Course_Enrolment ] Output [ student_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.student_id = #3.student_id ] Output [ #2.personal_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.personal_name = #4.personal_name ] Output [ #1.personal_name ]"
    },
    {
        "id": "87965cd322a4d411604e78ba0914e4fadba775e2962b8e87667362872ffabd7a",
        "question": "Which students not enrolled in any course? Find their personal names.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Distinct [ true ] Output [ personal_name ] ; #2 = Scan Table [ Students ] Output [ student_id , personal_name ] ; #3 = Scan Table [ Student_Course_Enrolment ] Output [ student_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.student_id = #3.student_id ] Output [ #2.personal_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.personal_name = #4.personal_name ] Output [ #1.personal_name ]"
    },
    {
        "id": "72497eee534bb38174f66119e5bc7ba1690cd87a84688ff8320a3af005d6bb91",
        "question": "How many students did not have any course enrollment?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Output [ student_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ student_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.student_id = #2.student_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a1a35b4603c0d8bdd79acc1822a7ede5515a6bfc5ce47d09a741b20d762227a5",
        "question": "Count the number of students who did not enroll in any course.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Students ] Output [ student_id ] ; #2 = Scan Table [ Student_Course_Enrolment ] Output [ student_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.student_id = #2.student_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5b58d0accb277f07fc62778939c8b468715a55b64eb460f4ac91da4b4437b645",
        "question": "Find the common login name of course authors and students.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Course_Authors_and_Tutors ] Distinct [ true ] Output [ login_name ] ; #2 = Scan Table [ Students ] Output [ login_name ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.login_name = #2.login_name ] Output [ #1.login_name ]"
    },
    {
        "id": "91ac88df7c736ed287c41a0caf8a91a4ec2eb6b5ea98958d91372fd6f2037c1a",
        "question": "What are the login names used both by some course authors and some students?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Course_Authors_and_Tutors ] Distinct [ true ] Output [ login_name ] ; #2 = Scan Table [ Students ] Output [ login_name ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.login_name = #2.login_name ] Output [ #1.login_name ]"
    },
    {
        "id": "a3d9eef82454b5f54f33a51e16dc91d02dbd648ef6e5e1c94a4c17ed16a1532f",
        "question": "Find the common personal name of course authors and students.",
        "parsing_tree": "e_learning | #1 = Scan Table [ Course_Authors_and_Tutors ] Distinct [ true ] Output [ personal_name ] ; #2 = Scan Table [ Students ] Output [ personal_name ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.personal_name = #1.personal_name ] Output [ #1.personal_name ]"
    },
    {
        "id": "66e0f0324c4ab897a4acdd37d4687a6a8e870b957a101226365886256f805d23",
        "question": "What are the personal names used both by some course authors and some students?",
        "parsing_tree": "e_learning | #1 = Scan Table [ Course_Authors_and_Tutors ] Distinct [ true ] Output [ personal_name ] ; #2 = Scan Table [ Students ] Output [ personal_name ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.personal_name = #1.personal_name ] Output [ #1.personal_name ]"
    },
    {
        "id": "34e849554ec03394af96203299cf307d9416000ea784213a20e335cf47cc262d",
        "question": "Which customer had at least 2 policies but did not file any claims? List the customer details and id.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Customer_Policies ] Output [ Customer_ID ] ; #2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_ID , #2.Customer_Details ] ; #4 = Aggregate [ #3 ] GroupBy [ Customer_ID ] Output [ countstar AS Count_Star , Customer_ID , Customer_Details ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Customer_ID , Customer_Details ] ; #6 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #7 = Scan Table [ Claims ] Output [ Policy_ID ] ; #8 = Scan Table [ Customer_Policies ] Output [ Customer_ID , Policy_ID ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.Policy_ID = #8.Policy_ID ] Output [ #8.Customer_ID ] ; #10 = Intersect [ #6 , #9 ] Predicate [ #9.Customer_ID = #6.Customer_ID ] Output [ #6.Customer_Details , #6.Customer_ID ] ; #11 = Except [ #5 , #10 ] Predicate [ #5.Customer_Details = #10.Customer_Details ] Output [ #5.Customer_Details , #5.Customer_ID ]"
    },
    {
        "id": "bfeaa2a5ec0c5340d4192a56a2a5df3d6a84289486127daf40a9cf40e42a37c9",
        "question": "Give me the the customer details and id for the customers who had two or more policies but did not file any claims.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Customer_Policies ] Output [ Customer_ID ] ; #2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_ID , #2.Customer_Details ] ; #4 = Aggregate [ #3 ] GroupBy [ Customer_ID ] Output [ countstar AS Count_Star , Customer_ID , Customer_Details ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Customer_ID , Customer_Details ] ; #6 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #7 = Scan Table [ Claims ] Output [ Policy_ID ] ; #8 = Scan Table [ Customer_Policies ] Output [ Customer_ID , Policy_ID ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.Policy_ID = #8.Policy_ID ] Output [ #8.Customer_ID ] ; #10 = Intersect [ #6 , #9 ] Predicate [ #9.Customer_ID = #6.Customer_ID ] Output [ #6.Customer_Details , #6.Customer_ID ] ; #11 = Except [ #5 , #10 ] Predicate [ #5.Customer_Details = #10.Customer_Details ] Output [ #5.Customer_Details , #5.Customer_ID ]"
    },
    {
        "id": "40d0aef82c15596306d66798baeed41e142015b9805ad5ad7a3ac48772b5bafc",
        "question": "List the method, date and amount of all the payments, in ascending order of date.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Payments ] Output [ Amount_Payment , Payment_Method_Code , Date_Payment_Made ] ; #2 = Sort [ #1 ] OrderBy [ Date_Payment_Made ASC ] Output [ Amount_Payment , Payment_Method_Code , Date_Payment_Made ]"
    },
    {
        "id": "6a6ebcf9f46afebfa650261e66de807b46e6b5ca3c6e2d83e7cbc86cc11155ac",
        "question": "What are the method, date and amount of each payment? Sort the list in ascending order of date.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Payments ] Output [ Amount_Payment , Payment_Method_Code , Date_Payment_Made ] ; #2 = Sort [ #1 ] OrderBy [ Date_Payment_Made ASC ] Output [ Amount_Payment , Payment_Method_Code , Date_Payment_Made ]"
    },
    {
        "id": "2a4c3a0d34285d4e4804a44621d1fec522bf375d3c209dd38ae61e4aba35abe9",
        "question": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Claims ] Output [ Amount_Settled , Amount_Claimed ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Amount_Claimed DESC ] Output [ Amount_Settled , Amount_Claimed ]"
    },
    {
        "id": "9cd3dd6daf053b7b7a3494988b54d7036608eac8d944717d57c6f39dd569194c",
        "question": "Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Claims ] Output [ Amount_Settled , Amount_Claimed ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Amount_Claimed DESC ] Output [ Amount_Settled , Amount_Claimed ]"
    },
    {
        "id": "95f1dcb1e3964dd9b52a1bfab33cccd976ebda4814e3dd7df61c2339f36d191e",
        "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Claims ] Output [ Amount_Settled , Amount_Claimed ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Amount_Settled ASC ] Output [ Amount_Settled , Amount_Claimed ]"
    },
    {
        "id": "2d78ab3629fecbee444ab1b931d55cafc393cce07444bd62c401510e0f56c1f6",
        "question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Claims ] Output [ Amount_Settled , Amount_Claimed ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Amount_Settled ASC ] Output [ Amount_Settled , Amount_Claimed ]"
    },
    {
        "id": "6fbf49489681340926028646e7b93acc8ef8e8db0b3745e8344ef7e3e893cb1b",
        "question": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Claims ] Output [ Amount_Claimed ] ; #2 = Aggregate [ #1 ] Output [ AVG(Amount_Claimed) AS Avg_Amount_Claimed ] ; #3 = Scan Table [ Claims ] Output [ Date_Claim_Settled , Amount_Claimed , Date_Claim_Made ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Amount_Claimed > #2.Avg_Amount_Claimed ] Output [ #3.Date_Claim_Made , #3.Date_Claim_Settled ]"
    },
    {
        "id": "5322dc9c9fb246af616df6b1467b009a8e84ce7df88a89625f6b94cc83e73709",
        "question": "Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Claims ] Output [ Amount_Claimed ] ; #2 = Aggregate [ #1 ] Output [ AVG(Amount_Claimed) AS Avg_Amount_Claimed ] ; #3 = Scan Table [ Claims ] Output [ Date_Claim_Settled , Amount_Claimed , Date_Claim_Made ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Amount_Claimed > #2.Avg_Amount_Claimed ] Output [ #3.Date_Claim_Made , #3.Date_Claim_Settled ]"
    },
    {
        "id": "74b308689a1f574c64500006b9eba7caa6ce03d77506f07c04d41748e2e16fe0",
        "question": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Claims ] Output [ Amount_Settled ] ; #2 = Aggregate [ #1 ] Output [ AVG(Amount_Settled) AS Avg_Amount_Settled ] ; #3 = Scan Table [ Claims ] Output [ Amount_Settled , Date_Claim_Made ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Amount_Settled <= #2.Avg_Amount_Settled ] Output [ #3.Date_Claim_Made ]"
    },
    {
        "id": "bbe0368145aab649135ba9816ea4d086153902e298d3ecfc837e7b94edf1e0dd",
        "question": "Return the claim start date for the claims whose claimed amount is no more than the average",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Claims ] Output [ Amount_Settled ] ; #2 = Aggregate [ #1 ] Output [ AVG(Amount_Settled) AS Avg_Amount_Settled ] ; #3 = Scan Table [ Claims ] Output [ Amount_Settled , Date_Claim_Made ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Amount_Settled <= #2.Avg_Amount_Settled ] Output [ #3.Date_Claim_Made ]"
    },
    {
        "id": "feabc24ced48c66d727509df9f96517510d4250c0f1c5ffb07158a5cc544bbb7",
        "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Settlements ] Output [ Claim_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Claim_ID ] Output [ countstar AS Count_Star , Claim_ID ] ; #3 = Scan Table [ Claims ] Output [ Claim_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Claim_ID = #3.Claim_ID ] Output [ #3.Claim_ID , #2.Count_Star ]"
    },
    {
        "id": "da2f4f2f4c222ca0fc9d54438ac142aed7c51077b062e1b8ea8e0f5e952fa29e",
        "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Settlements ] Output [ Claim_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Claim_ID ] Output [ countstar AS Count_Star , Claim_ID ] ; #3 = Scan Table [ Claims ] Output [ Claim_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Claim_ID = #3.Claim_ID ] Output [ #3.Claim_ID , #2.Count_Star ]"
    },
    {
        "id": "60303880ee34595a936ccf470b0fca2b5e28ba2438e2da8dc6298c1857dd9b53",
        "question": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Settlements ] Output [ Claim_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Claim_ID ] Output [ countstar AS Count_Star , Claim_ID ] ; #3 = Scan Table [ Claims ] Output [ Claim_ID , Date_Claim_Made ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Claim_ID = #3.Claim_ID ] Output [ #3.Date_Claim_Made , #3.Claim_ID , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Claim_ID , Date_Claim_Made ]"
    },
    {
        "id": "af7ada4bceb0f81f5369f16859ee8823ec2dc3b227a9f4825b0ce08f7e6a9076",
        "question": "Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Settlements ] Output [ Claim_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Claim_ID ] Output [ countstar AS Count_Star , Claim_ID ] ; #3 = Scan Table [ Claims ] Output [ Claim_ID , Date_Claim_Made ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Claim_ID = #3.Claim_ID ] Output [ #3.Date_Claim_Made , #3.Claim_ID , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Claim_ID , Date_Claim_Made ]"
    },
    {
        "id": "17c084368b1a0f92b3ac43f97eebdff83f475264d3f3e71a6ac37641f4f3471f",
        "question": "Of all the claims, what was the earliest date when any claim was made?",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Claims ] Output [ Date_Claim_Made ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Date_Claim_Made ASC ] Output [ Date_Claim_Made ]"
    },
    {
        "id": "118d05ff2ef8b17b1e5ac294dbaef805607dd33584fc2eaefc23e2ee056b0e87",
        "question": "Tell me the the date when the first claim was made.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Claims ] Output [ Date_Claim_Made ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Date_Claim_Made ASC ] Output [ Date_Claim_Made ]"
    },
    {
        "id": "12a2d1202ebdbce5ab7aeb183ac875d8d92517d910d8f31076ce8f07debd4aee",
        "question": "What is the total amount of settlement made for all the settlements?",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Settlements ] Output [ Amount_Settled ] ; #2 = Aggregate [ #1 ] Output [ SUM(Amount_Settled) AS Sum_Amount_Settled ]"
    },
    {
        "id": "1a5f3b362065e5f618b96011fafedf85d0f80441053b62fa1aa0befbbd5a4fcb",
        "question": "Compute the total amount of settlement across all the settlements.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Settlements ] Output [ Amount_Settled ] ; #2 = Aggregate [ #1 ] Output [ SUM(Amount_Settled) AS Sum_Amount_Settled ]"
    },
    {
        "id": "3812e5e965c0eefaa01c5533a6aa6e4f397d89eae3d52f4449cfc7212639fade",
        "question": "Who are the customers that had more than 1 policy? List the customer details and id.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Customer_Policies ] Output [ Customer_ID ] ; #2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_ID , #2.Customer_Details ] ; #4 = Aggregate [ #3 ] GroupBy [ Customer_ID ] Output [ countstar AS Count_Star , Customer_ID , Customer_Details ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Customer_ID , Customer_Details ]"
    },
    {
        "id": "b74697ef03a9bd4b8e1cba6227d839861ff91790b4f007350aae7ac12277404d",
        "question": "Find the the customer details and id for the customers who had more than one policy.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Customer_Policies ] Output [ Customer_ID ] ; #2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_ID , #2.Customer_Details ] ; #4 = Aggregate [ #3 ] GroupBy [ Customer_ID ] Output [ countstar AS Count_Star , Customer_ID , Customer_Details ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Customer_ID , Customer_Details ]"
    },
    {
        "id": "11c4c5826784fae9c41a3b86f9091208a2ab529ddda4901fd032451934263022",
        "question": "What are the claim dates and settlement dates of all the settlements?",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Settlements ] Output [ Date_Claim_Settled , Date_Claim_Made ]"
    },
    {
        "id": "094a0aa692bdb890a8fac37750702904c88bca1364b9b3230b407d6de21881cb",
        "question": "Tell me the the claim date and settlement date for each settlement case.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Settlements ] Output [ Date_Claim_Settled , Date_Claim_Made ]"
    },
    {
        "id": "881069f91fb58300f05823c4e0a237e54d142439ed2a1e0108673a0f870319d9",
        "question": "What is the most popular payment method?",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Payments ] Output [ Payment_Method_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Payment_Method_Code ] Output [ countstar AS Count_Star , Payment_Method_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Payment_Method_Code ]"
    },
    {
        "id": "93ad8202fc07e8d1ebd84ec1748281641ef17498053d5a9913ab4d9ca055b2fa",
        "question": "Which payment method is used the most often?",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Payments ] Output [ Payment_Method_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Payment_Method_Code ] Output [ countstar AS Count_Star , Payment_Method_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Payment_Method_Code ]"
    },
    {
        "id": "9d8be122bc49412ed9347e04fa8f14eeb117039ce35229276bd07751780cabf5",
        "question": "With which kind of payment method were the least number of payments processed?",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Payments ] Output [ Payment_Method_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Payment_Method_Code ] Output [ countstar AS Count_Star , Payment_Method_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Payment_Method_Code ]"
    },
    {
        "id": "fbb95d0bb3cf35c443bca46af466b1029074e843afe819d742df80240dbe4248",
        "question": "What is the payment method that were used the least often?",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Payments ] Output [ Payment_Method_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Payment_Method_Code ] Output [ countstar AS Count_Star , Payment_Method_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Payment_Method_Code ]"
    },
    {
        "id": "340c62900828f4df9be9527762354ac80d518adfdfd234ac53466075b7621edd",
        "question": "What is the total amount of payment?",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Payments ] Output [ Amount_Payment ] ; #2 = Aggregate [ #1 ] Output [ SUM(Amount_Payment) AS Sum_Amount_Payment ]"
    },
    {
        "id": "d6087438d473862748d8777309a62652badec5b8138b510bf3552b7af68d2282",
        "question": "Compute the total amount of payment processed.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Payments ] Output [ Amount_Payment ] ; #2 = Aggregate [ #1 ] Output [ SUM(Amount_Payment) AS Sum_Amount_Payment ]"
    },
    {
        "id": "530d44e4e3173ae17ca74b7c2c277bcff5302f4a531a8cf7d6a50383def2bad7",
        "question": "What are all the distinct details of the customers?",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ Customer_Details ]"
    },
    {
        "id": "50b03817eb1499bbded066f464c3c5741a4a56d3d26e3619d08b6351423eafa1",
        "question": "Return the distinct customer details.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ Customer_Details ]"
    },
    {
        "id": "93e91599319d3c4d8c90dc3780b624d097213b4b43f7e9d7a0ae56862971b829",
        "question": "Which kind of policy type was chosen by the most customers?",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Customer_Policies ] Output [ Policy_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Policy_Type_Code ] Output [ countstar AS Count_Star , Policy_Type_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Policy_Type_Code , Count_Star ]"
    },
    {
        "id": "9528ed2c9aa924edfdc16e8c686e8666c9634d9f63348646a981f7b0125ed71c",
        "question": "Find the policy type the most customers choose.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Customer_Policies ] Output [ Policy_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Policy_Type_Code ] Output [ countstar AS Count_Star , Policy_Type_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Policy_Type_Code , Count_Star ]"
    },
    {
        "id": "d55aeb0a700ba3e4ab1e29b0939fb4e8ae526a22286707635a21578fc512eb37",
        "question": "How many settlements are there in total?",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Settlements ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "464b4dee6a647b9800eb2fd6789cc3ed6a5c3a0532fddbd1db55fec75f5b852a",
        "question": "Count the total number of settlements made.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Settlements ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "920bcd382a88e5e95a69eba749e76333ba87a33dcbfa496aa9e2ad2b3599efc4",
        "question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Payments ] Predicate [ Payment_Method_Code = 'Visa' ] Output [ Amount_Payment , Payment_ID , Payment_Method_Code , Date_Payment_Made ]"
    },
    {
        "id": "5e1015c1f533a5cb35cd48c4d2b9493a22cec8001732e94d658ab9ee7a4cc635",
        "question": "Give me the payment Id, the date and the amount for all the payments processed with Visa.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Payments ] Predicate [ Payment_Method_Code = 'Visa' ] Output [ Amount_Payment , Payment_ID , Payment_Method_Code , Date_Payment_Made ]"
    },
    {
        "id": "3b58215f4c0581842d09f91733e3755efb922793a05435052e6e19e9c6154972",
        "question": "List the details of the customers who do not have any policies.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ Customer_Details ] ; #2 = Scan Table [ Customer_Policies ] Output [ Customer_ID ] ; #3 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Customer_ID = #3.Customer_ID ] Output [ #3.Customer_Details ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Customer_Details = #4.Customer_Details ] Output [ #1.Customer_Details ]"
    },
    {
        "id": "f7645e4bbf8024fc83352fe508480268eb1e7a099e37c4d305ca86c0f65dd8a9",
        "question": "Which customers do not have any policies? Find the details of these customers.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ Customer_Details ] ; #2 = Scan Table [ Customer_Policies ] Output [ Customer_ID ] ; #3 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Customer_ID = #3.Customer_ID ] Output [ #3.Customer_Details ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Customer_Details = #4.Customer_Details ] Output [ #1.Customer_Details ]"
    },
    {
        "id": "a1ae563df2efa2385346050c3eece1bc4072e0e94ec4446d8b52d8c6d992f89d",
        "question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Settlements ] Output [ Claim_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Claim_ID ] Output [ countstar AS Count_Star , Claim_ID ] ; #3 = Scan Table [ Claims ] Output [ Date_Claim_Settled , Claim_ID , Date_Claim_Made ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Claim_ID = #3.Claim_ID ] Output [ #3.Date_Claim_Made , #3.Claim_ID , #3.Date_Claim_Settled , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star = 1 ] Output [ Date_Claim_Settled , Claim_ID , Date_Claim_Made ]"
    },
    {
        "id": "9957b1cf35975b0faddf3b8c6eed4bcc26d8dfe49ee1038e069efbf44cf0a730",
        "question": "Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Settlements ] Output [ Claim_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Claim_ID ] Output [ countstar AS Count_Star , Claim_ID ] ; #3 = Scan Table [ Claims ] Output [ Date_Claim_Settled , Claim_ID , Date_Claim_Made ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Claim_ID = #3.Claim_ID ] Output [ #3.Date_Claim_Made , #3.Claim_ID , #3.Date_Claim_Settled , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star = 1 ] Output [ Date_Claim_Settled , Claim_ID , Date_Claim_Made ]"
    },
    {
        "id": "501bd066b7aedda58f7caafcd547c2a11b845ebc82e89f2b2cadf20ec00e42c9",
        "question": "Find the total claimed amount of all the claims.",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Claims ] Output [ Amount_Claimed ] ; #2 = Aggregate [ #1 ] Output [ SUM(Amount_Claimed) AS Sum_Amount_Claimed ]"
    },
    {
        "id": "05e29aebb6e9a70926a52f4ac960f997796b8ed8ca889dbf9125129d7e47ecd3",
        "question": "What is total amount claimed summed across all the claims?",
        "parsing_tree": "insurance_policies | #1 = Scan Table [ Claims ] Output [ Amount_Claimed ] ; #2 = Aggregate [ #1 ] Output [ SUM(Amount_Claimed) AS Sum_Amount_Claimed ]"
    },
    {
        "id": "906e45e42b73fdc40f9674ed9c1dfce8229b197c18bfb55374aaee9dde8ab4ef",
        "question": "What is the employee id of the head whose department has the least number of employees?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Department ] Output [ Head , DepartmentID ] ; #2 = Aggregate [ #1 ] GroupBy [ Head ] Output [ COUNT(DepartmentID) AS Count_DepartmentID , Head ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_DepartmentID ASC ] Output [ Count_DepartmentID , Head ]"
    },
    {
        "id": "7db27f5cea5c846e0893225918279f4bee4daff30aab22b9e34210d80ab12b9c",
        "question": "Tell me the employee id of the head of the department with the least employees.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Department ] Output [ Head , DepartmentID ] ; #2 = Aggregate [ #1 ] GroupBy [ Head ] Output [ COUNT(DepartmentID) AS Count_DepartmentID , Head ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_DepartmentID ASC ] Output [ Count_DepartmentID , Head ]"
    },
    {
        "id": "a984b4088964856fac8488a0e34dfce6830ed75942991b217f637224597bbc9f",
        "question": "What are names of patients who made an appointment?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Patient ] Output [ SSN , Name ] ; #2 = Scan Table [ Appointment ] Output [ Patient ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SSN = #2.Patient ] Output [ #1.Name ]"
    },
    {
        "id": "040a647e819893fbec24dffb05e9211aac398b40bf3d66037f9c41088f9f7490",
        "question": "List the names of patients who have made appointments.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Patient ] Output [ SSN , Name ] ; #2 = Scan Table [ Appointment ] Output [ Patient ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SSN = #2.Patient ] Output [ #1.Name ]"
    },
    {
        "id": "f4fb4b7a00466b248f2d3d5ea382db5b0957192b8f752fb267ef6f05cb4dd45b",
        "question": "what are name and phone number of patients who had more than one appointment?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Appointment ] Output [ Patient ] ; #2 = Aggregate [ #1 ] GroupBy [ Patient ] Output [ Patient , countstar AS Count_Star ] ; #3 = Scan Table [ Patient ] Output [ SSN , Name , Phone ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Patient = #3.SSN ] Output [ #3.Name , #3.Phone , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name , Phone ]"
    },
    {
        "id": "d984c84ac27c197af78094988f57479f0cae4f975412f9fb140b5806f3f373b3",
        "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Appointment ] Output [ Patient ] ; #2 = Aggregate [ #1 ] GroupBy [ Patient ] Output [ Patient , countstar AS Count_Star ] ; #3 = Scan Table [ Patient ] Output [ SSN , Name , Phone ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Patient = #3.SSN ] Output [ #3.Name , #3.Phone , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name , Phone ]"
    },
    {
        "id": "8055d49801ad380dd5aab791fa73c50972060881163e608c5e66714452bbd30b",
        "question": "Find the id of the appointment with the most recent start date?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Appointment ] Output [ Start , AppointmentID ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Start DESC ] Output [ Start , AppointmentID ]"
    },
    {
        "id": "5fdf5587c12ebf4463bec3c816fbdc75341dbbd91f48d1c9de8cebe4e4b2ece4",
        "question": "What is the id of the appointment that started most recently?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Appointment ] Output [ Start , AppointmentID ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Start DESC ] Output [ Start , AppointmentID ]"
    },
    {
        "id": "d6bfeec8e0b04ca81bdbece1ef3ac3355344285ea1bdae76eb0b36b2b6c0b471",
        "question": "List the name of physicians who took some appointment.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Appointment ] Output [ Physician ] ; #2 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Physician = #2.EmployeeID ] Output [ #2.Name ]"
    },
    {
        "id": "52e08a9dd890b4d1ba7717e920e26dbac49082ecc5f1d603d80231590fbcd7ad",
        "question": "What are the names of all the physicians who took appointments.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Appointment ] Output [ Physician ] ; #2 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Physician = #2.EmployeeID ] Output [ #2.Name ]"
    },
    {
        "id": "e2df2063fb6b6ee1bb509ac0d9cd77afa23e841267d4e97bc368921b045abc16",
        "question": "List the name of physicians who never took any appointment.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Physician ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ Appointment ] Output [ Physician ] ; #3 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Physician = #3.EmployeeID ] Output [ #3.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Name ]"
    },
    {
        "id": "5c1f6428e756fb5bcbe41dbc6f02afe4befa897959a77cc56d3f58cc33084ee5",
        "question": "Which physicians have never taken any appointment? Find their names.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Physician ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ Appointment ] Output [ Physician ] ; #3 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Physician = #3.EmployeeID ] Output [ #3.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Name ]"
    },
    {
        "id": "7044596453e72397c99d495eac1e3828cafafb8a0f297850b541ef4a72a6d09c",
        "question": "What is the name of the patient who made the most recent appointment?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Patient ] Output [ SSN , Name ] ; #2 = Scan Table [ Appointment ] Output [ Patient , Start ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SSN = #2.Patient ] Output [ #2.Start , #1.Name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Start DESC ] Output [ Start , Name ]"
    },
    {
        "id": "69cf70a33b6ff91445900ab93c4218377d806687b3c40b7013fe8f2ea3c62a44",
        "question": "Find the name of the patient who made the appointment with the most recent start date.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Patient ] Output [ SSN , Name ] ; #2 = Scan Table [ Appointment ] Output [ Patient , Start ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SSN = #2.Patient ] Output [ #2.Start , #1.Name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Start DESC ] Output [ Start , Name ]"
    },
    {
        "id": "4ed0de3e4b8b76d4f3903d5c415e2d7be498828309ed12b916ed3939d9b0311e",
        "question": "How many patients stay in room 112?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Stay ] Predicate [ Room = 112 ] Output [ Room ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "28f25d51ae8f8df8f2295ff7f598dec7855d96c42b00850a77074198a87d4f07",
        "question": "Count the number of patients who stayed in room 112.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Stay ] Predicate [ Room = 112 ] Output [ Room ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "05506075106c22f77274d53c53054129b3feb4cc249c2a2e1aa3476679293cf5",
        "question": "How many patients' prescriptions are made by physician John Dorian?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Physician ] Predicate [ Name = 'John Dorian' ] Output [ Name , EmployeeID ] ; #2 = Scan Table [ Prescribes ] Output [ Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeID = #2.Physician ] Output [ #1.EmployeeID , #1.Name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b846132fde1e191193ff875fc9f877f6628eb5632fd800ddaf39c8579f2734ff",
        "question": "Find the number of patients' prescriptions physician John Dorian made.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Physician ] Predicate [ Name = 'John Dorian' ] Output [ Name , EmployeeID ] ; #2 = Scan Table [ Prescribes ] Output [ Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeID = #2.Physician ] Output [ #1.EmployeeID , #1.Name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cd37154678327f478666941544e4198fa6a99b5c2f21916b16ccc2664af522bd",
        "question": "Find the name of medication used on the patient who stays in room 111?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Stay ] Predicate [ Room = 111 ] Output [ Patient , Room ] ; #2 = Scan Table [ Prescribes ] Output [ Patient , Medication ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Patient = #2.Patient ] Output [ #2.Medication ] ; #4 = Scan Table [ Medication ] Output [ Code , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Medication = #4.Code ] Output [ #4.Name ]"
    },
    {
        "id": "0db382260ac98d5a1fd20eacc0bbce3800382ba01f22223b89b30b4ddb46d176",
        "question": "What is the name of the medication used for the patient staying in room 111?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Stay ] Predicate [ Room = 111 ] Output [ Patient , Room ] ; #2 = Scan Table [ Prescribes ] Output [ Patient , Medication ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Patient = #2.Patient ] Output [ #2.Medication ] ; #4 = Scan Table [ Medication ] Output [ Code , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Medication = #4.Code ] Output [ #4.Name ]"
    },
    {
        "id": "9b52f6b5058164cea47182c59b4733f441f86ecbf742cf11ec928d2c7371ebb6",
        "question": "Find the patient who most recently stayed in room 111.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Stay ] Predicate [ Room = 111 ] Output [ Patient , StayStart , Room ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ StayStart DESC ] Output [ Patient , StayStart ]"
    },
    {
        "id": "50a132533205b8c20b679d042c6c3643038d00f2ac2b88532c40e138348354fe",
        "question": "What is the id of the patient who stayed in room 111 most recently?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Stay ] Predicate [ Room = 111 ] Output [ Patient , StayStart , Room ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ StayStart DESC ] Output [ Patient , StayStart ]"
    },
    {
        "id": "8147e8dc8b81fc67acbd31b01d665dd3869e1c8dc6d328733e9a6a771be7596d",
        "question": "What is the name of the nurse has the most appointments?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Nurse ] Output [ Name , EmployeeID ] ; #2 = Scan Table [ Appointment ] Output [ PrepNurse ] ; #3 = Aggregate [ #2 ] GroupBy [ PrepNurse ] Output [ countstar AS Count_Star , PrepNurse ] ; #4 = Join [ #1 , #3 ] Predicate [ #1.EmployeeID = #3.PrepNurse ] Output [ #1.Name , #3.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]"
    },
    {
        "id": "00f8b33f1875abe402cb2c8a09a62f68caa750570f0d329377611d488b67aee2",
        "question": "Find the name of the nurse who has the largest number of appointments.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Nurse ] Output [ Name , EmployeeID ] ; #2 = Scan Table [ Appointment ] Output [ PrepNurse ] ; #3 = Aggregate [ #2 ] GroupBy [ PrepNurse ] Output [ countstar AS Count_Star , PrepNurse ] ; #4 = Join [ #1 , #3 ] Predicate [ #1.EmployeeID = #3.PrepNurse ] Output [ #1.Name , #3.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]"
    },
    {
        "id": "796043a48c59512ba95a07067d6ae263c2633fefde991bcecbfce31533390d07",
        "question": "How many patients do each physician take care of? List their names and number of patients they take care of.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Patient ] Output [ PCP ] ; #2 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.PCP = #2.EmployeeID ] Output [ #2.Name , #2.EmployeeID ] ; #4 = Aggregate [ #3 ] GroupBy [ EmployeeID ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "7dd6e8089cafd5c854588f8fd0a6797d14dd5a46ce246d45d83f924d194121c3",
        "question": "Return the name of each physician and the number of patients he or she treats.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Patient ] Output [ PCP ] ; #2 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.PCP = #2.EmployeeID ] Output [ #2.Name , #2.EmployeeID ] ; #4 = Aggregate [ #3 ] GroupBy [ EmployeeID ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "2a96d2e4f9ff430c83a37e3bd8208ebdd4a3a5f72e7de4b60527013082134662",
        "question": "Find the name of physicians who are in charge of more than one patient.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Patient ] Output [ PCP ] ; #2 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.PCP = #2.EmployeeID ] Output [ #2.Name , #2.EmployeeID ] ; #4 = Aggregate [ #3 ] GroupBy [ EmployeeID ] Output [ countstar AS Count_Star , Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name ]"
    },
    {
        "id": "d96c1945d523545daba04c17b23b6881198b09473e7a7a487abfc26332b770cc",
        "question": "Which physicians are in charge of more than one patient? Give me their names.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Patient ] Output [ PCP ] ; #2 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.PCP = #2.EmployeeID ] Output [ #2.Name , #2.EmployeeID ] ; #4 = Aggregate [ #3 ] GroupBy [ EmployeeID ] Output [ countstar AS Count_Star , Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name ]"
    },
    {
        "id": "71dc276490587acaa11973326f6405e9f121f9eb8d7c249a509abd7e45130632",
        "question": "What are the unique block codes that have available rooms?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Room ] Predicate [ Unavailable = 0 ] Distinct [ true ] Output [ BlockCode ]"
    },
    {
        "id": "99ef0a745715ba643d3babfabe5e36106a5fcf87cf6eb7ecfda816c6eb98c4b8",
        "question": "Tell me the distinct block codes where some rooms are available.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Room ] Predicate [ Unavailable = 0 ] Distinct [ true ] Output [ BlockCode ]"
    },
    {
        "id": "eb27f01070ef87490c768d6ab731e0f7e857d7b142996f282f1bd6976e8dcc59",
        "question": "How many different types of rooms are there?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Room ] Distinct [ true ] Output [ RoomType ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "128e04b60ea035a3a3da38cfb561f5f2021cbf69852c5b5e7f4df2ef7a794e92",
        "question": "Find the number of distinct room types available.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Room ] Distinct [ true ] Output [ RoomType ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b341afe451f1ccd690bd743f2de716ffefa7f5d402dfa6aa4c1e9f90426d4b00",
        "question": "What is the names of the physicians who prescribe medication Thesisin?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Medication ] Predicate [ Name = 'Thesisin' ] Output [ Code , Name ] ; #2 = Scan Table [ Prescribes ] Output [ Medication , Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Medication ] Output [ #2.Physician ] ; #4 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Physician = #4.EmployeeID ] Distinct [ true ] Output [ #4.Name ]"
    },
    {
        "id": "007b7299306fe9351e6d48292282fcc9542604066f3c430776fcf656e54d2e12",
        "question": "List the names of all the physicians who prescribe Thesisin as medication.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Medication ] Predicate [ Name = 'Thesisin' ] Output [ Code , Name ] ; #2 = Scan Table [ Prescribes ] Output [ Medication , Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Medication ] Output [ #2.Physician ] ; #4 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Physician = #4.EmployeeID ] Distinct [ true ] Output [ #4.Name ]"
    },
    {
        "id": "23f7e328038c6cd9548b83335acc10a15d4e0233ca1ce9acdbd318147b274dd6",
        "question": "Find the name and position of physicians who prescribe some medication whose brand is X?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Medication ] Predicate [ Brand = 'X' ] Output [ Code , Brand ] ; #2 = Scan Table [ Prescribes ] Output [ Medication , Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Medication ] Output [ #2.Physician ] ; #4 = Scan Table [ Physician ] Output [ Position , Name , EmployeeID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Physician = #4.EmployeeID ] Distinct [ true ] Output [ #4.Position , #4.Name ]"
    },
    {
        "id": "9c6cccd9d2e4ade62253c3dd8c4abd5860bf05b1cc1e1c624ef4d325963d2e49",
        "question": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Medication ] Predicate [ Brand = 'X' ] Output [ Code , Brand ] ; #2 = Scan Table [ Prescribes ] Output [ Medication , Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Medication ] Output [ #2.Physician ] ; #4 = Scan Table [ Physician ] Output [ Position , Name , EmployeeID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Physician = #4.EmployeeID ] Distinct [ true ] Output [ #4.Position , #4.Name ]"
    },
    {
        "id": "a39b7e7794cc0c5cf5e4f1e2e424d0a3d78c0de5ab11d32057645e32b31e287c",
        "question": "Find the number of medications prescribed for each brand.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Prescribes ] Output [ Medication ] ; #2 = Scan Table [ Medication ] Output [ Code , Brand , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Medication = #2.Code ] Output [ #2.Name , #2.Brand ] ; #4 = Aggregate [ #3 ] GroupBy [ Brand , Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "2b23958b7353c17a790a1b7c9064b78915ee0707f55f5dba21b171804155b788",
        "question": "How many medications are prescribed for each brand?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Prescribes ] Output [ Medication ] ; #2 = Scan Table [ Medication ] Output [ Code , Brand , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Medication = #2.Code ] Output [ #2.Name , #2.Brand ] ; #4 = Aggregate [ #3 ] GroupBy [ Brand , Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "d4ae1e846bc563b458f35f299140196ddc9ca8137a4112f5a6ecd3430db66131",
        "question": "Find the name of physicians whose position title contains the word 'senior'.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Physician ] Predicate [ Position like '%senior%' ] Output [ Position , Name ]"
    },
    {
        "id": "e6c142843586c0d1e405bc7441c775c548052abc03bf688d8d5744073fd2a469",
        "question": "What are the names of the physicians who have 'senior' in their titles.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Physician ] Predicate [ Position like '%senior%' ] Output [ Position , Name ]"
    },
    {
        "id": "5616972a758c982e3516f5722eaba1f2b5d6ad3713597b13fe80899f09fd6dda",
        "question": "Find the patient who has the most recent undergoing treatment?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Undergoes ] Output [ Patient , DateUndergoes ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ DateUndergoes ASC ] Output [ Patient , DateUndergoes ]"
    },
    {
        "id": "347c7c0e56070a9f592b659d51f647b5633e3997f079ff3bdce3a401a3d11aab",
        "question": "Which patient is undergoing the most recent treatment?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Undergoes ] Output [ Patient , DateUndergoes ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ DateUndergoes ASC ] Output [ Patient , DateUndergoes ]"
    },
    {
        "id": "775d12350ddad47552e6e89a75d452bb992f90e2af3b1a3ffc4ba8ea036f9ad0",
        "question": "Find the names of all patients who have an undergoing treatment and are staying in room 111.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Stay ] Predicate [ Room = 111 ] Output [ StayID , Room ] ; #2 = Scan Table [ Undergoes ] Output [ Patient , Stay ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StayID = #2.Stay ] Output [ #2.Patient ] ; #4 = Scan Table [ Patient ] Output [ SSN , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Patient = #4.SSN ] Distinct [ true ] Output [ #4.Name ]"
    },
    {
        "id": "bb45d80112ab31d1437b00ea761f96e8a873e7141b8fa5842abc5962c09f21cf",
        "question": "What are the names of patients who are staying in room 111 and have an undergoing treatment?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Stay ] Predicate [ Room = 111 ] Output [ StayID , Room ] ; #2 = Scan Table [ Undergoes ] Output [ Patient , Stay ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StayID = #2.Stay ] Output [ #2.Patient ] ; #4 = Scan Table [ Patient ] Output [ SSN , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Patient = #4.SSN ] Distinct [ true ] Output [ #4.Name ]"
    },
    {
        "id": "3a8c782ac4370a3ad4770db284af6b7c9c55c57ea31152fe6cf9b1414206122b",
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Nurse ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Distinct [ true ] Output [ Name ]"
    },
    {
        "id": "94f862231cb34b83c8abf495c67223e01bafd1cfbf13d80f9f92c1a4cf11aac9",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Nurse ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Distinct [ true ] Output [ Name ]"
    },
    {
        "id": "2bf48cbc44f2562d37e1489eb5d6ac66766e70f1b935a7d59abd0acf6fc10658",
        "question": "Find the names of nurses who are nursing an undergoing treatment.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Nurse ] Output [ Name , EmployeeID ] ; #2 = Scan Table [ Undergoes ] Output [ AssistingNurse ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeID = #2.AssistingNurse ] Distinct [ true ] Output [ #1.Name ]"
    },
    {
        "id": "a444a9045b21f1a435605e98bf01a6d760d7da82435d06f5872c2da20471e7b0",
        "question": "Which nurses are in charge of patients undergoing treatments?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Nurse ] Output [ Name , EmployeeID ] ; #2 = Scan Table [ Undergoes ] Output [ AssistingNurse ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeID = #2.AssistingNurse ] Distinct [ true ] Output [ #1.Name ]"
    },
    {
        "id": "72f07240bd86eee43d4b3b3c4e7fa15614b44ae36487d8593709bc7b04c7ce62",
        "question": "List the names of all distinct medications, ordered in an alphabetical order.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Medication ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Distinct [ true ] Output [ Name ]"
    },
    {
        "id": "c845fd807f7304e74b549f1ae62f48eadc8150f8abed8640a6a7c0eec51ead5b",
        "question": "What is the alphabetically ordered list of all distinct medications?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Medication ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Distinct [ true ] Output [ Name ]"
    },
    {
        "id": "d29ed29f81a3aa314874f8a8d0f048b120eb7f7b9fbd08898e2f588e0eea4a79",
        "question": "What are the names of the physician who prescribed the highest dose?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Prescribes ] Output [ Dose , Physician ] ; #2 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Physician = #2.EmployeeID ] Output [ #2.Name , #1.Dose ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Dose DESC ] Output [ Dose , Name ]"
    },
    {
        "id": "be22ed98d933a94b441f50af608a46a8d10b2f204a0246fc185428e3688c26d0",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Prescribes ] Output [ Dose , Physician ] ; #2 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Physician = #2.EmployeeID ] Output [ #2.Name , #1.Dose ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Dose DESC ] Output [ Dose , Name ]"
    },
    {
        "id": "6376eb6fbe436672d85d963538631aa444b43a78159de5a2f489092bbe65a697",
        "question": "List the physicians' employee ids together with their primary affiliation departments' ids.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Affiliated_With ] Predicate [ PrimaryAffiliation = 1 ] Output [ PrimaryAffiliation , Department , Physician ]"
    },
    {
        "id": "a7b7a9d32ba7e591a509ef4623a9a0e6a1b819d3cda91c1ec4508cef9c216b38",
        "question": "What are each physician's employee id and department id primarily affiliated.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Affiliated_With ] Predicate [ PrimaryAffiliation = 1 ] Output [ PrimaryAffiliation , Department , Physician ]"
    },
    {
        "id": "3c4e8baefb716ff2bafe52da07fb03f5a1babad0bdb43310bf39df58ee1b8c15",
        "question": "List the names of departments where some physicians are primarily affiliated with.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Department ] Output [ Name , DepartmentID ] ; #2 = Scan Table [ Affiliated_With ] Predicate [ PrimaryAffiliation = 1 ] Output [ PrimaryAffiliation , Department ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DepartmentID = #2.Department ] Distinct [ true ] Output [ #1.Name ]"
    },
    {
        "id": "df1e14d8cecb6b8cd7685aff450b24d91a81a7f783b3f5e47ffa4ec43ab82798",
        "question": "What are the names of departments that have primarily affiliated physicians.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Department ] Output [ Name , DepartmentID ] ; #2 = Scan Table [ Affiliated_With ] Predicate [ PrimaryAffiliation = 1 ] Output [ PrimaryAffiliation , Department ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DepartmentID = #2.Department ] Distinct [ true ] Output [ #1.Name ]"
    },
    {
        "id": "ad6fe2d7fa49dc3ee4d7455b46a276be86201bfd3cac17818277915c7eb84f26",
        "question": "What nurses are on call with block floor 1 and block code 1? Tell me their names.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ On_Call ] Predicate [ BlockFloor = 1 AND BlockCode = 1 ] Output [ Nurse , BlockFloor , BlockCode ]"
    },
    {
        "id": "57e2c73c1d3eacefc899366f8e0954057c1e8f6607c4adff10c72c3ae8b9494e",
        "question": "Find the ids of the nurses who are on call in block floor 1 and block code 1.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ On_Call ] Predicate [ BlockFloor = 1 AND BlockCode = 1 ] Output [ Nurse , BlockFloor , BlockCode ]"
    },
    {
        "id": "5be0e3973fecd180cc5b8fc93c22532c1f59e361e8f1b6b3c02d25c90c456fbf",
        "question": "What are the highest cost, lowest cost and average cost of procedures?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Procedures ] Output [ Cost ] ; #2 = Aggregate [ #1 ] Output [ MAX(Cost) AS Max_Cost , AVG(Cost) AS Avg_Cost , MIN(Cost) AS Min_Cost ]"
    },
    {
        "id": "3e96ab7cec2826f7f31169f1ffe83c3a1d4f2946452df2caa61b26e5b896067a",
        "question": "Tell me the highest, lowest, and average cost of procedures.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Procedures ] Output [ Cost ] ; #2 = Aggregate [ #1 ] Output [ MAX(Cost) AS Max_Cost , AVG(Cost) AS Avg_Cost , MIN(Cost) AS Min_Cost ]"
    },
    {
        "id": "779f4f35e13bc6d2ac1f91da63feee8b5545f9203797c065bf88cb5727042110",
        "question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Procedures ] Output [ Cost , Name ] ; #2 = Sort [ #1 ] OrderBy [ Cost DESC ] Output [ Cost , Name ]"
    },
    {
        "id": "d6027bbf6d5fbacc5691bf12947adc5a8acccc64b65548286b8c2162b065257e",
        "question": "Sort the list of names and costs of all procedures in the descending order of cost.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Procedures ] Output [ Cost , Name ] ; #2 = Sort [ #1 ] OrderBy [ Cost DESC ] Output [ Cost , Name ]"
    },
    {
        "id": "2a4b93c7e7f3ec3da66745f90dac39132eea45545ef9fc61f1d18dd306b6e156",
        "question": "Find the three most expensive procedures.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Procedures ] Output [ Cost , Name ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ Cost ASC ] Output [ Cost , Name ]"
    },
    {
        "id": "eaeda1d9478963c5eaed565953af0f4bf34f654c68f94d089db73372fdc2ad33",
        "question": "What are the three most costly procedures?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Procedures ] Output [ Cost , Name ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ Cost ASC ] Output [ Cost , Name ]"
    },
    {
        "id": "2c3d8330d1ba31d896b74d69c490e1a263048c58fcecc8c3d0f7c5ac8e1bda29",
        "question": "Find the physicians who are trained in a procedure that costs more than 5000.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Procedures ] Predicate [ Cost > 5000.0 ] Output [ Code , Cost ] ; #2 = Scan Table [ Trained_In ] Output [ Treatment , Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Treatment ] Output [ #2.Physician ] ; #4 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Physician = #4.EmployeeID ] Output [ #4.Name ]"
    },
    {
        "id": "fbb543c0ed2067b1ad63e51828843ff13e6eb11f645458500eca46ab4d835a5d",
        "question": "Which physicians are trained in procedures that are more expensive than 5000?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Procedures ] Predicate [ Cost > 5000.0 ] Output [ Code , Cost ] ; #2 = Scan Table [ Trained_In ] Output [ Treatment , Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Treatment ] Output [ #2.Physician ] ; #4 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Physician = #4.EmployeeID ] Output [ #4.Name ]"
    },
    {
        "id": "a7fe39899ad727864cf797c88c3a84bf44b82c064062239eec069fd7d7f3273f",
        "question": "Find the physician who was trained in the most expensive procedure?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #2 = Scan Table [ Procedures ] Output [ Code , Cost ] ; #3 = Scan Table [ Trained_In ] Output [ Treatment , Physician ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Code = #3.Treatment ] Output [ #2.Cost , #3.Physician ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.EmployeeID = #4.Physician ] Output [ #4.Cost , #1.Name ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Cost DESC ] Output [ Cost , Name ]"
    },
    {
        "id": "be8fbdc5c50ec8ee72f1413cb943ed52f1ff4d5aa33da55392800280668efc3d",
        "question": "Which physician was trained in the procedure that costs the most.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #2 = Scan Table [ Procedures ] Output [ Code , Cost ] ; #3 = Scan Table [ Trained_In ] Output [ Treatment , Physician ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Code = #3.Treatment ] Output [ #2.Cost , #3.Physician ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.EmployeeID = #4.Physician ] Output [ #4.Cost , #1.Name ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Cost DESC ] Output [ Cost , Name ]"
    },
    {
        "id": "fd3c34b3b977b4b89f0cc399c19423a2e89b6f27562f8b629de807202cab84f4",
        "question": "What is the average cost of procedures that physician John Wen was trained in?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ] ; #2 = Scan Table [ Trained_In ] Output [ Treatment , Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeID = #2.Physician ] Output [ #2.Treatment ] ; #4 = Scan Table [ Procedures ] Output [ Code , Cost ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Treatment = #4.Code ] Output [ #4.Cost ] ; #6 = Aggregate [ #5 ] Output [ AVG(Cost) AS Avg_Cost ]"
    },
    {
        "id": "ddb4c333393cdc7c5410142cd816c479f186e0df28b1bbb468ee5206db3fa2d8",
        "question": "Compute the mean price of procedures physician John Wen was trained in.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ] ; #2 = Scan Table [ Trained_In ] Output [ Treatment , Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeID = #2.Physician ] Output [ #2.Treatment ] ; #4 = Scan Table [ Procedures ] Output [ Code , Cost ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Treatment = #4.Code ] Output [ #4.Cost ] ; #6 = Aggregate [ #5 ] Output [ AVG(Cost) AS Avg_Cost ]"
    },
    {
        "id": "5101ffff9d823b39c2b8a484c849f1521716a7b435e1cdfe46e348c93e17d572",
        "question": "Find the names of procedures which physician John Wen was trained in.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ] ; #2 = Scan Table [ Trained_In ] Output [ Treatment , Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeID = #2.Physician ] Output [ #2.Treatment ] ; #4 = Scan Table [ Procedures ] Output [ Code , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Treatment = #4.Code ] Output [ #4.Name ]"
    },
    {
        "id": "68859ce3636ee8ae252ccb9b9a61ec2e05ba52356e32e30048f7e22e3c7eb1eb",
        "question": "What are the names of procedures physician John Wen was trained in?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ] ; #2 = Scan Table [ Trained_In ] Output [ Treatment , Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeID = #2.Physician ] Output [ #2.Treatment ] ; #4 = Scan Table [ Procedures ] Output [ Code , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Treatment = #4.Code ] Output [ #4.Name ]"
    },
    {
        "id": "d8f83547840be22db91591ecdc5267faa68053956ee59787436f231c944e02e1",
        "question": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Procedures ] Predicate [ Cost > 1000.0 ] Output [ Cost , Name ] ; #2 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ] ; #3 = Scan Table [ Trained_In ] Output [ Treatment , Physician ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.EmployeeID = #3.Physician ] Output [ #3.Treatment ] ; #5 = Scan Table [ Procedures ] Output [ Code , Name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Treatment = #5.Code ] Output [ #5.Name ] ; #7 = Union [ #1 , #6 ] Output [ #1.Name ]"
    },
    {
        "id": "58adf68fae340f32172366b73a45f0086a75cd2ede5c33f8228b012010d02d6f",
        "question": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Procedures ] Predicate [ Cost > 1000.0 ] Output [ Cost , Name ] ; #2 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ] ; #3 = Scan Table [ Trained_In ] Output [ Treatment , Physician ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.EmployeeID = #3.Physician ] Output [ #3.Treatment ] ; #5 = Scan Table [ Procedures ] Output [ Code , Name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Treatment = #5.Code ] Output [ #5.Name ] ; #7 = Union [ #1 , #6 ] Output [ #1.Name ]"
    },
    {
        "id": "2c22973e518d0a8504db9e834732c67b068e8f28fbce3363cd079c3f4a514235",
        "question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Procedures ] Predicate [ Cost > 1000.0 ] Distinct [ true ] Output [ Cost , Name ] ; #2 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ] ; #3 = Scan Table [ Trained_In ] Output [ Treatment , Physician ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.EmployeeID = #3.Physician ] Output [ #3.Treatment ] ; #5 = Scan Table [ Procedures ] Output [ Code , Name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Treatment = #5.Code ] Output [ #5.Name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.Name = #6.Name ] Output [ #1.Name ]"
    },
    {
        "id": "f3043468c0fe328b7a578735ed737c169b1f04285ef58f2bf79e6a2790b6a179",
        "question": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Procedures ] Predicate [ Cost > 1000.0 ] Distinct [ true ] Output [ Cost , Name ] ; #2 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ] ; #3 = Scan Table [ Trained_In ] Output [ Treatment , Physician ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.EmployeeID = #3.Physician ] Output [ #3.Treatment ] ; #5 = Scan Table [ Procedures ] Output [ Code , Name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Treatment = #5.Code ] Output [ #5.Name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.Name = #6.Name ] Output [ #1.Name ]"
    },
    {
        "id": "2ea89bfd9794be47a621eb5c2f5ceffdff11e77b32b9a61cac5518b406e718d1",
        "question": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Procedures ] Predicate [ Cost < 5000.0 ] Distinct [ true ] Output [ Cost , Name ] ; #2 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ] ; #3 = Scan Table [ Trained_In ] Output [ Treatment , Physician ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.EmployeeID = #3.Physician ] Output [ #3.Treatment ] ; #5 = Scan Table [ Procedures ] Output [ Code , Name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Treatment = #5.Code ] Output [ #5.Name ] ; #7 = Intersect [ #1 , #6 ] Predicate [ #1.Name = #6.Name ] Output [ #1.Name ]"
    },
    {
        "id": "a43f1903a32eefa366cb821ad482787c15e181b556eaa406bb94f13b47aa38d4",
        "question": "What procedures cost less than 5000 and have John Wen as a trained physician?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Procedures ] Predicate [ Cost < 5000.0 ] Distinct [ true ] Output [ Cost , Name ] ; #2 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ] ; #3 = Scan Table [ Trained_In ] Output [ Treatment , Physician ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.EmployeeID = #3.Physician ] Output [ #3.Treatment ] ; #5 = Scan Table [ Procedures ] Output [ Code , Name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Treatment = #5.Code ] Output [ #5.Name ] ; #7 = Intersect [ #1 , #6 ] Predicate [ #1.Name = #6.Name ] Output [ #1.Name ]"
    },
    {
        "id": "c5d9f87322d12683bb9a6062cecc2c8537d2321ef7a3695c3644ae38b0573300",
        "question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Department ] Predicate [ Name = 'Surgery' ] Output [ Name , DepartmentID ] ; #2 = Scan Table [ Affiliated_With ] Output [ Department , Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DepartmentID = #2.Department ] Output [ #2.Physician ] ; #4 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Physician = #4.EmployeeID ] Distinct [ true ] Output [ #4.Name ] ; #6 = Scan Table [ Department ] Predicate [ Name = 'Psychiatry' ] Output [ Name , DepartmentID ] ; #7 = Scan Table [ Affiliated_With ] Output [ Department , Physician ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.DepartmentID = #7.Department ] Output [ #7.Physician ] ; #9 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.Physician = #9.EmployeeID ] Output [ #9.Name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.Name = #10.Name ] Output [ #5.Name ]"
    },
    {
        "id": "45955c1789f25bfcee81a174c8cebbbc7ef306716210c38f58b187f7d6059c52",
        "question": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Department ] Predicate [ Name = 'Surgery' ] Output [ Name , DepartmentID ] ; #2 = Scan Table [ Affiliated_With ] Output [ Department , Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DepartmentID = #2.Department ] Output [ #2.Physician ] ; #4 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Physician = #4.EmployeeID ] Distinct [ true ] Output [ #4.Name ] ; #6 = Scan Table [ Department ] Predicate [ Name = 'Psychiatry' ] Output [ Name , DepartmentID ] ; #7 = Scan Table [ Affiliated_With ] Output [ Department , Physician ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.DepartmentID = #7.Department ] Output [ #7.Physician ] ; #9 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.Physician = #9.EmployeeID ] Output [ #9.Name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.Name = #10.Name ] Output [ #5.Name ]"
    },
    {
        "id": "c29f9afb2b750425661540854a1e8d617a834b07fbe48976b016d43f85b4633d",
        "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Department ] Predicate [ Name = 'Psychiatry' OR Name = 'Surgery' ] Output [ Name , DepartmentID ] ; #2 = Scan Table [ Affiliated_With ] Output [ Department , Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DepartmentID = #2.Department ] Output [ #2.Physician ] ; #4 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Physician = #4.EmployeeID ] Output [ #4.Name ]"
    },
    {
        "id": "5bf2b1cbf286581ce7be83c8f75d68a040e096428e3c9eefa6f3523ae28b3255",
        "question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Department ] Predicate [ Name = 'Psychiatry' OR Name = 'Surgery' ] Output [ Name , DepartmentID ] ; #2 = Scan Table [ Affiliated_With ] Output [ Department , Physician ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DepartmentID = #2.Department ] Output [ #2.Physician ] ; #4 = Scan Table [ Physician ] Output [ Name , EmployeeID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Physician = #4.EmployeeID ] Output [ #4.Name ]"
    },
    {
        "id": "33aad0491ee27726bdbeae9e269588daffc5252b04fc785a275a118220ac1896",
        "question": "Find the names of patients who are not using the medication of Procrastin-X.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Patient ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ Medication ] Predicate [ Name = 'Procrastin-X' ] Output [ Code , Name ] ; #3 = Scan Table [ Prescribes ] Output [ Patient , Medication ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Code = #3.Medication ] Output [ #3.Patient ] ; #5 = Scan Table [ Patient ] Output [ SSN , Name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Patient = #5.SSN ] Output [ #5.Name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.Name = #6.Name ] Output [ #1.Name ]"
    },
    {
        "id": "eee8d94c034df5496999344976a53f32ce3eef203a52bf369fc0b23334241883",
        "question": "What are the names of patients who are not taking the medication of Procrastin-X.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Patient ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ Medication ] Predicate [ Name = 'Procrastin-X' ] Output [ Code , Name ] ; #3 = Scan Table [ Prescribes ] Output [ Patient , Medication ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Code = #3.Medication ] Output [ #3.Patient ] ; #5 = Scan Table [ Patient ] Output [ SSN , Name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Patient = #5.SSN ] Output [ #5.Name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.Name = #6.Name ] Output [ #1.Name ]"
    },
    {
        "id": "8b47a26c65457b19fc4b708a5e4147228aa8c03f586579efd160a65f9da5c078",
        "question": "Find the number of patients who are not using the medication of Procrastin-X.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Patient ] Output [ SSN ] ; #2 = Scan Table [ Medication ] Predicate [ Name = 'Procrastin-X' ] Output [ Code , Name ] ; #3 = Scan Table [ Prescribes ] Output [ Patient , Medication ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Code = #3.Medication ] Output [ #3.Patient ] ; #5 = Except [ #1 , #4 ] Predicate [ #4.Patient = #1.SSN ] Output [ 1 AS One ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7dac09f2aae425ffbe111a25b54a75e598d6279a79533f859460e2bc024dcb07",
        "question": "How many patients are not using Procrastin-X as medication?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Patient ] Output [ SSN ] ; #2 = Scan Table [ Medication ] Predicate [ Name = 'Procrastin-X' ] Output [ Code , Name ] ; #3 = Scan Table [ Prescribes ] Output [ Patient , Medication ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Code = #3.Medication ] Output [ #3.Patient ] ; #5 = Except [ #1 , #4 ] Predicate [ #4.Patient = #1.SSN ] Output [ 1 AS One ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "16aa13dd14b85bd6790d16cb196fa4f19be5748f04bbb255d7316ddc87a48b02",
        "question": "How many appointments are there?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Appointment ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0e1a67b3af8eeff28d8b8242c5665b7e99bff3b69727c87ce96d5835d7631cb0",
        "question": "Count how many appointments have been made in total.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Appointment ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a857eac938b019834045950f1bed17d31833b80c5599b3b1da81500565b5a254",
        "question": "Find the names of nurses who are on call.",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Nurse ] Output [ Name , EmployeeID ] ; #2 = Scan Table [ On_Call ] Output [ Nurse ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeID = #2.Nurse ] Distinct [ true ] Output [ #1.Name ]"
    },
    {
        "id": "748243f825c68ec9594687ee4035023e1fdc2ff83a4e906b452994685e3f5f25",
        "question": "What are the distinct names of nurses on call?",
        "parsing_tree": "hospital_1 | #1 = Scan Table [ Nurse ] Output [ Name , EmployeeID ] ; #2 = Scan Table [ On_Call ] Output [ Nurse ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeID = #2.Nurse ] Distinct [ true ] Output [ #1.Name ]"
    },
    {
        "id": "c23face4df2e3d1f8e84930e717075ea7ea8d10aa8158f3eecd3700112554a47",
        "question": "How many ships are there?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "711ad3d83012bf919f9c07ba381f3081fca79a2e470cf3f318be1f08f6f802e5",
        "question": "What is the number of ships?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "bb07ad1bd435ba47fad69d8cf1c2f3e9d1537618554a347c642c793f1e3729a0",
        "question": "List the name of ships in ascending order of tonnage.",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Tonnage , Name ] ; #2 = Sort [ #1 ] OrderBy [ Tonnage ASC ] Output [ Tonnage , Name ]"
    },
    {
        "id": "a5ce8142aa75c95ebe8b69681d976fa963c1d1dcd7897780849c71dbb401752b",
        "question": "what are the names of the ships ordered by ascending tonnage?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Tonnage , Name ] ; #2 = Sort [ #1 ] OrderBy [ Tonnage ASC ] Output [ Tonnage , Name ]"
    },
    {
        "id": "000c385dadc58052f2cd63c510dcf791d5f30687f368fc13440f293a9e8ce84f",
        "question": "What are the type and nationality of ships?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Nationality , Type ]"
    },
    {
        "id": "d3dc58e71ce9e8eb271531ff09c2182bfcd2e74925b14b0608e3ab328a356c85",
        "question": "What are the types and nationalities of every ship?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Nationality , Type ]"
    },
    {
        "id": "ee286d8abb3c7342a0e156a57975dc138b8f4aeeb4a262a80b7a97c23384230b",
        "question": "List the name of ships whose nationality is not \"United States\".",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Predicate [ Nationality <> 'United States' ] Output [ Nationality , Name ]"
    },
    {
        "id": "fa4e6efca9826211e8d94e93ca2a644fdd5b4687eb7fb54d68526df6951c3c59",
        "question": "What are the names of the ships that are not from the United States?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Predicate [ Nationality <> 'United States' ] Output [ Nationality , Name ]"
    },
    {
        "id": "40020f9e6146aee6e4ee7980d7e1eb442222189f3a3e18e374f11c5722b4c899",
        "question": "Show the name of ships whose nationality is either United States or United Kingdom.",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Predicate [ Nationality = 'United Kingdom' OR Nationality = 'United States' ] Output [ Nationality , Name ]"
    },
    {
        "id": "dc7848f2b5fd8d9a7bfd55cbc7efc5308bcd30afccbebe5cfffe5d66e7d64672",
        "question": "What are the names of the ships  that are from either the US or the UK?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Predicate [ Nationality = 'United Kingdom' OR Nationality = 'United States' ] Output [ Nationality , Name ]"
    },
    {
        "id": "62630fe4ae052482f39468b493c048b46bfe8040fc52cf0a5980d4ebaa44d86d",
        "question": "What is the name of the ship with the largest tonnage?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Tonnage , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Tonnage DESC ] Output [ Tonnage , Name ]"
    },
    {
        "id": "dcae0983bd8dcc075c835f1a7d198ee3cd0930fbb5829c2b36d1a6ebcf195da5",
        "question": "What is the ship with the largest amount of tonnage called?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Tonnage , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Tonnage DESC ] Output [ Tonnage , Name ]"
    },
    {
        "id": "9ad641afa3b00776b307aa9edaf73486ceeba86916be5d4bce0f6563a1772e3a",
        "question": "Show different types of ships and the number of ships of each type.",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Type ] ; #2 = Aggregate [ #1 ] GroupBy [ Type ] Output [ countstar AS Count_Star , Type ]"
    },
    {
        "id": "5c5ae3150e36c11faf79d73a9d18ca541e60cbe4e1929ea148cb9a517b8e1e0f",
        "question": "For each type, how many ships are there?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Type ] ; #2 = Aggregate [ #1 ] GroupBy [ Type ] Output [ countstar AS Count_Star , Type ]"
    },
    {
        "id": "db5e4f4d2de9ece04245bb421097ffcfa3d4ad61954e91bcb22a2da191289238",
        "question": "Please show the most common type of ships.",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Type ] ; #2 = Aggregate [ #1 ] GroupBy [ Type ] Output [ countstar AS Count_Star , Type ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Type ]"
    },
    {
        "id": "cba0509d384494edd49a273c546fb11ba429848b8639b7955afda0e55a0b717e",
        "question": "What is the most common type of ships?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Type ] ; #2 = Aggregate [ #1 ] GroupBy [ Type ] Output [ countstar AS Count_Star , Type ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Type ]"
    },
    {
        "id": "d0e665fe1a27a3ec5ceeaf454af2ac71b630085a159838423304e139c3ca9ef9",
        "question": "List the nations that have more than two ships.",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Nationality ] ; #2 = Aggregate [ #1 ] GroupBy [ Nationality ] Output [ Nationality , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Nationality ]"
    },
    {
        "id": "a0bdd2e05d1c11a70c3929b159bd27ec5e70df05e3fd8f15eb696f430908f398",
        "question": "What are the nations that have more than two ships?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Nationality ] ; #2 = Aggregate [ #1 ] GroupBy [ Nationality ] Output [ Nationality , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Nationality ]"
    },
    {
        "id": "54ac0c39bb0baaf08d02f8c0073e5e1ab2b57d0f4c7302558a50310a3a2ea1c8",
        "question": "Show different types of ships and the average tonnage of ships of each type.",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Type , Tonnage ] ; #2 = Aggregate [ #1 ] GroupBy [ Type ] Output [ AVG(Tonnage) AS Avg_Tonnage , Type ]"
    },
    {
        "id": "722f34196176b96ff04d3856502bb1ed89a7a2f2aed8578536136ef85373496d",
        "question": "For each type, what is the average tonnage?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Type , Tonnage ] ; #2 = Aggregate [ #1 ] GroupBy [ Type ] Output [ AVG(Tonnage) AS Avg_Tonnage , Type ]"
    },
    {
        "id": "d324fc415900ca94da0e1c6011489f446c20b8e4b4136f265d3dd8c40dc13b7e",
        "question": "Show codes and fates of missions, and names of ships involved.",
        "parsing_tree": "ship_mission | #1 = Scan Table [ mission ] Output [ Code , Ship_ID , Fate ] ; #2 = Scan Table [ ship ] Output [ Name , Ship_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Ship_ID = #2.Ship_ID ] Output [ #2.Name , #1.Fate , #1.Code ]"
    },
    {
        "id": "c0fad56627b2d7e2533ca2429450cbb93aab33bbb2bcf7eae02a9ee07264df1e",
        "question": "What are the mission codes, fates, and names of the ships involved?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ mission ] Output [ Code , Ship_ID , Fate ] ; #2 = Scan Table [ ship ] Output [ Name , Ship_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Ship_ID = #2.Ship_ID ] Output [ #2.Name , #1.Fate , #1.Code ]"
    },
    {
        "id": "9a74f3e7755c793865bbf1215e404e31ca54a215bf353e92cb80e26729fedf11",
        "question": "Show names of ships involved in a mission launched after 1928.",
        "parsing_tree": "ship_mission | #1 = Scan Table [ mission ] Predicate [ Launched_Year > 1928 ] Output [ Launched_Year , Ship_ID ] ; #2 = Scan Table [ ship ] Output [ Name , Ship_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Ship_ID = #2.Ship_ID ] Output [ #2.Name ]"
    },
    {
        "id": "89e172d66f8e780420ad1c250aa7c74f3fa4455ba64b69c53a11fbb521d278e0",
        "question": "What are the names of ships that were involved in a mission launched after 1928?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ mission ] Predicate [ Launched_Year > 1928 ] Output [ Launched_Year , Ship_ID ] ; #2 = Scan Table [ ship ] Output [ Name , Ship_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Ship_ID = #2.Ship_ID ] Output [ #2.Name ]"
    },
    {
        "id": "5301eb6b25043fb87413b1f8c9af541a7256d8213c335d58d0b96cdba57afe3e",
        "question": "Show the distinct fate of missions that involve ships with nationality \"United States\"",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Predicate [ Nationality = 'United States' ] Output [ Nationality , Ship_ID ] ; #2 = Scan Table [ mission ] Output [ Ship_ID , Fate ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Ship_ID = #2.Ship_ID ] Distinct [ true ] Output [ #2.Fate ]"
    },
    {
        "id": "211b5e2759dd85f17118200b27133ef82e525c8b3b0f881c733219ae266230bc",
        "question": "What are the different fates of the mission that involved ships from the United States?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Predicate [ Nationality = 'United States' ] Output [ Nationality , Ship_ID ] ; #2 = Scan Table [ mission ] Output [ Ship_ID , Fate ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Ship_ID = #2.Ship_ID ] Distinct [ true ] Output [ #2.Fate ]"
    },
    {
        "id": "d46cb0098e08bc26c7e787103da9fde95021f5ad3b24dba01ca6e16a9ddd2894",
        "question": "List the name of ships that are not involved in any mission",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Name , Ship_ID ] ; #2 = Scan Table [ mission ] Output [ Ship_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Ship_ID IS NULL OR #1.Ship_ID = #2.Ship_ID ] Output [ #1.Name ]"
    },
    {
        "id": "b87004cbebc0145fec5f181181d3d6743457a1d79f42dba7dff500c8f2986445",
        "question": "What are the names of the ships that are not involved in any missions?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Output [ Name , Ship_ID ] ; #2 = Scan Table [ mission ] Output [ Ship_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Ship_ID IS NULL OR #1.Ship_ID = #2.Ship_ID ] Output [ #1.Name ]"
    },
    {
        "id": "73277fec3117a62006ebfb0e02f58ee653eb3a3b62c71a948a98c8c7c89d45ca",
        "question": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Predicate [ Tonnage > 6000 ] Distinct [ true ] Output [ Type , Tonnage ] ; #2 = Scan Table [ ship ] Predicate [ Tonnage < 4000 ] Output [ Type , Tonnage ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Type = #2.Type ] Output [ #1.Type ]"
    },
    {
        "id": "01e7ea6b21de834a6612e27a582fbce5e511225497d0b7b02be859719f0d61be",
        "question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?",
        "parsing_tree": "ship_mission | #1 = Scan Table [ ship ] Predicate [ Tonnage > 6000 ] Distinct [ true ] Output [ Type , Tonnage ] ; #2 = Scan Table [ ship ] Predicate [ Tonnage < 4000 ] Output [ Type , Tonnage ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Type = #2.Type ] Output [ #1.Type ]"
    },
    {
        "id": "c18c945b135f11707cb92f6e2f7b5ca44f7dd172454e0d8e8815c4d98f048fef",
        "question": "Find the number of students in total.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "bc1a1d57e919a92321be40d0799b6cd0892225d6825a7f956753ae4ea2fcc39d",
        "question": "How many students are there?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "24483a6a3735be0f2e9e6ae19007b657b16be937bff59f194053c1756505e9a8",
        "question": "Find the last names of students studying in room 111.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Classroom = 111 ] Output [ Classroom , LastName ]"
    },
    {
        "id": "4aa9a66ac73238650381872cf8bde6d2995267d4c3a1b5edfd0c5e789ec7dcae",
        "question": "What are the last names of students in room 111?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Classroom = 111 ] Output [ Classroom , LastName ]"
    },
    {
        "id": "09bebf972ada939ef1caf662e05cb2d8931750d94ee7632d20bbe1202ebdf7c0",
        "question": "Find the first names of students studying in room 108.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Classroom = 108 ] Output [ Classroom , FirstName ]"
    },
    {
        "id": "2fb9869359681ea34993290f1baa6e605e05534534bd62630675d47376e70865",
        "question": "What are the first names of students in room 108?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Classroom = 108 ] Output [ Classroom , FirstName ]"
    },
    {
        "id": "8f8939a5cb777c06c42f84fc573f9ea394a9d99ab3dd09bb90104d7bfaf5dadf",
        "question": "What are the first names of students studying in room 107?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Classroom = 107 ] Distinct [ true ] Output [ FirstName ]"
    },
    {
        "id": "0103e6cc6b22fe4f323276a44ff4a979c0b0151cc0acdfef3b12c99aa43d98dd",
        "question": "List the first names of all the students in room 107.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Classroom = 107 ] Distinct [ true ] Output [ FirstName ]"
    },
    {
        "id": "11196526d55d203b1fd011194ce43293267d31b83b41e88213f2ad13f1b2d2cc",
        "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Distinct [ true ] Output [ Grade , Classroom ]"
    },
    {
        "id": "67b23740ef6d17bf130d141ec65babc4a95970da35cdcc076091296a75795df0",
        "question": "What are the grade number and classroom number of each class in the list?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Distinct [ true ] Output [ Grade , Classroom ]"
    },
    {
        "id": "764f534cc2420a8986c4c153509ad7d7d88602ebf64031a08e2c5d94505e234b",
        "question": "Which grade is studying in classroom 103?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Classroom = 103 ] Distinct [ true ] Output [ Grade ]"
    },
    {
        "id": "32bb2c9a46dfbab073c939d8880af9725b2ac5dc183e1a5fa3fd944336dd7060",
        "question": "Find the grade taught in classroom 103.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Classroom = 103 ] Distinct [ true ] Output [ Grade ]"
    },
    {
        "id": "2350d8ff93ebd4e900d2dafac406acc73606a0f6c6a5c764325c68c1d916db6e",
        "question": "Find the grade studying in room 105.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Classroom = 105 ] Distinct [ true ] Output [ Grade ]"
    },
    {
        "id": "3930fed8a8c51836d6e50368e87748b78a16fef7a72d82f4100164d092a60ace",
        "question": "Which grade is studying in room 105?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Classroom = 105 ] Distinct [ true ] Output [ Grade ]"
    },
    {
        "id": "47d06d91b50b82e68f5326c8145572f84466aabb1fdd7bd7162b9d20eca091c9",
        "question": "Which classrooms are used by grade 4?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 4 ] Distinct [ true ] Output [ Classroom ]"
    },
    {
        "id": "359586b2afe1e9793046db56caf457d76d6d251fd649f9884bf644e28a617e5b",
        "question": "Find the classrooms in which grade 4 is studying.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 4 ] Distinct [ true ] Output [ Classroom ]"
    },
    {
        "id": "04b8b9dc7718e2dbd1f0f78a2e503ea5be5ae36c6397fcc65c8554df5ca9fd0b",
        "question": "Which classrooms are used by grade 5?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 5 ] Distinct [ true ] Output [ Classroom ]"
    },
    {
        "id": "5f9760502969aa845ad1249eb28d89ed748eddfbca0dfc061c04bca17392200c",
        "question": "Show me the classrooms grade 5 is using.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 5 ] Distinct [ true ] Output [ Classroom ]"
    },
    {
        "id": "f2e14c2716277f5140dc502b2203d3907f47ac38f88d390bcba370f7908ba2de",
        "question": "Find the last names of the teachers that teach fifth grade.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 5 ] Output [ Grade , Classroom ] ; #2 = Scan Table [ teachers ] Output [ Classroom , LastName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Distinct [ true ] Output [ #2.LastName ]"
    },
    {
        "id": "92fad9ac4b8d1278d8c60c4dc6c7cfb5087cde2b9ab58fa7ffd305dccab1b470",
        "question": "what are the last names of the teachers who teach grade 5?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 5 ] Output [ Grade , Classroom ] ; #2 = Scan Table [ teachers ] Output [ Classroom , LastName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Distinct [ true ] Output [ #2.LastName ]"
    },
    {
        "id": "7ac1d0c1d1c83e65345961045c7a417cc17cb5dbae4a306146a179aefce80b2d",
        "question": "Find the first names of the teachers that teach first grade.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 1 ] Output [ Grade , Classroom ] ; #2 = Scan Table [ teachers ] Output [ Classroom , FirstName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Distinct [ true ] Output [ #2.FirstName ]"
    },
    {
        "id": "aa21e15e4503a12ae7593fe315654ccb63cd87ca675488007e4045cded025d33",
        "question": "What are the first names of the teachers who teach grade 1?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 1 ] Output [ Grade , Classroom ] ; #2 = Scan Table [ teachers ] Output [ Classroom , FirstName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Distinct [ true ] Output [ #2.FirstName ]"
    },
    {
        "id": "c0566af3455e7091384d7914aaf079686f17c84ac5224e33fefe447bd34e48dd",
        "question": "Find the first names of all the teachers that teach in classroom 110.",
        "parsing_tree": "student_1 | #1 = Scan Table [ teachers ] Predicate [ Classroom = 110 ] Output [ Classroom , FirstName ]"
    },
    {
        "id": "80a3aafb10510ddaa6b38521518be51ef8676554eef49b2f9ea064095955d5e8",
        "question": "Which teachers teach in classroom 110? Give me their first names.",
        "parsing_tree": "student_1 | #1 = Scan Table [ teachers ] Predicate [ Classroom = 110 ] Output [ Classroom , FirstName ]"
    },
    {
        "id": "9b4a2fcd4a89b846ea2bd53e299fb514a5e0127b36f6289bf72bdffeb1a17f0c",
        "question": "Find the last names of teachers teaching in classroom 109.",
        "parsing_tree": "student_1 | #1 = Scan Table [ teachers ] Predicate [ Classroom = 109 ] Output [ Classroom , LastName ]"
    },
    {
        "id": "7a198aadedf03de3c04668624a85109fe25c513e2549861098edcca1159e0067",
        "question": "Which teachers teach in classroom 109? Give me their last names.",
        "parsing_tree": "student_1 | #1 = Scan Table [ teachers ] Predicate [ Classroom = 109 ] Output [ Classroom , LastName ]"
    },
    {
        "id": "72015ddc68921991a3edcf7f73ae386f9379e188b46421bc207d74253058415e",
        "question": "Report the first name and last name of all the teachers.",
        "parsing_tree": "student_1 | #1 = Scan Table [ teachers ] Output [ LastName , FirstName ]"
    },
    {
        "id": "c34f90b80d4335ca13fd6a46baa84d0dd165739994b9d89302cd364398be5904",
        "question": "What are the first name and last name of all the teachers?",
        "parsing_tree": "student_1 | #1 = Scan Table [ teachers ] Output [ LastName , FirstName ]"
    },
    {
        "id": "36d05e098126fabdd1734788f954ad11c61909a941b42a6eb3dd450b8fb240e0",
        "question": "Report the first name and last name of all the students.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Output [ LastName , FirstName ]"
    },
    {
        "id": "4d4333ea51ec020786a0291f1f20e1e7d729ef320ff32b6fe1637365d9644432",
        "question": "Show each student's first name and last name.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Output [ LastName , FirstName ]"
    },
    {
        "id": "06fc96cbf3c355090c8b4ad1544063edb05ff58ef1470a4b34543e0a6e11ff61",
        "question": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "parsing_tree": "student_1 | #1 = Scan Table [ teachers ] Predicate [ FirstName = 'OTHA' AND LastName = 'MOYER' ] Output [ LastName , Classroom , FirstName ] ; #2 = Scan Table [ list ] Output [ Classroom , LastName , FirstName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Output [ #2.FirstName , #2.LastName ]"
    },
    {
        "id": "4f8ae68923e6945965050ea4d7f185c5de02bcbdd6e40757ddbc5f9facf12212",
        "question": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.",
        "parsing_tree": "student_1 | #1 = Scan Table [ teachers ] Predicate [ FirstName = 'OTHA' AND LastName = 'MOYER' ] Output [ LastName , Classroom , FirstName ] ; #2 = Scan Table [ list ] Output [ Classroom , LastName , FirstName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Output [ #2.FirstName , #2.LastName ]"
    },
    {
        "id": "8b860a88d15c3a02d29d7616b7ce3e1a6be0b701d40641a39caa357b8bfd6233",
        "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ FirstName = 'EVELINA' AND LastName = 'BROMLEY' ] Output [ LastName , Classroom , FirstName ] ; #2 = Scan Table [ teachers ] Output [ Classroom , LastName , FirstName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Output [ #2.FirstName , #2.LastName ]"
    },
    {
        "id": "1bc89630b36cd0ce601b99308e74aa2350e14ae2c5b783e8bde5cd26c31125fd",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ FirstName = 'EVELINA' AND LastName = 'BROMLEY' ] Output [ LastName , Classroom , FirstName ] ; #2 = Scan Table [ teachers ] Output [ Classroom , LastName , FirstName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Output [ #2.FirstName , #2.LastName ]"
    },
    {
        "id": "487688df14bfccbc6098b5039b69edb1d256a97151c164ddacfb791fd592890f",
        "question": "How many students does LORIA ONDERSMA teaches?",
        "parsing_tree": "student_1 | #1 = Scan Table [ teachers ] Predicate [ FirstName = 'LORIA' AND LastName = 'ONDERSMA' ] Output [ LastName , Classroom , FirstName ] ; #2 = Scan Table [ list ] Output [ Classroom ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Output [ #1.LastName , #1.Classroom , #1.FirstName ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7e3c5833ada69532adbab3540b87e932eee1ea3dd83637f797cf312e2cfba12a",
        "question": "Count the number of students the teacher LORIA ONDERSMA teaches.",
        "parsing_tree": "student_1 | #1 = Scan Table [ teachers ] Predicate [ FirstName = 'LORIA' AND LastName = 'ONDERSMA' ] Output [ LastName , Classroom , FirstName ] ; #2 = Scan Table [ list ] Output [ Classroom ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Output [ #1.LastName , #1.Classroom , #1.FirstName ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ae569b494326879f9e28a4dba55524d51beec69ef76189245a3c74e3d92bf35e",
        "question": "How many students does KAWA GORDON teaches?",
        "parsing_tree": "student_1 | #1 = Scan Table [ teachers ] Predicate [ FirstName = 'GORDON' AND LastName = 'KAWA' ] Output [ LastName , Classroom , FirstName ] ; #2 = Scan Table [ list ] Output [ Classroom ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Output [ #1.LastName , #1.Classroom , #1.FirstName ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9f047fd08dcb8e59ad6b0a995083060c11c3f346a38079768e04707867be889f",
        "question": "Find the number of students taught by the teacher KAWA GORDON.",
        "parsing_tree": "student_1 | #1 = Scan Table [ teachers ] Predicate [ FirstName = 'GORDON' AND LastName = 'KAWA' ] Output [ LastName , Classroom , FirstName ] ; #2 = Scan Table [ list ] Output [ Classroom ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Output [ #1.LastName , #1.Classroom , #1.FirstName ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "12ea73c545879cd3d737691a3404b7acc616202a31793599d48aa57608519dd3",
        "question": "Find the number of students taught by TARRING LEIA.",
        "parsing_tree": "student_1 | #1 = Scan Table [ teachers ] Predicate [ FirstName = 'LEIA' AND LastName = 'TARRING' ] Output [ LastName , Classroom , FirstName ] ; #2 = Scan Table [ list ] Output [ Classroom ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Output [ #1.LastName , #1.Classroom , #1.FirstName ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "891f97d31c0c10fe6e370d5455cd0736a1ff058d270a4d79c5b9fc5c9c6d5687",
        "question": "How many students are taught by teacher TARRING LEIA?",
        "parsing_tree": "student_1 | #1 = Scan Table [ teachers ] Predicate [ FirstName = 'LEIA' AND LastName = 'TARRING' ] Output [ LastName , Classroom , FirstName ] ; #2 = Scan Table [ list ] Output [ Classroom ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Output [ #1.LastName , #1.Classroom , #1.FirstName ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b663ce4f2ff637a44b4f250a558274741080405a1d7a39cdeeaecc274a396512",
        "question": "How many teachers does the student named CHRISSY NABOZNY have?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ FirstName = 'CHRISSY' AND LastName = 'NABOZNY' ] Output [ LastName , Classroom , FirstName ] ; #2 = Scan Table [ teachers ] Output [ Classroom ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Output [ #1.LastName , #1.Classroom , #1.FirstName ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b40824d71341def2c04f3e35f8f4f0ca6e6b2ddea80c6529cff449b56d1063fe",
        "question": "Find the number of teachers who teach the student called CHRISSY NABOZNY.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ FirstName = 'CHRISSY' AND LastName = 'NABOZNY' ] Output [ LastName , Classroom , FirstName ] ; #2 = Scan Table [ teachers ] Output [ Classroom ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Output [ #1.LastName , #1.Classroom , #1.FirstName ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "bfd7fa1cb1929ca1e38f9968947234f6fd200f92b664df2ac4aaf9000140ea4c",
        "question": "How many teachers does the student named MADLOCK RAY have?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ FirstName = 'RAY' AND LastName = 'MADLOCK' ] Output [ LastName , Classroom , FirstName ] ; #2 = Scan Table [ teachers ] Output [ Classroom ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Output [ #1.LastName , #1.Classroom , #1.FirstName ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "44b1c62c903571ff6a23e3c7ad3e44ee9911983ca72f5d53fcb67c39272c155e",
        "question": "Find the number of teachers who teach the student called MADLOCK RAY.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ FirstName = 'RAY' AND LastName = 'MADLOCK' ] Output [ LastName , Classroom , FirstName ] ; #2 = Scan Table [ teachers ] Output [ Classroom ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Output [ #1.LastName , #1.Classroom , #1.FirstName ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b18ee415b5fea343ff8879b10f746e83ab61920249d92bcc3e7de9d34b0e3630",
        "question": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 1 ] Output [ Grade , Classroom , LastName , FirstName ] ; #2 = Scan Table [ teachers ] Output [ Classroom ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.Classroom = #1.Classroom ] Output [ #1.FirstName , #1.LastName ] ; #4 = Scan Table [ teachers ] Predicate [ FirstName = 'OTHA' AND LastName = 'MOYER' ] Output [ LastName , Classroom , FirstName ] ; #5 = Scan Table [ list ] Output [ Classroom , LastName , FirstName ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Classroom = #5.Classroom ] Output [ #5.FirstName , #5.LastName ] ; #7 = Except [ #3 , #6 ] Predicate [ #3.FirstName = #6.FirstName ] Output [ #3.LastName , #3.FirstName ]"
    },
    {
        "id": "eb966ad7b7375d4cad5b40d3c67f3090a949c0c8de8eebdf8514a70fbb10cf13",
        "question": "What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 1 ] Output [ Grade , Classroom , LastName , FirstName ] ; #2 = Scan Table [ teachers ] Output [ Classroom ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.Classroom = #1.Classroom ] Output [ #1.FirstName , #1.LastName ] ; #4 = Scan Table [ teachers ] Predicate [ FirstName = 'OTHA' AND LastName = 'MOYER' ] Output [ LastName , Classroom , FirstName ] ; #5 = Scan Table [ list ] Output [ Classroom , LastName , FirstName ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Classroom = #5.Classroom ] Output [ #5.FirstName , #5.LastName ] ; #7 = Except [ #3 , #6 ] Predicate [ #3.FirstName = #6.FirstName ] Output [ #3.LastName , #3.FirstName ]"
    },
    {
        "id": "2b91de249646c8d3bff676ec75de27e6517020db8da5e3efe57a38fe6dcfd1df",
        "question": "Find the last names of the students in third grade that are not taught by COVIN JEROME.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 3 ] Output [ Classroom , LastName , Grade ] ; #2 = Scan Table [ teachers ] Predicate [ FirstName <> 'COVIN' AND LastName <> 'JEROME' ] Output [ LastName , Classroom , FirstName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Distinct [ true ] Output [ #1.LastName ]"
    },
    {
        "id": "c496c0e375e81eb001db4426b15c3fbe125aca6a0349eb1ba1d5dc378c7356ff",
        "question": "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 3 ] Output [ Classroom , LastName , Grade ] ; #2 = Scan Table [ teachers ] Predicate [ FirstName <> 'COVIN' AND LastName <> 'JEROME' ] Output [ LastName , Classroom , FirstName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Classroom = #2.Classroom ] Distinct [ true ] Output [ #1.LastName ]"
    },
    {
        "id": "979b281323be950fe6cbc1982f6e3084decf8f3c8ecc41baa9b024251e75f36b",
        "question": "For each classroom, report the classroom number and the number of grades using it.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Distinct [ true ] Output [ Grade , Classroom ] ; #2 = Aggregate [ #1 ] GroupBy [ Classroom ] Output [ COUNT(DISTINCT Grade) AS Count_Dist_Grade , Classroom ]"
    },
    {
        "id": "15c692df029395b933bb6da0b1c017d24b8e39216a75acc338b6748357e45ce3",
        "question": "For each classroom, show the classroom number and count the number of distinct grades that use the room.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Distinct [ true ] Output [ Grade , Classroom ] ; #2 = Aggregate [ #1 ] GroupBy [ Classroom ] Output [ COUNT(DISTINCT Grade) AS Count_Dist_Grade , Classroom ]"
    },
    {
        "id": "73b04c5551a0975f3ed0bf0ffd82ddeaadb852170a535b691d86ea6405b9f60e",
        "question": "Which classroom has the most students?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Output [ Classroom ] ; #2 = Aggregate [ #1 ] GroupBy [ Classroom ] Output [ countstar AS Count_Star , Classroom ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Classroom ]"
    },
    {
        "id": "c0044315cfb084ab8693a457a5533091c759b7195c2e576d60505514a0908191",
        "question": "Find the classroom that the most students use.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Output [ Classroom ] ; #2 = Aggregate [ #1 ] GroupBy [ Classroom ] Output [ countstar AS Count_Star , Classroom ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Classroom ]"
    },
    {
        "id": "48540594dea444eae0db4ad473a0756a9810e924ab2b0c65bfa2c97a92bbc3b2",
        "question": "Report the number of students in each classroom.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Output [ Classroom ] ; #2 = Aggregate [ #1 ] GroupBy [ Classroom ] Output [ countstar AS Count_Star , Classroom ]"
    },
    {
        "id": "c78c13fefb45bb894c1eee618a29aacd192f43b05619924568b76d25f2a26ebb",
        "question": "For each classroom, show the classroom number and find how many students are using it.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Output [ Classroom ] ; #2 = Aggregate [ #1 ] GroupBy [ Classroom ] Output [ countstar AS Count_Star , Classroom ]"
    },
    {
        "id": "378a69d4c41dc2ebb24edb8f3e4df22a17208d921d3dd9ee318a76b0913afc09",
        "question": "For each grade 0 classroom, report the total number of students.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 0 ] Output [ Grade , Classroom ] ; #2 = Aggregate [ #1 ] GroupBy [ Classroom ] Output [ countstar AS Count_Star , Classroom ]"
    },
    {
        "id": "8d2d28599b8a904dea5eb58e3f6940a161dbf48dff0140c52821d3fdc30673e5",
        "question": "For each grade 0 classroom, return the classroom number and the count of students.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 0 ] Output [ Grade , Classroom ] ; #2 = Aggregate [ #1 ] GroupBy [ Classroom ] Output [ countstar AS Count_Star , Classroom ]"
    },
    {
        "id": "4dce09b2411a9c78c9c4b74c3c935357daed8e21957c7444ba794b86a286d233",
        "question": "Report the total number of students for each fourth-grade classroom.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 4 ] Output [ Grade , Classroom ] ; #2 = Aggregate [ #1 ] GroupBy [ Classroom ] Output [ countstar AS Count_Star , Classroom ]"
    },
    {
        "id": "8aaf3726aae9ef4139bb260f09d0f46002ce815e1b2513bb0fb8d69749b415e9",
        "question": "For each fourth-grade classroom, show the classroom number and the total number of students using it.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Predicate [ Grade = 4 ] Output [ Grade , Classroom ] ; #2 = Aggregate [ #1 ] GroupBy [ Classroom ] Output [ countstar AS Count_Star , Classroom ]"
    },
    {
        "id": "efcc7d2b67185da5f94a39754be873895a4a08c0dd8d02f99d2a0db0b070bbd4",
        "question": "Find the name of the teacher who teaches the largest number of students.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Output [ Classroom ] ; #2 = Aggregate [ #1 ] GroupBy [ Classroom ] Output [ countstar AS Count_Star , Classroom ] ; #3 = Scan Table [ teachers ] Output [ Classroom , LastName , FirstName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Classroom = #3.Classroom ] Output [ #2.Count_Star , #3.LastName , #3.FirstName ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , LastName , FirstName ]"
    },
    {
        "id": "93ab8c1e46828f416212db32464592ac0505717a3f550631725da17a1eca12c9",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Output [ Classroom ] ; #2 = Aggregate [ #1 ] GroupBy [ Classroom ] Output [ countstar AS Count_Star , Classroom ] ; #3 = Scan Table [ teachers ] Output [ Classroom , LastName , FirstName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Classroom = #3.Classroom ] Output [ #2.Count_Star , #3.LastName , #3.FirstName ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , LastName , FirstName ]"
    },
    {
        "id": "15030c868ad1cc9fb90764d630c97060c849f85660b79898f9482315d40254ba",
        "question": "Find the number of students in one classroom.",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Output [ Classroom ] ; #2 = Aggregate [ #1 ] GroupBy [ Classroom ] Output [ countstar AS Count_Star , Classroom ]"
    },
    {
        "id": "334dff95f0178124670660592a3bef939c8d250fb79994f6feb204e03bcc6a62",
        "question": "How many students does one classroom have?",
        "parsing_tree": "student_1 | #1 = Scan Table [ list ] Output [ Classroom ] ; #2 = Aggregate [ #1 ] GroupBy [ Classroom ] Output [ countstar AS Count_Star , Classroom ]"
    },
    {
        "id": "bea47c00828135b371861710660c0f464cc19e530234e7cdd2508280fb8e8e49",
        "question": "How many companies are headquartered in the US?",
        "parsing_tree": "company_employee | #1 = Scan Table [ company ] Predicate [ Headquarters = 'USA' ] Output [ Headquarters ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a8a7ee5b9bb1cccb22c36cf6c89cf8b38012da09dea7458533ef8fb013799d6e",
        "question": "List the names of companies by ascending number of sales.",
        "parsing_tree": "company_employee | #1 = Scan Table [ company ] Output [ Sales_in_Billion , Name ] ; #2 = Sort [ #1 ] OrderBy [ Sales_in_Billion ASC ] Output [ Sales_in_Billion , Name ]"
    },
    {
        "id": "82454202cd5466ee6e35cf5aa56287e609d14c393adcd2ff307d59896274aecc",
        "question": "What are the headquarters and industries of all companies?",
        "parsing_tree": "company_employee | #1 = Scan Table [ company ] Output [ Industry , Headquarters ]"
    },
    {
        "id": "057ac4b47db9de83eea10bb7d9ad55d166641affcd592a37dd9392e379c11a75",
        "question": "Show the names of companies in the banking or retailing industry?",
        "parsing_tree": "company_employee | #1 = Scan Table [ company ] Predicate [ Industry = 'Banking' OR Industry = 'Retailing' ] Output [ Name , Industry ]"
    },
    {
        "id": "44b320b23af6fe0fc5f571e4dd8b34d1faa769a7fa09220a57ccfe217cded4d8",
        "question": "What is the maximum and minimum market value of companies?",
        "parsing_tree": "company_employee | #1 = Scan Table [ company ] Output [ Market_Value_in_Billion ] ; #2 = Aggregate [ #1 ] Output [ MAX(Market_Value_in_Billion) AS Max_Market_Value_in_Billion , MIN(Market_Value_in_Billion) AS Min_Market_Value_in_Billion ]"
    },
    {
        "id": "71c0025ba2df0d35c12aace4e94ea30bd3f268f6b35bcef920ab80b28763579a",
        "question": "What is the headquarter of the company with the largest sales?",
        "parsing_tree": "company_employee | #1 = Scan Table [ company ] Output [ Sales_in_Billion , Headquarters ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Sales_in_Billion DESC ] Output [ Sales_in_Billion , Headquarters ]"
    },
    {
        "id": "4eeca0c5a667611d54b057bcb526b37d1172adc3bfa4b63518ba29592a75fc8f",
        "question": "Show the different headquarters and number of companies at each headquarter.",
        "parsing_tree": "company_employee | #1 = Scan Table [ company ] Output [ Headquarters ] ; #2 = Aggregate [ #1 ] GroupBy [ Headquarters ] Output [ countstar AS Count_Star , Headquarters ]"
    },
    {
        "id": "66319b8ffa452105a7e39888ea9cbdbc0d0e036a3e66cb6438dc80ed7fead17f",
        "question": "Show the most common headquarter for companies.",
        "parsing_tree": "company_employee | #1 = Scan Table [ company ] Output [ Headquarters ] ; #2 = Aggregate [ #1 ] GroupBy [ Headquarters ] Output [ countstar AS Count_Star , Headquarters ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Headquarters ]"
    },
    {
        "id": "cf6a094efc797e6eed291304e84dc2f38ef10bf434de965d007498349a3f084f",
        "question": "Show the headquarters that have at least two companies.",
        "parsing_tree": "company_employee | #1 = Scan Table [ company ] Output [ Headquarters ] ; #2 = Aggregate [ #1 ] GroupBy [ Headquarters ] Output [ countstar AS Count_Star , Headquarters ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Headquarters ]"
    },
    {
        "id": "329b430604f65b2bb312910a55d77ce8330378f2731f739e22c4eb9467b36538",
        "question": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.",
        "parsing_tree": "company_employee | #1 = Scan Table [ company ] Predicate [ Industry = 'Banking' ] Distinct [ true ] Output [ Industry , Headquarters ] ; #2 = Scan Table [ company ] Predicate [ Industry = 'Oil and gas' ] Output [ Industry , Headquarters ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Headquarters = #2.Headquarters ] Output [ #1.Headquarters ]"
    },
    {
        "id": "cfe52641eb7754f7240d6f7f6725a62d3bf6ab3dff5ee5bd2b89d2825e547ddb",
        "question": "Show the names of employees that work for companies with sales bigger than 200.",
        "parsing_tree": "company_employee | #1 = Scan Table [ employment ] Output [ People_ID , Company_ID ] ; #2 = Scan Table [ company ] Predicate [ Sales_in_Billion > 200.0 ] Output [ Sales_in_Billion , Company_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Company_ID = #2.Company_ID ] Output [ #1.People_ID ] ; #4 = Scan Table [ people ] Output [ People_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.People_ID = #4.People_ID ] Output [ #4.Name ]"
    },
    {
        "id": "897601b241f4679f85ef72d262f422a56f8b0435cbdb908fe25ad3831d689813",
        "question": "Show the names of companies and the number of employees they have",
        "parsing_tree": "company_employee | #1 = Scan Table [ employment ] Output [ Company_ID ] ; #2 = Scan Table [ company ] Output [ Name , Company_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Company_ID = #2.Company_ID ] Output [ #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "58ddd5a3e96240986afb674395e71a02a1e62c4f343000a55d5bb11e59ff2797",
        "question": "List the names of people that are not employed by any company",
        "parsing_tree": "company_employee | #1 = Scan Table [ people ] Output [ People_ID , Name ] ; #2 = Scan Table [ employment ] Output [ People_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.People_ID = #1.People_ID ] Output [ #1.Name ]"
    },
    {
        "id": "b8de6ba29e45328080190bb2a08a226a7604cde4971cf7e48b951d70fc71f009",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "parsing_tree": "company_employee | #1 = Scan Table [ company ] Predicate [ Sales_in_Billion > 200.0 ] Output [ Profits_in_Billion , Sales_in_Billion , Name ] ; #2 = Sort [ #1 ] OrderBy [ Sales_in_Billion ASC , Profits_in_Billion DESC ] Output [ Sales_in_Billion , Profits_in_Billion , Name ]"
    },
    {
        "id": "cad982fe504c8cecc098fb8b9df18d9a7d9ff1a87d59a2fd75e3e173bd75ef59",
        "question": "How many film are there?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cbc486c63c2701d467b493f6d792f9da7223b540eb21db6c14565a68e99e57fc",
        "question": "Count the number of films.",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9b58a6d3f9ec304e2bda9853269327628334315c0d348dd81dbcbfc852b40e2f",
        "question": "List the distinct director of all films.",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Distinct [ true ] Output [ Director ]"
    },
    {
        "id": "bbd30cc8a9d5819ef43fcd47fa9b5f862df9fc6138c32e24d4109877ef393813",
        "question": "What are the different film Directors?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Distinct [ true ] Output [ Director ]"
    },
    {
        "id": "e60986e6642927a0e818984ad17029db621d3c57e12cac96fa1b2394949972a6",
        "question": "What is the average ticket sales gross in dollars of films?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ Gross_in_dollar ] ; #2 = Aggregate [ #1 ] Output [ AVG(Gross_in_dollar) AS Avg_Gross_in_dollar ]"
    },
    {
        "id": "e5ddd5c4558c13d651b95ca4921fc5899b68fc6bd04cd2f9bc4974ea8d8d5376",
        "question": "Return the average gross sales in dollars across all films.",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ Gross_in_dollar ] ; #2 = Aggregate [ #1 ] Output [ AVG(Gross_in_dollar) AS Avg_Gross_in_dollar ]"
    },
    {
        "id": "d967c5e3b6d64cfebff0562691c621954b5dbeeea3bbb110006940d46a65ffc8",
        "question": "What are the low and high estimates of film markets?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film_market_estimation ] Output [ High_Estimate , Low_Estimate ]"
    },
    {
        "id": "f4102152d68cc88c770ec4d81887cf61fb7e27c637f5d5a2e33d1b6d3c050bfd",
        "question": "Return the low and high estimates for all film markets.",
        "parsing_tree": "film_rank | #1 = Scan Table [ film_market_estimation ] Output [ High_Estimate , Low_Estimate ]"
    },
    {
        "id": "423e4598dc3e3333dd8e392746554923dab2ee3841c5cfee0a54cafd55503d0e",
        "question": "What are the types of film market estimations in year 1995?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film_market_estimation ] Predicate [ Year = 1995 ] Output [ Type , Year ]"
    },
    {
        "id": "45a40b3d87176300b8112538d6e2618d8b0bed5700cf289dea4fafc646069b0b",
        "question": "Return the types of film market estimations in 1995.",
        "parsing_tree": "film_rank | #1 = Scan Table [ film_market_estimation ] Predicate [ Year = 1995 ] Output [ Type , Year ]"
    },
    {
        "id": "3b6a88392ff98fa71c22fcf994c70ca4b1b53b52b6981ab51256b49944acc9a5",
        "question": "What are the maximum and minimum number of cities in all markets.",
        "parsing_tree": "film_rank | #1 = Scan Table [ market ] Output [ Number_cities ] ; #2 = Aggregate [ #1 ] Output [ MAX(Number_cities) AS Max_Number_cities , MIN(Number_cities) AS Min_Number_cities ]"
    },
    {
        "id": "0f3e2888055703a89cfaf4e5608ee551eb0ef86510b3b8b6a7f07f841e012b94",
        "question": "Return the maximum and minimum number of cities across all markets.",
        "parsing_tree": "film_rank | #1 = Scan Table [ market ] Output [ Number_cities ] ; #2 = Aggregate [ #1 ] Output [ MAX(Number_cities) AS Max_Number_cities , MIN(Number_cities) AS Min_Number_cities ]"
    },
    {
        "id": "e201a3a488b248b8354df08ed5f0657730c6c5135b045e2af9f13f9918f4acac",
        "question": "How many markets have number of cities smaller than 300?",
        "parsing_tree": "film_rank | #1 = Scan Table [ market ] Predicate [ Number_cities < 300 ] Output [ Number_cities ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1a1ff85e10434c746c79b5925da6bcbe921cb9519872cacc0a052d7f9360a31e",
        "question": "Count the number of markets that have a number of cities lower than 300.",
        "parsing_tree": "film_rank | #1 = Scan Table [ market ] Predicate [ Number_cities < 300 ] Output [ Number_cities ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "001cf174dd405ee24df24316df6e971393a48130ff365c487db0fcbb7eaed53e",
        "question": "List all countries of markets in ascending alphabetical order.",
        "parsing_tree": "film_rank | #1 = Scan Table [ market ] Output [ Country ] ; #2 = Sort [ #1 ] OrderBy [ Country ASC ] Output [ Country ]"
    },
    {
        "id": "00d67249bb0bc52f8f9f62b84249378b599612fc87cc037ca1947ebb3e8d0847",
        "question": "What are the countries for each market, ordered alphabetically?",
        "parsing_tree": "film_rank | #1 = Scan Table [ market ] Output [ Country ] ; #2 = Sort [ #1 ] OrderBy [ Country ASC ] Output [ Country ]"
    },
    {
        "id": "922803a8025c1d52af3fac5440ebc03848657f752552ba787d156048aa8b2b96",
        "question": "List all countries of markets in descending order of number of cities.",
        "parsing_tree": "film_rank | #1 = Scan Table [ market ] Output [ Country , Number_cities ] ; #2 = Sort [ #1 ] OrderBy [ Number_cities DESC ] Output [ Country , Number_cities ]"
    },
    {
        "id": "4909c91f8396c2da2d6a9b438d6260b61a26f158f67d04d32e3593db89c1812f",
        "question": "What are the countries for each market ordered by decreasing number of cities?",
        "parsing_tree": "film_rank | #1 = Scan Table [ market ] Output [ Country , Number_cities ] ; #2 = Sort [ #1 ] OrderBy [ Number_cities DESC ] Output [ Country , Number_cities ]"
    },
    {
        "id": "99233a7eb10bef1452a8bd0b2d651b9d1dd8c209bca6b7fb8b39b6798136a25c",
        "question": "Please show the titles of films and the types of market estimations.",
        "parsing_tree": "film_rank | #1 = Scan Table [ film_market_estimation ] Output [ Film_ID , Type ] ; #2 = Scan Table [ film ] Output [ Film_ID , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Film_ID = #2.Film_ID ] Output [ #1.Type , #2.Title ]"
    },
    {
        "id": "9259d5c80f09e5dd27fbf0549be05c82153623d5cfed6eb838bccae929fac3be",
        "question": "What are the titles of films and corresponding types of market estimations?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film_market_estimation ] Output [ Film_ID , Type ] ; #2 = Scan Table [ film ] Output [ Film_ID , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Film_ID = #2.Film_ID ] Output [ #1.Type , #2.Title ]"
    },
    {
        "id": "f625998b769ffdcbf569dc4c295ae0927a7c6ab850e6a7c252055bc603af1d23",
        "question": "Show the distinct director of films with market estimation in the year of 1995.",
        "parsing_tree": "film_rank | #1 = Scan Table [ film_market_estimation ] Predicate [ Year = 1995 ] Output [ Film_ID , Year ] ; #2 = Scan Table [ film ] Output [ Film_ID , Director ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Film_ID = #2.Film_ID ] Distinct [ true ] Output [ #2.Director ]"
    },
    {
        "id": "43f080cdd8e5ebf4e6d3a456d31ad9ca2b4af76aaba5366ddd01c04e201497e8",
        "question": "Who are the different directors of films which had market estimation in 1995?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film_market_estimation ] Predicate [ Year = 1995 ] Output [ Film_ID , Year ] ; #2 = Scan Table [ film ] Output [ Film_ID , Director ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Film_ID = #2.Film_ID ] Distinct [ true ] Output [ #2.Director ]"
    },
    {
        "id": "bc85509157a3345da6b063a418f771b7059550d91b5491658f3980f77ac45055",
        "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film_market_estimation ] Predicate [ Low_Estimate > 10000.0 ] Output [ Market_ID , Low_Estimate ] ; #2 = Scan Table [ market ] Output [ Market_ID , Number_cities ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Market_ID = #2.Market_ID ] Output [ #2.Number_cities ] ; #4 = Aggregate [ #3 ] Output [ AVG(Number_cities) AS Avg_Number_cities ]"
    },
    {
        "id": "ae394ad0da3daf981da81841259fa7e0c991eee42781340838384af37efa0441",
        "question": "Give the average number of cities within markets that had a low market estimation larger than 10000?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film_market_estimation ] Predicate [ Low_Estimate > 10000.0 ] Output [ Market_ID , Low_Estimate ] ; #2 = Scan Table [ market ] Output [ Market_ID , Number_cities ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Market_ID = #2.Market_ID ] Output [ #2.Number_cities ] ; #4 = Aggregate [ #3 ] Output [ AVG(Number_cities) AS Avg_Number_cities ]"
    },
    {
        "id": "c1605ad474d811f6c41a5e99d0c52c5bfab6a4ae2ae215df8cd0727844a48dbb",
        "question": "Please list the countries and years of film market estimations.",
        "parsing_tree": "film_rank | #1 = Scan Table [ market ] Output [ Country , Market_ID ] ; #2 = Scan Table [ film_market_estimation ] Output [ Market_ID , Year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Market_ID = #2.Market_ID ] Output [ #2.Year , #1.Country ]"
    },
    {
        "id": "bbf99a51cc337048be53501ac23cd2d1fc30bbdda0e22850643f49fadcb203ba",
        "question": "What are the countries of markets and their corresponding years of market estimation?",
        "parsing_tree": "film_rank | #1 = Scan Table [ market ] Output [ Country , Market_ID ] ; #2 = Scan Table [ film_market_estimation ] Output [ Market_ID , Year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Market_ID = #2.Market_ID ] Output [ #2.Year , #1.Country ]"
    },
    {
        "id": "a87cb5dee956abe460cde0cad9ecabee79a01165ccfe0166fed4d031fb84256f",
        "question": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.",
        "parsing_tree": "film_rank | #1 = Scan Table [ market ] Predicate [ Country = 'Japan' ] Output [ Country , Market_ID ] ; #2 = Scan Table [ film_market_estimation ] Output [ Market_ID , Year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Market_ID = #2.Market_ID ] Output [ #2.Year ] ; #4 = Sort [ #3 ] OrderBy [ Year DESC ] Output [ Year ]"
    },
    {
        "id": "def4319c9328b386b60ea3d82fc8b20eef9da628644596bfc9401bef4a0e76dd",
        "question": "What are the years of film market estimation for the market of Japan, ordered by year descending?",
        "parsing_tree": "film_rank | #1 = Scan Table [ market ] Predicate [ Country = 'Japan' ] Output [ Country , Market_ID ] ; #2 = Scan Table [ film_market_estimation ] Output [ Market_ID , Year ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Market_ID = #2.Market_ID ] Output [ #2.Year ] ; #4 = Sort [ #3 ] OrderBy [ Year DESC ] Output [ Year ]"
    },
    {
        "id": "55c4c8efbcc22cbe7f11e0c108c05e1356769b9fdd49b558bb63c6b36b8e2277",
        "question": "List the studios of each film and the number of films produced by that studio.",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ Studio ] ; #2 = Aggregate [ #1 ] GroupBy [ Studio ] Output [ countstar AS Count_Star , Studio ]"
    },
    {
        "id": "33c04edb06b6317e7415fe81913eafcab42a6ada714c69bbed35c6d04907578a",
        "question": "How films are produced by each studio?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ Studio ] ; #2 = Aggregate [ #1 ] GroupBy [ Studio ] Output [ countstar AS Count_Star , Studio ]"
    },
    {
        "id": "67917029c90287efd90d73d6ecc9c8397209b9bbc29971a0a5d511c43ff21173",
        "question": "List the name of film studio that have the most number of films.",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ Studio ] ; #2 = Aggregate [ #1 ] GroupBy [ Studio ] Output [ countstar AS Count_Star , Studio ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Studio ]"
    },
    {
        "id": "cac89358676e8af140c254a6641504f40be31cc7c2b66c874d518e5522ef4801",
        "question": "What is the name of teh studio that created the most films?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ Studio ] ; #2 = Aggregate [ #1 ] GroupBy [ Studio ] Output [ countstar AS Count_Star , Studio ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Studio ]"
    },
    {
        "id": "826025175de8ea81ff6ec79489c99de295ae7fa657ae3f8c7b4c0180d34ffadd",
        "question": "List the names of studios that have at least two films.",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ Studio ] ; #2 = Aggregate [ #1 ] GroupBy [ Studio ] Output [ countstar AS Count_Star , Studio ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Studio ]"
    },
    {
        "id": "a86d0b0d0a7191133e9814c8f5423a6a767433d5e66500abbfbf1aee34dff1dc",
        "question": "What are the names of studios that have made two or more films?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ Studio ] ; #2 = Aggregate [ #1 ] GroupBy [ Studio ] Output [ countstar AS Count_Star , Studio ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Studio ]"
    },
    {
        "id": "e74a43abbd99870718b14f34d74bfb80427edf57044fdd0dc05192ae3c614852",
        "question": "List the title of films that do not have any market estimation.",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ Film_ID , Title ] ; #2 = Scan Table [ film_market_estimation ] Output [ Film_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Film_ID IS NULL OR #1.Film_ID = #2.Film_ID ] Output [ #1.Title ]"
    },
    {
        "id": "33f1cc7301f9946bbc7534f08c1da8d9a5bc2159d57717f4f1ab13c2e2bb63b3",
        "question": "What are the titles of films that do not have a film market estimation?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ Film_ID , Title ] ; #2 = Scan Table [ film_market_estimation ] Output [ Film_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Film_ID IS NULL OR #1.Film_ID = #2.Film_ID ] Output [ #1.Title ]"
    },
    {
        "id": "9b4d8d0ca7c183b65ce53881f7e705e650943205a0b6cbf9ea88063967ae0f05",
        "question": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Predicate [ Director = 'Nicholas Meyer' ] Distinct [ true ] Output [ Studio , Director ] ; #2 = Scan Table [ film ] Predicate [ Director = 'Walter Hill' ] Output [ Studio , Director ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Studio = #2.Studio ] Output [ #1.Studio ]"
    },
    {
        "id": "6f877b468f2d357aec0f434ecc4e236423bf4691aa59628e54addb68344e5edf",
        "question": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Predicate [ Director = 'Nicholas Meyer' ] Distinct [ true ] Output [ Studio , Director ] ; #2 = Scan Table [ film ] Predicate [ Director = 'Walter Hill' ] Output [ Studio , Director ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Studio = #2.Studio ] Output [ #1.Studio ]"
    },
    {
        "id": "38d0b144cb8e529b2c2cadab0c96af26dd4f89f46d3637a1082b00cca7194ed7",
        "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Predicate [ Studio like '%Universal%' ] Output [ Studio , Title ]"
    },
    {
        "id": "591e202eab9c229e46aed74fa4d7c224b967dac1a4e40d35a18ebdc7d68121d9",
        "question": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Predicate [ Studio like '%Universal%' ] Output [ Studio , Title ]"
    },
    {
        "id": "6e494ebf0820e3596a84e9591d0a50b26062ec8b32125489be56e4c9c519eec8",
        "question": "Show the studios that have not produced films with director \"Walter Hill\".",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Distinct [ true ] Output [ Studio ] ; #2 = Scan Table [ film ] Predicate [ Director = 'Walter Hill' ] Output [ Studio , Director ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Studio = #2.Studio ] Output [ #1.Studio ]"
    },
    {
        "id": "8f31c77e11e1efbde4f6fca404f34f647ea2eecc788fd2f9bd0ef0373222bc83",
        "question": "Which studios have never worked with the director Walter Hill?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Distinct [ true ] Output [ Studio ] ; #2 = Scan Table [ film ] Predicate [ Director = 'Walter Hill' ] Output [ Studio , Director ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Studio = #2.Studio ] Output [ #1.Studio ]"
    },
    {
        "id": "64d0a063ae7e2a59bfdc0a673d570c96a82dfa011b3fbfa9a5b2cb0022ae54dd",
        "question": "List the studios which average gross is above 4500000.",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ Gross_in_dollar , Studio ] ; #2 = Aggregate [ #1 ] GroupBy [ Studio ] Output [ Studio , AVG(Gross_in_dollar) AS Avg_Gross_in_dollar ] ; #3 = Filter [ #2 ] Predicate [ Avg_Gross_in_dollar >= 4500000 ] Output [ Studio ]"
    },
    {
        "id": "4cd6a8218dabc9ffee3d2df6f120a67336ccf442445e10f0690ffa64256301bf",
        "question": "Which studios have an average gross of over 4500000?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ Gross_in_dollar , Studio ] ; #2 = Aggregate [ #1 ] GroupBy [ Studio ] Output [ Studio , AVG(Gross_in_dollar) AS Avg_Gross_in_dollar ] ; #3 = Filter [ #2 ] Predicate [ Avg_Gross_in_dollar >= 4500000 ] Output [ Studio ]"
    },
    {
        "id": "0b54cfdefd4a2ce79eb3cd96d707100718e7be222cf4437c268a969b0cdf5b38",
        "question": "What is the title of the film that has the highest high market estimation.",
        "parsing_tree": "film_rank | #1 = Scan Table [ film_market_estimation ] Output [ Film_ID , High_Estimate ] ; #2 = Scan Table [ film ] Output [ Film_ID , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Film_ID = #2.Film_ID ] Output [ #1.High_Estimate , #2.Title ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ High_Estimate DESC ] Output [ High_Estimate , Title ]"
    },
    {
        "id": "882d7262bc9039b95ca0223a41162f7495bd7241e8bc6ef77fb67dd15ab55355",
        "question": "Return the title of the film with the highest high estimate?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film_market_estimation ] Output [ Film_ID , High_Estimate ] ; #2 = Scan Table [ film ] Output [ Film_ID , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Film_ID = #2.Film_ID ] Output [ #1.High_Estimate , #2.Title ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ High_Estimate DESC ] Output [ High_Estimate , Title ]"
    },
    {
        "id": "8e0b9645454a9e53ab4af74421caf622cd3bc0517719544d1f0f75e76845e42b",
        "question": "What are the titles and directors of the films were never presented in China?",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ Film_ID , Title , Director ] ; #2 = Scan Table [ film_market_estimation ] Output [ Film_ID , Market_ID ] ; #3 = Scan Table [ market ] Predicate [ Country = 'China' ] Output [ Country , Market_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Market_ID = #2.Market_ID ] Output [ #2.Film_ID ] ; #5 = Except [ #1 , #4 ] Predicate [ #4.Film_ID IS NULL OR #1.Film_ID = #4.Film_ID ] Output [ #1.Title , #1.Director ]"
    },
    {
        "id": "eca7116fc2a9c1706f0b470c59dd470ef51ce2db484ae89ebfcb6300b976df1f",
        "question": "Return the titles and directors of films that were never in the market of China.",
        "parsing_tree": "film_rank | #1 = Scan Table [ film ] Output [ Film_ID , Title , Director ] ; #2 = Scan Table [ film_market_estimation ] Output [ Film_ID , Market_ID ] ; #3 = Scan Table [ market ] Predicate [ Country = 'China' ] Output [ Country , Market_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Market_ID = #2.Market_ID ] Output [ #2.Film_ID ] ; #5 = Except [ #1 , #4 ] Predicate [ #4.Film_ID IS NULL OR #1.Film_ID = #4.Film_ID ] Output [ #1.Title , #1.Director ]"
    },
    {
        "id": "72d5857bc6477c8a9f91314e898311515791010679affb68ee4e56e2de381441",
        "question": "How many calendar items do we have?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Calendar ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "117edecf2b688c34b0077485a28385aacebc65af61f42e884597e6e9cfd098a6",
        "question": "Count the number of all the calendar items.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Calendar ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e91344d21b5efb1d7c0d03f987f293085c2740a66b098e10aaf754519a5de425",
        "question": "Show all calendar dates and day Numbers.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Calendar ] Output [ Day_Number , Calendar_Date ]"
    },
    {
        "id": "30f152e5e0790ca689dfcaad698ffd1cfd5c11e6290c0811d507be52fee62492",
        "question": "What are all the calendar dates and day Numbers?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Calendar ] Output [ Day_Number , Calendar_Date ]"
    },
    {
        "id": "147e91ff6354af38b7ed1aab7d6f4ec04e0ff200ad89b57b49c76007c752109d",
        "question": "Show the number of document types.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Document_Types ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "efa546709f17c97acfb5c2337f5d65a9a61361c5d7d1d5c798d494ab3ea6f69d",
        "question": "How many document types are there?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Document_Types ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "64f28100a4d996521921100b4a1bf6b2eacb5d222ddaf1badd4d241102b9aee5",
        "question": "List all document type codes and document type names.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Document_Types ] Output [ Document_Type_Code , Document_Type_Name ]"
    },
    {
        "id": "bcb137a0c016e6b0e120f0000e5238f72065c6a128c6fc1b18cf61d9d6c73dc4",
        "question": "What are all the document type codes and document type names?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Document_Types ] Output [ Document_Type_Code , Document_Type_Name ]"
    },
    {
        "id": "fcef9dcb9b576a666d7debda66ebb8d235c7fa079f3c645d957a6fa802d0a5d8",
        "question": "What is the name and description for document type code RV?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Document_Types ] Predicate [ Document_Type_Code = 'RV' ] Output [ Document_Type_Name , Document_Type_Description , Document_Type_Code ]"
    },
    {
        "id": "fc89260b3af78f29a89be380a3f721052ec1ce3c6124490c4747b590052ab91a",
        "question": "Give me the name and description of the document type code RV.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Document_Types ] Predicate [ Document_Type_Code = 'RV' ] Output [ Document_Type_Name , Document_Type_Description , Document_Type_Code ]"
    },
    {
        "id": "661bdc7eec94f235ea48f5ef2900d4bf2e5d80054410fd3dcd9dad891ac2d766",
        "question": "What is the document type code for document type \"Paper\"?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Document_Types ] Predicate [ Document_Type_Name = 'Paper' ] Output [ Document_Type_Code , Document_Type_Name ]"
    },
    {
        "id": "d39748936acfc5e4dbf7447efdd233b85c8c3b506d0b15710e73a7cf6c2c564d",
        "question": "Find the code of the document type \"Paper\".",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Document_Types ] Predicate [ Document_Type_Name = 'Paper' ] Output [ Document_Type_Code , Document_Type_Name ]"
    },
    {
        "id": "695ab19294473046ddaafe1b8fe1824be5895362ca01153974cad9eec7de8c4d",
        "question": "Show the number of documents with document type code CV or BK.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ All_Documents ] Predicate [ Document_Type_Code = 'BK' OR Document_Type_Code = 'CV' ] Output [ Document_Type_Code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ff6df40ae85457acd9d65c078d1fd05ad4d707eac2e74657f70b24756f5259f2",
        "question": "How many documents have document type code CV or BK?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ All_Documents ] Predicate [ Document_Type_Code = 'BK' OR Document_Type_Code = 'CV' ] Output [ Document_Type_Code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "403b6e211b554d0bcc4dca58f0e8a2d73b1e43793df68069d9f8402c6262e232",
        "question": "What is the date when the document \"Marry CV\" was stored?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ All_Documents ] Predicate [ Document_Name = 'Marry CV' ] Output [ Date_Stored , Document_Name ]"
    },
    {
        "id": "5156ee0bc1ef469c9e7494fdde08e0d23026944e84910d566c8ad7fc261a9233",
        "question": "When was the document named \"Marry CV\" stored? Give me the date.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ All_Documents ] Predicate [ Document_Name = 'Marry CV' ] Output [ Date_Stored , Document_Name ]"
    },
    {
        "id": "3411415d2b86fa3f2e385a741979e4c75d6947f162e3a10b1a28d6bbbf4062c4",
        "question": "What is the day Number and date of all the documents?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ All_Documents ] Output [ Date_Stored ] ; #2 = Scan Table [ Ref_Calendar ] Output [ Day_Number , Calendar_Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Date_Stored = #2.Calendar_Date ] Output [ #1.Date_Stored , #2.Day_Number ]"
    },
    {
        "id": "105b2390630b339bf83e567359954a9d7a594d0372ccdf46df55e795626ed71c",
        "question": "Return the day Number and stored date for all the documents.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ All_Documents ] Output [ Date_Stored ] ; #2 = Scan Table [ Ref_Calendar ] Output [ Day_Number , Calendar_Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Date_Stored = #2.Calendar_Date ] Output [ #1.Date_Stored , #2.Day_Number ]"
    },
    {
        "id": "f7ac18e6d80e1a965c4d0821837eca3b1899febef5f5da64c25c3229b79919fb",
        "question": "What is the document type name for the document with name \"How to read a book\"?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ All_Documents ] Predicate [ Document_Name = 'How to read a book' ] Output [ Document_Type_Code , Document_Name ] ; #2 = Scan Table [ Ref_Document_Types ] Output [ Document_Type_Code , Document_Type_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Document_Type_Code = #2.Document_Type_Code ] Output [ #2.Document_Type_Name ]"
    },
    {
        "id": "2f71f9352aee4fd79593094541a285942a528d5f549d22dd87d82233cf202d25",
        "question": "Find the document type name of the document named \"How to read a book\".",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ All_Documents ] Predicate [ Document_Name = 'How to read a book' ] Output [ Document_Type_Code , Document_Name ] ; #2 = Scan Table [ Ref_Document_Types ] Output [ Document_Type_Code , Document_Type_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Document_Type_Code = #2.Document_Type_Code ] Output [ #2.Document_Type_Name ]"
    },
    {
        "id": "0ec2e759bfd6194f9faaef3253b3f65504672027c1be757d822f6f1cdc43e266",
        "question": "Show the number of locations.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Locations ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ab348b71647b2e4ff7dce0a39fb4308e343eec4fadc67a4c92edecd206860316",
        "question": "How many locations are listed in the database?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Locations ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "95aeccd0c04defb29ff21637524a2572c45cf72e7e77834a7d621015e3bdda3f",
        "question": "List all location codes and location names.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Locations ] Output [ Location_Name , Location_Code ]"
    },
    {
        "id": "261beeaf98dc870de2436e788a390e1ca5fbc881dbbffb76a9113b7e71cde773",
        "question": "What are all the location codes and location names?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Locations ] Output [ Location_Name , Location_Code ]"
    },
    {
        "id": "4a35055f90f12d80f279bd25c5f69066747f83f6e89219368704c1126fef6edf",
        "question": "What are the name and description for location code x?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Locations ] Predicate [ Location_Code = 'x' ] Output [ Location_Description , Location_Name , Location_Code ]"
    },
    {
        "id": "a43cfd1240304ff96185ccce27693ef90103c679a7cb70fdbf36e35fb628e80b",
        "question": "Give me the name and description of the location with code x.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Locations ] Predicate [ Location_Code = 'x' ] Output [ Location_Description , Location_Name , Location_Code ]"
    },
    {
        "id": "d23981b472e0758380968be08c666e5e0b1c6fcd03bee9c2611a3a280149a8b3",
        "question": "What is the location code for the country \"Canada\"?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Locations ] Predicate [ Location_Name = 'Canada' ] Output [ Location_Name , Location_Code ]"
    },
    {
        "id": "168b2023d7bcaec882bf8dc9b10755101c38f7faa53b62eac05ee228de7a5187",
        "question": "Show the location code of the country \"Canada\".",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Ref_Locations ] Predicate [ Location_Name = 'Canada' ] Output [ Location_Name , Location_Code ]"
    },
    {
        "id": "5253ec74d85a23a98bac0a8832bd103e855fc545c032dfd93bb03ff3ff7d61a1",
        "question": "How many roles are there?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Roles ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "68be8cd04e22b847c90cf51abeb3f879c47a3bc5250fe4a9146476b877b1393b",
        "question": "Count the total number of roles listed.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Roles ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e340e735ba616c800818f25bfba2a8ff0be2c8d29036d6c4cecc6532baac070b",
        "question": "List all role codes, role names, and role descriptions.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Roles ] Output [ Role_Code , Role_Description , Role_Name ]"
    },
    {
        "id": "b1aa4b4c11ed66540238b131c9505b2b104b391085fb148daba6d5c0f60fcf28",
        "question": "What are all the role codes, role names, and role descriptions?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Roles ] Output [ Role_Code , Role_Description , Role_Name ]"
    },
    {
        "id": "8740862a92cb1207a3e86cd385016bfe42e5e345923f7c3c6fca541c3c681d52",
        "question": "What are the name and description for role code \"MG\"?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Roles ] Predicate [ Role_Code = 'MG' ] Output [ Role_Name , Role_Description , Role_Code ]"
    },
    {
        "id": "275bb3a231297f5c841733dddaff3871c37db120db10d190276b478afc7efce0",
        "question": "Find the name and description of the role with code \"MG\".",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Roles ] Predicate [ Role_Code = 'MG' ] Output [ Role_Name , Role_Description , Role_Code ]"
    },
    {
        "id": "206b63ecd2de92f902cbbc72e87b6f75a4a82deb008a8471245b420a3171c4bc",
        "question": "Show the description for role name \"Proof Reader\".",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Roles ] Predicate [ Role_Name = 'Proof Reader' ] Output [ Role_Name , Role_Description ]"
    },
    {
        "id": "82a4e8b618999e703f2072837485d211bb5bc84204d86fecb6a5a01474fd380d",
        "question": "What is the description of the role named \"Proof Reader\"?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Roles ] Predicate [ Role_Name = 'Proof Reader' ] Output [ Role_Name , Role_Description ]"
    },
    {
        "id": "6ecbbeb3e56e9af0f7e5249b88cccc005a7fe9d2b077658a6a333c7e3617a3b8",
        "question": "How many employees do we have?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "117358ccee08c9dd37408b8ffda1369fbbedd18faf96409050919672e4868ba2",
        "question": "Find the number of employees we have.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "de810ab7760e9e803de33699fb7f747ed1193b1ebe86baf1ec7386082c2d3599",
        "question": "Show the name, role code, and date of birth for the employee with name 'Armani'.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Predicate [ Employee_Name = 'Armani' ] Output [ Role_Code , Employee_Name , Date_of_Birth ]"
    },
    {
        "id": "198460cad7e48eb70e7ce39554c00b2434a7d23d5520870e60a816f99ab67606",
        "question": "What are the name, role code, and date of birth of the employee named 'Armani'?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Predicate [ Employee_Name = 'Armani' ] Output [ Role_Code , Employee_Name , Date_of_Birth ]"
    },
    {
        "id": "9899e408d4c03db179449c1631e726822fccfe10796ceaebf5ba47bd09ff0486",
        "question": "What is the id for the employee called Ebba?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Predicate [ Employee_Name = 'Ebba' ] Output [ Employee_Name , Employee_ID ]"
    },
    {
        "id": "296a81b280c6ef23da2c5fd79fca2f1a7ecc0089cc6712a0c5a2a8ba984ff250",
        "question": "Show the id of the employee named Ebba.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Predicate [ Employee_Name = 'Ebba' ] Output [ Employee_Name , Employee_ID ]"
    },
    {
        "id": "f49c188df237f81e359f1dff61ac7a9b574ce8962b5f5fb3dc7ac36fda43b018",
        "question": "Show the names of all the employees with role \"HR\".",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Predicate [ Role_Code = 'HR' ] Output [ Role_Code , Employee_Name ]"
    },
    {
        "id": "532bc33efdefd8d081e3d1fd9677ba14de18a2a2b074260e17ba15237a5d237f",
        "question": "Which employees have the role with code \"HR\"? Find their names.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Predicate [ Role_Code = 'HR' ] Output [ Role_Code , Employee_Name ]"
    },
    {
        "id": "492404bfec487b8103714097ed22b2d5f4c67a1f1baf6c9ad686e847051b5956",
        "question": "Show all role codes and the number of employees in each role.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Output [ Role_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Role_Code ] Output [ countstar AS Count_Star , Role_Code ]"
    },
    {
        "id": "31c8e954d7e150a0ae027140904c632b9e2e2567fa207894643de3c9e3669fc8",
        "question": "What is the code of each role and the number of employees in each role?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Output [ Role_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Role_Code ] Output [ countstar AS Count_Star , Role_Code ]"
    },
    {
        "id": "23777965fe934d2905a91a65e4d95f12a76fdd94395df39e8150d1fe41290563",
        "question": "What is the role code with the largest number of employees?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Output [ Role_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Role_Code ] Output [ countstar AS Count_Star , Role_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Role_Code , Count_Star ]"
    },
    {
        "id": "d8f15344b5362faa077b1fea87cbcd4cb530b06d9b67245cb62bbe5f44735713",
        "question": "Find the code of the role that have the most employees.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Output [ Role_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Role_Code ] Output [ countstar AS Count_Star , Role_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Role_Code , Count_Star ]"
    },
    {
        "id": "19c442a92b6c698976cba650309c5eaca0f394e8267572395ebb7134b32fdb02",
        "question": "Show all role codes with at least 3 employees.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Output [ Role_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Role_Code ] Output [ countstar AS Count_Star , Role_Code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 3 ] Output [ Role_Code ]"
    },
    {
        "id": "b7e184af0c0274ac5ae664401dd94bd6df7bcbdef0e9c060198f52145ccf3615",
        "question": "What are the roles with three or more employees? Give me the role codes.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Output [ Role_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Role_Code ] Output [ countstar AS Count_Star , Role_Code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 3 ] Output [ Role_Code ]"
    },
    {
        "id": "79c0193d932416a6628ff681f8162fa51b1a98256422bce79a104bc8d74db009",
        "question": "Show the role code with the least employees.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Output [ Role_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Role_Code ] Output [ countstar AS Count_Star , Role_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Role_Code , Count_Star ]"
    },
    {
        "id": "ec1f042ae358754d9c51f739e6c8ae9a27c0603cad23da81d311b15894e5ec67",
        "question": "What is the role with the smallest number of employees? Find the role codes.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Output [ Role_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Role_Code ] Output [ countstar AS Count_Star , Role_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Role_Code , Count_Star ]"
    },
    {
        "id": "d50e95adcc2bee9abe93adb1594009d18bcf7a7a02895d499f902f9b6a6643fb",
        "question": "What is the role name and role description for employee called Ebba?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Predicate [ Employee_Name = 'Ebba' ] Output [ Role_Code , Employee_Name ] ; #2 = Scan Table [ Roles ] Output [ Role_Code , Role_Description , Role_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Role_Code = #2.Role_Code ] Output [ #2.Role_Name , #2.Role_Description ]"
    },
    {
        "id": "4193b1fe5ff6139b43fcfca55e8215a05d11a94671c5e61d126683c6b6236cab",
        "question": "Show the name and description of the role played by the employee named Ebba.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Predicate [ Employee_Name = 'Ebba' ] Output [ Role_Code , Employee_Name ] ; #2 = Scan Table [ Roles ] Output [ Role_Code , Role_Description , Role_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Role_Code = #2.Role_Code ] Output [ #2.Role_Name , #2.Role_Description ]"
    },
    {
        "id": "80cdba23f3b79ab3825bb4cea08ecb81f7cf7faf20556b03df57fd34df89ffa2",
        "question": "Show the names of employees with role name Editor.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Roles ] Predicate [ Role_Name = 'Editor' ] Output [ Role_Code , Role_Name ] ; #2 = Scan Table [ Employees ] Output [ Role_Code , Employee_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Role_Code = #2.Role_Code ] Output [ #2.Employee_Name ]"
    },
    {
        "id": "72367ce2374ac36aa8101fe9701de07fca755409792b100fe63354fa1d8d6892",
        "question": "Find the names of all the employees whose the role name is \"Editor\".",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Roles ] Predicate [ Role_Name = 'Editor' ] Output [ Role_Code , Role_Name ] ; #2 = Scan Table [ Employees ] Output [ Role_Code , Employee_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Role_Code = #2.Role_Code ] Output [ #2.Employee_Name ]"
    },
    {
        "id": "fd5fc029b1e9860ae98f8a2da34849b2a5aa0ced7c6f925b2269c655cf2477fe",
        "question": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Roles ] Predicate [ Role_Name = 'Human Resource' OR Role_Name = 'Manager' ] Output [ Role_Code , Role_Name ] ; #2 = Scan Table [ Employees ] Output [ Role_Code , Employee_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Role_Code = #2.Role_Code ] Output [ #2.Employee_ID ]"
    },
    {
        "id": "33517814a3b6a918703cbae6c3313ab580b538fcdd58c4461567dac55554bb02",
        "question": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Roles ] Predicate [ Role_Name = 'Human Resource' OR Role_Name = 'Manager' ] Output [ Role_Code , Role_Name ] ; #2 = Scan Table [ Employees ] Output [ Role_Code , Employee_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Role_Code = #2.Role_Code ] Output [ #2.Employee_ID ]"
    },
    {
        "id": "6bbb2de2f09384c6d5467418b39354dd0aaee21986581edafcd27ff0876be421",
        "question": "What are the different location codes for documents?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Document_Locations ] Distinct [ true ] Output [ Location_Code ]"
    },
    {
        "id": "9853f80ff029574e3a1a559b7e5e45c37d1b9cd28cb89f9601155feb312561ce",
        "question": "Give me all the distinct location codes for documents.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Document_Locations ] Distinct [ true ] Output [ Location_Code ]"
    },
    {
        "id": "35cbe428d5c190122620c376af32b3dff2e0e8da705e4c10124350f814d6eb9e",
        "question": "Show the location name for document \"Robin CV\".",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ All_Documents ] Predicate [ Document_Name = 'Robin CV' ] Output [ Document_Name , Document_ID ] ; #2 = Scan Table [ Document_Locations ] Output [ Document_ID , Location_Code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Document_ID = #2.Document_ID ] Output [ #2.Location_Code ] ; #4 = Scan Table [ Ref_Locations ] Output [ Location_Name , Location_Code ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Location_Code = #4.Location_Code ] Output [ #4.Location_Name ]"
    },
    {
        "id": "707f377df25cecbbd97d878d13d8fed76fa711694cf45cf3cd22b0cf933e5bd5",
        "question": "What is the location name of the document \"Robin CV\"?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ All_Documents ] Predicate [ Document_Name = 'Robin CV' ] Output [ Document_Name , Document_ID ] ; #2 = Scan Table [ Document_Locations ] Output [ Document_ID , Location_Code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Document_ID = #2.Document_ID ] Output [ #2.Location_Code ] ; #4 = Scan Table [ Ref_Locations ] Output [ Location_Name , Location_Code ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Location_Code = #4.Location_Code ] Output [ #4.Location_Name ]"
    },
    {
        "id": "ebcf21818519565b7d9c6ad6c3c0802208528264fe61425de3f37265c75395fc",
        "question": "Show the location code, the starting date and ending data in that location for all the documents.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Document_Locations ] Output [ Date_in_Location_From , Date_in_Locaton_To , Location_Code ]"
    },
    {
        "id": "cc6f84876bb53777303b7837a44a797eab7263d8d816bf6f54c878f70a878053",
        "question": "What are each document's location code, and starting date and ending data in that location?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Document_Locations ] Output [ Date_in_Location_From , Date_in_Locaton_To , Location_Code ]"
    },
    {
        "id": "896f091b028ea11225a4df7281bc36157c6b206b14585a45b7919c225e83199e",
        "question": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ All_Documents ] Predicate [ Document_Name = 'Robin CV' ] Output [ Document_Name , Document_ID ] ; #2 = Scan Table [ Document_Locations ] Output [ Date_in_Location_From , Date_in_Locaton_To , Document_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Document_ID = #2.Document_ID ] Output [ #2.Date_in_Location_From , #2.Date_in_Locaton_To ]"
    },
    {
        "id": "b8fad75c66a0113849c162d50bcbd0d12a7fbf0d51b41ed84228844b13520e2e",
        "question": "Find the starting date and ending data in location for the document named \"Robin CV\".",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ All_Documents ] Predicate [ Document_Name = 'Robin CV' ] Output [ Document_Name , Document_ID ] ; #2 = Scan Table [ Document_Locations ] Output [ Date_in_Location_From , Date_in_Locaton_To , Document_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Document_ID = #2.Document_ID ] Output [ #2.Date_in_Location_From , #2.Date_in_Locaton_To ]"
    },
    {
        "id": "46f7ee2163a813a0e5b6215da8ba907ba8c064162fcd8d3b7c2640ff8fc81b70",
        "question": "Show the location codes and the number of documents in each location.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Document_Locations ] Output [ Location_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Location_Code ] Output [ countstar AS Count_Star , Location_Code ]"
    },
    {
        "id": "38c712cc8c172f21ada6f245fb8a4dbe93e4405292a3f912dd42d00673fae6e1",
        "question": "What is the code of each location and the number of documents in that location?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Document_Locations ] Output [ Location_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Location_Code ] Output [ countstar AS Count_Star , Location_Code ]"
    },
    {
        "id": "e6e3eb7cffe7b35173d79e04c562d2f6adb03e35f7efccdecd6bb2a2ab88be7f",
        "question": "What is the location code with the most documents?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Document_Locations ] Output [ Location_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Location_Code ] Output [ countstar AS Count_Star , Location_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Location_Code ]"
    },
    {
        "id": "f730ef1f3c686cd2bd996a271a2d5552e1768ed6bffbd4658282f4b6686faa09",
        "question": "Find the code of the location with the largest number of documents.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Document_Locations ] Output [ Location_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Location_Code ] Output [ countstar AS Count_Star , Location_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Location_Code ]"
    },
    {
        "id": "59ccfb4609bcd15fff38962951b2724c92cd79ea219dd395da2bae364e27d499",
        "question": "Show the location codes with at least 3 documents.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Document_Locations ] Output [ Location_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Location_Code ] Output [ countstar AS Count_Star , Location_Code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 3 ] Output [ Location_Code ]"
    },
    {
        "id": "2fa12a0ea326623ead04a91913531715acf3fdb41a91dce5bfdf87b360fe96c5",
        "question": "What are the codes of the locations with at least three documents?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Document_Locations ] Output [ Location_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Location_Code ] Output [ countstar AS Count_Star , Location_Code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 3 ] Output [ Location_Code ]"
    },
    {
        "id": "90f5576d01d8bcf3f183259fa59f7633c2bdddd21b250eedb0ad882088427194",
        "question": "Show the location name and code with the least documents.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Document_Locations ] Output [ Location_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Location_Code ] Output [ countstar AS Count_Star , Location_Code ] ; #3 = Scan Table [ Ref_Locations ] Output [ Location_Name , Location_Code ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Location_Code = #3.Location_Code ] Output [ #2.Count_Star , #3.Location_Name , #2.Location_Code ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Location_Name , Count_Star , Location_Code ]"
    },
    {
        "id": "acb74eec566d946a9b0e91a64224bd5e7f1a25ecb3c541b1f6b40431bef17564",
        "question": "What are the name and code of the location with the smallest number of documents?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Document_Locations ] Output [ Location_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Location_Code ] Output [ countstar AS Count_Star , Location_Code ] ; #3 = Scan Table [ Ref_Locations ] Output [ Location_Name , Location_Code ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Location_Code = #3.Location_Code ] Output [ #2.Count_Star , #3.Location_Name , #2.Location_Code ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Location_Name , Count_Star , Location_Code ]"
    },
    {
        "id": "030c764f040d4840f14b00787cdcf042cbb5f1c3d1e7360c22961fc90c63573c",
        "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Documents_to_be_Destroyed ] Output [ Destruction_Authorised_by_Employee_ID , Destroyed_by_Employee_ID ] ; #2 = Scan Table [ Employees ] Output [ Employee_Name , Employee_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Destroyed_by_Employee_ID = #2.Employee_ID ] Output [ #2.Employee_Name , #1.Destruction_Authorised_by_Employee_ID ] ; #4 = Scan Table [ Employees ] Output [ Employee_Name , Employee_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Destruction_Authorised_by_Employee_ID = #4.Employee_ID ] Output [ #3.Employee_Name ]"
    },
    {
        "id": "7cc966535fc53bb3ce9d40adfec00227fa00f8528efcce1020ddd49bd668f93e",
        "question": "List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Documents_to_be_Destroyed ] Output [ Destruction_Authorised_by_Employee_ID , Destroyed_by_Employee_ID ] ; #2 = Scan Table [ Employees ] Output [ Employee_Name , Employee_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Destroyed_by_Employee_ID = #2.Employee_ID ] Output [ #2.Employee_Name , #1.Destruction_Authorised_by_Employee_ID ] ; #4 = Scan Table [ Employees ] Output [ Employee_Name , Employee_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Destruction_Authorised_by_Employee_ID = #4.Employee_ID ] Output [ #3.Employee_Name ]"
    },
    {
        "id": "89253be752af1be712bfaf90f514c63ce48df536090c0b0c034128cb3ee5715f",
        "question": "Show the id of each employee and the number of document destruction authorised by that employee.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Documents_to_be_Destroyed ] Output [ Destruction_Authorised_by_Employee_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Destruction_Authorised_by_Employee_ID ] Output [ Destruction_Authorised_by_Employee_ID , countstar AS Count_Star ]"
    },
    {
        "id": "ebc37f2b79898f9ba28c0f6491708ce58771817c89d57045dd98dc4bcc3b98fb",
        "question": "What are the id of each employee and the number of document destruction authorised by that employee?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Documents_to_be_Destroyed ] Output [ Destruction_Authorised_by_Employee_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Destruction_Authorised_by_Employee_ID ] Output [ Destruction_Authorised_by_Employee_ID , countstar AS Count_Star ]"
    },
    {
        "id": "2b331af78135af361f5aa65df695bf480a9750524343df628a83454b7f1cae96",
        "question": "Show the employee ids and the number of documents destroyed by each employee.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Documents_to_be_Destroyed ] Output [ Destroyed_by_Employee_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Destroyed_by_Employee_ID ] Output [ countstar AS Count_Star , Destroyed_by_Employee_ID ]"
    },
    {
        "id": "70f7f696f80ffc2c1ee803c4163d7152a2536c7b7cdf33c2d2f6e22748330157",
        "question": "What are the id of each employee and the number of document destroyed by that employee?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Documents_to_be_Destroyed ] Output [ Destroyed_by_Employee_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Destroyed_by_Employee_ID ] Output [ countstar AS Count_Star , Destroyed_by_Employee_ID ]"
    },
    {
        "id": "93f1323be29ba6036ce7aab15f509942873d73b4c0083f0e22bcfa7bf53aeae9",
        "question": "Show the ids of the employees who don't authorize destruction for any document.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Output [ Employee_ID ] ; #2 = Scan Table [ Documents_to_be_Destroyed ] Output [ Destruction_Authorised_by_Employee_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Destruction_Authorised_by_Employee_ID = #1.Employee_ID ] Output [ #1.Employee_ID ]"
    },
    {
        "id": "7a4945c660e9c4442bd965ad8faea3ea3bee7cb4ef114e4c2748d3b783822e75",
        "question": "Which employees do not authorize destruction for any document? Give me their employee ids.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Output [ Employee_ID ] ; #2 = Scan Table [ Documents_to_be_Destroyed ] Output [ Destruction_Authorised_by_Employee_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Destruction_Authorised_by_Employee_ID = #1.Employee_ID ] Output [ #1.Employee_ID ]"
    },
    {
        "id": "8d492712d0491abd52538fd871366eb4fced9341378d0b6d818d9a12305380c8",
        "question": "Show the ids of all employees who have authorized destruction.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Documents_to_be_Destroyed ] Distinct [ true ] Output [ Destruction_Authorised_by_Employee_ID ]"
    },
    {
        "id": "d9b3a639cfc769dbfe974507ba3d5e95ae181b83548aeb9ef089c5b7131dd835",
        "question": "What are the ids of all the employees who authorize document destruction?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Documents_to_be_Destroyed ] Distinct [ true ] Output [ Destruction_Authorised_by_Employee_ID ]"
    },
    {
        "id": "be90deba317f1036f633c12452a5624cfff9bf4b378ca38ef11eab76f45e25f8",
        "question": "Show the ids of all employees who have destroyed a document.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Documents_to_be_Destroyed ] Distinct [ true ] Output [ Destroyed_by_Employee_ID ]"
    },
    {
        "id": "038aa4f6cf835a32d002cbc8d6e233b871f43adfa96f4848442f8a46df21de0b",
        "question": "What are the ids of all the employees who have destroyed documents?",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Documents_to_be_Destroyed ] Distinct [ true ] Output [ Destroyed_by_Employee_ID ]"
    },
    {
        "id": "76d61d58637ba935c10c3909ef928481ad967833f8831655a2a044af0656874c",
        "question": "Show the ids of all employees who don't destroy any document.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Output [ Employee_ID ] ; #2 = Scan Table [ Documents_to_be_Destroyed ] Output [ Destroyed_by_Employee_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Destroyed_by_Employee_ID = #1.Employee_ID ] Output [ #1.Employee_ID ]"
    },
    {
        "id": "b51e976b6473ea74db63771d4b805cc73b7c0e85addf49b42cd212521965f809",
        "question": "Which employees do not destroy any document? Find their employee ids.",
        "parsing_tree": "cre_Doc_Tracking_DB | #1 = Scan Table [ Employees ] Output [ Employee_ID ] ; #2 = Scan Table [ Documents_to_be_Destroyed ] Output [ Destroyed_by_Employee_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Destroyed_by_Employee_ID = #1.Employee_ID ] Output [ #1.Employee_ID ]"
    },
    {
        "id": "936c35914d9a45513b329adc06dcda62d2f980377fd117260db2a3fc7eeb3046",
        "question": "How many clubs are there?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "646e626de7559d662263b3c38bf60247465aea0cb745720824a35899d517a9ef",
        "question": "Count the total number of clubs.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0c110e823808583500ebc0f8d666e306ba74ec8e4c3871e96f6f916c9e24be5b",
        "question": "What are the names of all clubs?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Output [ ClubName ]"
    },
    {
        "id": "957dd099c604118bdc548a4cfae36c7c750a83adf74de6c02c47532eb96802f6",
        "question": "Give me the name of each club.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Output [ ClubName ]"
    },
    {
        "id": "4f2bafa1d63656c25bbcf24453efaed2fafc7ba5d901cfdfc69bddf6772f17b3",
        "question": "How many students are there?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1005d902cbe594544143728edfbaf53ddb620593ea5815315116b2ad0f542b44",
        "question": "Count the total number of students.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "264cb85517c0fc98e4f9d80cd660c3341f1582bd466c2da81ed4635ae2e77663",
        "question": "What are the first names of all the students?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Distinct [ true ] Output [ Fname ]"
    },
    {
        "id": "5f6370735dfab9da0e7d3416161b5f740e1d445e528eb0c4f504014ebe9355bc",
        "question": "Find each student's first name.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Distinct [ true ] Output [ Fname ]"
    },
    {
        "id": "c045bbe67a6b4d8b306cba542e90e636b9d7dc6c94cfe5644acdc8eef5b0c9a1",
        "question": "Find the last names of the members of the club \"Bootup Baltimore\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ LName , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.LName ]"
    },
    {
        "id": "154ed9610d07a0ebdffbeeb349740ca2f3777f370c9df9c04dcdfabf0d53b56f",
        "question": "Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ LName , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.LName ]"
    },
    {
        "id": "de1234d06b5414ec0e7e3f81c238038c7de011e4328073aebcf4aa61b17b7c0a",
        "question": "Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Hopkins Student Enterprises' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ LName , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.LName ]"
    },
    {
        "id": "7ad6cc9b3c0da28e4382c4c58c6487f63657100dc7231a3b73fa4990fdb763fb",
        "question": "Return the last name for the members of the club named \"Hopkins Student Enterprises\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Hopkins Student Enterprises' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ LName , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.LName ]"
    },
    {
        "id": "e1f5146a8e9ed4fba6ff6ffb3c4e5b2c8fe7e2644a1546b4e268f971c09dfaff",
        "question": "How many members does the club \"Tennis Club\" has?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Tennis Club' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #3.StuID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ed34854dde9ec4f8a6f35e8d517d42cfac5d09d3050bad6bf61a95d15ad76d8b",
        "question": "Count the members of the club \"Tennis Club\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Tennis Club' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #3.StuID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "10ae4aa0c38aba940f2c805d1876f2cb3de1a5e256061a24470f32c0d72b2157",
        "question": "Find the number of members of club \"Pen and Paper Gaming\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Pen and Paper Gaming' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #3.StuID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "fdba150ee1d3c144fb1e9e3281fffe9bef71620ea38540b50af0c885c9882df1",
        "question": "How many people have membership in the club \"Pen and Paper Gaming\"?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Pen and Paper Gaming' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #3.StuID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2ba27382ef3294c93eb2c2034ce1f1752ce4ec25e826ea16b22864eb7eac565b",
        "question": "How many clubs does \"Linda Smith\" belong to?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Linda' AND LName = 'Smith' ] Output [ Fname , LName , StuID ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Output [ #3.ClubID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0d2a7e4b144a26237ee05ce5b09b519aa4633aef52bb295b50295a2ab5af215e",
        "question": "How many clubs does \"Linda Smith\" have membership for?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Linda' AND LName = 'Smith' ] Output [ Fname , LName , StuID ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Output [ #3.ClubID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "933edf32b45df861bed800d58534772e1fa52262bdaf44eedba0d78a94b7d11d",
        "question": "Find the number of clubs where \"Tracy Kim\" is a member.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Tracy' AND LName = 'Kim' ] Output [ Fname , LName , StuID ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Output [ #3.ClubID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a40da6aaf8ced37a57702e3ee01fb68f0bd67d7a75066d32decfad6791ca3c46",
        "question": "For how many clubs is \"Tracy Kim\" a member?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Tracy' AND LName = 'Kim' ] Output [ Fname , LName , StuID ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Output [ #3.ClubID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "8e8a0b01f5ea52eacf37801f985a31cf9317ec7e6773fe5e2a45ddcffbb00105",
        "question": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , LName , Fname , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.LName ]"
    },
    {
        "id": "d4583a66cc3c1452de3d6c31e763b6c8b0fb474f78f974a283550665f19cbb2d",
        "question": "Give me the first name and last name for all the female members of the club \"Bootup Baltimore\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , LName , Fname , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.LName ]"
    },
    {
        "id": "69c83b59882a1da2a1a357abf45134fb0883655280fc88e5cdc908eaa2892b3f",
        "question": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Hopkins Student Enterprises' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Predicate [ Sex = 'M' ] Output [ Sex , LName , Fname , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.LName ]"
    },
    {
        "id": "634769bf1a783c375556d4cf618d6ebbf326cd36ed51b97e46379e4358a27dab",
        "question": "What are the first name and last name of each male member in club \"Hopkins Student Enterprises\"?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Hopkins Student Enterprises' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Predicate [ Sex = 'M' ] Output [ Sex , LName , Fname , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.LName ]"
    },
    {
        "id": "57052c9f0e239603523f1bf65fa1347bcc1253ca1c63c1b290120d20cee04d6d",
        "question": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Predicate [ Major = 600 ] Output [ LName , Fname , StuID , Major ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.LName ]"
    },
    {
        "id": "908577d087c5963ded50b90204d5c883b546748651d76374f4810ff6b697fa98",
        "question": "Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Predicate [ Major = 600 ] Output [ LName , Fname , StuID , Major ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.LName ]"
    },
    {
        "id": "eb8b54c739bc5f15218703d55ac9171cecdd421ac87d1f24fcbad02546a2fd09",
        "question": "Which club has the most members majoring in \"600\"?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #2 = Scan Table [ Student ] Predicate [ Major = 600 ] Output [ StuID , Major ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID , ClubName ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Output [ #4.ClubName ] ; #6 = Aggregate [ #5 ] GroupBy [ ClubName ] Output [ countstar AS Count_Star , ClubName ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , ClubName ]"
    },
    {
        "id": "ddf7854e2ca324191e7283f1fda5a929a5231e900f043a0fa82ce1d902c55783",
        "question": "Find the club which has the largest number of members majoring in \"600\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #2 = Scan Table [ Student ] Predicate [ Major = 600 ] Output [ StuID , Major ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID , ClubName ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Output [ #4.ClubName ] ; #6 = Aggregate [ #5 ] GroupBy [ ClubName ] Output [ countstar AS Count_Star , ClubName ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , ClubName ]"
    },
    {
        "id": "5380877c133803a417d9512b864d1601229b384a96e31a3cac5142e7a38f754d",
        "question": "Find the name of the club that has the most female students.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #2 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID , ClubName ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Output [ #4.ClubName ] ; #6 = Aggregate [ #5 ] GroupBy [ ClubName ] Output [ countstar AS Count_Star , ClubName ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , ClubName ]"
    },
    {
        "id": "175177de204df57e85d030d548d27ca45d98549c47a1d8a9750d62130857d265",
        "question": "Which club has the most female students as their members? Give me the name of the club.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #2 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID , ClubName ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Output [ #4.ClubName ] ; #6 = Aggregate [ #5 ] GroupBy [ ClubName ] Output [ countstar AS Count_Star , ClubName ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , ClubName ]"
    },
    {
        "id": "1d2c522b1650dae4695e92ce9af1db23b7a003e329759e0534be0ed61af14fc6",
        "question": "What is the description of the club named \"Tennis Club\"?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Tennis Club' ] Output [ ClubName , ClubDesc ]"
    },
    {
        "id": "a27595fe5be0881e2b46503469abcfbeca13ece2bc94269699713b9663b35d00",
        "question": "Find the description of the club called \"Tennis Club\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Tennis Club' ] Output [ ClubName , ClubDesc ]"
    },
    {
        "id": "620338e753d127b54f070c9555457da983922caaa551a9f0ef9d736940c50a48",
        "question": "Find the description of the club \"Pen and Paper Gaming\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Pen and Paper Gaming' ] Output [ ClubName , ClubDesc ]"
    },
    {
        "id": "d67a45bf90471ee4931264e986e5cf1e7bcab07889c38c7d96b433b74af279f6",
        "question": "What is the description of the club \"Pen and Paper Gaming\"?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Pen and Paper Gaming' ] Output [ ClubName , ClubDesc ]"
    },
    {
        "id": "ca4115216cf1c7e54660d24aa6c98b223a3a9eab31e206ed8020f19a31911dfe",
        "question": "What is the location of the club named \"Tennis Club\"?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Tennis Club' ] Output [ ClubLocation , ClubName ]"
    },
    {
        "id": "48f8d12d426cb96ce5567fbda5592ef6b42f88365a2cdf59ef62b94d684782cd",
        "question": "Where us the club named \"Tennis Club\" located?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Tennis Club' ] Output [ ClubLocation , ClubName ]"
    },
    {
        "id": "a20f1fa9569d7e27379794f40533a8e6a35eae450b61e25ae62ca76c98de6436",
        "question": "Find the location of the club \"Pen and Paper Gaming\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Pen and Paper Gaming' ] Output [ ClubLocation , ClubName ]"
    },
    {
        "id": "5cd97d3ddc04784aad8945b628dbfbb12eda46462f58c0cd319dc40414ce9c7b",
        "question": "Where is the club \"Pen and Paper Gaming\" located?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Pen and Paper Gaming' ] Output [ ClubLocation , ClubName ]"
    },
    {
        "id": "4bf295bf1f305ba79a822f87e58acc1cf4c194f0740ba53ff5abd9e18bc26e0b",
        "question": "Where is the club \"Hopkins Student Enterprises\" located?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Hopkins Student Enterprises' ] Output [ ClubLocation , ClubName ]"
    },
    {
        "id": "2da40b86009aab6ffe43b6d62889d2ea4f1d55e8b9598a34b98cb9b57fbbc65e",
        "question": "Tell me the location of the club \"Hopkins Student Enterprises\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Hopkins Student Enterprises' ] Output [ ClubLocation , ClubName ]"
    },
    {
        "id": "8500ac4977b0cb92099f58b10e0503f08272c3e33a8f857791bedee0ae3f2ecd",
        "question": "Find the name of all the clubs at \"AKW\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubLocation = 'AKW' ] Output [ ClubLocation , ClubName ]"
    },
    {
        "id": "6f51a895c77e97a7e6f3b022a44fdf945ed1b3e5ac69fc29996c23bdea3c27c2",
        "question": "Which clubs are located at \"AKW\"? Return the club names.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubLocation = 'AKW' ] Output [ ClubLocation , ClubName ]"
    },
    {
        "id": "6afd6a6b816f0f0af0018bc8477ffd4f64c825444c4ce9d6300c17756ce82ad7",
        "question": "How many clubs are located at \"HHH\"?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubLocation = 'HHH' ] Output [ ClubLocation ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "29c201a47df744e6630e690505c612aee46922b4bf2b804a9b948df75c53d8d1",
        "question": "Count the number of clubs located at \"HHH\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubLocation = 'HHH' ] Output [ ClubLocation ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d079de670485db89d19a404a600ef65122aa5a65dd92bc5a0ba7171a7cc830b8",
        "question": "What are the first and last name of the president of the club \"Bootup Baltimore\"?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Predicate [ Position = 'President' ] Output [ ClubID , StuID , Position ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.LName ]"
    },
    {
        "id": "42c20cc8799e7a3841592c84c9f66e15f90c2217194e202910bfa8c488bd1601",
        "question": "Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Predicate [ Position = 'President' ] Output [ ClubID , StuID , Position ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.LName ]"
    },
    {
        "id": "3c9163071ae73fd3efbda55a7c02636f1a101da39c668edb4f587633f2639989",
        "question": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Hopkins Student Enterprises' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Predicate [ Position = 'CTO' ] Output [ ClubID , StuID , Position ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.LName ]"
    },
    {
        "id": "f258acf7bd2e2b58c1aa5c6dcf8add65bd93bb1ba0e156720dc0bbca8e1f57d5",
        "question": "Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Hopkins Student Enterprises' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Predicate [ Position = 'CTO' ] Output [ ClubID , StuID , Position ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.LName ]"
    },
    {
        "id": "af17e6e2f37771408df468670ffb24461e00969f80196bae9ea2da75e50604e2",
        "question": "How many different roles are there in the club \"Bootup Baltimore\"?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , Position ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Distinct [ true ] Output [ #2.Position ] ; #4 = Aggregate [ #3 ] Output [ COUNT(Position) AS Count_Position ]"
    },
    {
        "id": "779bc88a3942e9fb73a3088558d7daa0eb123701a7402616fc057362db873364",
        "question": "Count the number of different positions in the club \"Bootup Baltimore\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , Position ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Distinct [ true ] Output [ #2.Position ] ; #4 = Aggregate [ #3 ] Output [ COUNT(Position) AS Count_Position ]"
    },
    {
        "id": "c6538f792cbf438cb76b20dcf821ce3035a6ab1dfbe9f68d94ccbbc68dff9a41",
        "question": "How many members of \"Bootup Baltimore\" are older than 18?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Predicate [ Age > 18 ] Output [ StuID , Age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #3.StuID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1de89b4e5afdc862c3d1a3752567e24156b8d72ac0d6b991c2a9caf4d75fe9d6",
        "question": "Count the number of members in club \"Bootup Baltimore\" whose age is above 18.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Predicate [ Age > 18 ] Output [ StuID , Age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #3.StuID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cf5f5a523ad8bde66da4c8db8f48adb45b202f5bd67431073a8825bf9eccfd03",
        "question": "How many members of club \"Bootup Baltimore\" are younger than 18?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Predicate [ Age < 18 ] Output [ StuID , Age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #3.StuID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "49bfe55e2f75e61dd9c7de75794d8f7878626353c7e833223588fc527bff697a",
        "question": "Count the number of members in club \"Bootup Baltimore\" whose age is below 18.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Predicate [ Age < 18 ] Output [ StuID , Age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #3.StuID ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2648fae83983d8089465e0cedc61c0d256e0893662e78c8f91790973a3485c6c",
        "question": "Find the names of all the clubs that have at least a member from the city with city code \"BAL\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Predicate [ city_code = 'BAL' ] Output [ StuID , city_code ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID , ClubName ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Distinct [ true ] Output [ #4.ClubName ]"
    },
    {
        "id": "91e37cf8263ef23a30c6a0b6f9e74642a0837a1a2700d840c8534c67eee3bddd",
        "question": "Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Predicate [ city_code = 'BAL' ] Output [ StuID , city_code ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID , ClubName ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Distinct [ true ] Output [ #4.ClubName ]"
    },
    {
        "id": "299250a9ee3083a32b74e13db03ee42d5fb208bafb8fcab1d0693cd12d71f6b4",
        "question": "Find the names of the clubs that have at least a member from the city with city code \"HOU\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Predicate [ city_code = 'HOU' ] Output [ StuID , city_code ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID , ClubName ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Distinct [ true ] Output [ #4.ClubName ]"
    },
    {
        "id": "059b13847d5219874a8f2de422af06132c2f4370954836f5dcf8dda6bcef579f",
        "question": "Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Predicate [ city_code = 'HOU' ] Output [ StuID , city_code ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID , ClubName ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Distinct [ true ] Output [ #4.ClubName ]"
    },
    {
        "id": "e15131f75c29c10bd51ad5cd88b58c51c9f4a2546d4792fc357faa7ba989636f",
        "question": "How many clubs does the student named \"Eric Tai\" belong to?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Eric' AND LName = 'Tai' ] Output [ Fname , LName , StuID ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID , ClubName ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Distinct [ true ] Output [ #4.ClubName ] ; #6 = Aggregate [ #5 ] Output [ COUNT(ClubName) AS Count_ClubName ]"
    },
    {
        "id": "f143a30207bb8e161d01bfb2976609296848938839148822ba1a7707ebe8663f",
        "question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Eric' AND LName = 'Tai' ] Output [ Fname , LName , StuID ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID , ClubName ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Distinct [ true ] Output [ #4.ClubName ] ; #6 = Aggregate [ #5 ] Output [ COUNT(ClubName) AS Count_ClubName ]"
    },
    {
        "id": "0897a5169c875eec7525c5f0025675e780b78a80888d10b233f50d3d822d1482",
        "question": "List the clubs that have at least a member with advisor \"1121\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Predicate [ Advisor = 1121 ] Output [ Advisor , StuID ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID , ClubName ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Distinct [ true ] Output [ #4.ClubName ]"
    },
    {
        "id": "c8e39211287dc672c07f8cb7728bd533eae32d2d66a9df7709e325c451f0c247",
        "question": "Which clubs have one or more members whose advisor is \"1121\"?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Student ] Predicate [ Advisor = 1121 ] Output [ Advisor , StuID ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.ClubID ] ; #4 = Scan Table [ Club ] Output [ ClubID , ClubName ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ClubID = #4.ClubID ] Distinct [ true ] Output [ #4.ClubName ]"
    },
    {
        "id": "08f0b16e2e554f51629c98e6e0e60c4a275e1b24ccc4b7490798b98c4f0ef94e",
        "question": "What is the average age of the members of the club \"Bootup Baltimore\"?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ StuID , Age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Age ] ; #6 = Aggregate [ #5 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "ba2b6320a3ecf77340e4d1f46c955aa42f92cd0b2bc58fb0d3655b422011c5bf",
        "question": "Find the average age of the members in the club \"Bootup Baltimore\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Bootup Baltimore' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ StuID , Age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Age ] ; #6 = Aggregate [ #5 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "6041f57aeb5a4fddd59262aac285c3c95e799861153b0741ec4879fc91558c88",
        "question": "Find the average age of members of the club \"Hopkins Student Enterprises\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Hopkins Student Enterprises' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ StuID , Age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Age ] ; #6 = Aggregate [ #5 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "263ecd9e5ff6db669a29ac269a14f9b42a1bcdd5fd02b5bd6f3a934e36ddabde",
        "question": "On average, how old are the members in the club \"Hopkins Student Enterprises\"?",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Hopkins Student Enterprises' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ StuID , Age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Age ] ; #6 = Aggregate [ #5 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "0661871508417e2aba0c228cdd005e7d61baab199268a407d3c5cd0a92e69a77",
        "question": "Retrieve the average age of members of the club \"Tennis Club\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Tennis Club' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ StuID , Age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Age ] ; #6 = Aggregate [ #5 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "5a5ba6959a8fb9f8cc790c445b64fb939e6c5bb5413f4cc698e9a5dc0f1e7f72",
        "question": "Compute the average age of the members in the club \"Tennis Club\".",
        "parsing_tree": "club_1 | #1 = Scan Table [ Club ] Predicate [ ClubName = 'Tennis Club' ] Output [ ClubID , ClubName ] ; #2 = Scan Table [ Member_of_club ] Output [ ClubID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ClubID = #2.ClubID ] Output [ #2.StuID ] ; #4 = Scan Table [ Student ] Output [ StuID , Age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Age ] ; #6 = Aggregate [ #5 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "55962f46336a371a6fc260a379baf9c7069e0cbd292e5d09a56f472daddc4ef6",
        "question": "What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Documents ] Predicate [ sent_date < '1986-08-26 20:49:27.000' ] Output [ sent_date , grant_id ] ; #2 = Scan Table [ Grants ] Output [ grant_amount , grant_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.grant_id = #2.grant_id ] Distinct [ true ] Output [ #2.grant_amount ] ; #4 = Scan Table [ Grants ] Predicate [ grant_end_date > '1989-03-16 18:27:16.000' ] Output [ grant_amount , grant_end_date ] ; #5 = Intersect [ #3 , #4 ] Predicate [ #3.grant_amount = #4.grant_amount ] Output [ #3.grant_amount ]"
    },
    {
        "id": "53eca631dee74ba544cca5e3f6ae48e5e825c0fd3385520a377c583ad0187a67",
        "question": "What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Documents ] Predicate [ sent_date < '1986-08-26 20:49:27.000' ] Output [ sent_date , grant_id ] ; #2 = Scan Table [ Grants ] Output [ grant_amount , grant_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.grant_id = #2.grant_id ] Distinct [ true ] Output [ #2.grant_amount ] ; #4 = Scan Table [ Grants ] Predicate [ grant_end_date > '1989-03-16 18:27:16.000' ] Output [ grant_amount , grant_end_date ] ; #5 = Intersect [ #3 , #4 ] Predicate [ #3.grant_amount = #4.grant_amount ] Output [ #3.grant_amount ]"
    },
    {
        "id": "bfd8fe74cd8f53c32ff90f4b326612421fb03fd96875e1afd4e0182bc620ec05",
        "question": "List the project details of the project both producing patent and paper as outcomes.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Outcomes ] Predicate [ outcome_code = 'Paper' ] Output [ project_id , outcome_code ] ; #2 = Scan Table [ Projects ] Output [ project_id , project_details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Distinct [ true ] Output [ #2.project_details ] ; #4 = Scan Table [ Project_Outcomes ] Predicate [ outcome_code = 'Patent' ] Output [ project_id , outcome_code ] ; #5 = Scan Table [ Projects ] Output [ project_id , project_details ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.project_id = #5.project_id ] Output [ #5.project_details ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.project_details = #6.project_details ] Output [ #3.project_details ]"
    },
    {
        "id": "fec7a064e693de788451b6ef138e940f4b61b2f8f88f2c0b43274116670c2c6b",
        "question": "What are the details of the project that is producing both patents and papers as outcomes?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Outcomes ] Predicate [ outcome_code = 'Paper' ] Output [ project_id , outcome_code ] ; #2 = Scan Table [ Projects ] Output [ project_id , project_details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Distinct [ true ] Output [ #2.project_details ] ; #4 = Scan Table [ Project_Outcomes ] Predicate [ outcome_code = 'Patent' ] Output [ project_id , outcome_code ] ; #5 = Scan Table [ Projects ] Output [ project_id , project_details ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.project_id = #5.project_id ] Output [ #5.project_details ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.project_details = #6.project_details ] Output [ #3.project_details ]"
    },
    {
        "id": "1741a72c1c1f38d30e2f858cb9c8f360d4c45dfc61d4a15c8d2141a7a962fad5",
        "question": "What is the total grant amount of the organisations described as research?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Organisation_Types ] Predicate [ organisation_type_description = 'Research' ] Output [ organisation_type , organisation_type_description ] ; #2 = Scan Table [ Organisations ] Output [ organisation_type , organisation_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.organisation_type = #2.organisation_type ] Output [ #2.organisation_id ] ; #4 = Scan Table [ Grants ] Output [ grant_amount , organisation_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.organisation_id = #4.organisation_id ] Output [ #4.grant_amount ] ; #6 = Aggregate [ #5 ] Output [ SUM(grant_amount) AS Sum_grant_amount ]"
    },
    {
        "id": "1755005722934ae8f195296f310c59f28e2b9b9c5b4c1571b4539e41fe3f5b88",
        "question": "What is the total amount of grant money for research?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Organisation_Types ] Predicate [ organisation_type_description = 'Research' ] Output [ organisation_type , organisation_type_description ] ; #2 = Scan Table [ Organisations ] Output [ organisation_type , organisation_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.organisation_type = #2.organisation_type ] Output [ #2.organisation_id ] ; #4 = Scan Table [ Grants ] Output [ grant_amount , organisation_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.organisation_id = #4.organisation_id ] Output [ #4.grant_amount ] ; #6 = Aggregate [ #5 ] Output [ SUM(grant_amount) AS Sum_grant_amount ]"
    },
    {
        "id": "11664f8943b7baa162fd309db0577f7736879f72b6d9b72e2fd33b705c524afe",
        "question": "List from which date and to which date these staff work: project staff of the project which hires the most staffs",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Output [ project_id ] ; #2 = Aggregate [ #1 ] GroupBy [ project_id ] Output [ project_id , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ project_id , Count_Star ] ; #4 = Scan Table [ Project_Staff ] Output [ project_id , date_from , date_to ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.project_id = #4.project_id ] Output [ #4.date_to , #4.date_from ] ; #6 = Scan Table [ Project_Staff ] Predicate [ role_code = 'leader' ] Output [ date_to , role_code , date_from ] ; #7 = Union [ #5 , #6 ] Output [ #5.date_to , #5.date_from ]"
    },
    {
        "id": "05275474f08151ff3ca0ff0dcdc984f46231f7c8d11af409225c7a94fa0f1a4c",
        "question": "From what date and to what date do the staff work on a project that has the most staff and has staff in a leader role?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Output [ project_id ] ; #2 = Aggregate [ #1 ] GroupBy [ project_id ] Output [ project_id , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ project_id , Count_Star ] ; #4 = Scan Table [ Project_Staff ] Output [ project_id , date_from , date_to ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.project_id = #4.project_id ] Output [ #4.date_to , #4.date_from ] ; #6 = Scan Table [ Project_Staff ] Predicate [ role_code = 'leader' ] Output [ date_to , role_code , date_from ] ; #7 = Union [ #5 , #6 ] Output [ #5.date_to , #5.date_from ]"
    },
    {
        "id": "7e4661e75ca086b42d7f2cbdf5ed3e0b2c7914265ad05a738785316bb96ad98d",
        "question": "Find the organisation ids and details of the organisations which are involved in",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Grants ] Output [ grant_amount , organisation_id ] ; #2 = Aggregate [ #1 ] GroupBy [ organisation_id ] Output [ SUM(grant_amount) AS Sum_grant_amount , organisation_id ] ; #3 = Scan Table [ Organisations ] Output [ organisation_details , organisation_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.organisation_id = #3.organisation_id ] Output [ #3.organisation_id , #2.Sum_grant_amount , #3.organisation_details ] ; #5 = Filter [ #4 ] Predicate [ Sum_grant_amount > 6000.0 ] Output [ organisation_details , organisation_id ]"
    },
    {
        "id": "e7b24037fbf770899624778391d0fe60bb6ba5462c292de9d91c55f102c6f3da",
        "question": "What are the ids and details for all organizations that have grants of more than 6000 dollars?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Grants ] Output [ grant_amount , organisation_id ] ; #2 = Aggregate [ #1 ] GroupBy [ organisation_id ] Output [ SUM(grant_amount) AS Sum_grant_amount , organisation_id ] ; #3 = Scan Table [ Organisations ] Output [ organisation_details , organisation_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.organisation_id = #3.organisation_id ] Output [ #3.organisation_id , #2.Sum_grant_amount , #3.organisation_details ] ; #5 = Filter [ #4 ] Predicate [ Sum_grant_amount > 6000.0 ] Output [ organisation_details , organisation_id ]"
    },
    {
        "id": "8c099fd6984a748d7493bded9e08c4c50f3e812bdd54719562740cc8613620f4",
        "question": "Which organisation type hires most research staff?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Research_Staff ] Output [ employer_organisation_id ] ; #2 = Scan Table [ Organisations ] Output [ organisation_type , organisation_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.employer_organisation_id = #2.organisation_id ] Output [ #2.organisation_type ] ; #4 = Aggregate [ #3 ] GroupBy [ organisation_type ] Output [ countstar AS Count_Star , organisation_type ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ organisation_type , Count_Star ]"
    },
    {
        "id": "b57058e18024bfa2e44d0c6a79dda887b06db6b63d9817e9ed1d3d975cf23e0c",
        "question": "What is the type of the organization with the most research staff?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Research_Staff ] Output [ employer_organisation_id ] ; #2 = Scan Table [ Organisations ] Output [ organisation_type , organisation_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.employer_organisation_id = #2.organisation_id ] Output [ #2.organisation_type ] ; #4 = Aggregate [ #3 ] GroupBy [ organisation_type ] Output [ countstar AS Count_Star , organisation_type ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ organisation_type , Count_Star ]"
    },
    {
        "id": "0691c18779fe68b78f7224ac9f418207ddc86c5073bf400edce62fa0a84d8136",
        "question": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Grants ] Predicate [ grant_amount > 5000.0 ] Output [ grant_amount , grant_id , organisation_id ] ; #2 = Scan Table [ Organisation_Types ] Predicate [ organisation_type_description = 'Research' ] Output [ organisation_type , organisation_type_description ] ; #3 = Scan Table [ Organisations ] Output [ organisation_type , organisation_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.organisation_type = #3.organisation_type ] Output [ #3.organisation_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.organisation_id = #4.organisation_id ] Output [ #1.grant_id ] ; #6 = Scan Table [ Documents ] Output [ sent_date , grant_id ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.grant_id = #6.grant_id ] Output [ #6.sent_date ]"
    },
    {
        "id": "27b3b4b799d9df44e86beb17d94738b17700e60334d422c19767805b271bba15",
        "question": "What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Grants ] Predicate [ grant_amount > 5000.0 ] Output [ grant_amount , grant_id , organisation_id ] ; #2 = Scan Table [ Organisation_Types ] Predicate [ organisation_type_description = 'Research' ] Output [ organisation_type , organisation_type_description ] ; #3 = Scan Table [ Organisations ] Output [ organisation_type , organisation_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.organisation_type = #3.organisation_type ] Output [ #3.organisation_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.organisation_id = #4.organisation_id ] Output [ #1.grant_id ] ; #6 = Scan Table [ Documents ] Output [ sent_date , grant_id ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.grant_id = #6.grant_id ] Output [ #6.sent_date ]"
    },
    {
        "id": "edc59d0dce5dafaebfcc0eb0a854729ee6d412681b96570d70cdab24d7bb39bb",
        "question": "List the project details of the projects which did not hire any staff for a researcher role.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Projects ] Output [ project_id , project_details ] ; #2 = Scan Table [ Project_Staff ] Predicate [ role_code = 'researcher' ] Output [ project_id , role_code ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.project_id = #1.project_id ] Output [ #1.project_details ]"
    },
    {
        "id": "4b5220fe2dc4e923539077291504c0e26a561889ac90fb3b46a60bd164ed2957",
        "question": "What are the details for all projects that did not hire any staff in a research role?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Projects ] Output [ project_id , project_details ] ; #2 = Scan Table [ Project_Staff ] Predicate [ role_code = 'researcher' ] Output [ project_id , role_code ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.project_id = #1.project_id ] Output [ #1.project_details ]"
    },
    {
        "id": "dac70f50b0af7e4c30dc83560c3e322c3d7a550438bec02631fa61f0260b6460",
        "question": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Projects ] Predicate [ project_details = 'omnis' ] Output [ project_id , project_details ] ; #2 = Scan Table [ Tasks ] Output [ project_id , task_details , task_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.task_id , #1.project_id , #2.task_details ] ; #4 = Scan Table [ Projects ] Output [ project_id ] ; #5 = Scan Table [ Project_Outcomes ] Output [ project_id ] ; #6 = Scan Table [ Tasks ] Output [ project_id , task_details , task_id ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.project_id = #6.project_id ] Output [ #5.project_id , #6.task_details , #6.task_id ] ; #8 = Join [ #4 , #7 ] Predicate [ #4.project_id = #7.project_id ] Output [ #7.task_details , #4.project_id , #7.task_id ] ; #9 = Aggregate [ #8 ] GroupBy [ task_id ] Output [ project_id , countstar AS Count_Star , task_details , task_id ] ; #10 = Filter [ #9 ] Predicate [ Count_Star > 2 ] Output [ project_id , task_details , task_id ] ; #11 = Union [ #3 , #10 ] Output [ #3.task_id , #3.task_details , #3.project_id ]"
    },
    {
        "id": "364082d63d3db45bc41d575d5d8a0a38661bcddae7d9bdb5e2024c45f3df0971",
        "question": "What are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' or have at least 3 outcomes?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Projects ] Predicate [ project_details = 'omnis' ] Output [ project_id , project_details ] ; #2 = Scan Table [ Tasks ] Output [ project_id , task_details , task_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.task_id , #1.project_id , #2.task_details ] ; #4 = Scan Table [ Projects ] Output [ project_id ] ; #5 = Scan Table [ Project_Outcomes ] Output [ project_id ] ; #6 = Scan Table [ Tasks ] Output [ project_id , task_details , task_id ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.project_id = #6.project_id ] Output [ #5.project_id , #6.task_details , #6.task_id ] ; #8 = Join [ #4 , #7 ] Predicate [ #4.project_id = #7.project_id ] Output [ #7.task_details , #4.project_id , #7.task_id ] ; #9 = Aggregate [ #8 ] GroupBy [ task_id ] Output [ project_id , countstar AS Count_Star , task_details , task_id ] ; #10 = Filter [ #9 ] Predicate [ Count_Star > 2 ] Output [ project_id , task_details , task_id ] ; #11 = Union [ #3 , #10 ] Output [ #3.task_id , #3.task_details , #3.project_id ]"
    },
    {
        "id": "1edeb4170971fe6810c79866acc577351915c6df4750f8c5550d538eca58c6e0",
        "question": "When do all the researcher role staff start to work, and when do they stop working?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Predicate [ role_code = 'researcher' ] Output [ date_to , role_code , date_from ]"
    },
    {
        "id": "0efd99e1f8152c8d7a94e2e8757e55ed94b3a4f4504370a74ce3389dcfaf9aa0",
        "question": "When did researchers start and stop working?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Predicate [ role_code = 'researcher' ] Output [ date_to , role_code , date_from ]"
    },
    {
        "id": "d7f250ec440bccaa221508de3e99582c59fd01cae2aa7243c6752bce4194a1b3",
        "question": "How many kinds of roles are there for the staff?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Distinct [ true ] Output [ role_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e06882efd8e00ede9831e0933ed5d4a9a1e210c789197b9ca523db07a6497d68",
        "question": "How many different roles are there on the project staff?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Distinct [ true ] Output [ role_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "450acc600c54b6540a5c02f393d877eedfffb7d393870d6b360f896898f5dd3a",
        "question": "What is the total amount of grants given by each organisations? Also list the organisation id.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Grants ] Output [ grant_amount , organisation_id ] ; #2 = Aggregate [ #1 ] GroupBy [ organisation_id ] Output [ SUM(grant_amount) AS Sum_grant_amount , organisation_id ]"
    },
    {
        "id": "31a2557092ed2734ba507194e4ed96beb7638a10e74cde68eb3ad755db5fbbeb",
        "question": "What is the total amount of grant money given to each organization and what is its id?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Grants ] Output [ grant_amount , organisation_id ] ; #2 = Aggregate [ #1 ] GroupBy [ organisation_id ] Output [ SUM(grant_amount) AS Sum_grant_amount , organisation_id ]"
    },
    {
        "id": "5a672c6651be21eda1bc66244a4984fb272ac7343fe8a6577915f04da275eae4",
        "question": "List the project details of the projects with the research outcome described with the substring 'Published'.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Research_Outcomes ] Predicate [ outcome_description like '%Published%' ] Output [ outcome_code , outcome_description ] ; #2 = Scan Table [ Project_Outcomes ] Output [ project_id , outcome_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.outcome_code = #2.outcome_code ] Output [ #2.project_id ] ; #4 = Scan Table [ Projects ] Output [ project_id , project_details ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.project_id = #4.project_id ] Output [ #4.project_details ]"
    },
    {
        "id": "43a814cb36a6fa9f67740d321ed9a6b2846bdf4e4a0c47aaae03cbaa19f1546d",
        "question": "What are the details for the project whose research has been published?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Research_Outcomes ] Predicate [ outcome_description like '%Published%' ] Output [ outcome_code , outcome_description ] ; #2 = Scan Table [ Project_Outcomes ] Output [ project_id , outcome_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.outcome_code = #2.outcome_code ] Output [ #2.project_id ] ; #4 = Scan Table [ Projects ] Output [ project_id , project_details ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.project_id = #4.project_id ] Output [ #4.project_details ]"
    },
    {
        "id": "3d2ae2acb9b0b93ba10b9c0b3432264077e174b6f4820328c14a9ac7a85c9a2c",
        "question": "How many staff does each project has? List the project id and the number in an ascending order.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Output [ project_id ] ; #2 = Aggregate [ #1 ] GroupBy [ project_id ] Output [ project_id , countstar AS Count_Star ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star ASC ] Output [ project_id , Count_Star ]"
    },
    {
        "id": "3d70779af5b24c48ba3ec5f081e45180b1470512489d98c7995d40fc9f1aaeda",
        "question": "For each project id, how many staff does it have? List them in increasing order.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Output [ project_id ] ; #2 = Aggregate [ #1 ] GroupBy [ project_id ] Output [ project_id , countstar AS Count_Star ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star ASC ] Output [ project_id , Count_Star ]"
    },
    {
        "id": "57783f029d56355b2b6cdba9f3155ae559a35f1a34338581ae35fc1b5465a15e",
        "question": "What is the complete description of the researcher role.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Staff_Roles ] Predicate [ role_code = 'researcher' ] Output [ role_description , role_code ]"
    },
    {
        "id": "be0958612608b6841047b40033e01b6412d4a41507324a4d69ff81abc076565b",
        "question": "What is the complete description of the job of a researcher?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Staff_Roles ] Predicate [ role_code = 'researcher' ] Output [ role_description , role_code ]"
    },
    {
        "id": "a5cbfb94aa581845d06936922891ff251d4a6eda99054312d691da07effde07e",
        "question": "When did the first staff for the projects started working?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Output [ date_from ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date_from ASC ] Output [ date_from ]"
    },
    {
        "id": "e46996baf6f8981a231946f8e63644e7ce6bace7c734f0d9acfa824077926734",
        "question": "When did the first staff member start working?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Output [ date_from ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date_from ASC ] Output [ date_from ]"
    },
    {
        "id": "1f5cd9bbb2ca33370d24dd4e253e7ae107c0ff9c59e6e237b0613e00c2608d84",
        "question": "Which project made the most number of outcomes? List the project details and the project id.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Outcomes ] Output [ project_id ] ; #2 = Aggregate [ #1 ] GroupBy [ project_id ] Output [ project_id , countstar AS Count_Star ] ; #3 = Scan Table [ Projects ] Output [ project_id , project_details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.project_id = #3.project_id ] Output [ #3.project_details , #3.project_id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ project_id , Count_Star , project_details ]"
    },
    {
        "id": "4e2ab3e6aec9fe2715941fdee9dae89eb913a4af9bfe7f55092552b972284a78",
        "question": "What are the details and id of the project with the most outcomes?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Outcomes ] Output [ project_id ] ; #2 = Aggregate [ #1 ] GroupBy [ project_id ] Output [ project_id , countstar AS Count_Star ] ; #3 = Scan Table [ Projects ] Output [ project_id , project_details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.project_id = #3.project_id ] Output [ #3.project_details , #3.project_id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ project_id , Count_Star , project_details ]"
    },
    {
        "id": "6b00413c88bb9a90cb0c6cdea9e4580e88f4362ee567ff40981f504cc40ac4fb",
        "question": "Which projects have no outcome? List the project details.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Projects ] Output [ project_id , project_details ] ; #2 = Scan Table [ Project_Outcomes ] Output [ project_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.project_id = #1.project_id ] Output [ #1.project_details ]"
    },
    {
        "id": "6014bd558b1c55fa290e601d8d9522759ab4602c412baef2a6e06234d4a889fd",
        "question": "What are the details of the project with no outcomes?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Projects ] Output [ project_id , project_details ] ; #2 = Scan Table [ Project_Outcomes ] Output [ project_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.project_id = #1.project_id ] Output [ #1.project_details ]"
    },
    {
        "id": "21b3aa593903b4e237ec9211c8b605b769d9f1bc426c56c4e497526012b7bac8",
        "question": "Show the role description and the id of the project staff involved in most number of project outcomes?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Staff_Roles ] Output [ role_description , role_code ] ; #2 = Scan Table [ Project_Outcomes ] Output [ project_id ] ; #3 = Scan Table [ Project_Staff ] Output [ project_id , role_code , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.project_id = #3.project_id ] Output [ #3.role_code , #3.staff_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.role_code = #4.role_code ] Output [ #4.staff_id , #1.role_description ] ; #6 = Aggregate [ #5 ] GroupBy [ staff_id , role_description ] Output [ role_description , countstar AS Count_Star , staff_id ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ role_description , Count_Star , staff_id ]"
    },
    {
        "id": "aabeacf9cd6a574923f13e199a3b2e08696792394b5ba42dd2090d10f2715ed7",
        "question": "For each staff id, what is the description of the role that is involved with the most number of projects?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Staff_Roles ] Output [ role_description , role_code ] ; #2 = Scan Table [ Project_Outcomes ] Output [ project_id ] ; #3 = Scan Table [ Project_Staff ] Output [ project_id , role_code , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.project_id = #3.project_id ] Output [ #3.role_code , #3.staff_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.role_code = #4.role_code ] Output [ #4.staff_id , #1.role_description ] ; #6 = Aggregate [ #5 ] GroupBy [ staff_id , role_description ] Output [ role_description , countstar AS Count_Star , staff_id ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ role_description , Count_Star , staff_id ]"
    },
    {
        "id": "af4d06ba0faaf65342824a4dac246962a5b474768e5050fe52b8b1839092af92",
        "question": "Which document type is described with the prefix 'Initial'?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Document_Types ] Predicate [ document_description like 'Initial%' ] Output [ document_type_code , document_description ]"
    },
    {
        "id": "401589a0781c36c182a4d0c387418395cdbc8ab721e48833c8930c3195aa0b8f",
        "question": "What is the type of the document whose description starts with the word 'Initial'?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Document_Types ] Predicate [ document_description like 'Initial%' ] Output [ document_type_code , document_description ]"
    },
    {
        "id": "9a5f4c9ad910956b4c4927505f338fe2303d18600a5dda34ca30a7db9cacef6c",
        "question": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Document_Types ] Predicate [ document_description = 'Regular' ] Output [ document_type_code , document_description ] ; #2 = Scan Table [ Documents ] Output [ document_type_code , grant_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.document_type_code = #2.document_type_code ] Output [ #2.grant_id ] ; #4 = Scan Table [ Grants ] Output [ grant_start_date , grant_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.grant_id = #4.grant_id ] Distinct [ true ] Output [ #4.grant_start_date ] ; #6 = Scan Table [ Document_Types ] Predicate [ document_description = 'Initial Application' ] Output [ document_type_code , document_description ] ; #7 = Scan Table [ Documents ] Output [ document_type_code , grant_id ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.document_type_code = #7.document_type_code ] Output [ #7.grant_id ] ; #9 = Scan Table [ Grants ] Output [ grant_start_date , grant_id ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.grant_id = #9.grant_id ] Output [ #9.grant_start_date ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.grant_start_date = #10.grant_start_date ] Output [ #5.grant_start_date ]"
    },
    {
        "id": "93c73f8ea175ee570efcce351108c25875c59584bf265512429cac0020701c48",
        "question": "For grants that have descriptions of Regular and Initial Applications, what are their start dates?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Document_Types ] Predicate [ document_description = 'Regular' ] Output [ document_type_code , document_description ] ; #2 = Scan Table [ Documents ] Output [ document_type_code , grant_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.document_type_code = #2.document_type_code ] Output [ #2.grant_id ] ; #4 = Scan Table [ Grants ] Output [ grant_start_date , grant_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.grant_id = #4.grant_id ] Distinct [ true ] Output [ #4.grant_start_date ] ; #6 = Scan Table [ Document_Types ] Predicate [ document_description = 'Initial Application' ] Output [ document_type_code , document_description ] ; #7 = Scan Table [ Documents ] Output [ document_type_code , grant_id ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.document_type_code = #7.document_type_code ] Output [ #7.grant_id ] ; #9 = Scan Table [ Grants ] Output [ grant_start_date , grant_id ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.grant_id = #9.grant_id ] Output [ #9.grant_start_date ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.grant_start_date = #10.grant_start_date ] Output [ #5.grant_start_date ]"
    },
    {
        "id": "1cd20912696db69371dc02c194bab95042024f3cb486df1755424257671782ea",
        "question": "How many documents can one grant have at most? List the grant id and number.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Documents ] Output [ grant_id ] ; #2 = Aggregate [ #1 ] GroupBy [ grant_id ] Output [ countstar AS Count_Star , grant_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , grant_id ]"
    },
    {
        "id": "8d779303eb312b40fc9fc924e3dc96fb1943df2538f4265e189c915dccc592e1",
        "question": "For each grant id, how many documents does it have, and which one has the most?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Documents ] Output [ grant_id ] ; #2 = Aggregate [ #1 ] GroupBy [ grant_id ] Output [ countstar AS Count_Star , grant_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , grant_id ]"
    },
    {
        "id": "a8c5756c0a738443980d5e2806891a6464a58e5e578aa1d44c6ead44e78965ba",
        "question": "Find the organisation type description of the organisation detailed as 'quo'.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Organisations ] Predicate [ organisation_details = 'quo' ] Output [ organisation_type , organisation_details ] ; #2 = Scan Table [ Organisation_Types ] Output [ organisation_type , organisation_type_description ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.organisation_type = #2.organisation_type ] Output [ #2.organisation_type_description ]"
    },
    {
        "id": "1eb8ed6fef68b0caba26407ba7bc86c8ca87785414cef4bc0b1a10b8799ff7d4",
        "question": "What is the type description of the organization whose detail is listed as 'quo'?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Organisations ] Predicate [ organisation_details = 'quo' ] Output [ organisation_type , organisation_details ] ; #2 = Scan Table [ Organisation_Types ] Output [ organisation_type , organisation_type_description ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.organisation_type = #2.organisation_type ] Output [ #2.organisation_type_description ]"
    },
    {
        "id": "6affd37c993e825dea745cd83aaacd8c9d9a7c1ab186221d9c2b26cb855b3346",
        "question": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Organisation_Types ] Predicate [ organisation_type_description = 'Sponsor' ] Output [ organisation_type , organisation_type_description ] ; #2 = Scan Table [ Organisations ] Output [ organisation_type , organisation_details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.organisation_type = #2.organisation_type ] Output [ #2.organisation_details ] ; #4 = Sort [ #3 ] OrderBy [ organisation_details ASC ] Output [ organisation_details ]"
    },
    {
        "id": "835b0eb869e2dce15712f7cfce93726616e699540e21590632d310026a13d09f",
        "question": "What are the details of all organizations that are described as Sponsors and sort the results in ascending order?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Organisation_Types ] Predicate [ organisation_type_description = 'Sponsor' ] Output [ organisation_type , organisation_type_description ] ; #2 = Scan Table [ Organisations ] Output [ organisation_type , organisation_details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.organisation_type = #2.organisation_type ] Output [ #2.organisation_details ] ; #4 = Sort [ #3 ] OrderBy [ organisation_details ASC ] Output [ organisation_details ]"
    },
    {
        "id": "3a8d844f2bd1d4e452bb24578ea5d4f026c3db2347f2b1576f974c5a61a2e9a2",
        "question": "How many Patent outcomes are generated from all the projects?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Outcomes ] Predicate [ outcome_code = 'Patent' ] Output [ outcome_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "249373dda0ad3865194b7a2507f5553a9c1228faaa6431ef0acf3e25be7f785a",
        "question": "How many patents outcomes were listed for all the projects?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Outcomes ] Predicate [ outcome_code = 'Patent' ] Output [ outcome_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "101bd13b79d2a1fc64d54ca5e32c425d8ea1c9e2c4abf271b9597034c0dd410a",
        "question": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Predicate [ role_code = 'leader' OR date_from < '1989-04-24 23:51:54.000' ] Output [ role_code , date_from ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "07a257220da73133c8cb1567dcf71c17a5e197edef48cd469fe72629b5991c4c",
        "question": "How many project members were leaders or started working before '1989-04-24 23:51:54'?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Predicate [ role_code = 'leader' OR date_from < '1989-04-24 23:51:54.000' ] Output [ role_code , date_from ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "bd98ae5700fb7ce0657487acb170241a13b54f9edcb9ecf48f211cb1c508456e",
        "question": "What is the last date of the staff leaving the projects?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Output [ date_to ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date_to DESC ] Output [ date_to ]"
    },
    {
        "id": "46b246c6894f46ab3a04fc2161a843a7735eb531e65e96b8b77652b5fe06b544",
        "question": "What is the last date that a staff member left a project?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Output [ date_to ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date_to DESC ] Output [ date_to ]"
    },
    {
        "id": "a3713d359472366cb5f80aeb666396a85bec503e7af03591d22ca8e9814ae52e",
        "question": "What are the result description of the project whose detail is 'sint'?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Projects ] Predicate [ project_details = 'sint' ] Output [ project_id , project_details ] ; #2 = Scan Table [ Project_Outcomes ] Output [ project_id , outcome_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.outcome_code ] ; #4 = Scan Table [ Research_Outcomes ] Output [ outcome_code , outcome_description ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.outcome_code = #4.outcome_code ] Output [ #4.outcome_description ]"
    },
    {
        "id": "26ee021c9e97a58b47cfee9d04417aaf723c33f5ad096f03f16de193f80e7256",
        "question": "What is the description for the results whose project detail is 'sint'?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Projects ] Predicate [ project_details = 'sint' ] Output [ project_id , project_details ] ; #2 = Scan Table [ Project_Outcomes ] Output [ project_id , outcome_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.outcome_code ] ; #4 = Scan Table [ Research_Outcomes ] Output [ outcome_code , outcome_description ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.outcome_code = #4.outcome_code ] Output [ #4.outcome_description ]"
    },
    {
        "id": "337122b6526dece2b6f61157405e12cf2773359fe687d8eaff1d48157ae75242",
        "question": "List the organisation id with the maximum outcome count, and the count.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Outcomes ] Output [ project_id ] ; #2 = Scan Table [ Projects ] Output [ project_id , organisation_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.organisation_id ] ; #4 = Aggregate [ #3 ] GroupBy [ organisation_id ] Output [ countstar AS Count_Star , organisation_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , organisation_id ]"
    },
    {
        "id": "e5d1e50f5f1df63281fe43977279e1522b76e1b7ed2890d551c435fcd448170b",
        "question": "What is the id of the organization with the maximum number of outcomes and how many outcomes are there?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Outcomes ] Output [ project_id ] ; #2 = Scan Table [ Projects ] Output [ project_id , organisation_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.organisation_id ] ; #4 = Aggregate [ #3 ] GroupBy [ organisation_id ] Output [ countstar AS Count_Star , organisation_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , organisation_id ]"
    },
    {
        "id": "009469fbfcfa27d459433c7f19cb26c513b5160d32c45eaadf3a407c7a442401",
        "question": "List the project details of the projects launched by the organisation",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Projects ] Output [ organisation_id ] ; #2 = Aggregate [ #1 ] GroupBy [ organisation_id ] Output [ countstar AS Count_Star , organisation_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , organisation_id ] ; #4 = Scan Table [ Projects ] Output [ project_details , organisation_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.organisation_id = #4.organisation_id ] Output [ #4.project_details ]"
    },
    {
        "id": "013ea37e0f62a92f4add0e68ba27e491a13fb13af31e434f4b6b63bedd2a997d",
        "question": "What are the details for the projects which were launched by the organization with the most projects?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Projects ] Output [ organisation_id ] ; #2 = Aggregate [ #1 ] GroupBy [ organisation_id ] Output [ countstar AS Count_Star , organisation_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , organisation_id ] ; #4 = Scan Table [ Projects ] Output [ project_details , organisation_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.organisation_id = #4.organisation_id ] Output [ #4.project_details ]"
    },
    {
        "id": "4f3dab370f35ec8d86d39eb8d0897feb6a9ca77ace62cd994d43c199f73717a0",
        "question": "List the research staff details, and order in ascending order.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Research_Staff ] Output [ staff_details ] ; #2 = Sort [ #1 ] OrderBy [ staff_details ASC ] Output [ staff_details ]"
    },
    {
        "id": "ce65b91a2fba38410ef83e24cc0de9e915c2f24cde4c6e7b892ed93bae71e592",
        "question": "What details are there on the research staff? List the result in ascending alphabetical order.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Research_Staff ] Output [ staff_details ] ; #2 = Sort [ #1 ] OrderBy [ staff_details ASC ] Output [ staff_details ]"
    },
    {
        "id": "de9deb64b3edd29825df062a60ea5b728c443fc955d157e790f555f8af2c5148",
        "question": "How many tasks are there in total?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Tasks ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "046186dd56a1b29259ae28e38ba982a36b8796be7ad38b2f040c17e67b4ea52d",
        "question": "How many tasks are there?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Tasks ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7fdbdee0c7bcf833588e09eb5f6ec9da1fc14423e1e27398fdefc8a745a89b15",
        "question": "How many tasks does each project have? List the task count and the project detail.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Tasks ] Output [ project_id ] ; #2 = Scan Table [ Projects ] Output [ project_id , project_details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.project_id , #2.project_details ] ; #4 = Aggregate [ #3 ] GroupBy [ project_id ] Output [ countstar AS Count_Star , project_details ]"
    },
    {
        "id": "2d38d9f89179b82593be8f99c16bba47647212c669308a28a6996be3928c560a",
        "question": "For each project id, how many tasks are there?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Tasks ] Output [ project_id ] ; #2 = Scan Table [ Projects ] Output [ project_id , project_details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.project_id , #2.project_details ] ; #4 = Aggregate [ #3 ] GroupBy [ project_id ] Output [ countstar AS Count_Star , project_details ]"
    },
    {
        "id": "7f10c8d4a09c74097c920551acb248b0f5d365a378625b2ed0c6cd6b383acd6b",
        "question": "What are the staff roles of the staff who",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Predicate [ date_from > '2003-04-19 15:06:20.000' AND date_to < '2016-03-15 00:33:18.000' ] Output [ date_to , role_code , date_from ]"
    },
    {
        "id": "6731ee030f388ef9e1b6f2df25a93eb389ecc9cb19e3b153fcf9332d1c662422",
        "question": "What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Predicate [ date_from > '2003-04-19 15:06:20.000' AND date_to < '2016-03-15 00:33:18.000' ] Output [ date_to , role_code , date_from ]"
    },
    {
        "id": "0602252e6537fef460b405700364d63816ba1be14b2a2a2c0eae6449a2dce2f3",
        "question": "What are the descriptions of all the project outcomes?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Research_Outcomes ] Output [ outcome_code , outcome_description ] ; #2 = Scan Table [ Project_Outcomes ] Output [ outcome_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.outcome_code = #2.outcome_code ] Output [ #1.outcome_description ]"
    },
    {
        "id": "5514970146ca8888c31d694b1b7053a9e2783c6f06fbb41769a49646b203d18e",
        "question": "List the description of the outcomes for all projects.",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Research_Outcomes ] Output [ outcome_code , outcome_description ] ; #2 = Scan Table [ Project_Outcomes ] Output [ outcome_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.outcome_code = #2.outcome_code ] Output [ #1.outcome_description ]"
    },
    {
        "id": "b18cc3f0b52e2555412aace0bf46b5951dd2bb12b5ddc98acbc7ba4155c449e6",
        "question": "Which role is most common for the staff?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Output [ role_code ] ; #2 = Aggregate [ #1 ] GroupBy [ role_code ] Output [ countstar AS Count_Star , role_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ role_code , Count_Star ]"
    },
    {
        "id": "adac2cf21edffbca3f866932b402fd2923ded84fe27d8e04ff0fb6d21160ef96",
        "question": "What is the most common role for the staff?",
        "parsing_tree": "tracking_grants_for_research | #1 = Scan Table [ Project_Staff ] Output [ role_code ] ; #2 = Aggregate [ #1 ] GroupBy [ role_code ] Output [ countstar AS Count_Star , role_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ role_code , Count_Star ]"
    },
    {
        "id": "633a02560a43c4a4e256883fc071178e9a990d441e5efc7dd59a87931bb71d34",
        "question": "How many friends does Dan have?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ name = 'Dan' ] Output [ name ] ; #2 = Scan Table [ PersonFriend ] Predicate [ name = 'Dan' ] Output [ name , friend ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.name ] Output [ #2.friend ] ; #4 = Aggregate [ #3 ] Output [ COUNT(friend) AS Count_friend ]"
    },
    {
        "id": "0597079c67e56c895e4ab037f5c225c35c9d0e2b098cc19d88caf1ba4bbc530a",
        "question": "How many females does this network has?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ gender = 'female' ] Output [ gender ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0286990b5d9502a8411a6e08ef3a2bbe68190d319e1f28809d45fa9c62024c66",
        "question": "How many females are in the network?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ gender = 'female' ] Output [ gender ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "af982ad5322ab8ac649c419b6594f3ab288c8af5f6e49be6f00de3efb2d16b6b",
        "question": "What is the average age for all person?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ age ] ; #2 = Aggregate [ #1 ] Output [ AVG(age) AS Avg_age ]"
    },
    {
        "id": "b3c1e859e47a07abc158d0c71cf3bb382ac0d1a4ac7c1409b551a72901011e9c",
        "question": "What is the average age for all people in the table?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ age ] ; #2 = Aggregate [ #1 ] Output [ AVG(age) AS Avg_age ]"
    },
    {
        "id": "a44610ab065c9f1b7abc633efd6883d166fd3ef4940fe25e2961df843500adbf",
        "question": "How many different cities are they from?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Distinct [ true ] Output [ city ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT city) AS Count_Dist_city ]"
    },
    {
        "id": "b5302c123ae3afa7f40a13fbd84846520b71d6ef97973b0e3e8099a4a929a3a4",
        "question": "How many different cities do people originate from?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Distinct [ true ] Output [ city ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT city) AS Count_Dist_city ]"
    },
    {
        "id": "ea4551f81b557729deaec589b564617bd8f09aa6c81e4b18cf8e690f609c7d4c",
        "question": "How many type of jobs do they have?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Distinct [ true ] Output [ job ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT job) AS Count_Dist_job ]"
    },
    {
        "id": "2a887a5edcbb20ab9e5beaf72f3e9f3ce35dfc04cbb2b253a649db1cfa9e18ea",
        "question": "How many different jobs are listed?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Distinct [ true ] Output [ job ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT job) AS Count_Dist_job ]"
    },
    {
        "id": "6d5fd8a03cedffc704883baf79fea257b9816ae25ae7d871d8a55336651e77e9",
        "question": "Who is the youngest male?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ age IS NOT NULL AND gender = 'male' ] Output [ name , gender , age ] ; #2 = Top [ #1 ] Rows [ 1 ] Output [ name ]"
    },
    {
        "id": "434ba8a4977b9f477121bb4373c4a64cf465504170f9e5fe11b25e235b907acc",
        "question": "What is the name of the youngest male?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ age IS NOT NULL AND gender = 'male' ] Output [ name , gender , age ] ; #2 = Top [ #1 ] Rows [ 1 ] Output [ name ]"
    },
    {
        "id": "5509f97e2e95529c984dc754c1a9ae2518872f5b72731dbef92a76bf7ad8058e",
        "question": "How old is the doctor named Zach?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ job = 'doctor' AND name = 'Zach' ] Output [ name , job , age ]"
    },
    {
        "id": "9df5c86adf27a075d7abd1662002c020468bb782482b052c3f51e07ab1c71bf6",
        "question": "What is the age of the doctor named Zach?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ job = 'doctor' AND name = 'Zach' ] Output [ name , job , age ]"
    },
    {
        "id": "432021c1a4e33cafa15a0e4acb9b33b96794d4400d654577d8af1e6750f8936d",
        "question": "Who is the person whose age is below 30?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ age < 30 ] Output [ name , age ]"
    },
    {
        "id": "f9d4a3c8f5b2ea128ec42377ba0f5923369e423532705452bb9cd764fd330561",
        "question": "What is the name of the person whose age is below 30?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ age < 30 ] Output [ name , age ]"
    },
    {
        "id": "95ebdcde594d0260d5f9418944b9449224e3cd9e54aaaa93b23518679016813f",
        "question": "How many people whose age is greater 30 and job is engineer?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ age > 30 AND job = 'engineer' ] Output [ job , age ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4c8347728b1cd3381bdbf239bad38ef4817e3e9e1752c6d8f1561e49fae0aaec",
        "question": "HOw many engineers are older than 30?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ age > 30 AND job = 'engineer' ] Output [ job , age ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c812307ef28a3d7f4e66a24a8246f51f5e6ccb8cfef0f35ba7bb9c26b566ae32",
        "question": "What is the average age for each gender?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ gender , age ] ; #2 = Aggregate [ #1 ] GroupBy [ gender ] Output [ gender , AVG(age) AS Avg_age ]"
    },
    {
        "id": "695a9f1415339bfa8f355fe6090a29981aea0c429ca95454471e4265a174d366",
        "question": "How old is each gender, on average?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ gender , age ] ; #2 = Aggregate [ #1 ] GroupBy [ gender ] Output [ gender , AVG(age) AS Avg_age ]"
    },
    {
        "id": "bcaa6f77fc1db04f7351eebdf0ead3b2cf2fe4512e87ca83ae3bea27399073e8",
        "question": "What is average age for different job title?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ job , age ] ; #2 = Aggregate [ #1 ] GroupBy [ job ] Output [ job , AVG(age) AS Avg_age ]"
    },
    {
        "id": "749bef81085dc99bfdd78528a69cce5ac9d954cfa7e3f260213b52e7d5472cd5",
        "question": "How old is the average person for each job?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ job , age ] ; #2 = Aggregate [ #1 ] GroupBy [ job ] Output [ job , AVG(age) AS Avg_age ]"
    },
    {
        "id": "e7364e863699e06569894459bae7a6b96f2a069e55538ff6578ae1e5067e1600",
        "question": "What is average age of male for different job title?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ gender = 'male' ] Output [ gender , job , age ] ; #2 = Aggregate [ #1 ] GroupBy [ job ] Output [ job , AVG(age) AS Avg_age ]"
    },
    {
        "id": "a5717df417d237cd89157dc3f2c0a352f54173b24b7983adca7849555239cda1",
        "question": "What is the average age for a male in each job?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ gender = 'male' ] Output [ gender , job , age ] ; #2 = Aggregate [ #1 ] GroupBy [ job ] Output [ job , AVG(age) AS Avg_age ]"
    },
    {
        "id": "951182c5689581db1bf963e9878a9334fe11424bfe0d023f04295915eea58ede",
        "question": "What is minimum age for different job title?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ job , age ] ; #2 = Aggregate [ #1 ] GroupBy [ job ] Output [ MIN(age) AS Min_age , job ]"
    },
    {
        "id": "2f6c5c96ba59a48f1c6d68365d51e4854f2922936166d3d9d695128a462ec95d",
        "question": "How old is the youngest person for each job?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ job , age ] ; #2 = Aggregate [ #1 ] GroupBy [ job ] Output [ MIN(age) AS Min_age , job ]"
    },
    {
        "id": "79635289f44c994dd696ba524fc084c83e6ef01292c6931951e86e8a11e4237d",
        "question": "Find the number of people who is under 40 for each gender.",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ age < 40 ] Output [ gender , age ] ; #2 = Aggregate [ #1 ] GroupBy [ gender ] Output [ countstar AS Count_Star , gender ]"
    },
    {
        "id": "767eda1958be2becf17ef6c504d49eccf77ce42818798c5233ee3a707784c754",
        "question": "How many people are under 40 for each gender?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ age < 40 ] Output [ gender , age ] ; #2 = Aggregate [ #1 ] GroupBy [ gender ] Output [ countstar AS Count_Star , gender ]"
    },
    {
        "id": "5fd02f09d02efdc6615f9482ed2dd877078077cb43655b32e93b9bedeeb1c483",
        "question": "Find the name of people whose age is greater than any engineer sorted by their age.",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ job = 'engineer' ] Output [ job , age ] ; #2 = Aggregate [ #1 ] Output [ MIN(age) AS Min_age ] ; #3 = Scan Table [ Person ] Output [ name , age ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.age > #2.Min_age ] Output [ #3.name , #3.age ] ; #5 = Sort [ #4 ] OrderBy [ age ASC ] Output [ name , age ]"
    },
    {
        "id": "faf16d40def6961ef587e19353bfb26fc315663163a580ebb1ae5017582bf5d7",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ job = 'engineer' ] Output [ job , age ] ; #2 = Aggregate [ #1 ] Output [ MIN(age) AS Min_age ] ; #3 = Scan Table [ Person ] Output [ name , age ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.age > #2.Min_age ] Output [ #3.name , #3.age ] ; #5 = Sort [ #4 ] OrderBy [ age ASC ] Output [ name , age ]"
    },
    {
        "id": "a14880d646e25773618481bcf1eb5797898c12ec7a30dcb427cf28531917e3e5",
        "question": "Find the number of people whose age is greater than all engineers.",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ job = 'engineer' ] Output [ job , age ] ; #2 = Aggregate [ #1 ] Output [ MAX(age) AS Max_age ] ; #3 = Scan Table [ Person ] Output [ age ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.age > #2.Max_age ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "11328f5a2f48b882ea714bef61df84c6f06846d933f7abb9f2c3e8fd01b42175",
        "question": "How many people are older than every engineer?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ job = 'engineer' ] Output [ job , age ] ; #2 = Aggregate [ #1 ] Output [ MAX(age) AS Max_age ] ; #3 = Scan Table [ Person ] Output [ age ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.age > #2.Max_age ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "51f4fec897eee8198c2447e3c152b910e1504256a761730e9a59922a20358607",
        "question": "list the name, job title of all people ordered by their names.",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name , job ] ; #2 = Sort [ #1 ] OrderBy [ name ASC ] Output [ name , job ]"
    },
    {
        "id": "cdf7d1f0ad400a4f04c9fc92d2c87efc6e86b4cad3315778e094d22ab159ac29",
        "question": "What are the names and job titles of every person ordered alphabetically by name?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name , job ] ; #2 = Sort [ #1 ] OrderBy [ name ASC ] Output [ name , job ]"
    },
    {
        "id": "ae51f4f340880582d6cdd47c2d8c67aa0313a7dc3bba56b800293d3cbe0ac782",
        "question": "Find the names of all person sorted in the descending order using age.",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name , age ] ; #2 = Sort [ #1 ] OrderBy [ age DESC ] Output [ name , age ]"
    },
    {
        "id": "14e42a18e63fd42cf5036ed6e40ec02b2711d0feba8d0d868c70069f32bf4d98",
        "question": "What are the names of everybody sorted by age in descending order?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name , age ] ; #2 = Sort [ #1 ] OrderBy [ age DESC ] Output [ name , age ]"
    },
    {
        "id": "61eaf5c9d04c1cce8b6e71dd7f0a680fef0fa4c8eff0b628148046b56acc8775",
        "question": "Find the name and age of all males in order of their age.",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ gender = 'male' ] Output [ name , gender , age ] ; #2 = Sort [ #1 ] OrderBy [ age ASC ] Output [ name , age ]"
    },
    {
        "id": "38f7a74bc4dda74bdaafef0e197d19271883c3b6b274e1acc170596ae7ab2b39",
        "question": "What is the name and age of every male? Order the results by age.",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ gender = 'male' ] Output [ name , gender , age ] ; #2 = Sort [ #1 ] OrderBy [ age ASC ] Output [ name , age ]"
    },
    {
        "id": "036ea5d89bda443bdeb08ebd8c911bdd9df38519c32fa42a8bed36649027aa22",
        "question": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name , age ] ; #2 = Scan Table [ PersonFriend ] Predicate [ friend = 'Dan' ] Output [ name , friend ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.name = #1.name ] Output [ #1.name , #1.age ] ; #4 = Scan Table [ PersonFriend ] Predicate [ friend = 'Alice' ] Output [ name , friend ] ; #5 = Scan Table [ Person ] Output [ name , age ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.name = #5.name ] Output [ #5.name , #5.age ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.name = #6.name ] Output [ #3.name , #3.age ]"
    },
    {
        "id": "a019dd5dec4c4582de7938d879ab58df10f8e59f2a23c8f650cc633fb23ba3b1",
        "question": "What are the names and ages of every person who is a friend of both Dan and Alice?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name , age ] ; #2 = Scan Table [ PersonFriend ] Predicate [ friend = 'Dan' ] Output [ name , friend ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.name = #1.name ] Output [ #1.name , #1.age ] ; #4 = Scan Table [ PersonFriend ] Predicate [ friend = 'Alice' ] Output [ name , friend ] ; #5 = Scan Table [ Person ] Output [ name , age ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.name = #5.name ] Output [ #5.name , #5.age ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.name = #6.name ] Output [ #3.name , #3.age ]"
    },
    {
        "id": "5f2b0870d48d4728ab43f4207bfa614c836c055f55bb1a0b343fef56902cc828",
        "question": "Find the name and age of the person who is a friend of Dan or Alice.",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name , age ] ; #2 = Scan Table [ PersonFriend ] Predicate [ friend = 'Alice' OR friend = 'Dan' ] Output [ name , friend ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.name = #1.name ] Output [ #1.name , #1.age ]"
    },
    {
        "id": "e7d96364d975bef4dd11e7b8f8477131372576def1617e6719e7c24fb163ee33",
        "question": "What are the different names and ages of every friend of either Dan or alice?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name , age ] ; #2 = Scan Table [ PersonFriend ] Predicate [ friend = 'Alice' OR friend = 'Dan' ] Output [ name , friend ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.name = #1.name ] Output [ #1.name , #1.age ]"
    },
    {
        "id": "17d433b928f904fb3951610c1ac517993cd1b0066df5eadd898c720bd6f851fa",
        "question": "Find the name of the person who has friends with age above 40 and under age 30?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name ] ; #2 = Scan Table [ Person ] Predicate [ age > 40 ] Output [ name , age ] ; #3 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.name = #3.friend ] Output [ #3.name ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #4.name = #1.name ] Output [ #1.name ] ; #6 = Scan Table [ Person ] Predicate [ age < 30 ] Output [ name , age ] ; #7 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.name = #7.friend ] Output [ #7.name ] ; #9 = Scan Table [ Person ] Output [ name ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.name = #9.name ] Output [ #9.name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.name = #10.name ] Output [ #5.name ]"
    },
    {
        "id": "75c8e3518127cfd85cfee9c11770b617412c2602e0a44c9a6797bca0a95a717a",
        "question": "What are the names of every person who has a friend over 40 and under 30?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name ] ; #2 = Scan Table [ Person ] Predicate [ age > 40 ] Output [ name , age ] ; #3 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.name = #3.friend ] Output [ #3.name ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #4.name = #1.name ] Output [ #1.name ] ; #6 = Scan Table [ Person ] Predicate [ age < 30 ] Output [ name , age ] ; #7 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.name = #7.friend ] Output [ #7.name ] ; #9 = Scan Table [ Person ] Output [ name ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.name = #9.name ] Output [ #9.name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.name = #10.name ] Output [ #5.name ]"
    },
    {
        "id": "f18142b4339529c8e40e0898bac48a6fc891ed690f53bf4798347361a172d108",
        "question": "Find the name of the person who has friends with age above 40 but not under age 30?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name ] ; #2 = Scan Table [ Person ] Predicate [ age > 40 ] Output [ name , age ] ; #3 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.name = #3.friend ] Output [ #3.name ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #4.name = #1.name ] Output [ #1.name ] ; #6 = Scan Table [ Person ] Output [ name ] ; #7 = Scan Table [ Person ] Predicate [ age < 30 ] Output [ name , age ] ; #8 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.name = #8.friend ] Output [ #8.name ] ; #10 = Intersect [ #6 , #9 ] Predicate [ #9.name = #6.name ] Output [ #6.name ] ; #11 = Except [ #5 , #10 ] Predicate [ #5.name = #10.name ] Output [ #5.name ]"
    },
    {
        "id": "4dcd10cd4af2eae9179ec0c4693ae0c27eecf1850faa44319ee176a8f5aee4a2",
        "question": "What are the names of the people who are older 40 but no friends under age 30?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name ] ; #2 = Scan Table [ Person ] Predicate [ age > 40 ] Output [ name , age ] ; #3 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.name = #3.friend ] Output [ #3.name ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #4.name = #1.name ] Output [ #1.name ] ; #6 = Scan Table [ Person ] Output [ name ] ; #7 = Scan Table [ Person ] Predicate [ age < 30 ] Output [ name , age ] ; #8 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.name = #8.friend ] Output [ #8.name ] ; #10 = Intersect [ #6 , #9 ] Predicate [ #9.name = #6.name ] Output [ #6.name ] ; #11 = Except [ #5 , #10 ] Predicate [ #5.name = #10.name ] Output [ #5.name ]"
    },
    {
        "id": "76ddb73dfc593da8c096e69708e828e7151ebb4dbccf1352ba9d2988bba3fd20",
        "question": "Find the name of the person who has no student friends.",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name ] ; #2 = Scan Table [ Person ] Predicate [ job = 'student' ] Output [ name , job ] ; #3 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.name = #3.friend ] Output [ #3.name ] ; #5 = Except [ #1 , #4 ] Predicate [ #4.name = #1.name ] Output [ #1.name ]"
    },
    {
        "id": "56aebae11255b0447628f302e1680c9b201eb1eb642e5b1b3aad17710a1ccd50",
        "question": "What are the names of the people who have no friends who are students?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name ] ; #2 = Scan Table [ Person ] Predicate [ job = 'student' ] Output [ name , job ] ; #3 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.name = #3.friend ] Output [ #3.name ] ; #5 = Except [ #1 , #4 ] Predicate [ #4.name = #1.name ] Output [ #1.name ]"
    },
    {
        "id": "b094ff3669af3b6fe74e635e6a75cb58dede74a8f8f82c1fdf6af993aba8cd3c",
        "question": "Find the person who has exactly one friend.",
        "parsing_tree": "network_2 | #1 = Scan Table [ PersonFriend ] Output [ name ] ; #2 = Aggregate [ #1 ] GroupBy [ name ] Output [ name , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star = 1 ] Output [ name ]"
    },
    {
        "id": "f3fb625463246200f608f9559bb0430db356144739b4eb0da1c19d9af55fb5cd",
        "question": "What are the names of everybody who has exactly one friend?",
        "parsing_tree": "network_2 | #1 = Scan Table [ PersonFriend ] Output [ name ] ; #2 = Aggregate [ #1 ] GroupBy [ name ] Output [ name , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star = 1 ] Output [ name ]"
    },
    {
        "id": "5d74ea9ab67c1fc8136bf5880f4c0c560d98f1dc0a0142cb9a60c029c5bb8fb5",
        "question": "Who are the friends of Bob?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ name = 'Bob' ] Output [ name ] ; #2 = Scan Table [ PersonFriend ] Predicate [ name = 'Bob' ] Output [ name , friend ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.name ] Output [ #2.friend ]"
    },
    {
        "id": "5f5893245c9151f83b7d5825405e6ca34c42b881388f66514a4e6a4e988e8d53",
        "question": "Who are Bob's friends?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ name = 'Bob' ] Output [ name ] ; #2 = Scan Table [ PersonFriend ] Predicate [ name = 'Bob' ] Output [ name , friend ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.name ] Output [ #2.friend ]"
    },
    {
        "id": "9bc1b5194fd5f1823e5f6e52f7aaf2b56902f4a30b6537769b480e83bffd4eef",
        "question": "Find the name of persons who are friends with Bob.",
        "parsing_tree": "network_2 | #1 = Scan Table [ PersonFriend ] Predicate [ friend = 'Bob' ] Output [ name , friend ] ; #2 = Scan Table [ Person ] Output [ name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.name ] Output [ #2.name ]"
    },
    {
        "id": "168e2e55450afd273dd1a775df93ba9670a931ec22882346ffb84fb7ffe3e447",
        "question": "What are the names of all of Bob's friends?",
        "parsing_tree": "network_2 | #1 = Scan Table [ PersonFriend ] Predicate [ friend = 'Bob' ] Output [ name , friend ] ; #2 = Scan Table [ Person ] Output [ name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.name ] Output [ #2.name ]"
    },
    {
        "id": "214001eab77ce7318dbc35c621d85108fbd4703270c7f788f0dd6f76efb3ca95",
        "question": "Find the names of females who are friends with Zach",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ gender = 'female' ] Output [ name , gender ] ; #2 = Scan Table [ PersonFriend ] Predicate [ friend = 'Zach' ] Output [ name , friend ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.name ] Output [ #1.name ]"
    },
    {
        "id": "74d4f53d5b1489e40807b08596c4068bd2721a853bc56f95d1526bb0eeb7dc69",
        "question": "What are the names of all females who are friends with Zach?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ gender = 'female' ] Output [ name , gender ] ; #2 = Scan Table [ PersonFriend ] Predicate [ friend = 'Zach' ] Output [ name , friend ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.name ] Output [ #1.name ]"
    },
    {
        "id": "95f75461ba64715a807be47765ca98e2b6821f609f43dc2bc178aaf77ab34349",
        "question": "Find the female friends of Alice.",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ gender = 'female' ] Output [ name , gender ] ; #2 = Scan Table [ PersonFriend ] Predicate [ name = 'Alice' ] Output [ name , friend ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.friend ] Output [ #2.friend ]"
    },
    {
        "id": "14af277a1a2862d8c706e25d35594dc79c4ccf9036ac54dbc638e6ead8399292",
        "question": "What are all the friends of Alice who are female?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ gender = 'female' ] Output [ name , gender ] ; #2 = Scan Table [ PersonFriend ] Predicate [ name = 'Alice' ] Output [ name , friend ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.friend ] Output [ #2.friend ]"
    },
    {
        "id": "13026ca92ed17028c4abe39d9b63be9e95167baeef86175c9c64d538a54890e1",
        "question": "Find the male friend of Alice whose job is a doctor?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ gender = 'male' AND job = 'doctor' ] Output [ name , gender , job ] ; #2 = Scan Table [ PersonFriend ] Predicate [ name = 'Alice' ] Output [ name , friend ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.friend ] Output [ #2.friend ]"
    },
    {
        "id": "cf0ab4d81a8e04dbe3bdbee06e41980ba41b189cc1ad45737eba9ab8f6227f6d",
        "question": "Who are the friends of Alice that are doctors?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ gender = 'male' AND job = 'doctor' ] Output [ name , gender , job ] ; #2 = Scan Table [ PersonFriend ] Predicate [ name = 'Alice' ] Output [ name , friend ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.friend ] Output [ #2.friend ]"
    },
    {
        "id": "08885a4cfcca08a27d962df87540a4a79b50beb1c1872b8f8a981142858181ab",
        "question": "Who has a friend that is from new york city?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ city = 'new york city' ] Output [ name , city ] ; #2 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.friend ] Output [ #2.name ]"
    },
    {
        "id": "7ad7e707fc81b2d091fbabf9200bd791c375958ecc49a823b4de51626305648f",
        "question": "What are the names of all friends who are from New York?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Predicate [ city = 'new york city' ] Output [ name , city ] ; #2 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.friend ] Output [ #2.name ]"
    },
    {
        "id": "e15e4c867ca91da1179267da827a3cb8b45f2e79198cd024a57783fc26c0eb71",
        "question": "Who has friends that are younger than the average age?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ age ] ; #2 = Aggregate [ #1 ] Output [ AVG(age) AS Avg_age ] ; #3 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #4 = Scan Table [ Person ] Output [ name , age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.friend = #4.name ] Output [ #3.name , #4.age ] ; #6 = Join [ #2 , #5 ] Predicate [ #5.age < #2.Avg_age ] Output [ #5.name ] ; #7 = Aggregate [ #6 ] GroupBy [ name ] Output [ name ]"
    },
    {
        "id": "ce26a5c9a4a1d37b655e20bbc8f1723fd382fd75d4db31807b17d63e84dd4f97",
        "question": "What are the different names of friends who are younger than the average age for a friend?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ age ] ; #2 = Aggregate [ #1 ] Output [ AVG(age) AS Avg_age ] ; #3 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #4 = Scan Table [ Person ] Output [ name , age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.friend = #4.name ] Output [ #3.name , #4.age ] ; #6 = Join [ #2 , #5 ] Predicate [ #5.age < #2.Avg_age ] Output [ #5.name ] ; #7 = Aggregate [ #6 ] GroupBy [ name ] Output [ name ]"
    },
    {
        "id": "d94da0591fb78c22360d46fac2e12978b62b3446043b56b57f224c855a3ff27e",
        "question": "Who is the friend of Zach with longest year relationship?",
        "parsing_tree": "network_2 | #1 = Scan Table [ PersonFriend ] Predicate [ year IS NOT NULL AND name = 'Zach' ] Output [ name , friend , year ] ; #2 = Top [ #1 ] Rows [ 1 ] Output [ friend ]"
    },
    {
        "id": "227aa03fa4fd2d89ac845b9e2b8bf8372e9d481b61cd83f59bb1c382aed53f70",
        "question": "Which friend of Zach has the longest-lasting friendship?",
        "parsing_tree": "network_2 | #1 = Scan Table [ PersonFriend ] Predicate [ year IS NOT NULL AND name = 'Zach' ] Output [ name , friend , year ] ; #2 = Top [ #1 ] Rows [ 1 ] Output [ friend ]"
    },
    {
        "id": "ef88b9349ca458307d95f06bd563437ba790e8eb337ea9f8d4e1d8dd5b662112",
        "question": "What is the age of the friend of Zach with longest year relationship?",
        "parsing_tree": "network_2 | #1 = Scan Table [ PersonFriend ] Predicate [ year IS NOT NULL AND name = 'Zach' ] Output [ name , friend , year ] ; #2 = Top [ #1 ] Rows [ 1 ] Output [ friend ] ; #3 = Scan Table [ Person ] Output [ name , age ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.friend = #3.name ] Output [ #3.age ]"
    },
    {
        "id": "6fbdd79ed349c4deb3b40d7b10fa805ca683e6a2f875969db0566b38461dccc3",
        "question": "What are the ages of all of Zach's friends who are in the longest relationship?",
        "parsing_tree": "network_2 | #1 = Scan Table [ PersonFriend ] Predicate [ year IS NOT NULL AND name = 'Zach' ] Output [ name , friend , year ] ; #2 = Top [ #1 ] Rows [ 1 ] Output [ friend ] ; #3 = Scan Table [ Person ] Output [ name , age ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.friend = #3.name ] Output [ #3.age ]"
    },
    {
        "id": "540c302574470bb888077dc0eb97bafad04279934725fbdad5d0ac1234ec8ab0",
        "question": "Find the name of persons who are friends with Alice for the shortest years.",
        "parsing_tree": "network_2 | #1 = Scan Table [ PersonFriend ] Predicate [ year IS NOT NULL AND friend = 'Alice' ] Output [ name , friend , year ] ; #2 = Top [ #1 ] Rows [ 1 ] Output [ name ]"
    },
    {
        "id": "a7cade6789ccb8fae78846e7dbd8dda3d8976c01faf731c20050ca301fef3f9e",
        "question": "What are the names of all people who are friends with Alice for the shortest amount of time?",
        "parsing_tree": "network_2 | #1 = Scan Table [ PersonFriend ] Predicate [ year IS NOT NULL AND friend = 'Alice' ] Output [ name , friend , year ] ; #2 = Top [ #1 ] Rows [ 1 ] Output [ name ]"
    },
    {
        "id": "8b416c9e7291c5ade8671e8832b3b795b9ca61a9dbc91bb8f00da5b5bb409e96",
        "question": "Find the name, age, and job title of persons who are friends with Alice for the longest years.",
        "parsing_tree": "network_2 | #1 = Scan Table [ PersonFriend ] Predicate [ year IS NOT NULL AND friend = 'Alice' ] Output [ name , friend , year ] ; #2 = Top [ #1 ] Rows [ 1 ] Output [ name ] ; #3 = Scan Table [ Person ] Output [ name , job , age ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.name = #3.name ] Output [ #3.name , #3.age , #3.job ]"
    },
    {
        "id": "1bc431cbdc2893e1eb5ebdbb79eda53422c6617cf11963640775de9f92415cad",
        "question": "What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?",
        "parsing_tree": "network_2 | #1 = Scan Table [ PersonFriend ] Predicate [ year IS NOT NULL AND friend = 'Alice' ] Output [ name , friend , year ] ; #2 = Top [ #1 ] Rows [ 1 ] Output [ name ] ; #3 = Scan Table [ Person ] Output [ name , job , age ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.name = #3.name ] Output [ #3.name , #3.age , #3.job ]"
    },
    {
        "id": "6bd7ee303aa7eaa6b17d1e4b61913f3b8ee1e2c703413a9e2d2db0edeaed7e94",
        "question": "Who is the person that has no friend?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name ] ; #2 = Scan Table [ PersonFriend ] Output [ name ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.name = #2.name ] Output [ #1.name ]"
    },
    {
        "id": "40b6e3343c6d44a89e3539d857ddd04f6201b711aff24a8d3bcba7393eb32556",
        "question": "What are the names of all people who do not have friends?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name ] ; #2 = Scan Table [ PersonFriend ] Output [ name ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.name = #2.name ] Output [ #1.name ]"
    },
    {
        "id": "12e8700bfbda88fafaacb1cc1aaf4f98e343b945d33be8fc1d91200b16066899",
        "question": "Which person whose friends have the oldest average age?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name , age ] ; #2 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.friend ] Output [ #2.name , #1.age ] ; #4 = Aggregate [ #3 ] GroupBy [ name ] Output [ name , AVG(age) AS Avg_age ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_age DESC ] Output [ name , Avg_age ]"
    },
    {
        "id": "14c9cef247853fdb8ef57b1a86146de79a27af2b12c65614f8d528e910a75d6f",
        "question": "What is the name of the person who has the oldest average age for their friends, and what is that average age?",
        "parsing_tree": "network_2 | #1 = Scan Table [ Person ] Output [ name , age ] ; #2 = Scan Table [ PersonFriend ] Output [ name , friend ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.name = #2.friend ] Output [ #2.name , #1.age ] ; #4 = Aggregate [ #3 ] GroupBy [ name ] Output [ name , AVG(age) AS Avg_age ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_age DESC ] Output [ name , Avg_age ]"
    },
    {
        "id": "8eda26823805e727edb21ce032cd5fe375c601576ce31e7cc38e472c521c7154",
        "question": "How many members are there?",
        "parsing_tree": "decoration_competition | #1 = Scan Table [ member ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "05a05b0e3418716bf86a4d226ece093af091ec1a7e942c559c6ee2ec18d4371a",
        "question": "List the names of members in ascending alphabetical order.",
        "parsing_tree": "decoration_competition | #1 = Scan Table [ member ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "46bd1835b9d25fe996c4bee57778029c93a6958bd0b54c76705cd4e3819e10ac",
        "question": "What are the names and countries of members?",
        "parsing_tree": "decoration_competition | #1 = Scan Table [ member ] Output [ Country , Name ]"
    },
    {
        "id": "09da3e7adbfb082308f3551c7dab4ecb6890565b6e4ff50ff604febf23e94a91",
        "question": "Show the names of members whose country is \"United States\" or \"Canada\".",
        "parsing_tree": "decoration_competition | #1 = Scan Table [ member ] Predicate [ Country = 'Canada' OR Country = 'United States' ] Output [ Country , Name ]"
    },
    {
        "id": "7152b87e2ee7e61b37c55375a7939b42e0e99db9ca676d04d6c81f2404baf6c0",
        "question": "Show the different countries and the number of members from each.",
        "parsing_tree": "decoration_competition | #1 = Scan Table [ member ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]"
    },
    {
        "id": "390121b19f41a0ded4b65823935c3bed6d5cc25d2d8a033b74526cac3a567929",
        "question": "Show the most common country across members.",
        "parsing_tree": "decoration_competition | #1 = Scan Table [ member ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Country ]"
    },
    {
        "id": "2cfdf6498a35a4da0b4ba039dd3e84f59b6c5f7913bc1146b765f512ccb6536c",
        "question": "Which countries have more than two members?",
        "parsing_tree": "decoration_competition | #1 = Scan Table [ member ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Country ]"
    },
    {
        "id": "de941fe7c0f306c09e831129e65b498f6ce25557d064a702133a8602eae12e6b",
        "question": "Show the leader names and locations of colleges.",
        "parsing_tree": "decoration_competition | #1 = Scan Table [ college ] Output [ Leader_Name , College_Location ]"
    },
    {
        "id": "5a4117cd0d8fbc7baafbec36d57a90ed2945180c8910c48d01ca3d448d9ae35e",
        "question": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.",
        "parsing_tree": "decoration_competition | #1 = Scan Table [ college ] Output [ College_Location , College_ID ] ; #2 = Scan Table [ member ] Output [ Name , College_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.College_ID = #2.College_ID ] Output [ #2.Name , #1.College_Location ] ; #4 = Sort [ #3 ] OrderBy [ Name ASC ] Output [ Name , College_Location ]"
    },
    {
        "id": "710b9428aeca6dcd92ff968cceb41ead9138bf79e131026bb397b94f4aa3b8bb",
        "question": "Show the distinct leader names of colleges associated with members from country \"Canada\".",
        "parsing_tree": "decoration_competition | #1 = Scan Table [ member ] Predicate [ Country = 'Canada' ] Output [ Country , College_ID ] ; #2 = Scan Table [ college ] Output [ Leader_Name , College_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.College_ID = #2.College_ID ] Distinct [ true ] Output [ #2.Leader_Name ]"
    },
    {
        "id": "2eb5280a43fd479685588382a5022c4ad5f44e3646c295b13de053b13ab38335",
        "question": "Show the names of members and the decoration themes they have.",
        "parsing_tree": "decoration_competition | #1 = Scan Table [ round ] Output [ Decoration_Theme , Member_ID ] ; #2 = Scan Table [ member ] Output [ Name , Member_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Member_ID = #2.Member_ID ] Output [ #2.Name , #1.Decoration_Theme ]"
    },
    {
        "id": "af4813646fb04a3b5aa968fb70e97bc4b812ce13c60f3e43e7bbefc081aca9f1",
        "question": "Show the names of members that have a rank in round higher than 3.",
        "parsing_tree": "decoration_competition | #1 = Scan Table [ round ] Predicate [ Rank_in_Round > 3 ] Output [ Rank_in_Round , Member_ID ] ; #2 = Scan Table [ member ] Output [ Name , Member_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Member_ID = #2.Member_ID ] Output [ #2.Name ]"
    },
    {
        "id": "56c41966ae5db94b4282b144e480bc270a9fea7e0e50caa829d97469ae2b1002",
        "question": "Show the names of members in ascending order of their rank in rounds.",
        "parsing_tree": "decoration_competition | #1 = Scan Table [ round ] Output [ Rank_in_Round , Member_ID ] ; #2 = Scan Table [ member ] Output [ Name , Member_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Member_ID = #2.Member_ID ] Output [ #2.Name , #1.Rank_in_Round ] ; #4 = Sort [ #3 ] OrderBy [ Rank_in_Round ASC ] Output [ Rank_in_Round , Name ]"
    },
    {
        "id": "84533734a77e2a9f7c1a18837f0904df4ed711f79d405490a0b86a731d9ed995",
        "question": "List the names of members who did not participate in any round.",
        "parsing_tree": "decoration_competition | #1 = Scan Table [ member ] Output [ Name , Member_ID ] ; #2 = Scan Table [ round ] Output [ Member_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Member_ID = #1.Member_ID ] Output [ #1.Name ]"
    },
    {
        "id": "6c817a2aae4dc6c5fd434ffa1659c31cd8a72645d42a2d2be107892272d86ead",
        "question": "Find the name and access counts of all documents, in alphabetic order of the document name.",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ access_count , document_name ] ; #2 = Sort [ #1 ] OrderBy [ document_name ASC ] Output [ access_count , document_name ]"
    },
    {
        "id": "ae2f7a4aabf006bb300edda1aabd1025a6da5996bf60cbb94432aba83e87e9d8",
        "question": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ access_count , document_name ] ; #2 = Sort [ #1 ] OrderBy [ document_name ASC ] Output [ access_count , document_name ]"
    },
    {
        "id": "1d3fa4de3632af5478ef3de45529af8545ac09ee1bf8666b800657f6a2697c13",
        "question": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ access_count , document_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ access_count DESC ] Output [ access_count , document_name ]"
    },
    {
        "id": "dbbd191ea41e720248fe13078a0bbf1b28f8ee33921f73b2c76699b73836848f",
        "question": "What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ access_count , document_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ access_count DESC ] Output [ access_count , document_name ]"
    },
    {
        "id": "ef04908ca94a70bd0313c018118d02048c2e56fe684f8eee83f7963ab410af4f",
        "question": "Find the types of documents with more than 4 documents.",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ document_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ document_type_code ] Output [ countstar AS Count_Star , document_type_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 4 ] Output [ document_type_code ]"
    },
    {
        "id": "b69c5f4d533c079150674f1e4ba97b8df49f42180ce3c51f608890bd132a3558",
        "question": "What are the codes of types of documents of which there are for or more?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ document_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ document_type_code ] Output [ countstar AS Count_Star , document_type_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 4 ] Output [ document_type_code ]"
    },
    {
        "id": "7375e04e0219de034548326c49405e838a07cfffd618a7d0701fb1598550a9ad",
        "question": "Find the total access count of all documents in the most popular document type.",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ document_type_code , access_count ] ; #2 = Aggregate [ #1 ] GroupBy [ document_type_code ] Output [ countstar AS Count_Star , SUM(access_count) AS Sum_access_count ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Sum_access_count ]"
    },
    {
        "id": "62b162d48379f7cedef8b7529f09a35296ec240f85f991d08fd9540b7858125f",
        "question": "What is the total access count of documents that are of the most common document type?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ document_type_code , access_count ] ; #2 = Aggregate [ #1 ] GroupBy [ document_type_code ] Output [ countstar AS Count_Star , SUM(access_count) AS Sum_access_count ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Sum_access_count ]"
    },
    {
        "id": "c1507bcfedf9255f9f689bd7c3022a0c09a2bcfaf4e9c8347ff8b2100e15a55b",
        "question": "What is the average access count of documents?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ access_count ] ; #2 = Aggregate [ #1 ] Output [ AVG(access_count) AS Avg_access_count ]"
    },
    {
        "id": "f15d87cdad963afc9a9c672551bb464b9d199feebffd2b0a2480bdbe31a38031",
        "question": "Find the average access count across all documents?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ access_count ] ; #2 = Aggregate [ #1 ] Output [ AVG(access_count) AS Avg_access_count ]"
    },
    {
        "id": "2a739af0b7142c58666f707d455a2e34e717481184f7292a065ff9a46cfee4b4",
        "question": "What is the structure of the document with the least number of accesses?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ document_structure_code ] ; #2 = Aggregate [ #1 ] GroupBy [ document_structure_code ] Output [ countstar AS Count_Star , document_structure_code ] ; #3 = Scan Table [ Document_Structures ] Output [ document_structure_description , document_structure_code ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.document_structure_code = #3.document_structure_code ] Output [ #3.document_structure_description , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ document_structure_description , Count_Star ]"
    },
    {
        "id": "b50a32c5c2915f5d67f6eab4418da41fc39a1fd2b2b8d9d8efc8b0666f156d2b",
        "question": "Return the structure description of the document that has been accessed the fewest number of times.",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ document_structure_code ] ; #2 = Aggregate [ #1 ] GroupBy [ document_structure_code ] Output [ countstar AS Count_Star , document_structure_code ] ; #3 = Scan Table [ Document_Structures ] Output [ document_structure_description , document_structure_code ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.document_structure_code = #3.document_structure_code ] Output [ #3.document_structure_description , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ document_structure_description , Count_Star ]"
    },
    {
        "id": "bbe7f1823c947a27ef29df2a580d1308b7476004f90e1aaaa3db892725b1eb03",
        "question": "What is the type of the document named \"David CV\"?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Predicate [ document_name = 'David CV' ] Output [ document_type_code , document_name ]"
    },
    {
        "id": "7341e0049a6c469ae6a148603e10fa71808da7a3d19787817e705d9685235f4f",
        "question": "Return the type code of the document named \"David CV\".",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Predicate [ document_name = 'David CV' ] Output [ document_type_code , document_name ]"
    },
    {
        "id": "70930e99dd02331d8717101e4843e7392cb2ee0a1b624e0d1e7d7d189a7a5d42",
        "question": "What document types do have more than 10000 total access number.",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ document_type_code , access_count ] ; #2 = Aggregate [ #1 ] GroupBy [ document_type_code ] Output [ document_type_code , SUM(access_count) AS Sum_access_count ] ; #3 = Filter [ #2 ] Predicate [ Sum_access_count > 10000 ] Output [ document_type_code ]"
    },
    {
        "id": "e7897c747150953bb7ccc2650db4f50b152a959232a0ee0046f7449e3c1ddde8",
        "question": "Return the codes of the document types that do not have a total access count of over 10000.",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ document_type_code , access_count ] ; #2 = Aggregate [ #1 ] GroupBy [ document_type_code ] Output [ document_type_code , SUM(access_count) AS Sum_access_count ] ; #3 = Filter [ #2 ] Predicate [ Sum_access_count > 10000 ] Output [ document_type_code ]"
    },
    {
        "id": "4a2f723ded72860f11ded0e43a3d5075fb431e7f977b23cfb111aae8435b88c5",
        "question": "What are all the section titles of the document named \"David CV\"?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Predicate [ document_name = 'David CV' ] Output [ document_code , document_name ] ; #2 = Scan Table [ Document_Sections ] Output [ document_code , section_title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.document_code = #2.document_code ] Output [ #2.section_title ]"
    },
    {
        "id": "41333773e7d34647bfa03c535e844b7584f6977096febbedec764429bc2903e0",
        "question": "Give the section titles of the document with the name \"David CV\".",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Predicate [ document_name = 'David CV' ] Output [ document_code , document_name ] ; #2 = Scan Table [ Document_Sections ] Output [ document_code , section_title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.document_code = #2.document_code ] Output [ #2.section_title ]"
    },
    {
        "id": "313f1714a70052781aed36d079f44faaa1f81688c33fefec2355324a28802efb",
        "question": "Find all the name of documents without any sections.",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ document_code , document_name ] ; #2 = Scan Table [ Document_Sections ] Output [ document_code ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.document_code = #1.document_code ] Output [ #1.document_name ]"
    },
    {
        "id": "6f8952a263f08c93a1866ad66c0b20d958b25c432a8bc15c6580c937fadbfc2b",
        "question": "What are the names of documents that do not have any sections?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ document_code , document_name ] ; #2 = Scan Table [ Document_Sections ] Output [ document_code ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.document_code = #1.document_code ] Output [ #1.document_name ]"
    },
    {
        "id": "ff8dfa83397e5a52c0a51c29406dc034f6ec6d5b302b145404e292ed581d9681",
        "question": "List all the username and passwords of users with the most popular role.",
        "parsing_tree": "document_management | #1 = Scan Table [ Users ] Output [ role_code , user_name , password ] ; #2 = Aggregate [ #1 ] GroupBy [ user_name , password , role_code ] Output [ countstar AS Count_Star , user_name , password ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ True ] Output [ Count_Star , user_name , password ]"
    },
    {
        "id": "cfbc7793f4fc394beb3238644ae948ce7df436786f7c9900990ff09554a7e8e2",
        "question": "What are the usernames and passwords of users that have the most common role?",
        "parsing_tree": "document_management | #1 = Scan Table [ Users ] Output [ role_code , user_name , password ] ; #2 = Aggregate [ #1 ] GroupBy [ user_name , password , role_code ] Output [ countstar AS Count_Star , user_name , password ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ True ] Output [ Count_Star , user_name , password ]"
    },
    {
        "id": "9c33c4d14402864e0bc199fc738d041aed3d75ef11d0ef6fff9693334b47b37e",
        "question": "Find the average access counts of documents with functional area \"Acknowledgement\".",
        "parsing_tree": "document_management | #1 = Scan Table [ Functional_Areas ] Predicate [ functional_area_description = 'Acknowledgement' ] Output [ functional_area_description , functional_area_code ] ; #2 = Scan Table [ Document_Functional_Areas ] Output [ document_code , functional_area_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.functional_area_code = #2.functional_area_code ] Output [ #2.document_code ] ; #4 = Scan Table [ Documents ] Output [ access_count , document_code ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.document_code = #4.document_code ] Output [ #4.access_count ] ; #6 = Aggregate [ #5 ] Output [ AVG(access_count) AS Avg_access_count ]"
    },
    {
        "id": "ad3aace07de0f7ba396a880ccf4c1d0eb40de2d4d956cfa7cefc9c31f44c3ead",
        "question": "What are the average access counts of documents that have the functional area description \"Acknowledgement\"?",
        "parsing_tree": "document_management | #1 = Scan Table [ Functional_Areas ] Predicate [ functional_area_description = 'Acknowledgement' ] Output [ functional_area_description , functional_area_code ] ; #2 = Scan Table [ Document_Functional_Areas ] Output [ document_code , functional_area_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.functional_area_code = #2.functional_area_code ] Output [ #2.document_code ] ; #4 = Scan Table [ Documents ] Output [ access_count , document_code ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.document_code = #4.document_code ] Output [ #4.access_count ] ; #6 = Aggregate [ #5 ] Output [ AVG(access_count) AS Avg_access_count ]"
    },
    {
        "id": "df60136565056fd2891593879cd4803e9de91a6c639516228aeacf2eb85d6eb9",
        "question": "Find names of the document without any images.",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Distinct [ true ] Output [ document_name ] ; #2 = Scan Table [ Document_Sections ] Output [ document_code , section_id ] ; #3 = Scan Table [ Documents ] Output [ document_code , document_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.document_code = #3.document_code ] Output [ #2.section_id , #3.document_name ] ; #5 = Scan Table [ Document_Sections_Images ] Output [ section_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.section_id = #5.section_id ] Output [ #4.document_name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.document_name = #6.document_name ] Output [ #1.document_name ]"
    },
    {
        "id": "b45f41d7859191316144cd2d31e81ee3e5c704f1597a0131ef4da06f24575d27",
        "question": "What are the names of documents that do not have any images?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Distinct [ true ] Output [ document_name ] ; #2 = Scan Table [ Document_Sections ] Output [ document_code , section_id ] ; #3 = Scan Table [ Documents ] Output [ document_code , document_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.document_code = #3.document_code ] Output [ #2.section_id , #3.document_name ] ; #5 = Scan Table [ Document_Sections_Images ] Output [ section_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.section_id = #5.section_id ] Output [ #4.document_name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.document_name = #6.document_name ] Output [ #1.document_name ]"
    },
    {
        "id": "9ea789d7fd711fad765f6d253c6b3853f4a7b026f96cd7d16aaab36b198a93f3",
        "question": "What is the name of the document with the most number of sections?",
        "parsing_tree": "document_management | #1 = Scan Table [ Document_Sections ] Output [ document_code ] ; #2 = Aggregate [ #1 ] GroupBy [ document_code ] Output [ countstar AS Count_Star , document_code ] ; #3 = Scan Table [ Documents ] Output [ document_code , document_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.document_code = #3.document_code ] Output [ #3.document_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , document_name ]"
    },
    {
        "id": "a464bb2ba14e0917b470de119add187b63605430b9caf375931e291a3ef1f53e",
        "question": "Return the name of the document that has the most sections.",
        "parsing_tree": "document_management | #1 = Scan Table [ Document_Sections ] Output [ document_code ] ; #2 = Aggregate [ #1 ] GroupBy [ document_code ] Output [ countstar AS Count_Star , document_code ] ; #3 = Scan Table [ Documents ] Output [ document_code , document_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.document_code = #3.document_code ] Output [ #3.document_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , document_name ]"
    },
    {
        "id": "a441dd784879732084d3a56a506d970d40da5ceca47ae0e949baf384419fe22b",
        "question": "List all the document names which contains \"CV\".",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Predicate [ document_name like '%CV%' ] Output [ document_name ]"
    },
    {
        "id": "1ee683f51a42b9ff5bae2371fa80e3b002d3a9c74d42cf16e542246a1df1f6ef",
        "question": "What are the names of documents that contain the substring \"CV\"?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Predicate [ document_name like '%CV%' ] Output [ document_name ]"
    },
    {
        "id": "b1ef4ed89ac93f4e786ec641c6a16e586e8762f47d59a25c81e89a214d36430c",
        "question": "How many users are logged in?",
        "parsing_tree": "document_management | #1 = Scan Table [ Users ] Predicate [ user_login = 1 ] Output [ user_login ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a0557f73ae2375086c86ef1729c3602157e6a836c7ff9c10ac3477ac1f7de316",
        "question": "Count the number of users that are logged in.",
        "parsing_tree": "document_management | #1 = Scan Table [ Users ] Predicate [ user_login = 1 ] Output [ user_login ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ac9965d57aa55fc5472875ff4eb282593e2ac5494da5805098dceda387efd38d",
        "question": "Find the description of the most popular role among the users that have logged in.",
        "parsing_tree": "document_management | #1 = Scan Table [ Users ] Predicate [ user_login = 1 ] Output [ role_code , user_login ] ; #2 = Aggregate [ #1 ] GroupBy [ role_code ] Output [ countstar AS Count_Star , role_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ role_code , Count_Star ] ; #4 = Scan Table [ Roles ] Output [ role_description , role_code ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.role_code = #4.role_code ] Output [ #4.role_description ]"
    },
    {
        "id": "7c86c63f836561741c498d2699393295c5091cdebd2a9d49c656039d8cb88211",
        "question": "What is the description of the most popular role among users that have logged in?",
        "parsing_tree": "document_management | #1 = Scan Table [ Users ] Predicate [ user_login = 1 ] Output [ role_code , user_login ] ; #2 = Aggregate [ #1 ] GroupBy [ role_code ] Output [ countstar AS Count_Star , role_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ role_code , Count_Star ] ; #4 = Scan Table [ Roles ] Output [ role_description , role_code ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.role_code = #4.role_code ] Output [ #4.role_description ]"
    },
    {
        "id": "689ac713eb0662f0af121f513b705824adc0309f5118b7b899b241d6cc0d5bb4",
        "question": "Find the average access count of documents with the least popular structure.",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ access_count , document_structure_code ] ; #2 = Aggregate [ #1 ] GroupBy [ document_structure_code ] Output [ countstar AS Count_Star , AVG(access_count) AS Avg_access_count ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Avg_access_count ]"
    },
    {
        "id": "5eac8495f78cc7e26fd5fdf2c863e28cf0a51f51e81013f469bea9610c4e581c",
        "question": "What is the average access count of documents that have the least common structure?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ access_count , document_structure_code ] ; #2 = Aggregate [ #1 ] GroupBy [ document_structure_code ] Output [ countstar AS Count_Star , AVG(access_count) AS Avg_access_count ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Avg_access_count ]"
    },
    {
        "id": "874ac463f98b1a1124883176b725039f41f45e331399d79383599510f2075110",
        "question": "List all the image name and URLs in the order of their names.",
        "parsing_tree": "document_management | #1 = Scan Table [ Images ] Output [ image_name , image_url ] ; #2 = Sort [ #1 ] OrderBy [ image_name ASC ] Output [ image_name , image_url ]"
    },
    {
        "id": "d4f9ac403455226bba40d05eeb24a5c45d3d66c05cd614f9bd960c377ac2a9b3",
        "question": "What are the names and urls of images, sorted alphabetically?",
        "parsing_tree": "document_management | #1 = Scan Table [ Images ] Output [ image_name , image_url ] ; #2 = Sort [ #1 ] OrderBy [ image_name ASC ] Output [ image_name , image_url ]"
    },
    {
        "id": "5752995de7507dceb614fc854a4a0e746a7a099a3ba6e2948317647973a2e9ac",
        "question": "Find the number of users in each role.",
        "parsing_tree": "document_management | #1 = Scan Table [ Users ] Output [ role_code ] ; #2 = Aggregate [ #1 ] GroupBy [ role_code ] Output [ countstar AS Count_Star , role_code ]"
    },
    {
        "id": "623dd2dfb99a5fab095c63a6e6decc26bf3288fc9050bc35a7ee33f7f1f21ac6",
        "question": "What are the different role codes for users, and how many users have each?",
        "parsing_tree": "document_management | #1 = Scan Table [ Users ] Output [ role_code ] ; #2 = Aggregate [ #1 ] GroupBy [ role_code ] Output [ countstar AS Count_Star , role_code ]"
    },
    {
        "id": "e7ded5477720704620cd1d2a23dfc22d76b20fa7c3528baecafa48238729ffb0",
        "question": "What document types have more than 2 corresponding documents?",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ document_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ document_type_code ] Output [ countstar AS Count_Star , document_type_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ document_type_code ]"
    },
    {
        "id": "831087ffd6a3409f6a826e8e1bd4cb49a39038e9c191dfa50c8b1c0009d13320",
        "question": "Give the codes of document types that have more than 2 corresponding documents.",
        "parsing_tree": "document_management | #1 = Scan Table [ Documents ] Output [ document_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ document_type_code ] Output [ countstar AS Count_Star , document_type_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ document_type_code ]"
    },
    {
        "id": "81be1489703925175668a2ab1df78fd806fe771555a49a45ee8b299ab2fee78a",
        "question": "How many companies are there?",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a0cfb3900ecdea02abf1a63dbbdb2cb1f81ed695ebbe8c27a591cd2b2807eeac",
        "question": "Count the number of companies.",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0ea641733dfa2f978ac84faeccbbc72c0e16a7a114bbfac67ab8cad0bb7cb64a",
        "question": "List the names of companies in descending order of market value.",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ name , Market_Value_billion ] ; #2 = Sort [ #1 ] OrderBy [ Market_Value_billion DESC ] Output [ name , Market_Value_billion ]"
    },
    {
        "id": "2f816f0b5515fc78174fa81be07f857bb92b90a6c948893a0105b3400f408901",
        "question": "Sort the company names in descending order of the company's market value.",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ name , Market_Value_billion ] ; #2 = Sort [ #1 ] OrderBy [ Market_Value_billion DESC ] Output [ name , Market_Value_billion ]"
    },
    {
        "id": "33d8d7ee153ebdbc4f8f7a69133ee6a732b5aa7cb5eb05c6c7198938dacd6832",
        "question": "What are the names of companies whose headquarters are not \"USA\"?",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Predicate [ Headquarters <> 'USA' ] Output [ name , Headquarters ]"
    },
    {
        "id": "62966d15bfc85b202fcf380909757d3a5cd561b2d31398fa0c40851d430f8022",
        "question": "Find the names of the companies whose headquarters are not located in \"USA\".",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Predicate [ Headquarters <> 'USA' ] Output [ name , Headquarters ]"
    },
    {
        "id": "d43aa46b2f9ed4cadfd191604106a0ab0f16981f3ea31f039c8c464cfe980499",
        "question": "What are the name and assets of each company, sorted in ascending order of company name?",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ name , Assets_billion ] ; #2 = Sort [ #1 ] OrderBy [ name ASC ] Output [ name , Assets_billion ]"
    },
    {
        "id": "be3fd5574ed2f02138e7c0cf13c6178360dcd6bd44394477ee240ab38e9d342a",
        "question": "List the name and assets of each company in ascending order of company name.",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ name , Assets_billion ] ; #2 = Sort [ #1 ] OrderBy [ name ASC ] Output [ name , Assets_billion ]"
    },
    {
        "id": "a7fea7c75aa203913590cf36dff6dcdad0f6bb3e43647973e464bc64da7fbc72",
        "question": "What are the average profits of companies?",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ Profits_billion ] ; #2 = Aggregate [ #1 ] Output [ AVG(Profits_billion) AS Avg_Profits_billion ]"
    },
    {
        "id": "ba00d318222041c43c7a9fb9dfc2912def046fa6f10ede27952e38e1f4107800",
        "question": "Compute the average profits companies make.",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ Profits_billion ] ; #2 = Aggregate [ #1 ] Output [ AVG(Profits_billion) AS Avg_Profits_billion ]"
    },
    {
        "id": "cb234c99161c46cf30f54b0707feafa817a30e15e01ff3e710e54526d7945608",
        "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Predicate [ Industry <> 'Banking' ] Output [ Sales_billion , Industry ] ; #2 = Aggregate [ #1 ] Output [ MAX(Sales_billion) AS Max_Sales_billion , MIN(Sales_billion) AS Min_Sales_billion ]"
    },
    {
        "id": "46724e93e9f92679a55c2ea6e13abcc91475508d811e899b0a1b1669277604b7",
        "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Predicate [ Industry <> 'Banking' ] Output [ Sales_billion , Industry ] ; #2 = Aggregate [ #1 ] Output [ MAX(Sales_billion) AS Max_Sales_billion , MIN(Sales_billion) AS Min_Sales_billion ]"
    },
    {
        "id": "56ef9a98c71212ba498e44705444c6a4efd4e82f97218f3b5e8e65aa6044c81b",
        "question": "How many different industries are the companies in?",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Distinct [ true ] Output [ Industry ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Industry) AS Count_Dist_Industry ]"
    },
    {
        "id": "eeac2e34039cd71ec4d5e1c15898ede385b9ad8c7353bde7d9bbc1482a465948",
        "question": "Count the number of distinct company industries.",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Distinct [ true ] Output [ Industry ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Industry) AS Count_Dist_Industry ]"
    },
    {
        "id": "a4f210386ecfc2491ab13696e24f94362e53388f681620098a39d1832c8890b6",
        "question": "List the names of buildings in descending order of building height.",
        "parsing_tree": "company_office | #1 = Scan Table [ buildings ] Output [ name , Height ] ; #2 = Sort [ #1 ] OrderBy [ Height DESC ] Output [ name , Height ]"
    },
    {
        "id": "ee465932bd0049d7639d110e1a29ab1eebb5d04a4f47e1f87a51e8065eb4d0ce",
        "question": "What are the names of buildings sorted in descending order of building height?",
        "parsing_tree": "company_office | #1 = Scan Table [ buildings ] Output [ name , Height ] ; #2 = Sort [ #1 ] OrderBy [ Height DESC ] Output [ name , Height ]"
    },
    {
        "id": "f3221b26cc8e30906ceb82dd7f9a1ade26bb08a602685075511af3425b64243a",
        "question": "Find the stories of the building with the largest height.",
        "parsing_tree": "company_office | #1 = Scan Table [ buildings ] Output [ Stories , Height ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Height DESC ] Output [ Stories , Height ]"
    },
    {
        "id": "90506327cb2ee7b8813cc04989659cc8440c85949ab6091c54cba2d75f73cc81",
        "question": "What is the stories of highest building?",
        "parsing_tree": "company_office | #1 = Scan Table [ buildings ] Output [ Stories , Height ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Height DESC ] Output [ Stories , Height ]"
    },
    {
        "id": "1f5ccba8244cec8d466906bc5d9e4f438b5fc510e2b319a4d8070b14157e38aa",
        "question": "Show the names of the buildings that have more than one company offices.",
        "parsing_tree": "company_office | #1 = Scan Table [ buildings ] Output [ name , id ] ; #2 = Scan Table [ Office_locations ] Output [ building_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.building_id ] Output [ #2.building_id , #1.name ] ; #4 = Aggregate [ #3 ] GroupBy [ building_id ] Output [ name , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]"
    },
    {
        "id": "b28f27dfc6e6e0604d7891c407d1426098bfa6ee2ef24e9426a8a7a8e9aa7b1b",
        "question": "Which buildings have more than one company offices? Give me the building names.",
        "parsing_tree": "company_office | #1 = Scan Table [ buildings ] Output [ name , id ] ; #2 = Scan Table [ Office_locations ] Output [ building_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.building_id ] Output [ #2.building_id , #1.name ] ; #4 = Aggregate [ #3 ] GroupBy [ building_id ] Output [ name , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]"
    },
    {
        "id": "6c77055bf6ead72bcb40b926b614a4136b527dc573e37a448f8f1cec4a36698d",
        "question": "Show the name of the building that has the most company offices.",
        "parsing_tree": "company_office | #1 = Scan Table [ Office_locations ] Output [ building_id ] ; #2 = Aggregate [ #1 ] GroupBy [ building_id ] Output [ countstar AS Count_Star , building_id ] ; #3 = Scan Table [ buildings ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.building_id = #3.id ] Output [ #3.name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "c88f7d7acdd8bd7420d82e223e0b40a549b5ddf6ead833383ce23bdc7207e6f8",
        "question": "Which building has the largest number of company offices? Give me the building name.",
        "parsing_tree": "company_office | #1 = Scan Table [ Office_locations ] Output [ building_id ] ; #2 = Aggregate [ #1 ] GroupBy [ building_id ] Output [ countstar AS Count_Star , building_id ] ; #3 = Scan Table [ buildings ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.building_id = #3.id ] Output [ #3.name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "4a1ef3e4ba17481c592d54909922d341767ce36461504b41b94d7f0939a33f14",
        "question": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
        "parsing_tree": "company_office | #1 = Scan Table [ buildings ] Predicate [ Status = 'on-hold' ] Output [ name , Status , Stories ] ; #2 = Sort [ #1 ] OrderBy [ Stories ASC ] Output [ name , Stories ]"
    },
    {
        "id": "c4b1896ffac8aa55db52f825994d746fc7c4667e62789d5b5b6b673d146411fc",
        "question": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.",
        "parsing_tree": "company_office | #1 = Scan Table [ buildings ] Predicate [ Status = 'on-hold' ] Output [ name , Status , Stories ] ; #2 = Sort [ #1 ] OrderBy [ Stories ASC ] Output [ name , Stories ]"
    },
    {
        "id": "105ab2eb52c86060427c22113a1f358eae4b4b2fd328f1c3ca494e2b2a826fc2",
        "question": "Please show each industry and the corresponding number of companies in that industry.",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ Industry ] ; #2 = Aggregate [ #1 ] GroupBy [ Industry ] Output [ countstar AS Count_Star , Industry ]"
    },
    {
        "id": "b55bd193e68987ea0ea8c2bd1e95db29930c255e615f6bc918ef1c3fc726b9cf",
        "question": "Whah are the name of each industry and the number of companies in that industry?",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ Industry ] ; #2 = Aggregate [ #1 ] GroupBy [ Industry ] Output [ countstar AS Count_Star , Industry ]"
    },
    {
        "id": "390133118df35a5116486897ed5e22c19f3c14cae9ce7442062455f719f33407",
        "question": "Please show the industries of companies in descending order of the number of companies.",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ Industry ] ; #2 = Aggregate [ #1 ] GroupBy [ Industry ] Output [ countstar AS Count_Star , Industry ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Industry ]"
    },
    {
        "id": "a848dc51f7b57ae3f4367f7509402f7d9a09fbf67cb3b0c0fd0273fe37e8cb14",
        "question": "Sort all the industries in descending order of the count of companies in each industry",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ Industry ] ; #2 = Aggregate [ #1 ] GroupBy [ Industry ] Output [ countstar AS Count_Star , Industry ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Industry ]"
    },
    {
        "id": "be35080a2fe13bb01511f493216ad20f949e8537f2b67f466a7ec7ea95521e15",
        "question": "List the industry shared by the most companies.",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ Industry ] ; #2 = Aggregate [ #1 ] GroupBy [ Industry ] Output [ countstar AS Count_Star , Industry ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Industry ]"
    },
    {
        "id": "a602b12397c7719da64c384b9ebd7bfd76249fc675d8df16e74287fe50af460d",
        "question": "Which industry has the most companies?",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ Industry ] ; #2 = Aggregate [ #1 ] GroupBy [ Industry ] Output [ countstar AS Count_Star , Industry ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Industry ]"
    },
    {
        "id": "ab018914b7cc2b6572b05c2134ae6aeffb1bbcd2bea905a7b08dcf6f75952cd3",
        "question": "List the names of buildings that have no company office.",
        "parsing_tree": "company_office | #1 = Scan Table [ buildings ] Output [ name , id ] ; #2 = Scan Table [ Office_locations ] Output [ building_id ] ; #3 = Aggregate [ #2 ] GroupBy [ building_id ] Output [ building_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.building_id = #1.id ] Output [ #1.name ]"
    },
    {
        "id": "68ca06ccd8ce2f6f6604ea9aa70dc50a50f9201562700e9e35a23c2798ed0220",
        "question": "Which buildings do not have any company office? Give me the building names.",
        "parsing_tree": "company_office | #1 = Scan Table [ buildings ] Output [ name , id ] ; #2 = Scan Table [ Office_locations ] Output [ building_id ] ; #3 = Aggregate [ #2 ] GroupBy [ building_id ] Output [ building_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.building_id = #1.id ] Output [ #1.name ]"
    },
    {
        "id": "037330bc1ab14f7f1a2c884d91ecc37261d5ae33472b0b148be0407abea12bdb",
        "question": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Predicate [ Headquarters = 'USA' ] Distinct [ true ] Output [ Industry , Headquarters ] ; #2 = Scan Table [ Companies ] Predicate [ Headquarters = 'China' ] Output [ Industry , Headquarters ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Industry = #2.Industry ] Output [ #1.Industry ]"
    },
    {
        "id": "ea5cb4ae14ad3efdf83fcf331c352c5e5fe2a706a08ed0ef39658f1d09e13264",
        "question": "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Predicate [ Headquarters = 'USA' ] Distinct [ true ] Output [ Industry , Headquarters ] ; #2 = Scan Table [ Companies ] Predicate [ Headquarters = 'China' ] Output [ Industry , Headquarters ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Industry = #2.Industry ] Output [ #1.Industry ]"
    },
    {
        "id": "8c49096ddc9e28db4927f763606eb50417e869f8ab8de972523ef45cc62bd2a5",
        "question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Predicate [ Industry = 'Banking' OR Industry = 'Conglomerate' ] Output [ Industry ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a1fb2b95d4d68f2d5d92bee327a9069914ae9f0047d57a16a412a283a92e61db",
        "question": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Predicate [ Industry = 'Banking' OR Industry = 'Conglomerate' ] Output [ Industry ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0726bfdb721ded4b94396f2ab619b26b62dc013c71d4209db9f1ff5fb36704b4",
        "question": "Show the headquarters shared by more than two companies.",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ Headquarters ] ; #2 = Aggregate [ #1 ] GroupBy [ Headquarters ] Output [ countstar AS Count_Star , Headquarters ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Headquarters ]"
    },
    {
        "id": "59c632a0cc0813c300841fb4f51213cc0557a82911e717e45827c9158ff8f33c",
        "question": "Which headquarter locations are used by more than 2 companies?",
        "parsing_tree": "company_office | #1 = Scan Table [ Companies ] Output [ Headquarters ] ; #2 = Aggregate [ #1 ] GroupBy [ Headquarters ] Output [ countstar AS Count_Star , Headquarters ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Headquarters ]"
    },
    {
        "id": "c9a6d6bd0c3ccc85d78820d6e7202d633f01153b7bb97523ef100574896412c7",
        "question": "How many products are there?",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "195486ee31b6d1848e35b8fb636ab8d74602e656615697d3ea82821f49cc8e2e",
        "question": "List the name of products in ascending order of price.",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products ] Output [ Product_Name , Product_Price ] ; #2 = Sort [ #1 ] OrderBy [ Product_Price ASC ] Output [ Product_Name , Product_Price ]"
    },
    {
        "id": "f2c164d6a5186cd2021fa8b81260464b02402c56af077cd872f86e658c454650",
        "question": "What are the names and type codes of products?",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products ] Output [ Product_Name , Product_Type_Code ]"
    },
    {
        "id": "bcdffd05d46013bcede1c71dfefbf7cd0d6121a3033590a1c62875cee7da3572",
        "question": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products ] Predicate [ Product_Name = 'Dining' OR Product_Name = 'Trading Policy' ] Output [ Product_Name , Product_Price ]"
    },
    {
        "id": "5e1bf5f81400d065ffe327e532b02798bb7ede86d2a36bfabe9ffaab0e11808d",
        "question": "What is the average price for products?",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products ] Output [ Product_Price ] ; #2 = Aggregate [ #1 ] Output [ AVG(Product_Price) AS Avg_Product_Price ]"
    },
    {
        "id": "9e98481fc5f264640f0e32070ef9e89ada12ac32a94ed2392c4de067d9d88578",
        "question": "What is the name of the product with the highest price?",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products ] Output [ Product_Name , Product_Price ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Product_Price DESC ] Output [ Product_Name , Product_Price ]"
    },
    {
        "id": "6896ee0962f37ecf35617222457b37b71ea854ca1a2da3b22fc8d126a0dd5d9d",
        "question": "Show different type codes of products and the number of products with each type code.",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products ] Output [ Product_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Product_Type_Code ] Output [ countstar AS Count_Star , Product_Type_Code ]"
    },
    {
        "id": "71693832f4a14ac76747ce1856c3dc71919217e0c76e779eb9de4c9c47e82866",
        "question": "Show the most common type code across products.",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products ] Output [ Product_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Product_Type_Code ] Output [ countstar AS Count_Star , Product_Type_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Product_Type_Code ]"
    },
    {
        "id": "16b1b0b9185a62539c1a46265b19bd409f3f73703bba3c24f284640589fdf5d7",
        "question": "Show the product type codes that have at least two products.",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products ] Output [ Product_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Product_Type_Code ] Output [ countstar AS Count_Star , Product_Type_Code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Product_Type_Code ]"
    },
    {
        "id": "89d59bc20c60b37b3fb6d7fc07001cac2e97d943d8c1cb0deff709fcd5f68e18",
        "question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products ] Predicate [ Product_Price > 4500.0 ] Distinct [ true ] Output [ Product_Type_Code , Product_Price ] ; #2 = Scan Table [ Products ] Predicate [ Product_Price < 3000.0 ] Output [ Product_Type_Code , Product_Price ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Product_Type_Code = #2.Product_Type_Code ] Output [ #1.Product_Type_Code ]"
    },
    {
        "id": "2b70e5df26b6b290fd732aa98efdf49bb98e4a1cc4d55df2701df4b9a8159a1b",
        "question": "Show the names of products and the number of events they are in.",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products_in_Events ] Output [ Product_ID ] ; #2 = Scan Table [ Products ] Output [ Product_ID , Product_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Product_ID = #2.Product_ID ] Output [ #2.Product_Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Product_Name ] Output [ countstar AS Count_Star , Product_Name ]"
    },
    {
        "id": "406d57325e2de7449d7e50e98ac597c5cc9ca7272889674f2b01f7200a887547",
        "question": "Show the names of products and the number of events they are in, sorted by the number of events in descending order.",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products_in_Events ] Output [ Product_ID ] ; #2 = Scan Table [ Products ] Output [ Product_ID , Product_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Product_ID = #2.Product_ID ] Output [ #2.Product_Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Product_Name ] Output [ countstar AS Count_Star , Product_Name ] ; #5 = Sort [ #4 ] OrderBy [ Count_Star DESC ] Output [ Product_Name , Count_Star ]"
    },
    {
        "id": "f29f26eedbaf4f1c38c5e6037a3afcb13dcd8b2baf551780ddf6208ab45b0442",
        "question": "Show the names of products that are in at least two events.",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products_in_Events ] Output [ Product_ID ] ; #2 = Scan Table [ Products ] Output [ Product_ID , Product_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Product_ID = #2.Product_ID ] Output [ #2.Product_Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Product_Name ] Output [ countstar AS Count_Star , Product_Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Product_Name ]"
    },
    {
        "id": "f62f844c9a0e4d48571384079eef5effe1c8b4bcbb31f6a49d9ca2eb6624fee1",
        "question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products_in_Events ] Output [ Product_ID ] ; #2 = Scan Table [ Products ] Output [ Product_ID , Product_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Product_ID = #2.Product_ID ] Output [ #2.Product_Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Product_Name ] Output [ countstar AS Count_Star , Product_Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Product_Name ] ; #6 = Sort [ #5 ] OrderBy [ Product_Name ASC ] Output [ Product_Name ]"
    },
    {
        "id": "bcfa9aa4b55394b5886fb147488dacd52bf424c4c3a1efc05bc1c76e1b4d447c",
        "question": "List the names of products that are not in any event.",
        "parsing_tree": "solvency_ii | #1 = Scan Table [ Products ] Output [ Product_ID , Product_Name ] ; #2 = Scan Table [ Products_in_Events ] Output [ Product_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Product_ID = #1.Product_ID ] Output [ #1.Product_Name ]"
    },
    {
        "id": "be8db3f3b0d6950d9cadadae5e441cf1faa85caee26cb385c662627c26ccd36a",
        "question": "How many artworks are there?",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ artwork ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "217d379df52ee7c2d0a44bf7a36e1e5545aae6c7db29a7dd7f16d5586661bf0d",
        "question": "List the name of artworks in ascending alphabetical order.",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ artwork ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "b98ac54d73816e39c59cd5eeb10a8f0c156ad7c4af625bd1653225c52735f312",
        "question": "List the name of artworks whose type is not \"Program Talent Show\".",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ artwork ] Predicate [ Type <> 'Program Talent Show' ] Output [ Type , Name ]"
    },
    {
        "id": "6d0efb33e613c263afbcf799ed417ff047cd1ffce383fad631f4d34bf6436bb5",
        "question": "What are the names and locations of festivals?",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ festival_detail ] Output [ Festival_Name , Location ]"
    },
    {
        "id": "2ce1fd733456e8b1ab9128ad9b8623e68ad95d04617112547ea9d35183b41d2b",
        "question": "What are the names of the chairs of festivals, sorted in ascending order of the year held?",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ festival_detail ] Output [ Chair_Name , Year ] ; #2 = Sort [ #1 ] OrderBy [ Year ASC ] Output [ Chair_Name , Year ]"
    },
    {
        "id": "b86817243439022dbd76e57ddecc80ec1c6739a6ac3f1b5d9f2f13cc3b5164f0",
        "question": "What is the location of the festival with the largest number of audience?",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ festival_detail ] Output [ Location , Num_of_Audience ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Num_of_Audience DESC ] Output [ Location , Num_of_Audience ]"
    },
    {
        "id": "1e37deaa60a9eb596266d9a1226c58d11ff6fe5190b862690cfe7385fbf3e168",
        "question": "What are the names of festivals held in year 2007?",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ festival_detail ] Predicate [ Year = 2007 ] Output [ Festival_Name , Year ]"
    },
    {
        "id": "8ea15af447f434e29a9fbfe8438c85706e859299d173ca531dcba906847c7874",
        "question": "What is the average number of audience for festivals?",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ festival_detail ] Output [ Num_of_Audience ] ; #2 = Aggregate [ #1 ] Output [ AVG(Num_of_Audience) AS Avg_Num_of_Audience ]"
    },
    {
        "id": "a1c77e05a9a81118d8a316c5c7e9b126f9e4ccb963d04893a25ea958655da6e1",
        "question": "Show the names of the three most recent festivals.",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ festival_detail ] Output [ Festival_Name , Year ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ Year DESC ] Output [ Festival_Name , Year ]"
    },
    {
        "id": "b80f9e76663849aeb3004e7a3c85ce77919f5a3110c668efc8d755ff46fae07d",
        "question": "For each nomination, show the name of the artwork and name of the festival where it is nominated.",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ nomination ] Output [ Artwork_ID , Festival_ID ] ; #2 = Scan Table [ artwork ] Output [ Artwork_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artwork_ID = #2.Artwork_ID ] Output [ #2.Name , #1.Festival_ID ] ; #4 = Scan Table [ festival_detail ] Output [ Festival_Name , Festival_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Festival_ID = #4.Festival_ID ] Output [ #3.Name , #4.Festival_Name ]"
    },
    {
        "id": "2344997a3bd861e705ceb3aba46b09c451011f5ea2cce34a1a78a68863339f4c",
        "question": "Show distinct types of artworks that are nominated in festivals in 2007.",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ festival_detail ] Predicate [ Year = 2007 ] Output [ Year , Festival_ID ] ; #2 = Scan Table [ nomination ] Output [ Artwork_ID , Festival_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Festival_ID = #2.Festival_ID ] Output [ #2.Artwork_ID ] ; #4 = Scan Table [ artwork ] Output [ Artwork_ID , Type ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Artwork_ID = #4.Artwork_ID ] Distinct [ true ] Output [ #4.Type ]"
    },
    {
        "id": "e5c49aa49de3ce97c55b7918cea88773f6708dacb4d4ff6603a0e17715a6aab3",
        "question": "Show the names of artworks in ascending order of the year they are nominated in.",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ nomination ] Output [ Artwork_ID , Festival_ID ] ; #2 = Scan Table [ festival_detail ] Output [ Year , Festival_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Festival_ID = #2.Festival_ID ] Output [ #2.Year , #1.Artwork_ID ] ; #4 = Scan Table [ artwork ] Output [ Artwork_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Artwork_ID = #4.Artwork_ID ] Output [ #3.Year , #4.Name ] ; #6 = Sort [ #5 ] OrderBy [ Year ASC ] Output [ Name , Year ]"
    },
    {
        "id": "b545c5305821aff70303c592a3a89ec4ec9fd3c526dc3b026d1e6b2468b1c243",
        "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ artwork ] Predicate [ Type = 'Program Talent Show' ] Output [ Artwork_ID , Type ] ; #2 = Scan Table [ nomination ] Output [ Artwork_ID , Festival_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artwork_ID = #2.Artwork_ID ] Output [ #2.Festival_ID ] ; #4 = Scan Table [ festival_detail ] Output [ Festival_Name , Festival_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Festival_ID = #4.Festival_ID ] Output [ #4.Festival_Name ]"
    },
    {
        "id": "3f5a6dfadce09f345d8633e812474f698cb94ab5880305c3224fffbd41a97d2f",
        "question": "Show the ids and names of festivals that have at least two nominations for artworks.",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ nomination ] Output [ Festival_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Festival_ID ] Output [ countstar AS Count_Star , Festival_ID ] ; #3 = Scan Table [ festival_detail ] Output [ Festival_Name , Festival_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Festival_ID = #3.Festival_ID ] Output [ #3.Festival_Name , #2.Festival_ID , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Festival_Name , Festival_ID ]"
    },
    {
        "id": "cf7f7e3f08cff071124b2065d5336122140ba047fb6bdf485fa51c4cda9ac18e",
        "question": "Show the id, name of each festival and the number of artworks it has nominated.",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ nomination ] Output [ Festival_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Festival_ID ] Output [ countstar AS Count_Star , Festival_ID ] ; #3 = Scan Table [ festival_detail ] Output [ Festival_Name , Festival_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Festival_ID = #3.Festival_ID ] Output [ #3.Festival_Name , #2.Festival_ID , #2.Count_Star ]"
    },
    {
        "id": "0e668ae598de26004a47607ec078736df06741fdd38061a5dba6fabc49d0010e",
        "question": "Please show different types of artworks with the corresponding number of artworks of each type.",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ artwork ] Output [ Type ] ; #2 = Aggregate [ #1 ] GroupBy [ Type ] Output [ countstar AS Count_Star , Type ]"
    },
    {
        "id": "99e68fc2b0a834cbe1f288fd77d3cbe6ea684a55098461b44db4e2133ab04872",
        "question": "List the most common type of artworks.",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ artwork ] Output [ Type ] ; #2 = Aggregate [ #1 ] GroupBy [ Type ] Output [ countstar AS Count_Star , Type ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Type ]"
    },
    {
        "id": "af2126a06a33397c18586c203b74ee4a7ceccc3e71788b3f4299a9914a1e8090",
        "question": "List the year in which there are more than one festivals.",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ festival_detail ] Output [ Year ] ; #2 = Aggregate [ #1 ] GroupBy [ Year ] Output [ countstar AS Count_Star , Year ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Year ]"
    },
    {
        "id": "933186b1123dd83a6e8d5e52d9ac59264b2084eb9941763d9f747b2648b7b4e2",
        "question": "List the name of artworks that are not nominated.",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ artwork ] Output [ Artwork_ID , Name ] ; #2 = Scan Table [ nomination ] Output [ Artwork_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Artwork_ID = #1.Artwork_ID ] Output [ #1.Name ]"
    },
    {
        "id": "43ed52ab09bc521b1079dc9327f571b6d397b7f4600cee3a5fba4aa170b8978d",
        "question": "Show the number of audience in year 2008 or 2010.",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ festival_detail ] Predicate [ Year = 2008 OR Year = 2010 ] Output [ Year , Num_of_Audience ]"
    },
    {
        "id": "451409b93a9c71da21b5f8e3b5aa8c2f7401ac6dcf0549ba33219efe9af46927",
        "question": "What are the total number of the audiences who visited any of the festivals?",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ festival_detail ] Output [ Num_of_Audience ] ; #2 = Aggregate [ #1 ] Output [ SUM(Num_of_Audience) AS Sum_Num_of_Audience ]"
    },
    {
        "id": "8d12cba1256a9148dceee993aba6a60dc224aeeac4196c87ea8937ca4aa4c2db",
        "question": "In which year are there festivals both inside the 'United States' and outside the 'United States'?",
        "parsing_tree": "entertainment_awards | #1 = Scan Table [ festival_detail ] Predicate [ Location = 'United States' ] Distinct [ true ] Output [ Location , Year ] ; #2 = Scan Table [ festival_detail ] Predicate [ Location <> 'United States' ] Output [ Location , Year ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Year = #2.Year ] Output [ #1.Year ]"
    },
    {
        "id": "1da2598362313581eabc29415c089107cccf100c5ce6843efd13d0f60112b3bb",
        "question": "How many premises are there?",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Premises ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5ebe2cda12f51792a334a64d995d03d4fd4ed6767bf92910fca9abebd84c6726",
        "question": "What are all the distinct premise types?",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Premises ] Distinct [ true ] Output [ premises_type ]"
    },
    {
        "id": "0a638fc086a6e2be4f92deecefcbee05a361433dfb9a6bcbdb0f4598579ce6f3",
        "question": "Find the types and details for all premises and order by the premise type.",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Premises ] Output [ premises_type , premise_details ] ; #2 = Sort [ #1 ] OrderBy [ premises_type ASC ] Output [ premises_type , premise_details ]"
    },
    {
        "id": "74f876ba37f329855666e32f4b2050a0c0a90b9c87b152427ad0432807deff56",
        "question": "Show each premise type and the number of premises in that type.",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Premises ] Output [ premises_type ] ; #2 = Aggregate [ #1 ] GroupBy [ premises_type ] Output [ countstar AS Count_Star , premises_type ]"
    },
    {
        "id": "d499b74e92075dfa16397aa2c8dc89773e210ddde68a722d4c3d55c001416801",
        "question": "Show all distinct product categories along with the number of mailshots in each category.",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Mailshot_Campaigns ] Output [ product_category ] ; #2 = Aggregate [ #1 ] GroupBy [ product_category ] Output [ countstar AS Count_Star , product_category ]"
    },
    {
        "id": "f6a30166c45290fafaa81a443be88d6645f20278d282114a530ed65dfeb82d33",
        "question": "Show the name and phone of the customer without any mailshot.",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Customers ] Output [ customer_id , customer_phone , customer_name ] ; #2 = Scan Table [ Mailshot_Customers ] Output [ customer_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.customer_id = #1.customer_id ] Output [ #1.customer_phone , #1.customer_name ]"
    },
    {
        "id": "5aeb6861035a5b52963e57b3e0f0cf85bec736f4a525c18ed1e5a05fc1f85787",
        "question": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Mailshot_Customers ] Predicate [ outcome_code = 'No Response' ] Output [ outcome_code , customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_phone , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_phone , #2.customer_name ]"
    },
    {
        "id": "325ae02ad6a7bf1fb8a144a35f0bfe015091ed2fd1e652a9604f106beba8d591",
        "question": "Show the outcome code of mailshots along with the number of mailshots in each outcome code.",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Mailshot_Customers ] Output [ outcome_code ] ; #2 = Aggregate [ #1 ] GroupBy [ outcome_code ] Output [ countstar AS Count_Star , outcome_code ]"
    },
    {
        "id": "6a3da938bc33d8df543ad25a04acad497efdc2ade7c88cc3c9352fe64949a4e4",
        "question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Mailshot_Customers ] Predicate [ outcome_code = 'Order' ] Output [ outcome_code , customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_name , #1.customer_id ] ; #4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ customer_name ]"
    },
    {
        "id": "f8a7465886aed9dae8c5d4b7fc16b3ddbaff7ee47e518b4c9b42d70040538d40",
        "question": "Show the names of customers who have the most mailshots.",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Mailshot_Customers ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , customer_name ]"
    },
    {
        "id": "2ae730c3e9cef5cab21526cc226c7ef78ee2b0fb126b3c901022481fecd39b5a",
        "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Mailshot_Customers ] Predicate [ outcome_code = 'Order' ] Output [ outcome_code , customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_id , payment_method , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Distinct [ true ] Output [ #2.payment_method , #2.customer_name ] ; #4 = Scan Table [ Mailshot_Customers ] Predicate [ outcome_code = 'No Response' ] Output [ outcome_code , customer_id ] ; #5 = Scan Table [ Customers ] Output [ customer_id , payment_method , customer_name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.customer_id = #5.customer_id ] Output [ #5.payment_method , #5.customer_name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.customer_name = #6.customer_name ] Output [ #3.payment_method , #3.customer_name ]"
    },
    {
        "id": "394e76f622cd7104caedf0f1dcde2cd1e2533c924777f3825256849da48830fe",
        "question": "Show the premise type and address type code for all customer addresses.",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Customer_Addresses ] Output [ premise_id , address_type_code ] ; #2 = Scan Table [ Premises ] Output [ premises_type , premise_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.premise_id = #2.premise_id ] Output [ #2.premises_type , #1.address_type_code ]"
    },
    {
        "id": "f11e190025dd5b2ca3f160bbdb103b7df656b79a21b970316813c38ee4265826",
        "question": "What are the distinct address type codes for all customer addresses?",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Customer_Addresses ] Distinct [ true ] Output [ address_type_code ]"
    },
    {
        "id": "6b9fe9260e83fc9c70f9e8fda64615cecf48cef2ed7c563aaf0d4f9e5627bcb1",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status_code = 'Cancelled' OR order_status_code = 'Paid' ] Output [ order_status_code , customer_id , order_shipping_charges ]"
    },
    {
        "id": "a70f185a212cbecd45e3c66a8bd696e109853c53bd8fb0248746597e6969369a",
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "parsing_tree": "customers_campaigns_ecommerce | #1 = Scan Table [ Customer_Orders ] Predicate [ shipping_method_code = 'FedEx' AND order_status_code = 'Paid' ] Output [ order_status_code , customer_id , shipping_method_code ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_name ]"
    },
    {
        "id": "3333b564d0e105a8738a60dd8ca7cb1315ca03790859815365b1918d1a52e35a",
        "question": "How many courses are there in total?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "24fd674fbe0270c8eeab576854489b2a06aed7f204bb26218b7858c251c47a8c",
        "question": "Count the number of courses.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f260842a42f1b130f6ab8822ee05e9e60d779a1469b78c65c9b967721c1a13cc",
        "question": "How many courses have more than 2 credits?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Predicate [ Credits > 2 ] Output [ Credits ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "991e9e8885d9babf29aa2abcbac723e13844dcc13babff0213079130ca607b9b",
        "question": "Count the number of courses with more than 2 credits.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Predicate [ Credits > 2 ] Output [ Credits ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ffeef41d6391bad0008b2bdc846c65c60f5dfc9d0b599652e45faca4119cc783",
        "question": "List all names of courses with 1 credit?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Predicate [ Credits = 1 ] Output [ Credits , CName ]"
    },
    {
        "id": "aa63b8ed3d75249653ac4460eed19f884f49e6351dc28b390f226ee76c7dee0e",
        "question": "What are the names of courses with 1 credit?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Predicate [ Credits = 1 ] Output [ Credits , CName ]"
    },
    {
        "id": "8545a64b084a3bfdf9c3c137834a4fc363862aa412ed1c262251b9c66d81cbdc",
        "question": "Which courses are taught on days MTW?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Predicate [ Days = 'MTW' ] Output [ Days , CName ]"
    },
    {
        "id": "ce284c2878fe87ace13d17c40f174b066224f436dfea409561cdf6c6359b2335",
        "question": "What are the course names for courses taught on MTW?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Predicate [ Days = 'MTW' ] Output [ Days , CName ]"
    },
    {
        "id": "4a5553aaa49f1d1d132f290820ca4cbc5fc78e5f9cdafe43af37a8789f66fd1f",
        "question": "What is the number of departments in Division \"AS\"?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Department ] Predicate [ Division = 'AS' ] Output [ Division ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9f3f9087d8ee2e8a71674a3fe0ffe45832253a776c7081f6f37cee1513ce52d2",
        "question": "How many departments are in the division AS?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Department ] Predicate [ Division = 'AS' ] Output [ Division ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "178f69c174c3de8641325a3738f11d9aab20f8c6846ea1b5b72569105c9f1c3b",
        "question": "Find the number of students that have at least one grade \"B\".",
        "parsing_tree": "college_3 | #1 = Scan Table [ Enrolled_in ] Predicate [ Grade = 'B' ] Distinct [ true ] Output [ Grade , StuID ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT StuID) AS Count_Dist_StuID ]"
    },
    {
        "id": "8edc060faaf609035b66ca5599c71a3e8c9f04fac76f7fa49b1608afa38164f6",
        "question": "How many students have had at least one \"B\" grade?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Enrolled_in ] Predicate [ Grade = 'B' ] Distinct [ true ] Output [ Grade , StuID ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT StuID) AS Count_Dist_StuID ]"
    },
    {
        "id": "b621b21401a169e07f9484fd72911b5729d1809f235e92023bab8a68007f148c",
        "question": "Find the max and min grade point for all letter grade.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Gradeconversion ] Output [ gradepoint ] ; #2 = Aggregate [ #1 ] Output [ MIN(gradepoint) AS Min_gradepoint , MAX(gradepoint) AS Max_gradepoint ]"
    },
    {
        "id": "64dd2304a2efaedcaa8fb05048a868ddef3ed661272c70e9e941900e3331fa98",
        "question": "What are the maximum and minumum grade points?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Gradeconversion ] Output [ gradepoint ] ; #2 = Aggregate [ #1 ] Output [ MIN(gradepoint) AS Min_gradepoint , MAX(gradepoint) AS Max_gradepoint ]"
    },
    {
        "id": "59c4ff4598ddf96ce4b0684907878df23067eb3414cfbb44e589e2593b95c8e1",
        "question": "Find the first names of students whose first names contain letter \"a\".",
        "parsing_tree": "college_3 | #1 = Scan Table [ Student ] Predicate [ Fname like '%a%' ] Distinct [ true ] Output [ Fname ]"
    },
    {
        "id": "f39ae3bdc4d39dec858689f7f011438fc9bbfeee1f7791a0dc1d42bfaa804397",
        "question": "What are the first names for students who have an \"a\" in their first name?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Student ] Predicate [ Fname like '%a%' ] Distinct [ true ] Output [ Fname ]"
    },
    {
        "id": "58f8544e9abb3c16127c2b66e594c5c232be29920d7daeeee1a44933d6e9a7e1",
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Faculty ] Predicate [ Sex = 'M' AND Building = 'NEB' ] Output [ Fname , Lname , Sex , Building ]"
    },
    {
        "id": "06d9ab85a522a9a1c8d8056a5f1714ffcf15ab16733d73bd0d6eae23c932494d",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Faculty ] Predicate [ Sex = 'M' AND Building = 'NEB' ] Output [ Fname , Lname , Sex , Building ]"
    },
    {
        "id": "cec8ef239a4db4e97565961b7b1f0f778b9a5c03efc914b037a23141a2f4fe01",
        "question": "Find the rooms of faculties with rank professor who live in building NEB.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Faculty ] Predicate [ Rank = 'Professor' AND Building = 'NEB' ] Output [ Rank , Building , Room ]"
    },
    {
        "id": "f721aeaf7e8dc4a06f3d0ddbe6f62391f43667692e861a2fef1e47255dfe71a2",
        "question": "What are the rooms for members of the faculty who are professors and who live in building NEB?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Faculty ] Predicate [ Rank = 'Professor' AND Building = 'NEB' ] Output [ Rank , Building , Room ]"
    },
    {
        "id": "2216e6647dbaf52331fd9e10df8148a78597420f35a0c3c8aad811b3a6a02b61",
        "question": "Find the department name that is in Building \"Mergenthaler\".",
        "parsing_tree": "college_3 | #1 = Scan Table [ Department ] Predicate [ Building = 'Mergenthaler' ] Output [ Building , DName ]"
    },
    {
        "id": "e6bd101228fe838a901c79f9475fe24436e0f118b607a719be4949a1de0fc346",
        "question": "What is the name of the department in the Building Mergenthaler?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Department ] Predicate [ Building = 'Mergenthaler' ] Output [ Building , DName ]"
    },
    {
        "id": "cbbdb1dc859573b0161943d2dad1d498ef9e06df8c6f709ad9904979146c33d1",
        "question": "List all information about courses sorted by credits in the ascending order.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Output [ Days , Hours , Credits , Instructor , CID , DNO , CName ] ; #2 = Sort [ #1 ] OrderBy [ Credits ASC ] Output [ Days , Hours , Credits , Instructor , CID , DNO , CName ]"
    },
    {
        "id": "384c40415b7796c7cf0c67ab0ac2ba37f1ced5dc5cfc13208158f080ab502cc6",
        "question": "What is all the information about courses, ordered by credits ascending?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Output [ Days , Hours , Credits , Instructor , CID , DNO , CName ] ; #2 = Sort [ #1 ] OrderBy [ Credits ASC ] Output [ Days , Hours , Credits , Instructor , CID , DNO , CName ]"
    },
    {
        "id": "45996d52244a67164539e5e8abbde42186b15bf421d8f8859fea0924f9d042d3",
        "question": "List the course name of courses sorted by credits.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Output [ Credits , CName ] ; #2 = Sort [ #1 ] OrderBy [ Credits ASC ] Output [ Credits , CName ]"
    },
    {
        "id": "5eda4c7da94e8d1c4b8c2eb9937c304d09990fc383fe25c934bea17552dbed78",
        "question": "What are the course names, ordered by credits?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Output [ Credits , CName ] ; #2 = Sort [ #1 ] OrderBy [ Credits ASC ] Output [ Credits , CName ]"
    },
    {
        "id": "6fc89e8c4f1d6e2262fdf413c2d77c0647363bb053393c748ea10aff72c6278b",
        "question": "Find the first name of students in the descending order of age.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Student ] Output [ Fname , Age ] ; #2 = Sort [ #1 ] OrderBy [ Age DESC ] Output [ Fname , Age ]"
    },
    {
        "id": "be05da76c7bb8f87e1ba2a94af0d79bee797eb46a2bb714d0943c7744e337e22",
        "question": "What are the first names of students, ordered by age from greatest to least?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Student ] Output [ Fname , Age ] ; #2 = Sort [ #1 ] OrderBy [ Age DESC ] Output [ Fname , Age ]"
    },
    {
        "id": "17b9855dd2fec7ed49c18d6c9f9b22618b8a4d27218a1327814bec60863835d3",
        "question": "Find the last name of female (sex is F) students in the descending order of age.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ LName , Sex , Age ] ; #2 = Sort [ #1 ] OrderBy [ Age DESC ] Output [ LName , Age ]"
    },
    {
        "id": "57767be7c466f7513034c6fa5bf6f3a21b6db473678d10fc4b37a2697b0e4df2",
        "question": "What are the last names of female students, ordered by age descending?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ LName , Sex , Age ] ; #2 = Sort [ #1 ] OrderBy [ Age DESC ] Output [ LName , Age ]"
    },
    {
        "id": "071e4fc470ecad3a8ed643d4c5988d8745ad08f8afb60a465391ca285042fb85",
        "question": "Find the last names of faculties in building Barton in alphabetic order.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Faculty ] Predicate [ Building = 'Barton' ] Output [ Lname , Building ] ; #2 = Sort [ #1 ] OrderBy [ Lname ASC ] Output [ Lname ]"
    },
    {
        "id": "eb6feb2fba406256769f5cf3593953d77ece428d2848e3affa4e59294fa0ead3",
        "question": "What are the last names of faculty in building Barton, sorted by last name?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Faculty ] Predicate [ Building = 'Barton' ] Output [ Lname , Building ] ; #2 = Sort [ #1 ] OrderBy [ Lname ASC ] Output [ Lname ]"
    },
    {
        "id": "24f49f78466422ae7f45269e92c2c57a9eb05c1f9ada85eef308c575c5b47db0",
        "question": "Find the first names of faculties of rank Professor in alphabetic order.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Faculty ] Predicate [ Rank = 'Professor' ] Output [ Fname , Rank ] ; #2 = Sort [ #1 ] OrderBy [ Fname ASC ] Output [ Fname ]"
    },
    {
        "id": "a85827d0d171584817f34a11169503f34bfe707425c8274331f87822ab17a0a9",
        "question": "What are the first names for all faculty professors, ordered by first name?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Faculty ] Predicate [ Rank = 'Professor' ] Output [ Fname , Rank ] ; #2 = Sort [ #1 ] OrderBy [ Fname ASC ] Output [ Fname ]"
    },
    {
        "id": "624320a13b7d59a9cfa6d5ded613b6c89f7b565eeafe9fa4038d94d281070cd6",
        "question": "Find the name of the department that has the biggest number of students minored in?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Minor_in ] Output [ DNO ] ; #2 = Aggregate [ #1 ] GroupBy [ DNO ] Output [ countstar AS Count_Star , DNO ] ; #3 = Scan Table [ Department ] Output [ DNO , DName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.DNO = #3.DNO ] Output [ #3.DName , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , DName ]"
    },
    {
        "id": "8e79e8cf03d2f951530ae2da540d195e95fa6c8644db79e29103f551ae6432a8",
        "question": "What is the name of the department with the most students minoring in it?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Minor_in ] Output [ DNO ] ; #2 = Aggregate [ #1 ] GroupBy [ DNO ] Output [ countstar AS Count_Star , DNO ] ; #3 = Scan Table [ Department ] Output [ DNO , DName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.DNO = #3.DNO ] Output [ #3.DName , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , DName ]"
    },
    {
        "id": "3926a39c4c623aa29f4d172265ecc8f119ba20aa08c443d58062d28ab663be30",
        "question": "Find the name of the department that has no students minored in?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Department ] Distinct [ true ] Output [ DName ] ; #2 = Scan Table [ Minor_in ] Output [ DNO ] ; #3 = Scan Table [ Department ] Output [ DNO , DName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.DNO = #3.DNO ] Output [ #3.DName ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.DName = #4.DName ] Output [ #1.DName ]"
    },
    {
        "id": "cc9cc70a3a7671e4acacbe0c8f52ce41c95d5f9277bc33344aea0180e1034752",
        "question": "What is the name of the department htat has no students minoring in it?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Department ] Distinct [ true ] Output [ DName ] ; #2 = Scan Table [ Minor_in ] Output [ DNO ] ; #3 = Scan Table [ Department ] Output [ DNO , DName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.DNO = #3.DNO ] Output [ #3.DName ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.DName = #4.DName ] Output [ #1.DName ]"
    },
    {
        "id": "db98c995643f7c6783f608b38a745e393316330886b7cc55e30f05f0917db4b8",
        "question": "Find the name of the department that has the fewest members.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Member_of ] Output [ DNO ] ; #2 = Aggregate [ #1 ] GroupBy [ DNO ] Output [ countstar AS Count_Star , DNO ] ; #3 = Scan Table [ Department ] Output [ DNO , DName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.DNO = #3.DNO ] Output [ #3.DName , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , DName ]"
    },
    {
        "id": "d53e37eb5c07c2daea93afdb546812173875332cfcd09ac321e850b5eb3f7e20",
        "question": "What is the name of the department with the fewest members?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Member_of ] Output [ DNO ] ; #2 = Aggregate [ #1 ] GroupBy [ DNO ] Output [ countstar AS Count_Star , DNO ] ; #3 = Scan Table [ Department ] Output [ DNO , DName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.DNO = #3.DNO ] Output [ #3.DName , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , DName ]"
    },
    {
        "id": "f17be4f1b24d68c53acb6566ecce91ae22d359655a3c4a90ba0ddc33a18210c8",
        "question": "Find the rank of the faculty that the fewest faculties belong to.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Faculty ] Output [ Rank ] ; #2 = Aggregate [ #1 ] GroupBy [ Rank ] Output [ countstar AS Count_Star , Rank ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Rank , Count_Star ]"
    },
    {
        "id": "3b8f047ea064f5b170d9f0f4a958a6a764adcce93385bb0a72d30c883918b3e8",
        "question": "What is the least common faculty rank?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Faculty ] Output [ Rank ] ; #2 = Aggregate [ #1 ] GroupBy [ Rank ] Output [ countstar AS Count_Star , Rank ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Rank , Count_Star ]"
    },
    {
        "id": "faf0408e51f3a4f1368b5877c981d0200dbdd0d93fbf0cfdf3a6fee9796750a9",
        "question": "What are the first and last names of the instructors who teach the top 3 number of courses?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Output [ Instructor ] ; #2 = Aggregate [ #1 ] GroupBy [ Instructor ] Output [ countstar AS Count_Star , Instructor ] ; #3 = Scan Table [ Faculty ] Output [ Fname , Lname , FacID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Instructor = #3.FacID ] Output [ #3.Lname , #2.Count_Star , #3.Fname ] ; #5 = TopSort [ #4 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ Fname , Lname , Count_Star ]"
    },
    {
        "id": "5616dcf7eb93642e6d115a8db3bbf826dd1ec8b513aa59bbea958595f8d3bfd3",
        "question": "What are the full names of the 3 instructors who teach the most courses?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Output [ Instructor ] ; #2 = Aggregate [ #1 ] GroupBy [ Instructor ] Output [ countstar AS Count_Star , Instructor ] ; #3 = Scan Table [ Faculty ] Output [ Fname , Lname , FacID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Instructor = #3.FacID ] Output [ #3.Lname , #2.Count_Star , #3.Fname ] ; #5 = TopSort [ #4 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ Fname , Lname , Count_Star ]"
    },
    {
        "id": "64d5dcbea80ee6a04029ffeb48a977f8df19f7955eb4e124dfbbbcb897eca9ce",
        "question": "Which building does the instructor who teaches the most number of courses live in?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Output [ Instructor ] ; #2 = Aggregate [ #1 ] GroupBy [ Instructor ] Output [ countstar AS Count_Star , Instructor ] ; #3 = Scan Table [ Faculty ] Output [ Building , FacID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Instructor = #3.FacID ] Output [ #3.Building , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Building ]"
    },
    {
        "id": "226d3d75a90df856430818e125da6bfb4edb1c9d5aea0176b5a959e9e0617496",
        "question": "Give the building that the instructor who teaches the greatest number of courses lives in.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Output [ Instructor ] ; #2 = Aggregate [ #1 ] GroupBy [ Instructor ] Output [ countstar AS Count_Star , Instructor ] ; #3 = Scan Table [ Faculty ] Output [ Building , FacID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Instructor = #3.FacID ] Output [ #3.Building , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Building ]"
    },
    {
        "id": "589ef1d61a420d7c397a580ef0eb051ff3ccee9599cfe8a37dea5cc30d6aa685",
        "question": "What are the name of courses that have at least five enrollments?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Enrolled_in ] Output [ CID ] ; #2 = Aggregate [ #1 ] GroupBy [ CID ] Output [ countstar AS Count_Star , CID ] ; #3 = Scan Table [ Course ] Output [ CID , CName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.CID = #3.CID ] Output [ #3.CName , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 5 ] Output [ CName ]"
    },
    {
        "id": "b55f7b55d12f898add244e2a9903b6229bbb23c224c165b12f55afe43835dc18",
        "question": "Give the names of the courses with at least five enrollments.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Enrolled_in ] Output [ CID ] ; #2 = Aggregate [ #1 ] GroupBy [ CID ] Output [ countstar AS Count_Star , CID ] ; #3 = Scan Table [ Course ] Output [ CID , CName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.CID = #3.CID ] Output [ #3.CName , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 5 ] Output [ CName ]"
    },
    {
        "id": "55345aaaec88c018287827813c5eb96883ecf9be6704e3c9b4f4bc1dad726822",
        "question": "Find the first name and last name of the instructor of course that has course name",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Predicate [ CName = 'COMPUTER LITERACY' ] Output [ Instructor , CName ] ; #2 = Scan Table [ Faculty ] Output [ Fname , Lname , FacID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Instructor = #2.FacID ] Output [ #2.Fname , #2.Lname ]"
    },
    {
        "id": "4f63574fe91d9de34f953c17a3c4832f2e1d5647002b0e18a6cfd1cb326c8d3a",
        "question": "What is the full name of the instructor who has a course named COMPUTER LITERACY?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Predicate [ CName = 'COMPUTER LITERACY' ] Output [ Instructor , CName ] ; #2 = Scan Table [ Faculty ] Output [ Fname , Lname , FacID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Instructor = #2.FacID ] Output [ #2.Fname , #2.Lname ]"
    },
    {
        "id": "5e2fcdd2496c9a6f0fd23856fece885dd1dbef5b251b9e48de0eadf5f462461b",
        "question": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Predicate [ CName = 'INTRODUCTION TO COMPUTER SCIENCE' ] Output [ DNO , CName ] ; #2 = Scan Table [ Department ] Output [ DNO , DName , Room ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DNO = #2.DNO ] Output [ #2.DName , #2.Room ]"
    },
    {
        "id": "970fa7b7efc4095e9215bb77bbb9624c0e900449f0536c9e1c0eaadaa783b59c",
        "question": "What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Course ] Predicate [ CName = 'INTRODUCTION TO COMPUTER SCIENCE' ] Output [ DNO , CName ] ; #2 = Scan Table [ Department ] Output [ DNO , DName , Room ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.DNO = #2.DNO ] Output [ #2.DName , #2.Room ]"
    },
    {
        "id": "b3f273611b5b9c86a20397a41947473a77ecf678d6f7e15bf50f7c57c2f092c5",
        "question": "Find the full names of faculties who are members of department with department number 520.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Member_of ] Predicate [ DNO = 520 ] Output [ DNO , FacID ] ; #2 = Scan Table [ Faculty ] Output [ Fname , Lname , FacID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.FacID = #2.FacID ] Output [ #2.Fname , #2.Lname ]"
    },
    {
        "id": "cb8fd0d239f64117a0d3b2da5836cddd5c92b45440a688b3f715536447e9c33a",
        "question": "What are the full names of faculty members who are a part of department 520?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Member_of ] Predicate [ DNO = 520 ] Output [ DNO , FacID ] ; #2 = Scan Table [ Faculty ] Output [ Fname , Lname , FacID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.FacID = #2.FacID ] Output [ #2.Fname , #2.Lname ]"
    },
    {
        "id": "8f74770ca47ec9164039bb7f7b7e2012e72d1e05baa780fd875d6ba8eb041c46",
        "question": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Minor_in ] Predicate [ DNO = 140 ] Output [ DNO , StuID ] ; #2 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.LName , #2.Fname ]"
    },
    {
        "id": "2897bd3532c3e67c4a8f5b08d9abfd58954565e87b6653f09903addb43a51dd3",
        "question": "What are the full names of students minoring in department 140?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Minor_in ] Predicate [ DNO = 140 ] Output [ DNO , StuID ] ; #2 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.LName , #2.Fname ]"
    },
    {
        "id": "90c263ec21e0bd9f886be72a4ea15ef80b8c27446da91ef0e94a703aa4ea9f8c",
        "question": "Find the names of departments that are either in division AS or in division EN and in Building NEB.",
        "parsing_tree": "college_3 | #1 = Scan Table [ Department ] Predicate [ Division = 'AS' ] Output [ Division , DName ] ; #2 = Scan Table [ Department ] Predicate [ Division = 'EN' AND Building = 'NEB' ] Output [ Division , Building , DName ] ; #3 = Union [ #1 , #2 ] Output [ #1.DName ]"
    },
    {
        "id": "e21fb0d117dd5374045edabae40172c5a3a71e814fdad9fbbcd9ec052c94e044",
        "question": "What are the names of departments either in division AS, or in division EN and in building NEB?",
        "parsing_tree": "college_3 | #1 = Scan Table [ Department ] Predicate [ Division = 'AS' ] Output [ Division , DName ] ; #2 = Scan Table [ Department ] Predicate [ Division = 'EN' AND Building = 'NEB' ] Output [ Division , Building , DName ] ; #3 = Union [ #1 , #2 ] Output [ #1.DName ]"
    },
    {
        "id": "218733c51117f64817f8e3babf57694941d8f698caa685db37dd744c078161ca",
        "question": "What are the ids of the top three products that were purchased in the largest amount?",
        "parsing_tree": "department_store | #1 = Scan Table [ Product_Suppliers ] Output [ total_amount_purchased , product_id ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ total_amount_purchased DESC ] Output [ total_amount_purchased , product_id ]"
    },
    {
        "id": "ea081fa45f6e0387e741194f2259749087da6d87ac38f07531ee9a5478a40d4f",
        "question": "Give the ids of the three products purchased in the largest amounts.",
        "parsing_tree": "department_store | #1 = Scan Table [ Product_Suppliers ] Output [ total_amount_purchased , product_id ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ total_amount_purchased DESC ] Output [ total_amount_purchased , product_id ]"
    },
    {
        "id": "e1137edacbf8bd066ec0cda0488f4011f70d98009fbe146196d9f585b5acd951",
        "question": "What are the product id and product type of the cheapest product?",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Output [ product_id , product_type_code , product_price ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ product_price ASC ] Output [ product_id , product_type_code , product_price ]"
    },
    {
        "id": "04ced246d76e70b60e09fa248f46ed424df5e395404b51733b40d89caf8f5416",
        "question": "Give the id and product type of the product with the lowest price.",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Output [ product_id , product_type_code , product_price ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ product_price ASC ] Output [ product_id , product_type_code , product_price ]"
    },
    {
        "id": "3bdfaec473a3db0c118eaad6ae9b75972e0d530c3dcf06309fef0495f21ae700",
        "question": "Find the number of different product types.",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Distinct [ true ] Output [ product_type_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c9ea8db2187eb32ca7a2e70195489db3da182b545910ffdd83e9e81ebc0eee5b",
        "question": "Count the number of distinct product types.",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Distinct [ true ] Output [ product_type_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "647791a424916ad46152fdfdace56b19ae95e2387cab7dad56d14f4ec2b2ecd2",
        "question": "Return the address of customer 10.",
        "parsing_tree": "department_store | #1 = Scan Table [ Customer_Addresses ] Predicate [ customer_id = 10 ] Output [ address_id , customer_id ] ; #2 = Scan Table [ Addresses ] Output [ address_details , address_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.address_details ]"
    },
    {
        "id": "9ae93bca45d768db8dfc2777ec9417a8b5b7e8ef3d900da845e09fd175e77257",
        "question": "What is the address for the customer with id 10?",
        "parsing_tree": "department_store | #1 = Scan Table [ Customer_Addresses ] Predicate [ customer_id = 10 ] Output [ address_id , customer_id ] ; #2 = Scan Table [ Addresses ] Output [ address_details , address_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.address_details ]"
    },
    {
        "id": "af381d383bfbe76c84f036b6d763d6a2509aa16f4c254539388076dd67e10aea",
        "question": "What are the staff ids and genders of all staffs whose job title is Department Manager?",
        "parsing_tree": "department_store | #1 = Scan Table [ Staff_Department_Assignments ] Predicate [ job_title_code = 'Department Manager' ] Output [ job_title_code , staff_id ] ; #2 = Scan Table [ Staff ] Output [ staff_gender , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Output [ #2.staff_id , #2.staff_gender ]"
    },
    {
        "id": "893343cb274026f44b586b978cdcfd842493874f32efd127eb54426c81331433",
        "question": "Return the staff ids and genders for any staff with the title Department Manager.",
        "parsing_tree": "department_store | #1 = Scan Table [ Staff_Department_Assignments ] Predicate [ job_title_code = 'Department Manager' ] Output [ job_title_code , staff_id ] ; #2 = Scan Table [ Staff ] Output [ staff_gender , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Output [ #2.staff_id , #2.staff_gender ]"
    },
    {
        "id": "66a334b121828740d0ef5906d6aff9ee4ba5531ece4a7d87d174249357bfa10b",
        "question": "For each payment method, return how many customers use it.",
        "parsing_tree": "department_store | #1 = Scan Table [ Customers ] Output [ payment_method_code ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method_code ] Output [ countstar AS Count_Star , payment_method_code ]"
    },
    {
        "id": "b284760a342cdb8676d3c8cfcb315901e06ee84e3fba076c3d8f8e471ae56587",
        "question": "How many customers use each payment method?",
        "parsing_tree": "department_store | #1 = Scan Table [ Customers ] Output [ payment_method_code ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method_code ] Output [ countstar AS Count_Star , payment_method_code ]"
    },
    {
        "id": "55260fe50028e41032ed268e42992372c41607a61de45bee678740a74ee9b1da",
        "question": "What is the id of the product that was ordered the most often?",
        "parsing_tree": "department_store | #1 = Scan Table [ Order_Items ] Output [ product_id ] ; #2 = Aggregate [ #1 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , product_id ]"
    },
    {
        "id": "b84d576735285c8e2c40b48d8fa91bb9e57d26807424291b82ab500474a503b1",
        "question": "Give the product id for the product that was ordered most frequently.",
        "parsing_tree": "department_store | #1 = Scan Table [ Order_Items ] Output [ product_id ] ; #2 = Aggregate [ #1 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , product_id ]"
    },
    {
        "id": "b3b4c8f629e9c32f18886256a8c949963e7208e3374c8621560d53c08fa744e0",
        "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
        "parsing_tree": "department_store | #1 = Scan Table [ Customer_Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_phone , customer_email , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.Count_Star , #3.customer_phone , #3.customer_name , #3.customer_email ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , customer_phone , customer_email , customer_name ]"
    },
    {
        "id": "27601795545810926944c6f8cc0b5b655be1b4fd94fd8759ee1a9778ebf378b0",
        "question": "Return the name, phone number and email address for the customer with the most orders.",
        "parsing_tree": "department_store | #1 = Scan Table [ Customer_Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_phone , customer_email , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.Count_Star , #3.customer_phone , #3.customer_name , #3.customer_email ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , customer_phone , customer_email , customer_name ]"
    },
    {
        "id": "f8f706fadcdc90dc3c5e00b354e08828c569260ce92ff32706b2439bc32aef9b",
        "question": "What is the average price for each type of product?",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Output [ product_type_code , product_price ] ; #2 = Aggregate [ #1 ] GroupBy [ product_type_code ] Output [ AVG(product_price) AS Avg_product_price , product_type_code ]"
    },
    {
        "id": "a4e40b87a806c8ef8949c71ae508c97f31d676286a2c133a2a54f6ff4feec8fa",
        "question": "Return the average price for each product type.",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Output [ product_type_code , product_price ] ; #2 = Aggregate [ #1 ] GroupBy [ product_type_code ] Output [ AVG(product_price) AS Avg_product_price , product_type_code ]"
    },
    {
        "id": "ed5f0a4ad8fd3927ccc797e8e2c4fa4fde84e4f34428f092df9bd192d8b93d25",
        "question": "How many department stores does the store chain South have?",
        "parsing_tree": "department_store | #1 = Scan Table [ Department_Store_Chain ] Predicate [ dept_store_chain_name = 'South' ] Output [ dept_store_chain_name , dept_store_chain_id ] ; #2 = Scan Table [ Department_Stores ] Output [ dept_store_chain_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.dept_store_chain_id = #2.dept_store_chain_id ] Output [ #1.dept_store_chain_id , #1.dept_store_chain_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b336f71e68bbfac6636a8b1895621b201b8ba81e9e986cf96cd5a42403c74d61",
        "question": "Count the number of stores the chain South has.",
        "parsing_tree": "department_store | #1 = Scan Table [ Department_Store_Chain ] Predicate [ dept_store_chain_name = 'South' ] Output [ dept_store_chain_name , dept_store_chain_id ] ; #2 = Scan Table [ Department_Stores ] Output [ dept_store_chain_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.dept_store_chain_id = #2.dept_store_chain_id ] Output [ #1.dept_store_chain_id , #1.dept_store_chain_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e47a81405b84bc3262b9ac735820177a46b396cbe9fe2abfa979712ac9e887c3",
        "question": "What is the name and job title of the staff who was assigned the latest?",
        "parsing_tree": "department_store | #1 = Scan Table [ Staff_Department_Assignments ] Output [ date_assigned_to , job_title_code , staff_id ] ; #2 = Scan Table [ Staff ] Output [ staff_name , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Output [ #1.date_assigned_to , #2.staff_name , #1.job_title_code ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ date_assigned_to DESC ] Output [ staff_name , date_assigned_to , job_title_code ]"
    },
    {
        "id": "9e17326388eab947e1bef330f4b907ff302401bf7bcdbcb7b100a1755d4396dd",
        "question": "Return the name and job title of the staff with the latest date assigned.",
        "parsing_tree": "department_store | #1 = Scan Table [ Staff_Department_Assignments ] Output [ date_assigned_to , job_title_code , staff_id ] ; #2 = Scan Table [ Staff ] Output [ staff_name , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Output [ #1.date_assigned_to , #2.staff_name , #1.job_title_code ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ date_assigned_to DESC ] Output [ staff_name , date_assigned_to , job_title_code ]"
    },
    {
        "id": "d9c74032db4a985c217eb2b4899d82eeb7a31a7fd3b2ac14ec167fcdaf03645c",
        "question": "Give me the product type, name and price for all the products supplied by supplier id 3.",
        "parsing_tree": "department_store | #1 = Scan Table [ Product_Suppliers ] Predicate [ supplier_id = 3 ] Output [ supplier_id , product_id ] ; #2 = Scan Table [ Products ] Output [ product_name , product_id , product_type_code , product_price ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.product_name , #2.product_price , #2.product_type_code ]"
    },
    {
        "id": "a14d79ef7c8b138f5938f2d0cf37c44ab09fea0a175a406188fffd6fe908ddea",
        "question": "Return the product type, name, and price for products supplied by supplier 3.",
        "parsing_tree": "department_store | #1 = Scan Table [ Product_Suppliers ] Predicate [ supplier_id = 3 ] Output [ supplier_id , product_id ] ; #2 = Scan Table [ Products ] Output [ product_name , product_id , product_type_code , product_price ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.product_name , #2.product_price , #2.product_type_code ]"
    },
    {
        "id": "6eb4a895d6c5c1544504ae93fbfac0ada7947864f05e26b8b66a7a79f2d9a65f",
        "question": "Return the distinct name of customers whose order status is Pending, in the order of customer id.",
        "parsing_tree": "department_store | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status_code = 'Pending' ] Output [ order_status_code , customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Distinct [ true ] Output [ #2.customer_name , #1.customer_id ] ; #4 = Sort [ #3 ] OrderBy [ customer_id ASC ] Output [ customer_name , customer_id ]"
    },
    {
        "id": "0b21fe43d94a824625d9336be0205654108921f775ffdbd71bdd2c05d238a050",
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "parsing_tree": "department_store | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status_code = 'Pending' ] Output [ order_status_code , customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Distinct [ true ] Output [ #2.customer_name , #1.customer_id ] ; #4 = Sort [ #3 ] OrderBy [ customer_id ASC ] Output [ customer_name , customer_id ]"
    },
    {
        "id": "52426100dbb3739f4d3217e2fe5c076c78e6b682e313502a7e7825011f931f89",
        "question": "Find the name and address of the customers who have both New and Pending orders.",
        "parsing_tree": "department_store | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status_code = 'New' ] Output [ order_status_code , customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_address , customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Distinct [ true ] Output [ #2.customer_address , #2.customer_name ] ; #4 = Scan Table [ Customer_Orders ] Predicate [ order_status_code = 'Pending' ] Output [ order_status_code , customer_id ] ; #5 = Scan Table [ Customers ] Output [ customer_address , customer_id , customer_name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.customer_id = #5.customer_id ] Output [ #5.customer_address , #5.customer_name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.customer_name = #6.customer_name ] Output [ #3.customer_address , #3.customer_name ]"
    },
    {
        "id": "0b860f7204d9677a95d471e6df5fbbe18e7610d0ed5173139ed2af3792a13059",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "parsing_tree": "department_store | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status_code = 'New' ] Output [ order_status_code , customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_address , customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Distinct [ true ] Output [ #2.customer_address , #2.customer_name ] ; #4 = Scan Table [ Customer_Orders ] Predicate [ order_status_code = 'Pending' ] Output [ order_status_code , customer_id ] ; #5 = Scan Table [ Customers ] Output [ customer_address , customer_id , customer_name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.customer_id = #5.customer_id ] Output [ #5.customer_address , #5.customer_name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.customer_name = #6.customer_name ] Output [ #3.customer_address , #3.customer_name ]"
    },
    {
        "id": "1446ee09d11673702f21a4d50d5436228691a77e6c5e51f75b8c6d42f7f1c2f0",
        "question": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Output [ product_price ] ; #2 = Aggregate [ #1 ] Output [ AVG(product_price) AS Avg_product_price ] ; #3 = Scan Table [ Products ] Output [ product_id , product_price ] ; #4 = Scan Table [ Product_Suppliers ] Predicate [ supplier_id = 2 ] Output [ supplier_id , product_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.product_id = #3.product_id ] Output [ #4.product_id , #3.product_price ] ; #6 = Join [ #2 , #5 ] Predicate [ #5.product_price > #2.Avg_product_price ] Output [ #5.product_id ]"
    },
    {
        "id": "f34dfc6407740f9dab2b0c6d25d8116fe451356652b8e45620065c6d51592cf8",
        "question": "What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Output [ product_price ] ; #2 = Aggregate [ #1 ] Output [ AVG(product_price) AS Avg_product_price ] ; #3 = Scan Table [ Products ] Output [ product_id , product_price ] ; #4 = Scan Table [ Product_Suppliers ] Predicate [ supplier_id = 2 ] Output [ supplier_id , product_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.product_id = #3.product_id ] Output [ #4.product_id , #3.product_price ] ; #6 = Join [ #2 , #5 ] Predicate [ #5.product_price > #2.Avg_product_price ] Output [ #5.product_id ]"
    },
    {
        "id": "fb20aeb0981eeaabf5325e158ec14cfd3acd95f18e9699e8df460ae5dfeac8aa",
        "question": "What is the id and name of the department store that has both marketing and managing department?",
        "parsing_tree": "department_store | #1 = Scan Table [ Department_Stores ] Output [ store_name , dept_store_id ] ; #2 = Scan Table [ Departments ] Predicate [ department_name = 'marketing' ] Output [ dept_store_id , department_name ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.dept_store_id = #1.dept_store_id ] Output [ #1.store_name , #1.dept_store_id ] ; #4 = Scan Table [ Departments ] Predicate [ department_name = 'managing' ] Output [ dept_store_id , department_name ] ; #5 = Scan Table [ Department_Stores ] Output [ store_name , dept_store_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.dept_store_id = #5.dept_store_id ] Output [ #5.dept_store_id , #5.store_name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.dept_store_id = #6.dept_store_id ] Output [ #3.store_name , #3.dept_store_id ]"
    },
    {
        "id": "87fe2a3d695498c74c66d14dce972be7d33cd7da8dc230d053f2ddac28b892f0",
        "question": "What are the ids and names of department stores with both marketing and managing departments?",
        "parsing_tree": "department_store | #1 = Scan Table [ Department_Stores ] Output [ store_name , dept_store_id ] ; #2 = Scan Table [ Departments ] Predicate [ department_name = 'marketing' ] Output [ dept_store_id , department_name ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.dept_store_id = #1.dept_store_id ] Output [ #1.store_name , #1.dept_store_id ] ; #4 = Scan Table [ Departments ] Predicate [ department_name = 'managing' ] Output [ dept_store_id , department_name ] ; #5 = Scan Table [ Department_Stores ] Output [ store_name , dept_store_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.dept_store_id = #5.dept_store_id ] Output [ #5.dept_store_id , #5.store_name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.dept_store_id = #6.dept_store_id ] Output [ #3.store_name , #3.dept_store_id ]"
    },
    {
        "id": "557b92c8dd01024122672189f1d672b4c792b560161fb8e42917bdc6a1593e9e",
        "question": "What are the ids of the two department store chains with the largest number of department stores?",
        "parsing_tree": "department_store | #1 = Scan Table [ Department_Stores ] Output [ dept_store_chain_id ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_store_chain_id ] Output [ countstar AS Count_Star , dept_store_chain_id ] ; #3 = TopSort [ #2 ] Rows [ 2 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , dept_store_chain_id ]"
    },
    {
        "id": "15e5f70d4fd8ce846418a490126df2f3b48fe8ee726e6c3ebf8142f0cd111a91",
        "question": "Return the ids of the two department store chains with the most department stores.",
        "parsing_tree": "department_store | #1 = Scan Table [ Department_Stores ] Output [ dept_store_chain_id ] ; #2 = Aggregate [ #1 ] GroupBy [ dept_store_chain_id ] Output [ countstar AS Count_Star , dept_store_chain_id ] ; #3 = TopSort [ #2 ] Rows [ 2 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , dept_store_chain_id ]"
    },
    {
        "id": "f98d130d4e794b1fd6954679e4dbc5e40984a3f46cfba05de20988a7bb75d119",
        "question": "What is the id of the department with the least number of staff?",
        "parsing_tree": "department_store | #1 = Scan Table [ Staff_Department_Assignments ] Output [ department_id ] ; #2 = Aggregate [ #1 ] GroupBy [ department_id ] Output [ countstar AS Count_Star , department_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ department_id , Count_Star ]"
    },
    {
        "id": "a937b97aaad86712c5201adb296a521abf9c8cb9a412f95c4c8019e536b18502",
        "question": "Return the id of the department with the fewest staff assignments.",
        "parsing_tree": "department_store | #1 = Scan Table [ Staff_Department_Assignments ] Output [ department_id ] ; #2 = Aggregate [ #1 ] GroupBy [ department_id ] Output [ countstar AS Count_Star , department_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ department_id , Count_Star ]"
    },
    {
        "id": "cfc68330977a4401ee0392f35e85b5457e61bbd08b936bf19eadb054bc5d727b",
        "question": "For each product type, return the maximum and minimum price.",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Output [ product_type_code , product_price ] ; #2 = Aggregate [ #1 ] GroupBy [ product_type_code ] Output [ MIN(product_price) AS Min_product_price , product_type_code , MAX(product_price) AS Max_product_price ]"
    },
    {
        "id": "59c6b5327fea6de0b7b4b294fb803ea2cede5d36c97b203c82774b9fc2dfafb0",
        "question": "What are the maximum and minimum product prices for each product type?",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Output [ product_type_code , product_price ] ; #2 = Aggregate [ #1 ] GroupBy [ product_type_code ] Output [ MIN(product_price) AS Min_product_price , product_type_code , MAX(product_price) AS Max_product_price ]"
    },
    {
        "id": "a1a4095ce9e6361de8db3cda7979031aa8acf2ec0dc84cb992a4e81589b673cb",
        "question": "Return the names and ids of all products whose price is between 600 and 700.",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Predicate [ product_price >= 600.0 AND product_price <= 700.0 ] Output [ product_name , product_id , product_price ]"
    },
    {
        "id": "dfca6ec9e2dc4fcd22092c452cdc102d1d4d55f7566f27826baacf0d708af9b0",
        "question": "What are the names and ids of products costing between 600 and 700?",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Predicate [ product_price >= 600.0 AND product_price <= 700.0 ] Output [ product_name , product_id , product_price ]"
    },
    {
        "id": "58894010e2919b2ee027c94cc0a94da160b55a470b9124eadfca36d9b717e019",
        "question": "Find the ids of all distinct customers who made order after some orders that were Cancelled.",
        "parsing_tree": "department_store | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status_code = 'Cancelled' ] Output [ order_status_code , order_date ] ; #2 = Aggregate [ #1 ] Output [ MIN(order_date) AS Min_order_date ] ; #3 = Scan Table [ Customer_Orders ] Output [ customer_id , order_date ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.order_date > #2.Min_order_date ] Distinct [ true ] Output [ #3.customer_id ]"
    },
    {
        "id": "789769694c139387b71c51c583f33cb64fe62f340bf70227ad0ef6447761b2f0",
        "question": "What are the distinct ids of customers who made an order after any order that was Cancelled?",
        "parsing_tree": "department_store | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status_code = 'Cancelled' ] Output [ order_status_code , order_date ] ; #2 = Aggregate [ #1 ] Output [ MIN(order_date) AS Min_order_date ] ; #3 = Scan Table [ Customer_Orders ] Output [ customer_id , order_date ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.order_date > #2.Min_order_date ] Distinct [ true ] Output [ #3.customer_id ]"
    },
    {
        "id": "7491df73987346bd4aacbaf061ab5283930d9364fbf3fd7c10db92a5567c0c01",
        "question": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?",
        "parsing_tree": "department_store | #1 = Scan Table [ Staff_Department_Assignments ] Predicate [ job_title_code = 'Clerical Staff' ] Output [ date_assigned_to , job_title_code ] ; #2 = Aggregate [ #1 ] Output [ MAX(date_assigned_to) AS Max_date_assigned_to ] ; #3 = Scan Table [ Staff_Department_Assignments ] Output [ date_assigned_to , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.date_assigned_to < #2.Max_date_assigned_to ] Output [ #3.staff_id ]"
    },
    {
        "id": "49f697e29d8e0cd01bd5127d5375b05ab60895e5e1aae731c4121c0f59b3c6c5",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "parsing_tree": "department_store | #1 = Scan Table [ Staff_Department_Assignments ] Predicate [ job_title_code = 'Clerical Staff' ] Output [ date_assigned_to , job_title_code ] ; #2 = Aggregate [ #1 ] Output [ MAX(date_assigned_to) AS Max_date_assigned_to ] ; #3 = Scan Table [ Staff_Department_Assignments ] Output [ date_assigned_to , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.date_assigned_to < #2.Max_date_assigned_to ] Output [ #3.staff_id ]"
    },
    {
        "id": "0f25fb1d185e1d57868373aa914eb34daed1d99ab4ffd0882b191be6b2359530",
        "question": "What are the names and ids of customers whose address contains TN?",
        "parsing_tree": "department_store | #1 = Scan Table [ Customers ] Predicate [ customer_address like '%TN%' ] Output [ customer_address , customer_id , customer_name ]"
    },
    {
        "id": "e0e9bd41e308f46305c62b2951920a3469d3e7b15b798512da21e44aba9d4815",
        "question": "Return the names and ids of customers who have TN in their address.",
        "parsing_tree": "department_store | #1 = Scan Table [ Customers ] Predicate [ customer_address like '%TN%' ] Output [ customer_address , customer_id , customer_name ]"
    },
    {
        "id": "ef319cb67f845587558032e3dd0b3cada566c4acdeaa80f4918c61fc3c5e6f18",
        "question": "List the name and phone number of all suppliers in the alphabetical order of their addresses.",
        "parsing_tree": "department_store | #1 = Scan Table [ Supplier_Addresses ] Output [ supplier_id , address_id ] ; #2 = Scan Table [ Suppliers ] Output [ supplier_name , supplier_id , supplier_phone ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.supplier_id = #2.supplier_id ] Output [ #1.address_id , #2.supplier_phone , #2.supplier_name ] ; #4 = Scan Table [ Addresses ] Output [ address_details , address_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.address_id = #4.address_id ] Output [ #3.supplier_phone , #4.address_details , #3.supplier_name ] ; #6 = Sort [ #5 ] OrderBy [ address_details ASC ] Output [ supplier_name , supplier_phone , address_details ]"
    },
    {
        "id": "e723cf2f271adabfbf494a4ca46a0f9a85f302c88f1596f2ee04c6193b828854",
        "question": "What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?",
        "parsing_tree": "department_store | #1 = Scan Table [ Supplier_Addresses ] Output [ supplier_id , address_id ] ; #2 = Scan Table [ Suppliers ] Output [ supplier_name , supplier_id , supplier_phone ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.supplier_id = #2.supplier_id ] Output [ #1.address_id , #2.supplier_phone , #2.supplier_name ] ; #4 = Scan Table [ Addresses ] Output [ address_details , address_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.address_id = #4.address_id ] Output [ #3.supplier_phone , #4.address_details , #3.supplier_name ] ; #6 = Sort [ #5 ] OrderBy [ address_details ASC ] Output [ supplier_name , supplier_phone , address_details ]"
    },
    {
        "id": "00694b0b535f9969147e35ec6cbb2632cfa256358fc018244a37cdc8eddd922d",
        "question": "Return the ids of all products that were ordered more than three times or supplied more than 80000.",
        "parsing_tree": "department_store | #1 = Scan Table [ Order_Items ] Output [ product_id ] ; #2 = Aggregate [ #1 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_id ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ product_id ] ; #4 = Scan Table [ Product_Suppliers ] Output [ total_amount_purchased , product_id ] ; #5 = Aggregate [ #4 ] GroupBy [ product_id ] Output [ product_id , SUM(total_amount_purchased) AS Sum_total_amount_purchased ] ; #6 = Filter [ #5 ] Predicate [ Sum_total_amount_purchased > 80000.0 ] Output [ product_id ] ; #7 = Union [ #3 , #6 ] Output [ #3.product_id ]"
    },
    {
        "id": "4f8f3fa44e3046a514766afe9e224fd398f0a0c4907c6df36b823b146f4c3767",
        "question": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?",
        "parsing_tree": "department_store | #1 = Scan Table [ Order_Items ] Output [ product_id ] ; #2 = Aggregate [ #1 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_id ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ product_id ] ; #4 = Scan Table [ Product_Suppliers ] Output [ total_amount_purchased , product_id ] ; #5 = Aggregate [ #4 ] GroupBy [ product_id ] Output [ product_id , SUM(total_amount_purchased) AS Sum_total_amount_purchased ] ; #6 = Filter [ #5 ] Predicate [ Sum_total_amount_purchased > 80000.0 ] Output [ product_id ] ; #7 = Union [ #3 , #6 ] Output [ #3.product_id ]"
    },
    {
        "id": "da97d6f620f17b14af150ad7cf3abee64eded5f3106cd9d0321a597c35801ae9",
        "question": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Predicate [ product_price < 600.0 OR product_price > 900.0 ] Output [ product_name , product_id , product_price ]"
    },
    {
        "id": "416aafcac5a1bc79800b04c5f27a2a8253be9760782cfb2b02ba56b8d49030fd",
        "question": "Give the ids and names of products with price lower than 600 or higher than 900.",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Predicate [ product_price < 600.0 OR product_price > 900.0 ] Output [ product_name , product_id , product_price ]"
    },
    {
        "id": "bb2526b3c9083ff9e58d8083b64a72e72bc3794535a593fbaaa91b4e66739f29",
        "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
        "parsing_tree": "department_store | #1 = Scan Table [ Product_Suppliers ] Output [ total_amount_purchased , supplier_id ] ; #2 = Aggregate [ #1 ] GroupBy [ supplier_id ] Output [ supplier_id , AVG(total_amount_purchased) AS Avg_total_amount_purchased ] ; #3 = Filter [ #2 ] Predicate [ Avg_total_amount_purchased < 30000.0 OR Avg_total_amount_purchased > 50000.0 ] Output [ supplier_id ]"
    },
    {
        "id": "7e271b3d56ecf386cce19fbe7fa593078680e30a4856d96cc782d075cdd18f7e",
        "question": "What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?",
        "parsing_tree": "department_store | #1 = Scan Table [ Product_Suppliers ] Output [ total_amount_purchased , supplier_id ] ; #2 = Aggregate [ #1 ] GroupBy [ supplier_id ] Output [ supplier_id , AVG(total_amount_purchased) AS Avg_total_amount_purchased ] ; #3 = Filter [ #2 ] Predicate [ Avg_total_amount_purchased < 30000.0 OR Avg_total_amount_purchased > 50000.0 ] Output [ supplier_id ]"
    },
    {
        "id": "09d5d0fc95d7f188af8aef51d1520a5006fa4e72a87666b6b5a4df3bfc6a26c5",
        "question": "What are the average amount purchased and value purchased for the supplier who supplies the most products.",
        "parsing_tree": "department_store | #1 = Scan Table [ Product_Suppliers ] Output [ supplier_id ] ; #2 = Aggregate [ #1 ] GroupBy [ supplier_id ] Output [ countstar AS Count_Star , supplier_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , supplier_id ] ; #4 = Scan Table [ Product_Suppliers ] Output [ total_amount_purchased , supplier_id , total_value_purchased ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.supplier_id = #4.supplier_id ] Output [ #4.total_amount_purchased , #4.total_value_purchased ] ; #6 = Aggregate [ #5 ] Output [ AVG(total_value_purchased) AS Avg_total_value_purchased , AVG(total_amount_purchased) AS Avg_total_amount_purchased ]"
    },
    {
        "id": "0ad9c3e1a10cac76c9bc21c370b7d2dfcac7027c4b6f51401dd2c4ab7648b009",
        "question": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.",
        "parsing_tree": "department_store | #1 = Scan Table [ Product_Suppliers ] Output [ supplier_id ] ; #2 = Aggregate [ #1 ] GroupBy [ supplier_id ] Output [ countstar AS Count_Star , supplier_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , supplier_id ] ; #4 = Scan Table [ Product_Suppliers ] Output [ total_amount_purchased , supplier_id , total_value_purchased ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.supplier_id = #4.supplier_id ] Output [ #4.total_amount_purchased , #4.total_value_purchased ] ; #6 = Aggregate [ #5 ] Output [ AVG(total_value_purchased) AS Avg_total_value_purchased , AVG(total_amount_purchased) AS Avg_total_amount_purchased ]"
    },
    {
        "id": "43ff3baaa3492c05ef61d22e6413c5b6f87e9b861ea097ea3a33d8b599074699",
        "question": "What is the largest and smallest customer codes?",
        "parsing_tree": "department_store | #1 = Scan Table [ Customers ] Output [ customer_code ] ; #2 = Aggregate [ #1 ] Output [ MIN(customer_code) AS Min_customer_code , MAX(customer_code) AS Max_customer_code ]"
    },
    {
        "id": "90c6fb7ed0b4401d78642f5d0a8cdd647bbf390b2c84376e21ed518d383712aa",
        "question": "Return the maximum and minimum customer codes.",
        "parsing_tree": "department_store | #1 = Scan Table [ Customers ] Output [ customer_code ] ; #2 = Aggregate [ #1 ] Output [ MIN(customer_code) AS Min_customer_code , MAX(customer_code) AS Max_customer_code ]"
    },
    {
        "id": "ebaf473700dec62a4727cca51fa27c61f8584130454fb1ab8137b9d7f3fe945c",
        "question": "List the names of all the distinct customers who bought a keyboard.",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Predicate [ product_name = 'keyboard' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.order_id ] ; #4 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.order_id = #4.order_id ] Output [ #4.customer_id ] ; #6 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.customer_id = #6.customer_id ] Distinct [ true ] Output [ #6.customer_name ]"
    },
    {
        "id": "ac61442a53d29c8e9e77db2272c7315f5f8d2ec480420244661b530d55c50f6c",
        "question": "What are the distinct names of customers who have purchased a keyboard?",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Predicate [ product_name = 'keyboard' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.order_id ] ; #4 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.order_id = #4.order_id ] Output [ #4.customer_id ] ; #6 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.customer_id = #6.customer_id ] Distinct [ true ] Output [ #6.customer_name ]"
    },
    {
        "id": "a35a15df740354a814123e22785adc7608081c69193f1667b7114f450fb32708",
        "question": "List the names and phone numbers of all the distinct suppliers who supply red jeans.",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Predicate [ product_name = 'red jeans' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Suppliers ] Output [ supplier_id , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.supplier_id ] ; #4 = Scan Table [ Suppliers ] Output [ supplier_name , supplier_id , supplier_phone ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.supplier_id = #4.supplier_id ] Distinct [ true ] Output [ #4.supplier_name , #4.supplier_phone ]"
    },
    {
        "id": "7bc678404633127afb5f570681bea9c0fbf2ebfa06a0d4269a18a986cb44e6a3",
        "question": "What are the distinct names and phone numbers for suppliers who have red jeans?",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Predicate [ product_name = 'red jeans' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Suppliers ] Output [ supplier_id , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.supplier_id ] ; #4 = Scan Table [ Suppliers ] Output [ supplier_name , supplier_id , supplier_phone ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.supplier_id = #4.supplier_id ] Distinct [ true ] Output [ #4.supplier_name , #4.supplier_phone ]"
    },
    {
        "id": "5f5a4e430705b8ea2b7deb73db9b5c512f0701202c741e8a6ef7012a3b6b1352",
        "question": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Output [ product_type_code , product_price ] ; #2 = Aggregate [ #1 ] GroupBy [ product_type_code ] Output [ MIN(product_price) AS Min_product_price , product_type_code , MAX(product_price) AS Max_product_price ] ; #3 = Sort [ #2 ] OrderBy [ product_type_code ASC ] Output [ Min_product_price , product_type_code , Max_product_price ]"
    },
    {
        "id": "1851a3f4119bb58e9bacab06e2d21474aaac48594c4337d3fca14d918389078b",
        "question": "Give the maximum and minimum product prices for each product type, grouped and ordered by product type.",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Output [ product_type_code , product_price ] ; #2 = Aggregate [ #1 ] GroupBy [ product_type_code ] Output [ MIN(product_price) AS Min_product_price , product_type_code , MAX(product_price) AS Max_product_price ] ; #3 = Sort [ #2 ] OrderBy [ product_type_code ASC ] Output [ Min_product_price , product_type_code , Max_product_price ]"
    },
    {
        "id": "c69306f1bb4d56e15a6c218d1b244d198bb10ad81113e343c67225ecf097a9f2",
        "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
        "parsing_tree": "department_store | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status_code = 'Cancelled' ] Output [ order_status_code , customer_id , order_date , order_id ] ; #2 = Sort [ #1 ] OrderBy [ order_date ASC ] Output [ customer_id , order_date , order_id ]"
    },
    {
        "id": "2a5ee15f6d2cf975293d77d3d1a009ac37b16ab0f61be8ecac2a616f6ac6016a",
        "question": "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?",
        "parsing_tree": "department_store | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status_code = 'Cancelled' ] Output [ order_status_code , customer_id , order_date , order_id ] ; #2 = Sort [ #1 ] OrderBy [ order_date ASC ] Output [ customer_id , order_date , order_id ]"
    },
    {
        "id": "7ccd4bd761704721d3b6a676e4209d115ecf56f3e0c60fb370d7e9fcbd374e2b",
        "question": "Find the names of products that were bought by at least two distinct customers.",
        "parsing_tree": "department_store | #1 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #2 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #1.customer_id , #2.product_id ] ; #4 = Scan Table [ Products ] Output [ product_name , product_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.product_id = #4.product_id ] Distinct [ true ] Output [ #4.product_id , #3.customer_id , #4.product_name ] ; #6 = Aggregate [ #5 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_name ] ; #7 = Filter [ #6 ] Predicate [ Count_Star >= 2 ] Distinct [ true ] Output [ product_name ]"
    },
    {
        "id": "b9c2dc0dffca0bfc147e767e23787167b71e2e284c1123c056e0138241468d49",
        "question": "What are the distinct names of products purchased by at least two different customers?",
        "parsing_tree": "department_store | #1 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #2 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #1.customer_id , #2.product_id ] ; #4 = Scan Table [ Products ] Output [ product_name , product_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.product_id = #4.product_id ] Distinct [ true ] Output [ #4.product_id , #3.customer_id , #4.product_name ] ; #6 = Aggregate [ #5 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_name ] ; #7 = Filter [ #6 ] Predicate [ Count_Star >= 2 ] Distinct [ true ] Output [ product_name ]"
    },
    {
        "id": "cfb224b8cf164574d6f979368303690a82fb175b019417b392eadef78998635c",
        "question": "Find the names of customers who have bought by at least three distinct products.",
        "parsing_tree": "department_store | #1 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.order_id , #3.customer_id , #3.customer_name ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.order_id = #4.order_id ] Distinct [ true ] Output [ #1.product_id , #4.customer_name , #4.customer_id ] ; #6 = Aggregate [ #5 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_name ] ; #7 = Filter [ #6 ] Predicate [ Count_Star >= 3 ] Distinct [ true ] Output [ customer_name ]"
    },
    {
        "id": "d66fb472b39aa2b491674baaa720f7e81c3fe705226813cf3dc47a2c13d7040c",
        "question": "What are the distinct names of customers who have purchased at least three different products?",
        "parsing_tree": "department_store | #1 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.order_id , #3.customer_id , #3.customer_name ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.order_id = #4.order_id ] Distinct [ true ] Output [ #1.product_id , #4.customer_name , #4.customer_id ] ; #6 = Aggregate [ #5 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_name ] ; #7 = Filter [ #6 ] Predicate [ Count_Star >= 3 ] Distinct [ true ] Output [ customer_name ]"
    },
    {
        "id": "5992e80805943fa0458f60f1fb0af08ab44f9c7db9623b8fd648e3f15be5cd6d",
        "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "parsing_tree": "department_store | #1 = Scan Table [ Staff_Department_Assignments ] Predicate [ job_title_code = 'Sales Person' ] Output [ job_title_code , staff_id ] ; #2 = Scan Table [ Staff ] Output [ staff_name , staff_gender , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Distinct [ true ] Output [ #2.staff_name , #2.staff_gender ] ; #4 = Scan Table [ Staff_Department_Assignments ] Predicate [ job_title_code = 'Clerical Staff' ] Output [ job_title_code , staff_id ] ; #5 = Scan Table [ Staff ] Output [ staff_name , staff_gender , staff_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.staff_id = #5.staff_id ] Output [ #5.staff_gender , #5.staff_name ] ; #7 = Except [ #3 , #6 ] Predicate [ #3.staff_name = #6.staff_name ] Output [ #3.staff_gender , #3.staff_name ]"
    },
    {
        "id": "82078442792425fcb45a99d023181ef6e508a3528507f1d867f692ad15432195",
        "question": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?",
        "parsing_tree": "department_store | #1 = Scan Table [ Staff_Department_Assignments ] Predicate [ job_title_code = 'Sales Person' ] Output [ job_title_code , staff_id ] ; #2 = Scan Table [ Staff ] Output [ staff_name , staff_gender , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Distinct [ true ] Output [ #2.staff_name , #2.staff_gender ] ; #4 = Scan Table [ Staff_Department_Assignments ] Predicate [ job_title_code = 'Clerical Staff' ] Output [ job_title_code , staff_id ] ; #5 = Scan Table [ Staff ] Output [ staff_name , staff_gender , staff_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.staff_id = #5.staff_id ] Output [ #5.staff_gender , #5.staff_name ] ; #7 = Except [ #3 , #6 ] Predicate [ #3.staff_name = #6.staff_name ] Output [ #3.staff_gender , #3.staff_name ]"
    },
    {
        "id": "699a543786799b52c1896912b95608cfbdbd3e40f00e41c81fd753fe0d4caae9",
        "question": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.",
        "parsing_tree": "department_store | #1 = Scan Table [ Customers ] Predicate [ payment_method_code <> ' Credit Card' AND customer_address like '%WY%' ] Output [ customer_address , customer_id , payment_method_code , customer_name ]"
    },
    {
        "id": "82b20cc18e2054f04f1cec0a1b6caaf36e6cea805ed901294e037ec9e5eb1511",
        "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?",
        "parsing_tree": "department_store | #1 = Scan Table [ Customers ] Predicate [ payment_method_code <> ' Credit Card' AND customer_address like '%WY%' ] Output [ customer_address , customer_id , payment_method_code , customer_name ]"
    },
    {
        "id": "841417b3fd161ca745e0cbf09db154247fde7d8d2ac76748e691573ab2ebb751",
        "question": "Find the average price of all product clothes.",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Predicate [ product_type_code = 'Clothes' ] Output [ product_type_code , product_price ] ; #2 = Aggregate [ #1 ] Output [ AVG(product_price) AS Avg_product_price ]"
    },
    {
        "id": "c3d47c98c0367e3f97ab3d59fc78e05cae6f168a2547a83000b89661a94b56b5",
        "question": "What is the average price of clothes?",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Predicate [ product_type_code = 'Clothes' ] Output [ product_type_code , product_price ] ; #2 = Aggregate [ #1 ] Output [ AVG(product_price) AS Avg_product_price ]"
    },
    {
        "id": "afd6e93c3cd9e271d1e7ea28587b2e2004f742e981482f6229b014cdb80938b8",
        "question": "Find the name of the most expensive hardware product.",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Predicate [ product_type_code = 'Hardware' ] Output [ product_name , product_type_code , product_price ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ product_price DESC ] Output [ product_name , product_price ]"
    },
    {
        "id": "4397a6ed4c29b74c2d3dc866a08e41ba6ce197532c5286605dda96dd2df69a8d",
        "question": "What is the name of the hardware product with the greatest price?",
        "parsing_tree": "department_store | #1 = Scan Table [ Products ] Predicate [ product_type_code = 'Hardware' ] Output [ product_name , product_type_code , product_price ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ product_price DESC ] Output [ product_name , product_price ]"
    },
    {
        "id": "a8d5cb539781bd2217cce7cdaa2afd90f6e92380cd0d4d0bf0f1137ed8efab99",
        "question": "How many aircrafts are there?",
        "parsing_tree": "aircraft | #1 = Scan Table [ aircraft ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "527cffc34af83bb12e4932e7f0e7f40ccb48abb59d4060795b270621d8af94b7",
        "question": "What is the number of aircraft?",
        "parsing_tree": "aircraft | #1 = Scan Table [ aircraft ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d6f8f613fa4390fe8751a74e5f5710d7dceb064d25499619f86ea383e22fafb5",
        "question": "List the description of all aircrafts.",
        "parsing_tree": "aircraft | #1 = Scan Table [ aircraft ] Output [ Description ]"
    },
    {
        "id": "477b0871d5ca957cef15cdc05b6f9bfbed1e60f7d69725dd0d98c30d5bd2baff",
        "question": "What are the descriptions for the aircrafts?",
        "parsing_tree": "aircraft | #1 = Scan Table [ aircraft ] Output [ Description ]"
    },
    {
        "id": "83b5c8805c408fecfb3fd56af917526779e13b88bfe354617b441216878b6703",
        "question": "What is the average number of international passengers of all airports?",
        "parsing_tree": "aircraft | #1 = Scan Table [ airport ] Output [ International_Passengers ] ; #2 = Aggregate [ #1 ] Output [ AVG(International_Passengers) AS Avg_International_Passengers ]"
    },
    {
        "id": "d16d982eb3f7ec39cd8bedc9527e17e855a7e37aa368c5f9bc8ebf82e68aa58a",
        "question": "What is the average number of international passengers for an airport?",
        "parsing_tree": "aircraft | #1 = Scan Table [ airport ] Output [ International_Passengers ] ; #2 = Aggregate [ #1 ] Output [ AVG(International_Passengers) AS Avg_International_Passengers ]"
    },
    {
        "id": "abefb7fbaf095fa8db0d34b69fe4810e2a1c78da8601a8b59eebe937524d97c5",
        "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
        "parsing_tree": "aircraft | #1 = Scan Table [ airport ] Predicate [ Airport_Name = 'London Heathrow' ] Output [ Airport_Name , International_Passengers , Domestic_Passengers ]"
    },
    {
        "id": "a840f08f05a0a8862fdb1dc69364749484c15312900c20ac92d9b2c535efe175",
        "question": "How many international and domestic passengers are there in the airport London Heathrow?",
        "parsing_tree": "aircraft | #1 = Scan Table [ airport ] Predicate [ Airport_Name = 'London Heathrow' ] Output [ Airport_Name , International_Passengers , Domestic_Passengers ]"
    },
    {
        "id": "f332eed75aa9e002ebe11d105ad5b225aec3ed26078d083868f875a8634156a1",
        "question": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
        "parsing_tree": "aircraft | #1 = Scan Table [ airport ] Predicate [ Airport_Name like '%London%' ] Output [ Airport_Name , Domestic_Passengers ] ; #2 = Aggregate [ #1 ] Output [ SUM(Domestic_Passengers) AS Sum_Domestic_Passengers ]"
    },
    {
        "id": "35aa0909b31e4fc3c25b030498a7d2deaa31eb1a168738006b35de0a92318203",
        "question": "What are the total number of domestic passengers at all London airports?",
        "parsing_tree": "aircraft | #1 = Scan Table [ airport ] Predicate [ Airport_Name like '%London%' ] Output [ Airport_Name , Domestic_Passengers ] ; #2 = Aggregate [ #1 ] Output [ SUM(Domestic_Passengers) AS Sum_Domestic_Passengers ]"
    },
    {
        "id": "ccae80f045f5bb92fc57807a887b73c26cab016bd5d229f22bff4eab880d0a8a",
        "question": "What are the maximum and minimum number of transit passengers of all aiports.",
        "parsing_tree": "aircraft | #1 = Scan Table [ airport ] Output [ Transit_Passengers ] ; #2 = Aggregate [ #1 ] Output [ MAX(Transit_Passengers) AS Max_Transit_Passengers , MIN(Transit_Passengers) AS Min_Transit_Passengers ]"
    },
    {
        "id": "a1fce1c1f76cbd22db4307a102370b9ab5f045106a553e711e881043148e0455",
        "question": "What is the maximum and mininum number of transit passengers for all airports?",
        "parsing_tree": "aircraft | #1 = Scan Table [ airport ] Output [ Transit_Passengers ] ; #2 = Aggregate [ #1 ] Output [ MAX(Transit_Passengers) AS Max_Transit_Passengers , MIN(Transit_Passengers) AS Min_Transit_Passengers ]"
    },
    {
        "id": "061e841bb9a9a52ec91c728d19b474fa38f54e1a211f3f0cb7d1d1a09635d84f",
        "question": "What are the name of pilots aged 25 or older?",
        "parsing_tree": "aircraft | #1 = Scan Table [ pilot ] Predicate [ Age >= 25 ] Output [ Name , Age ]"
    },
    {
        "id": "88bf1c67c06368c417eb30432c54ef160aae81e96655875bd0613f30444339ed",
        "question": "what is the name of every pilot who is at least 25 years old?",
        "parsing_tree": "aircraft | #1 = Scan Table [ pilot ] Predicate [ Age >= 25 ] Output [ Name , Age ]"
    },
    {
        "id": "5978c1080fab53493c203ed59cef0782a547a3ea4a629ee282121f8f83e98207",
        "question": "List all pilot names in ascending alphabetical order.",
        "parsing_tree": "aircraft | #1 = Scan Table [ pilot ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "fdfba3e68f8e584f42590ef249d3d56503ce640bef4934040c2c3488533861a3",
        "question": "What are the names of the pilots in alphabetical order?",
        "parsing_tree": "aircraft | #1 = Scan Table [ pilot ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "41810ed1569bd114301d3fa4d385be57068a3ed32f8bb0164f3dd14481138a6b",
        "question": "List names of all pilot aged 30 or younger in descending alphabetical order.",
        "parsing_tree": "aircraft | #1 = Scan Table [ pilot ] Predicate [ Age <= 30 ] Output [ Name , Age ] ; #2 = Sort [ #1 ] OrderBy [ Name DESC ] Output [ Name ]"
    },
    {
        "id": "9e1e150d29794a22d7fdb4500c8609d838a9f189981cb8264e998ce4a7e43d97",
        "question": "What are the names of all pilots 30 years old or young in descending alphabetical order?",
        "parsing_tree": "aircraft | #1 = Scan Table [ pilot ] Predicate [ Age <= 30 ] Output [ Name , Age ] ; #2 = Sort [ #1 ] OrderBy [ Name DESC ] Output [ Name ]"
    },
    {
        "id": "16731ce8013c5a75dea651cc563bd74d1ff2b0e62c4794e67f3397530a1db4c6",
        "question": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
        "parsing_tree": "aircraft | #1 = Scan Table [ airport ] Predicate [ Airport_Name = 'London Gatwick' ] Output [ Airport_Name , Airport_ID ] ; #2 = Scan Table [ airport_aircraft ] Output [ Aircraft_ID , Airport_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Airport_ID = #2.Airport_ID ] Output [ #2.Aircraft_ID ] ; #4 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Aircraft_ID = #4.Aircraft_ID ] Output [ #4.Aircraft ]"
    },
    {
        "id": "a045d41f26da43385ea52dc383631b12cef0f71c3e028518a091ff524485231b",
        "question": "What are the names of all the aircrafts associated with London Gatwick airport?",
        "parsing_tree": "aircraft | #1 = Scan Table [ airport ] Predicate [ Airport_Name = 'London Gatwick' ] Output [ Airport_Name , Airport_ID ] ; #2 = Scan Table [ airport_aircraft ] Output [ Aircraft_ID , Airport_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Airport_ID = #2.Airport_ID ] Output [ #2.Aircraft_ID ] ; #4 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Aircraft_ID = #4.Aircraft_ID ] Output [ #4.Aircraft ]"
    },
    {
        "id": "ffc935aef4c6f3b5a1ccc2b71c1406ec3d2089d519112810c00cb01b7d5db82e",
        "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
        "parsing_tree": "aircraft | #1 = Scan Table [ airport ] Predicate [ Total_Passengers > 1.0E7 ] Output [ Total_Passengers , Airport_ID ] ; #2 = Scan Table [ airport_aircraft ] Output [ Aircraft_ID , Airport_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Airport_ID = #2.Airport_ID ] Output [ #2.Aircraft_ID ] ; #4 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft , Description ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Aircraft_ID = #4.Aircraft_ID ] Output [ #4.Aircraft , #4.Description ]"
    },
    {
        "id": "795be34947fbc1dd2a9c9373d0a3d1aaebe61ce9cdeacc25e76301fb934de505",
        "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?",
        "parsing_tree": "aircraft | #1 = Scan Table [ airport ] Predicate [ Total_Passengers > 1.0E7 ] Output [ Total_Passengers , Airport_ID ] ; #2 = Scan Table [ airport_aircraft ] Output [ Aircraft_ID , Airport_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Airport_ID = #2.Airport_ID ] Output [ #2.Aircraft_ID ] ; #4 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft , Description ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Aircraft_ID = #4.Aircraft_ID ] Output [ #4.Aircraft , #4.Description ]"
    },
    {
        "id": "7f0f5fc278f8f250b7870ed76bd8f2b283b490c8a375af43de9dab6dfb5033a7",
        "question": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
        "parsing_tree": "aircraft | #1 = Scan Table [ aircraft ] Predicate [ Aircraft = 'Robinson R-22' ] Output [ Aircraft_ID , Aircraft ] ; #2 = Scan Table [ airport_aircraft ] Output [ Aircraft_ID , Airport_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Aircraft_ID ] Output [ #2.Airport_ID ] ; #4 = Scan Table [ airport ] Output [ Total_Passengers , Airport_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Airport_ID = #4.Airport_ID ] Output [ #4.Total_Passengers ] ; #6 = Aggregate [ #5 ] Output [ AVG(Total_Passengers) AS Avg_Total_Passengers ]"
    },
    {
        "id": "b900950868f3d04d5b30f019226a99845bdbf80372c93c4064a9f3e7c4cf5e87",
        "question": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?",
        "parsing_tree": "aircraft | #1 = Scan Table [ aircraft ] Predicate [ Aircraft = 'Robinson R-22' ] Output [ Aircraft_ID , Aircraft ] ; #2 = Scan Table [ airport_aircraft ] Output [ Aircraft_ID , Airport_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Aircraft_ID ] Output [ #2.Airport_ID ] ; #4 = Scan Table [ airport ] Output [ Total_Passengers , Airport_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Airport_ID = #4.Airport_ID ] Output [ #4.Total_Passengers ] ; #6 = Aggregate [ #5 ] Output [ AVG(Total_Passengers) AS Avg_Total_Passengers ]"
    },
    {
        "id": "5b558249074e5bc0145e8df3314d75b6d14e420a6b03e2d5dce4c24fc68d0c1b",
        "question": "Please list the location and the winning aircraft name.",
        "parsing_tree": "aircraft | #1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #2 = Scan Table [ match ] Output [ Location , Winning_Aircraft ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #2.Location , #1.Aircraft ]"
    },
    {
        "id": "f039cad941faa922246567a2d207192a556475dcbd3bf22cabc661ef5f374bd1",
        "question": "What is the location and name of the winning aircraft?",
        "parsing_tree": "aircraft | #1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #2 = Scan Table [ match ] Output [ Location , Winning_Aircraft ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #2.Location , #1.Aircraft ]"
    },
    {
        "id": "5e5537c51476f0c6d3f1969bcb8ed490145a28f08b191633181265ab6bd48a6d",
        "question": "List the name of the aircraft that has been named winning aircraft the most number of times.",
        "parsing_tree": "aircraft | #1 = Scan Table [ match ] Output [ Winning_Aircraft ] ; #2 = Aggregate [ #1 ] GroupBy [ Winning_Aircraft ] Output [ countstar AS Count_Star , Winning_Aircraft ] ; #3 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Winning_Aircraft = #3.Aircraft_ID ] Output [ #3.Aircraft , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Aircraft ]"
    },
    {
        "id": "ecdc2fd72fc2d40ead3c5acecc313ccb2b5ce0f0e884231ac3498d1fec64c9c6",
        "question": "What is the name of the aircraft that has won an award the most?",
        "parsing_tree": "aircraft | #1 = Scan Table [ match ] Output [ Winning_Aircraft ] ; #2 = Aggregate [ #1 ] GroupBy [ Winning_Aircraft ] Output [ countstar AS Count_Star , Winning_Aircraft ] ; #3 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Winning_Aircraft = #3.Aircraft_ID ] Output [ #3.Aircraft , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Aircraft ]"
    },
    {
        "id": "9fb4c33706daf79870da6646deccbfd078cce986022165568ad58010788bea44",
        "question": "List the names of aircrafts and the number of times it won matches.",
        "parsing_tree": "aircraft | #1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #2 = Scan Table [ match ] Output [ Winning_Aircraft ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #2.Winning_Aircraft , #1.Aircraft , #1.Aircraft_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Winning_Aircraft ] Output [ countstar AS Count_Star , Aircraft ]"
    },
    {
        "id": "72b537b6ce6833fc12bf5b81f7e265574a127d1dae93b9fe8b0876b40d9622fd",
        "question": "For each aircraft that has won an award, what is its name and how many time has it won?",
        "parsing_tree": "aircraft | #1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #2 = Scan Table [ match ] Output [ Winning_Aircraft ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #2.Winning_Aircraft , #1.Aircraft , #1.Aircraft_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Winning_Aircraft ] Output [ countstar AS Count_Star , Aircraft ]"
    },
    {
        "id": "0c82ed93a9b5079a0fb3835db0bda46250eb4d4f99f466a159cda84ce392a141",
        "question": "List names of all pilot in descending order of age.",
        "parsing_tree": "aircraft | #1 = Scan Table [ pilot ] Output [ Name , Age ] ; #2 = Sort [ #1 ] OrderBy [ Age DESC ] Output [ Name , Age ]"
    },
    {
        "id": "9d9302fa64b8bd7539b6e4c2e705d08d03e52c9e835b8edae4dc1096ebeb82db",
        "question": "What are the names of all pilots listed by descending age?",
        "parsing_tree": "aircraft | #1 = Scan Table [ pilot ] Output [ Name , Age ] ; #2 = Sort [ #1 ] OrderBy [ Age DESC ] Output [ Name , Age ]"
    },
    {
        "id": "23a3003119feb44a2b2ab88c952c47e03e057568d2eec1ed7bdd01e168210366",
        "question": "List the names of aircrafts and that won matches at least twice.",
        "parsing_tree": "aircraft | #1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #2 = Scan Table [ match ] Output [ Winning_Aircraft ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #2.Winning_Aircraft , #1.Aircraft , #1.Aircraft_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Winning_Aircraft ] Output [ countstar AS Count_Star , Aircraft ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Aircraft ]"
    },
    {
        "id": "b7e0ba4f3f9459c13058cb13552db46928ca58865e6d2e79ae30802c6afd4ad2",
        "question": "What are the names of all aircrafts that have won a match at least twice?",
        "parsing_tree": "aircraft | #1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #2 = Scan Table [ match ] Output [ Winning_Aircraft ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #2.Winning_Aircraft , #1.Aircraft , #1.Aircraft_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Winning_Aircraft ] Output [ countstar AS Count_Star , Aircraft ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Aircraft ]"
    },
    {
        "id": "746d79ffd54deee4f704fd498cc48e24cddf6130323d37b122bddd59a106cf6e",
        "question": "List the names of aircrafts and that did not win any match.",
        "parsing_tree": "aircraft | #1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #2 = Scan Table [ match ] Output [ Winning_Aircraft ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Winning_Aircraft IS NULL OR #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #1.Aircraft ]"
    },
    {
        "id": "e49d3579206c4494653ce767c0de51273decf183f2519e78394f67a6414840f2",
        "question": "What are the names of all aicrafts that have never won any match?",
        "parsing_tree": "aircraft | #1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #2 = Scan Table [ match ] Output [ Winning_Aircraft ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Winning_Aircraft IS NULL OR #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #1.Aircraft ]"
    },
    {
        "id": "95df1ecde2a6542dc3f146e1c1ef2ab8b82079bd5aad4883100afeec021da839",
        "question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
        "parsing_tree": "aircraft | #1 = Scan Table [ airport ] Predicate [ Airport_Name = 'London Heathrow' ] Output [ Airport_Name , Airport_ID ] ; #2 = Scan Table [ airport_aircraft ] Output [ Aircraft_ID , Airport_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Airport_ID = #2.Airport_ID ] Output [ #2.Aircraft_ID ] ; #4 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Aircraft_ID = #4.Aircraft_ID ] Distinct [ true ] Output [ #4.Aircraft ] ; #6 = Scan Table [ airport ] Predicate [ Airport_Name = 'London Gatwick' ] Output [ Airport_Name , Airport_ID ] ; #7 = Scan Table [ airport_aircraft ] Output [ Aircraft_ID , Airport_ID ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.Airport_ID = #7.Airport_ID ] Output [ #7.Aircraft_ID ] ; #9 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.Aircraft_ID = #9.Aircraft_ID ] Output [ #9.Aircraft ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.Aircraft = #10.Aircraft ] Output [ #5.Aircraft ]"
    },
    {
        "id": "0f6289535ba847be4b4e6414ed4f48492155c1ac1a43c86b8122ce6a86c105ff",
        "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
        "parsing_tree": "aircraft | #1 = Scan Table [ airport ] Predicate [ Airport_Name = 'London Heathrow' ] Output [ Airport_Name , Airport_ID ] ; #2 = Scan Table [ airport_aircraft ] Output [ Aircraft_ID , Airport_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Airport_ID = #2.Airport_ID ] Output [ #2.Aircraft_ID ] ; #4 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Aircraft_ID = #4.Aircraft_ID ] Distinct [ true ] Output [ #4.Aircraft ] ; #6 = Scan Table [ airport ] Predicate [ Airport_Name = 'London Gatwick' ] Output [ Airport_Name , Airport_ID ] ; #7 = Scan Table [ airport_aircraft ] Output [ Aircraft_ID , Airport_ID ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.Airport_ID = #7.Airport_ID ] Output [ #7.Aircraft_ID ] ; #9 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.Aircraft_ID = #9.Aircraft_ID ] Output [ #9.Aircraft ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.Aircraft = #10.Aircraft ] Output [ #5.Aircraft ]"
    },
    {
        "id": "9121cc238214d29e3dc77e833d64e6a4cc7540739098c5f578fdec8070027ac0",
        "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
        "parsing_tree": "aircraft | #1 = Scan Table [ match ] Output [ Winning_Pilot ] ; #2 = Scan Table [ pilot ] Predicate [ Age < 30 ] Output [ Name , Pilot_Id , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Winning_Pilot = #2.Pilot_Id ] Output [ #2.Pilot_Id , #2.Age , #2.Name , #1.Winning_Pilot ] ; #4 = Aggregate [ #3 ] GroupBy [ Winning_Pilot ] Output [ countstar AS Count_Star , Name , Age ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name , Age ]"
    },
    {
        "id": "3107e0eabbb09ffc10439c51fe24111bd72fd8340cdd00d510e127b845a9bcdd",
        "question": "What is the name and age of the pilot younger than 30 who has won the most number of times?",
        "parsing_tree": "aircraft | #1 = Scan Table [ match ] Output [ Winning_Pilot ] ; #2 = Scan Table [ pilot ] Predicate [ Age < 30 ] Output [ Name , Pilot_Id , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Winning_Pilot = #2.Pilot_Id ] Output [ #2.Pilot_Id , #2.Age , #2.Name , #1.Winning_Pilot ] ; #4 = Aggregate [ #3 ] GroupBy [ Winning_Pilot ] Output [ countstar AS Count_Star , Name , Age ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name , Age ]"
    },
    {
        "id": "a202bc143ac5c61b3fb3636f1d16f6ec6d439c09d112d8ea2838f2dc6040f412",
        "question": "what is the name and age of the youngest winning pilot?",
        "parsing_tree": "aircraft | #1 = Scan Table [ match ] Output [ Winning_Pilot ] ; #2 = Scan Table [ pilot ] Output [ Name , Pilot_Id , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Winning_Pilot = #2.Pilot_Id ] Output [ #2.Name , #2.Age ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Age ASC ] Output [ Name , Age ]"
    },
    {
        "id": "9708473c3432816b2a8782ce71d85c2d68a07a2cef8bde056412b4fcc735042d",
        "question": "How old is the youngest winning pilot and what is their name?",
        "parsing_tree": "aircraft | #1 = Scan Table [ match ] Output [ Winning_Pilot ] ; #2 = Scan Table [ pilot ] Output [ Name , Pilot_Id , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Winning_Pilot = #2.Pilot_Id ] Output [ #2.Name , #2.Age ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Age ASC ] Output [ Name , Age ]"
    },
    {
        "id": "269d7be33c0dff919ef0f7dbe836556e39c07c548827b130eda58d3c4e6ef4a9",
        "question": "find the name of pilots who did not win the matches held in the country of Australia.",
        "parsing_tree": "aircraft | #1 = Scan Table [ pilot ] Output [ Name , Pilot_Id ] ; #2 = Scan Table [ match ] Predicate [ Country = 'Australia' ] Output [ Country , Winning_Pilot ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Winning_Pilot IS NULL OR #1.Pilot_Id = #2.Winning_Pilot ] Output [ #1.Name ]"
    },
    {
        "id": "cdadbf68b7069a54c8293f38de30c533763fdfbdd685fa853b2470d7f8605baf",
        "question": "What are the names of the pilots that have not won any matches in Australia?",
        "parsing_tree": "aircraft | #1 = Scan Table [ pilot ] Output [ Name , Pilot_Id ] ; #2 = Scan Table [ match ] Predicate [ Country = 'Australia' ] Output [ Country , Winning_Pilot ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Winning_Pilot IS NULL OR #1.Pilot_Id = #2.Winning_Pilot ] Output [ #1.Name ]"
    },
    {
        "id": "664962d860af545f6bfa99ac26b474cf48276287af8fc8caf5ec988c21a03e1d",
        "question": "How many residents does each property have? List property id and resident count.",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Properties ] Output [ property_id ] ; #2 = Scan Table [ Residents ] Output [ property_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.property_id = #2.property_id ] Output [ #1.property_id ] ; #4 = Aggregate [ #3 ] GroupBy [ property_id ] Output [ countstar AS Count_Star , property_id ]"
    },
    {
        "id": "83c97d477a204645b510635a20d41cccd6d92a6d0faf75248235aa7c90b09911",
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Organizations ] Predicate [ organization_details = 'Denesik and Sons Party' ] Output [ organization_id , organization_details ] ; #2 = Scan Table [ Services ] Output [ organization_id , service_type_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.organization_id = #2.organization_id ] Distinct [ true ] Output [ #2.service_type_code ]"
    },
    {
        "id": "cc1c0cb0e11c116ecdb266e056a0b5db34514825af1db05fcede524e2e18082f",
        "question": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Residents_Services ] Output [ resident_id ] ; #2 = Scan Table [ Residents ] Output [ resident_id , other_details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.resident_id = #2.resident_id ] Output [ #2.other_details , #2.resident_id ] ; #4 = Aggregate [ #3 ] GroupBy [ other_details , resident_id ] Output [ countstar AS Count_Star , resident_id , other_details ] ; #5 = Sort [ #4 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , resident_id , other_details ]"
    },
    {
        "id": "bb3166f532fd66604b3a9e6f9e8d9838034954ba5e550d72401ead8fed57ca82",
        "question": "What is the maximum number that a certain service is provided? List the service id, details and number.",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Residents_Services ] Output [ service_id ] ; #2 = Aggregate [ #1 ] GroupBy [ service_id ] Output [ countstar AS Count_Star , service_id ] ; #3 = Scan Table [ Services ] Output [ service_details , service_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.service_id = #3.service_id ] Output [ #3.service_details , #3.service_id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , service_details , service_id ]"
    },
    {
        "id": "d149ed221f146f2bd4c61bc80cbae781203cb06d7dadde96dcc5574920396774",
        "question": "List the id and type of each thing, and the details of the organization that owns it.",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Organizations ] Output [ organization_id , organization_details ] ; #2 = Scan Table [ Things ] Output [ organization_id , thing_id , Type_of_Thing_Code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.organization_id = #2.organization_id ] Output [ #1.organization_details , #2.thing_id , #2.Type_of_Thing_Code ]"
    },
    {
        "id": "a1d4228aa19271638e489d46929fbb1669c5c0afe6f38a3f693b1463d5926c60",
        "question": "What are the id and details of the customers who have at least 3 events?",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Customer_Events ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_details , customer_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_details , #3.customer_id , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ customer_details , customer_id ]"
    },
    {
        "id": "05971f97579feea8a2e0d46fd2e0c7fbf7dd4334384bafad70d02f281b8395a7",
        "question": "What is each customer's move in date, and the corresponding customer id and details?",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Customer_Events ] Output [ customer_id , date_moved_in ] ; #2 = Scan Table [ Customers ] Output [ customer_details , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.date_moved_in , #2.customer_id , #2.customer_details ]"
    },
    {
        "id": "f005eed324eeb13243ee5edc184fb66c269993ddda463649406d724dbebb476f",
        "question": "Which events have the number of notes between one and three? List the event id and the property id.",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Customer_Event_Notes ] Output [ Customer_Event_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Customer_Event_ID ] Output [ countstar AS Count_Star , Customer_Event_ID ] ; #3 = Scan Table [ Customer_Events ] Output [ property_id , Customer_Event_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Customer_Event_ID = #3.Customer_Event_ID ] Output [ #3.Customer_Event_ID , #2.Count_Star , #3.property_id ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 1 AND Count_Star <= 3 ] Output [ property_id , Customer_Event_ID ]"
    },
    {
        "id": "13fe9cf1cf3feb59b377ca03ca8180f5de11cda85925edbeb6d656f8b59fbb64",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Things ] Output [ thing_id , Type_of_Thing_Code ] ; #2 = Scan Table [ Timed_Status_of_Things ] Predicate [ Status_of_Thing_Code = 'Close' OR Date_and_Date < '2017-06-19 02:59:21.000' ] Output [ Status_of_Thing_Code , Date_and_Date , thing_id ] ; #3 = Aggregate [ #2 ] GroupBy [ thing_id ] Output [ thing_id ] ; #4 = Intersect [ #1 , #3 ] Predicate [ #3.thing_id = #1.thing_id ] Output [ #1.thing_id , #1.Type_of_Thing_Code ]"
    },
    {
        "id": "7ff1d63b2c376138346f99ce1b7c2a4e44d97c7ddb79f60976ca850265b0ccbf",
        "question": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Things ] Predicate [ service_details = 'Unsatisfied' ] Output [ service_details , thing_id ] ; #2 = Scan Table [ Timed_Locations_of_Things ] Output [ thing_id , Location_Code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.thing_id = #2.thing_id ] Distinct [ true ] Output [ #2.Location_Code ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e999bc99e04e37fe6f22b9c989b970581ec88db080fc272192bab246217f2764",
        "question": "How many different status codes of things are there?",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Timed_Status_of_Things ] Distinct [ true ] Output [ Status_of_Thing_Code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7120b47911f1196259029a23e7157c09e710887f143a6997c5c4cfcf5577e951",
        "question": "When is the last day any resident moved in?",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Residents ] Output [ date_moved_in ] ; #2 = Aggregate [ #1 ] Output [ MAX(date_moved_in) AS Max_date_moved_in ]"
    },
    {
        "id": "dc775a1239256446537fe416712b0d2a46b937504027a02d163787e2626fed91",
        "question": "What are the resident details containing the substring 'Miss'?",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Residents ] Predicate [ other_details like '%Miss%' ] Output [ other_details ]"
    },
    {
        "id": "ba793944d879c1580a5fc2c02969213e7510a74abe53d022f7c48bc87f202740",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Customer_Events ] Output [ property_id , date_moved_in , Customer_Event_ID ]"
    },
    {
        "id": "5ae81a5ccaf71d93b4028854022cf6d8eb92d418450bf8aae32aa861ac029d81",
        "question": "How many customers did not have any event?",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Customers ] Output [ customer_id ] ; #2 = Scan Table [ Customer_Events ] Output [ customer_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.customer_id IS NULL OR #1.customer_id = #2.customer_id ] Output [ #1.customer_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1d75b069b810aeedeb7923b1eaea50ac151ba47523f74b3a4fb66ea7edf794ca",
        "question": "What are the distinct move in dates of the residents?",
        "parsing_tree": "local_govt_and_lot | #1 = Scan Table [ Residents ] Distinct [ true ] Output [ date_moved_in ]"
    },
    {
        "id": "57d096ca720e4715bf83805cd01e0dd88a532ac64af5e47c0d9f63cecc40cce3",
        "question": "How many schools are there?",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "027dc22b98f175f95de017aa066dd533425a02fe93f41b1cd40fbe995489b004",
        "question": "Count the number of schools.",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4e72d92eea8615ceac4297707c20972d0c2cf1ff091331af9304dc4d9ae1a6ca",
        "question": "List the locations of schools in ascending order of enrollment.",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Location , Enrollment ] ; #2 = Sort [ #1 ] OrderBy [ Enrollment ASC ] Output [ Location , Enrollment ]"
    },
    {
        "id": "fdffa014f79207bd27ed8c9b13d23e61a439af302fa829ae860d86bf8de70953",
        "question": "What is the list of school locations sorted in ascending order of school enrollment?",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Location , Enrollment ] ; #2 = Sort [ #1 ] OrderBy [ Enrollment ASC ] Output [ Location , Enrollment ]"
    },
    {
        "id": "0fd4149b357b7b76b29b04f6ae60324801d594b130df63a19919ec02f0815710",
        "question": "List the locations of schools in descending order of founded year.",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Location , Founded ] ; #2 = Sort [ #1 ] OrderBy [ Founded DESC ] Output [ Location , Founded ]"
    },
    {
        "id": "7fa3a2a3a190194b3875dfc3a20247a0daf252818ff816e255e95e3ff01e7f2f",
        "question": "What is the list of school locations sorted in descending order of school foundation year?",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Location , Founded ] ; #2 = Sort [ #1 ] OrderBy [ Founded DESC ] Output [ Location , Founded ]"
    },
    {
        "id": "ed0d8542c7d570c5a0e556e07fb3b0718e2e6c275a0b5c31c8e954c1740c8114",
        "question": "What are the enrollments of schools whose denomination is not \"Catholic\"?",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Predicate [ Denomination <> 'Catholic' ] Output [ Denomination , Enrollment ]"
    },
    {
        "id": "1fd64f6a1db7b481a986bb0e3edb0bb6fd21c7f2e424fe24510726794a9858e7",
        "question": "List the enrollment for each school that does not have \"Catholic\" as denomination.",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Predicate [ Denomination <> 'Catholic' ] Output [ Denomination , Enrollment ]"
    },
    {
        "id": "01b3714c632733d99de6c877c46d039d0c6bcd42d275185299d89b907fa909ff",
        "question": "What is the average enrollment of schools?",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Enrollment ] ; #2 = Aggregate [ #1 ] Output [ AVG(Enrollment) AS Avg_Enrollment ]"
    },
    {
        "id": "367164c0983e1625c2d132571429a41bf3026ef2dc1866f76080551e9ec1b260",
        "question": "Take the average of the school enrollment.",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Enrollment ] ; #2 = Aggregate [ #1 ] Output [ AVG(Enrollment) AS Avg_Enrollment ]"
    },
    {
        "id": "9c9a30538da1c6d69949e9642fd9b72cab0028b4ebfe8ca8019f874442811990",
        "question": "What are the teams of the players, sorted in ascending alphabetical order?",
        "parsing_tree": "school_player | #1 = Scan Table [ player ] Output [ Team ] ; #2 = Sort [ #1 ] OrderBy [ Team ASC ] Output [ Team ]"
    },
    {
        "id": "39d6a2bb49f2101730adbe7b28420cd38626e83a2fa238c6e300ef002a17838b",
        "question": "Find the team of each player and sort them in ascending alphabetical order.",
        "parsing_tree": "school_player | #1 = Scan Table [ player ] Output [ Team ] ; #2 = Sort [ #1 ] OrderBy [ Team ASC ] Output [ Team ]"
    },
    {
        "id": "564f1189b1eabaaecc63a8f538ac5eab6659d4fae31509b599c8a3c4c776f9d5",
        "question": "How many different positions of players are there?",
        "parsing_tree": "school_player | #1 = Scan Table [ player ] Distinct [ true ] Output [ Position ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Position) AS Count_Dist_Position ]"
    },
    {
        "id": "dab6f62d397b0fea88c804ad54284ee9621f9568ca55a8fa5dad492fb37d0b2b",
        "question": "Count the number of distinct player positions.",
        "parsing_tree": "school_player | #1 = Scan Table [ player ] Distinct [ true ] Output [ Position ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Position) AS Count_Dist_Position ]"
    },
    {
        "id": "164f008a0fdad5e6d85a139fe03a4b7de67346a633edb31c3385cff72bc29283",
        "question": "Find the team of the player of the highest age.",
        "parsing_tree": "school_player | #1 = Scan Table [ player ] Output [ Team , Age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Age DESC ] Output [ Team , Age ]"
    },
    {
        "id": "2dca552dd922dfb7cabcd5144965350583631da5df295f76c2f229969231a809",
        "question": "Which team has the oldest player?",
        "parsing_tree": "school_player | #1 = Scan Table [ player ] Output [ Team , Age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Age DESC ] Output [ Team , Age ]"
    },
    {
        "id": "8cb0950f7fbe687bebd4d108dcfe5bd0cd0ff86e3baada277bc3a1110313e605",
        "question": "List the teams of the players with the top 5 largest ages.",
        "parsing_tree": "school_player | #1 = Scan Table [ player ] Output [ Team , Age ] ; #2 = TopSort [ #1 ] Rows [ 5 ] OrderBy [ Age DESC ] Output [ Team , Age ]"
    },
    {
        "id": "f6191a100055fb10895b7f5338b92e60719682b3c83df09bf99e7bb613ce9278",
        "question": "What are the teams that have the 5 oldest players?",
        "parsing_tree": "school_player | #1 = Scan Table [ player ] Output [ Team , Age ] ; #2 = TopSort [ #1 ] Rows [ 5 ] OrderBy [ Age DESC ] Output [ Team , Age ]"
    },
    {
        "id": "63b1bd93b2e9e8cc8f0a058aceefb4bad0e9a83c90f2c64a3f3b2d0206e58051",
        "question": "For each player, show the team and the location of school they belong to.",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Location , School_ID ] ; #2 = Scan Table [ player ] Output [ Team , School_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_ID = #2.School_ID ] Output [ #2.Team , #1.Location ]"
    },
    {
        "id": "2f0ab474c1c8a357c715674fad47f4f58554fdf73054e5f4b907c3c896026da4",
        "question": "What are the team and the location of school each player belongs to?",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Location , School_ID ] ; #2 = Scan Table [ player ] Output [ Team , School_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_ID = #2.School_ID ] Output [ #2.Team , #1.Location ]"
    },
    {
        "id": "9be7b783e1e21f2a6610a534ddefdcbf15f4d64cc9ef30adc612f8825a8fa540",
        "question": "Show the locations of schools that have more than 1 player.",
        "parsing_tree": "school_player | #1 = Scan Table [ player ] Output [ School_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ School_ID ] Output [ countstar AS Count_Star , School_ID ] ; #3 = Scan Table [ school ] Output [ Location , School_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.School_ID = #3.School_ID ] Output [ #3.Location , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Location ]"
    },
    {
        "id": "ec84a09c3cbacd572f45361076231946e559ea26b17410be41f9c8973c2fb931",
        "question": "Which schools have more than 1 player? Give me the school locations.",
        "parsing_tree": "school_player | #1 = Scan Table [ player ] Output [ School_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ School_ID ] Output [ countstar AS Count_Star , School_ID ] ; #3 = Scan Table [ school ] Output [ Location , School_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.School_ID = #3.School_ID ] Output [ #3.Location , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Location ]"
    },
    {
        "id": "5f6232a21840768d9acb37aba230dba486e16fff954e16bdac7ac0e00bf49d01",
        "question": "Show the denomination of the school that has the most players.",
        "parsing_tree": "school_player | #1 = Scan Table [ player ] Output [ School_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ School_ID ] Output [ countstar AS Count_Star , School_ID ] ; #3 = Scan Table [ school ] Output [ Denomination , School_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.School_ID = #3.School_ID ] Output [ #3.Denomination , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Denomination , Count_Star ]"
    },
    {
        "id": "1431aefe1acfdd7e7b46488c84538bef682d1e5c2dc4f533090fabd19d3df504",
        "question": "What is the denomination of the school the most players belong to?",
        "parsing_tree": "school_player | #1 = Scan Table [ player ] Output [ School_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ School_ID ] Output [ countstar AS Count_Star , School_ID ] ; #3 = Scan Table [ school ] Output [ Denomination , School_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.School_ID = #3.School_ID ] Output [ #3.Denomination , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Denomination , Count_Star ]"
    },
    {
        "id": "8f45a579879b042f2b42fd22e6b7a941ea1a3c3eb74525fdb78dd55437fec603",
        "question": "Show locations and nicknames of schools.",
        "parsing_tree": "school_player | #1 = Scan Table [ school_details ] Output [ Nickname , School_ID ] ; #2 = Scan Table [ school ] Output [ Location , School_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_ID = #2.School_ID ] Output [ #2.Location , #1.Nickname ]"
    },
    {
        "id": "e9e5e34052abd82198b56c4318cb34de7c1899a0a78b30f1de1e51eb9c63cbc5",
        "question": "What are the location and nickname of each school?",
        "parsing_tree": "school_player | #1 = Scan Table [ school_details ] Output [ Nickname , School_ID ] ; #2 = Scan Table [ school ] Output [ Location , School_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_ID = #2.School_ID ] Output [ #2.Location , #1.Nickname ]"
    },
    {
        "id": "1d78035662c456a82ea4393ff7da4def0e4e5aee36b2a5441ea42574624ae4ed",
        "question": "Please show different denominations and the corresponding number of schools.",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Denomination ] ; #2 = Aggregate [ #1 ] GroupBy [ Denomination ] Output [ Denomination , countstar AS Count_Star ]"
    },
    {
        "id": "16964337dc83be0e5915e504428df8dde1d48a462f12d0f66c9d5b0fa0a20221",
        "question": "For each denomination, return the denomination and the count of schools with that denomination.",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Denomination ] ; #2 = Aggregate [ #1 ] GroupBy [ Denomination ] Output [ Denomination , countstar AS Count_Star ]"
    },
    {
        "id": "5f3f24af0c7b348c6ca206a9c744409db9135d4a04b1b38bcb31b5401c679dec",
        "question": "Please show different denominations and the corresponding number of schools in descending order.",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Denomination ] ; #2 = Aggregate [ #1 ] GroupBy [ Denomination ] Output [ Denomination , countstar AS Count_Star ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ Denomination , Count_Star ]"
    },
    {
        "id": "7f8ddfbc1f9824ba5fa09544741743b0ce9727bfad6979fd96c097ad790002c1",
        "question": "Order denominations in descending order of the count of schools with the denomination. Return each denomination with the count of schools.",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Denomination ] ; #2 = Aggregate [ #1 ] GroupBy [ Denomination ] Output [ Denomination , countstar AS Count_Star ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ Denomination , Count_Star ]"
    },
    {
        "id": "b83976b75230139007b989c4deacc17a20cdd40c9139304066b7f65df5f8e4e3",
        "question": "List the school color of the school that has the largest enrollment.",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ School_Colors , Enrollment ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Enrollment DESC ] Output [ School_Colors , Enrollment ]"
    },
    {
        "id": "bfc53ad9eac7ee89b0d991bbe9a8cec9aea9231873d4a3939d1ee4b2070516dd",
        "question": "What is the school color of the school with the largest enrollment?",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ School_Colors , Enrollment ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Enrollment DESC ] Output [ School_Colors , Enrollment ]"
    },
    {
        "id": "2c85377aa31e98d1ae3d0785528f04c588302fa78fac5e2cb253f3d8d7b873f8",
        "question": "List the locations of schools that do not have any player.",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Location , School_ID ] ; #2 = Scan Table [ player ] Output [ School_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.School_ID IS NULL OR #1.School_ID = #2.School_ID ] Output [ #1.Location ]"
    },
    {
        "id": "ab1d7b380366400440e84c352ffd8f4846c25d5e34a83b5dbbaefea8beb3a342",
        "question": "Which schools do not have any player? Give me the school locations.",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Location , School_ID ] ; #2 = Scan Table [ player ] Output [ School_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.School_ID IS NULL OR #1.School_ID = #2.School_ID ] Output [ #1.Location ]"
    },
    {
        "id": "1b047f1f64018a1a330c2d37dfcb38846bbc1faeb93417d0492497c1d71f28b2",
        "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Predicate [ Founded < 1890.0 ] Distinct [ true ] Output [ Denomination , Founded ] ; #2 = Scan Table [ school ] Predicate [ Founded > 1900.0 ] Output [ Denomination , Founded ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Denomination = #2.Denomination ] Output [ #1.Denomination ]"
    },
    {
        "id": "dfdaa2460f776a1a1b6adbedb98a76bc6dd259d1bd5c02f42fee76f3f4eaf40a",
        "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Predicate [ Founded < 1890.0 ] Distinct [ true ] Output [ Denomination , Founded ] ; #2 = Scan Table [ school ] Predicate [ Founded > 1900.0 ] Output [ Denomination , Founded ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Denomination = #2.Denomination ] Output [ #1.Denomination ]"
    },
    {
        "id": "51d89c85416420f43e7a2b5e62273a3fb41f99fd65f72c1d028b7f71a5300a7e",
        "question": "Show the nicknames of schools that are not in division 1.",
        "parsing_tree": "school_player | #1 = Scan Table [ school_details ] Predicate [ Division <> 'Division 1' ] Output [ Division , Nickname ]"
    },
    {
        "id": "c7fafb6ac32c24b665b1c2501f2ecfdc605b8ec97eeb0c1a4eceaf8588d20c85",
        "question": "What are the nicknames of schools whose division is not 1?",
        "parsing_tree": "school_player | #1 = Scan Table [ school_details ] Predicate [ Division <> 'Division 1' ] Output [ Division , Nickname ]"
    },
    {
        "id": "45453f3ddd704fa5c50a348407477eaa07543416d7760b11aaa35d203d7ba4bb",
        "question": "Show the denomination shared by more than one school.",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Denomination ] ; #2 = Aggregate [ #1 ] GroupBy [ Denomination ] Output [ Denomination , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Denomination ]"
    },
    {
        "id": "d7fd9fd6cf42df6c89fc2ebca31916cdc29fb61ccd8cb9ec4bd6ee6d1b761f47",
        "question": "What are the denomination more than one school have?",
        "parsing_tree": "school_player | #1 = Scan Table [ school ] Output [ Denomination ] ; #2 = Aggregate [ #1 ] GroupBy [ Denomination ] Output [ Denomination , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Denomination ]"
    },
    {
        "id": "ba7cdae55f124dee9a2f2e4a51d168c9ada366fe2b308592a0f927f74d332635",
        "question": "Find all the distinct district names ordered by city area in descending.",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Output [ City_Area , District_name ] ; #2 = Sort [ #1 ] OrderBy [ City_Area DESC ] Distinct [ true ] Output [ City_Area , District_name ]"
    },
    {
        "id": "08e9d98a651ad7cb8a5bd4c332ae5b7faf0a1ff7672d25b0197feb92e7c7295c",
        "question": "What are the different district names in order of descending city area?",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Output [ City_Area , District_name ] ; #2 = Sort [ #1 ] OrderBy [ City_Area DESC ] Distinct [ true ] Output [ City_Area , District_name ]"
    },
    {
        "id": "c65ab78717a81969cc94d87c8b3df75435032b9a63085f52d6d8d07b357ae64d",
        "question": "Find the list of page size which have more than 3 product listed",
        "parsing_tree": "store_product | #1 = Scan Table [ product ] Output [ max_page_size ] ; #2 = Aggregate [ #1 ] GroupBy [ max_page_size ] Output [ countstar AS Count_Star , max_page_size ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ max_page_size ]"
    },
    {
        "id": "8c323b1112feb5cb084ffc259fc3fc3321e507c22b34563587a134cb059d378d",
        "question": "What is the maximum page size for everything that has more than 3 products listed?",
        "parsing_tree": "store_product | #1 = Scan Table [ product ] Output [ max_page_size ] ; #2 = Aggregate [ #1 ] GroupBy [ max_page_size ] Output [ countstar AS Count_Star , max_page_size ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ max_page_size ]"
    },
    {
        "id": "a422b6ef8e77e936a640897926b8f7b0d39ec245c82f806f6ee7917996d9d163",
        "question": "Find the name and population of district with population between 200000 and 2000000",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Predicate [ City_Population >= 200000.0 AND City_Population <= 2000000.0 ] Output [ City_Population , District_name ]"
    },
    {
        "id": "86d48dfa7f5edb641f83eaeea527fa11a635a90b7b3037f6ac8da2d90392afbb",
        "question": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Predicate [ City_Population >= 200000.0 AND City_Population <= 2000000.0 ] Output [ City_Population , District_name ]"
    },
    {
        "id": "835f5efb71cc5589eaaaa15828e736fc206d8af6b1a9dd542762100d71a5fd39",
        "question": "Find the name all districts with city area greater than 10 or population larger than 100000",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Predicate [ City_Area > 10.0 OR City_Population > 100000.0 ] Output [ City_Area , City_Population , District_name ]"
    },
    {
        "id": "4a843a85fcd35ddbb2126c8ffae1f6aed5eb845629b0892d821b05f4830c1c70",
        "question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Predicate [ City_Area > 10.0 OR City_Population > 100000.0 ] Output [ City_Area , City_Population , District_name ]"
    },
    {
        "id": "0943623ff29eff19e44f92d8513cfeb7260399cd539d39ae125b47cf470bd44d",
        "question": "Which district has the largest population?",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Output [ City_Population , District_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ City_Population DESC ] Output [ City_Population , District_name ]"
    },
    {
        "id": "2a17926326c474db732c8fbb3c98f725a28e31eb38bc632eafff90d2fa602435",
        "question": "What is the name of the district with the most residents?",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Output [ City_Population , District_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ City_Population DESC ] Output [ City_Population , District_name ]"
    },
    {
        "id": "687b296b0ed6a562459158b831f40b90766fafa25c8786b5928affba8128ade3",
        "question": "Which district has the least area?",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Output [ City_Area , District_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ City_Area ASC ] Output [ City_Area , District_name ]"
    },
    {
        "id": "7bc4e88793d410fd88d0b7d89261a664a5b16176b10f01950d53878072b4b0bc",
        "question": "What is the name of the district with the smallest area?",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Output [ City_Area , District_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ City_Area ASC ] Output [ City_Area , District_name ]"
    },
    {
        "id": "fed88627637f53800cc910f0bc81337302455372a440e2d50d2c61859c1d6834",
        "question": "Find all types of store and number of them.",
        "parsing_tree": "store_product | #1 = Scan Table [ store ] Output [ Type ] ; #2 = Aggregate [ #1 ] GroupBy [ Type ] Output [ countstar AS Count_Star , Type ]"
    },
    {
        "id": "9839d19039ffb174db59897ad681e01daf0e7ac96895e7c23dab7f89f6c013e3",
        "question": "For each type of store, how many of them are there?",
        "parsing_tree": "store_product | #1 = Scan Table [ store ] Output [ Type ] ; #2 = Aggregate [ #1 ] GroupBy [ Type ] Output [ countstar AS Count_Star , Type ]"
    },
    {
        "id": "9523f51b85e5f1d6a6e66a6e3cef8b08b2312caab09ead8a6e5d0a0874c691cd",
        "question": "Find the names of all stores in Khanewal District.",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Predicate [ District_name = 'Khanewal District' ] Output [ District_name , District_ID ] ; #2 = Scan Table [ store_district ] Output [ Store_ID , District_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.District_ID = #2.District_ID ] Output [ #2.Store_ID ] ; #4 = Scan Table [ store ] Output [ Store_ID , Store_Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Store_ID = #4.Store_ID ] Output [ #4.Store_Name ]"
    },
    {
        "id": "94666582a64a4d2d362a2012c7fdc015c812ad6dd412431c3716aa699c9f1a93",
        "question": "What are the names of all the stores located in Khanewal District?",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Predicate [ District_name = 'Khanewal District' ] Output [ District_name , District_ID ] ; #2 = Scan Table [ store_district ] Output [ Store_ID , District_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.District_ID = #2.District_ID ] Output [ #2.Store_ID ] ; #4 = Scan Table [ store ] Output [ Store_ID , Store_Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Store_ID = #4.Store_ID ] Output [ #4.Store_Name ]"
    },
    {
        "id": "b625c572d9bbda1762e5cdfb59d544e16582fd6ef4ad45b888d2e0c2241c13c6",
        "question": "Find all the stores in the district with the most population.",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Output [ City_Population , District_ID ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ City_Population DESC ] Output [ City_Population , District_ID ] ; #3 = Scan Table [ store_district ] Output [ Store_ID , District_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.District_ID = #3.District_ID ] Output [ #3.Store_ID ] ; #5 = Scan Table [ store ] Output [ Store_ID , Store_Name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Store_ID = #5.Store_ID ] Output [ #5.Store_Name ]"
    },
    {
        "id": "532a5a65f66988197ffa96438a23f9d5fe177a3ba6a0526366019ad2ddaa8c85",
        "question": "What are the names of all the stores in the largest district by population?",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Output [ City_Population , District_ID ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ City_Population DESC ] Output [ City_Population , District_ID ] ; #3 = Scan Table [ store_district ] Output [ Store_ID , District_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.District_ID = #3.District_ID ] Output [ #3.Store_ID ] ; #5 = Scan Table [ store ] Output [ Store_ID , Store_Name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Store_ID = #5.Store_ID ] Output [ #5.Store_Name ]"
    },
    {
        "id": "0f06c95cb8c78b4b285c5576f12220685a23e15ff9478a39a3a1e609a17ef183",
        "question": "Which city is the headquarter of the store named \"Blackville\" in?",
        "parsing_tree": "store_product | #1 = Scan Table [ store ] Predicate [ Store_Name = 'Blackville' ] Output [ Store_ID , Store_Name ] ; #2 = Scan Table [ store_district ] Output [ Store_ID , District_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Store_ID = #2.Store_ID ] Output [ #2.District_ID ] ; #4 = Scan Table [ district ] Output [ Headquartered_City , District_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.District_ID = #4.District_ID ] Output [ #4.Headquartered_City ]"
    },
    {
        "id": "80174e7199e3a4be4c74812b03712ed7db0c317cf8b11d92fa229cbe0540dd08",
        "question": "What city is the headquarter of the store Blackville?",
        "parsing_tree": "store_product | #1 = Scan Table [ store ] Predicate [ Store_Name = 'Blackville' ] Output [ Store_ID , Store_Name ] ; #2 = Scan Table [ store_district ] Output [ Store_ID , District_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Store_ID = #2.Store_ID ] Output [ #2.District_ID ] ; #4 = Scan Table [ district ] Output [ Headquartered_City , District_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.District_ID = #4.District_ID ] Output [ #4.Headquartered_City ]"
    },
    {
        "id": "6b6e8dd2e2e5216c36eee59c2e2153067342654c52258ba03a29d976d887e3bc",
        "question": "Find the number of stores in each city.",
        "parsing_tree": "store_product | #1 = Scan Table [ store_district ] Output [ District_ID ] ; #2 = Scan Table [ district ] Output [ Headquartered_City , District_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.District_ID = #2.District_ID ] Output [ #2.Headquartered_City ] ; #4 = Aggregate [ #3 ] GroupBy [ Headquartered_City ] Output [ countstar AS Count_Star , Headquartered_City ]"
    },
    {
        "id": "b45b6c1a9ff3b2363321c46bcf29c19ad6491a41c62026162dbbd23b2d37fe63",
        "question": "How many stores are headquarted in each city?",
        "parsing_tree": "store_product | #1 = Scan Table [ store_district ] Output [ District_ID ] ; #2 = Scan Table [ district ] Output [ Headquartered_City , District_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.District_ID = #2.District_ID ] Output [ #2.Headquartered_City ] ; #4 = Aggregate [ #3 ] GroupBy [ Headquartered_City ] Output [ countstar AS Count_Star , Headquartered_City ]"
    },
    {
        "id": "f5a30954b45b819d491e7f2884908002e679ba672907366c064700912c0a905b",
        "question": "Find the city with the most number of stores.",
        "parsing_tree": "store_product | #1 = Scan Table [ store_district ] Output [ District_ID ] ; #2 = Scan Table [ district ] Output [ Headquartered_City , District_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.District_ID = #2.District_ID ] Output [ #2.Headquartered_City ] ; #4 = Aggregate [ #3 ] GroupBy [ Headquartered_City ] Output [ countstar AS Count_Star , Headquartered_City ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Headquartered_City ]"
    },
    {
        "id": "132342f5398c1db6d471e619bacbc40a85bd0e801290eb2097bbb6d74d4859f5",
        "question": "What is the city with the most number of flagship stores?",
        "parsing_tree": "store_product | #1 = Scan Table [ store_district ] Output [ District_ID ] ; #2 = Scan Table [ district ] Output [ Headquartered_City , District_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.District_ID = #2.District_ID ] Output [ #2.Headquartered_City ] ; #4 = Aggregate [ #3 ] GroupBy [ Headquartered_City ] Output [ countstar AS Count_Star , Headquartered_City ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Headquartered_City ]"
    },
    {
        "id": "cb9d515f6cfcffd4b9161c21ee39e597f308dbaf56a9f9ce4290ae663d58bffd",
        "question": "What is the average pages per minute color?",
        "parsing_tree": "store_product | #1 = Scan Table [ product ] Output [ pages_per_minute_color ] ; #2 = Aggregate [ #1 ] Output [ AVG(pages_per_minute_color) AS Avg_pages_per_minute_color ]"
    },
    {
        "id": "d74fc469e0fd21ecd02de3f6679783049543723965b8610e64bf860c685d47b0",
        "question": "What is the average number of pages per minute color?",
        "parsing_tree": "store_product | #1 = Scan Table [ product ] Output [ pages_per_minute_color ] ; #2 = Aggregate [ #1 ] Output [ AVG(pages_per_minute_color) AS Avg_pages_per_minute_color ]"
    },
    {
        "id": "1a3e428585b5adbc88f1f602e4a252b807a52b9b09d4ed42093073f4d5877212",
        "question": "What products are available at store named \"Miramichi\"?",
        "parsing_tree": "store_product | #1 = Scan Table [ store ] Predicate [ Store_Name = 'Miramichi' ] Output [ Store_ID , Store_Name ] ; #2 = Scan Table [ store_product ] Output [ Product_ID , Store_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Store_ID = #2.Store_ID ] Output [ #2.Product_ID ] ; #4 = Scan Table [ product ] Output [ product_id , product ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Product_ID = #4.product_id ] Output [ #4.product ]"
    },
    {
        "id": "fb3acaaf7a4eeff2510fda750d491635276ba2b32f4915e6ed737340b4a4f89d",
        "question": "What products are sold at the store named Miramichi?",
        "parsing_tree": "store_product | #1 = Scan Table [ store ] Predicate [ Store_Name = 'Miramichi' ] Output [ Store_ID , Store_Name ] ; #2 = Scan Table [ store_product ] Output [ Product_ID , Store_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Store_ID = #2.Store_ID ] Output [ #2.Product_ID ] ; #4 = Scan Table [ product ] Output [ product_id , product ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Product_ID = #4.product_id ] Output [ #4.product ]"
    },
    {
        "id": "cf3c19204be9776ec74e6b78af0890325928a44705ec2a4978bfc52e328fb647",
        "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "parsing_tree": "store_product | #1 = Scan Table [ product ] Predicate [ pages_per_minute_color < 5.0 AND max_page_size = 'A4' ] Output [ max_page_size , product , pages_per_minute_color ]"
    },
    {
        "id": "84d8f1857e1751fecbb6f92ff6dc063a6b1f56b37afa18688fb8837ddf93ffcc",
        "question": "What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?",
        "parsing_tree": "store_product | #1 = Scan Table [ product ] Predicate [ pages_per_minute_color < 5.0 AND max_page_size = 'A4' ] Output [ max_page_size , product , pages_per_minute_color ]"
    },
    {
        "id": "f715d36d5c186df800705880e143752a964574f9f5c3160d7ef7f4c956f658a1",
        "question": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.",
        "parsing_tree": "store_product | #1 = Scan Table [ product ] Predicate [ max_page_size = 'A4' OR pages_per_minute_color < 5.0 ] Output [ max_page_size , product , pages_per_minute_color ]"
    },
    {
        "id": "4fca30b5a079fbe1e1dc9be1372c3f5cd7690d103b9b1b9e148e848953071abb",
        "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?",
        "parsing_tree": "store_product | #1 = Scan Table [ product ] Predicate [ max_page_size = 'A4' OR pages_per_minute_color < 5.0 ] Output [ max_page_size , product , pages_per_minute_color ]"
    },
    {
        "id": "207b4e4341275c53746e65932cf33699fa83dd6b3caef728e331f7db5d1bb2db",
        "question": "Find all the product whose name contains the word \"Scanner\".",
        "parsing_tree": "store_product | #1 = Scan Table [ product ] Predicate [ product like '%Scanner%' ] Output [ product ]"
    },
    {
        "id": "b9611dd65d317aa222a3cb45bd47927447106bf821484e7a632dc020b7b4b668",
        "question": "What are all of the products whose name includes the substring \"Scanner\"?",
        "parsing_tree": "store_product | #1 = Scan Table [ product ] Predicate [ product like '%Scanner%' ] Output [ product ]"
    },
    {
        "id": "b9402283b67f0d7590294ddbd44e2e21a0535353b40bc795556dd6ec9aebd67a",
        "question": "Find the most prominent max page size among all the products.",
        "parsing_tree": "store_product | #1 = Scan Table [ product ] Output [ max_page_size ] ; #2 = Aggregate [ #1 ] GroupBy [ max_page_size ] Output [ countstar AS Count_Star , max_page_size ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , max_page_size ]"
    },
    {
        "id": "243f59d5067c67eb385a306e3f556389b9ada3f9146e91c4d595d422f8561858",
        "question": "What is the most common maximum page size?",
        "parsing_tree": "store_product | #1 = Scan Table [ product ] Output [ max_page_size ] ; #2 = Aggregate [ #1 ] GroupBy [ max_page_size ] Output [ countstar AS Count_Star , max_page_size ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , max_page_size ]"
    },
    {
        "id": "faef006ace11a6dca40ee4260f701f7d701401e7c6d2755268628b2a9e66fd87",
        "question": "Find the total population of the districts where the area is bigger than the average city area.",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Output [ City_Area ] ; #2 = Aggregate [ #1 ] Output [ AVG(City_Area) AS Avg_City_Area ] ; #3 = Scan Table [ district ] Output [ City_Area , City_Population ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.City_Area > #2.Avg_City_Area ] Output [ #3.City_Population ] ; #5 = Aggregate [ #4 ] Output [ SUM(City_Population) AS Sum_City_Population ]"
    },
    {
        "id": "49288d37433d29a30c6be71af492058e5cc659b7000a4819da384f8f766a0f0c",
        "question": "What is the total population for all the districts that have an area larger tahn the average city area?",
        "parsing_tree": "store_product | #1 = Scan Table [ district ] Output [ City_Area ] ; #2 = Aggregate [ #1 ] Output [ AVG(City_Area) AS Avg_City_Area ] ; #3 = Scan Table [ district ] Output [ City_Area , City_Population ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.City_Area > #2.Avg_City_Area ] Output [ #3.City_Population ] ; #5 = Aggregate [ #4 ] Output [ SUM(City_Population) AS Sum_City_Population ]"
    },
    {
        "id": "5545f267bfa7df4c8d2f6666377f45724541c46b82c4fb820e064eb4f7d96faf",
        "question": "Find the names of districts where have both city mall and village store type stores.",
        "parsing_tree": "store_product | #1 = Scan Table [ store ] Predicate [ Type = 'City Mall' ] Output [ Store_ID , Type ] ; #2 = Scan Table [ store_district ] Output [ Store_ID , District_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Store_ID = #2.Store_ID ] Output [ #2.District_ID ] ; #4 = Scan Table [ district ] Output [ District_name , District_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.District_ID = #4.District_ID ] Distinct [ true ] Output [ #4.District_name ] ; #6 = Scan Table [ store ] Predicate [ Type = 'Village Store' ] Output [ Store_ID , Type ] ; #7 = Scan Table [ store_district ] Output [ Store_ID , District_ID ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.Store_ID = #7.Store_ID ] Output [ #7.District_ID ] ; #9 = Scan Table [ district ] Output [ District_name , District_ID ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.District_ID = #9.District_ID ] Output [ #9.District_name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.District_name = #10.District_name ] Output [ #5.District_name ]"
    },
    {
        "id": "2453ea2f41edfebb2cb22c74a33f892bf477f12a89eeb0657edfde24404505ae",
        "question": "What are the names of the districts that have both mall and village store style shops?",
        "parsing_tree": "store_product | #1 = Scan Table [ store ] Predicate [ Type = 'City Mall' ] Output [ Store_ID , Type ] ; #2 = Scan Table [ store_district ] Output [ Store_ID , District_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Store_ID = #2.Store_ID ] Output [ #2.District_ID ] ; #4 = Scan Table [ district ] Output [ District_name , District_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.District_ID = #4.District_ID ] Distinct [ true ] Output [ #4.District_name ] ; #6 = Scan Table [ store ] Predicate [ Type = 'Village Store' ] Output [ Store_ID , Type ] ; #7 = Scan Table [ store_district ] Output [ Store_ID , District_ID ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.Store_ID = #7.Store_ID ] Output [ #7.District_ID ] ; #9 = Scan Table [ district ] Output [ District_name , District_ID ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.District_ID = #9.District_ID ] Output [ #9.District_name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.District_name = #10.District_name ] Output [ #5.District_name ]"
    },
    {
        "id": "ba784375ce3c5c82d93e81f06fa22ce19e02b702e2a55b96150083fa7ac65dc8",
        "question": "What is the total enrollment number of all colleges?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ enr ] ; #2 = Aggregate [ #1 ] Output [ SUM(enr) AS Sum_enr ]"
    },
    {
        "id": "591ce418644fe66016ec92d9817a935ff128ce860e15b1aa61395a4c10c3bc6c",
        "question": "How many students are enrolled in college?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ enr ] ; #2 = Aggregate [ #1 ] Output [ SUM(enr) AS Sum_enr ]"
    },
    {
        "id": "4ccc9d459588be85b9b7f131bf6f20e43c5fcdbea2971db64e569cc94a85cc79",
        "question": "What is the average enrollment number?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ enr ] ; #2 = Aggregate [ #1 ] Output [ AVG(enr) AS Avg_enr ]"
    },
    {
        "id": "513d722ff439a22b70b3cc7073bc6470118bf3a7b89f24551b531db29d14dbcb",
        "question": "How many students, on average, does each college have enrolled?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ enr ] ; #2 = Aggregate [ #1 ] Output [ AVG(enr) AS Avg_enr ]"
    },
    {
        "id": "53c85ed0c471cdab70dda29ab3a7254ad6a9c9a26e0c533d211d5c1bfe14ba66",
        "question": "How many colleges in total?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7d18ec795d0e7e6522963b6f774bb2b978ad2991aa2436589b626d0d9b74fd7b",
        "question": "How many different colleges are there?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "922187d3a5b80b6333368c2d2dd14c4ea522b04da16d6cc40882fc00a881bce8",
        "question": "How many players have more than 1000 hours of training?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ HS > 1000.0 ] Output [ HS ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cd327c78eefc3f502a9a879567d25bef5f1f2961edb8d44e3376739c5717aca3",
        "question": "How many different players trained for more than 1000 hours?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ HS > 1000.0 ] Output [ HS ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d83ab59f70d135e00026c382b5431ac5c47b387bb68051223e2265198a1f7478",
        "question": "How many colleges has more than 15000 students?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Predicate [ enr > 15000.0 ] Output [ enr ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0f69fe7b9becb89409940a2a0245afaf5245dc958d8ed089512361a736702973",
        "question": "What is the number of colleges with a student population greater than 15000?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Predicate [ enr > 15000.0 ] Output [ enr ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "fa7cf00536e1738f0aa0db17abe631a1a940654bdc5fe299b1cdb08e0e5b6595",
        "question": "What is the average training hours of all players?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Output [ HS ] ; #2 = Aggregate [ #1 ] Output [ AVG(HS) AS Avg_HS ]"
    },
    {
        "id": "a899ac2d81df3baef1179e78ffb338f2b5dc947a943afe9c0d646b75424a2186",
        "question": "How many hours do the players train on average?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Output [ HS ] ; #2 = Aggregate [ #1 ] Output [ AVG(HS) AS Avg_HS ]"
    },
    {
        "id": "b6fab1b97ac89bd069c93d0394d5294770e66a7bd2c4bbc2df058235e2b6c8e2",
        "question": "Find the name and training hours of players whose hours are below 1500.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ HS < 1500.0 ] Output [ pName , HS ]"
    },
    {
        "id": "eac39fc139337e1bcef3446e8ab24e93e2f82c0eebed5c99808d2d520a6ffb65",
        "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ HS < 1500.0 ] Output [ pName , HS ]"
    },
    {
        "id": "91eedb04068c736a52e0caa1b1a25fd993784338b88e18f1c3967c9277908617",
        "question": "How many different colleges do attend the tryout test?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Distinct [ true ] Output [ cName ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "45675dae0583a012f6669407200c6058cbae2f939950abb84367f47785918c57",
        "question": "How many different colleges were represented at tryouts?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Distinct [ true ] Output [ cName ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ed66ce0f045d2d7dc8bb8652eab4802c2e9c84e990b9fb2737418c143af4be73",
        "question": "What are the unique types of player positions in the tryout?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Distinct [ true ] Output [ pPos ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT pPos) AS Count_Dist_pPos ]"
    },
    {
        "id": "fdc67033aa11e8109f1b9ba426aaba7dc838abacf10e4c073e2f1c2205fd2e79",
        "question": "What are the different types of player positions?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Distinct [ true ] Output [ pPos ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT pPos) AS Count_Dist_pPos ]"
    },
    {
        "id": "cf0cf6680809f816c7387948f5948ad8bf8ee930e68fa8f25714e603f385a7f7",
        "question": "How many students got accepted after the tryout?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' ] Output [ decision ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "3d61cb2ef8fc8ea9b9f80de6daf355f8b8cfcf0883b9c097e07890b0311b0232",
        "question": "How many students received a yes from tryouts?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' ] Output [ decision ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2a5f1d936e69499c8009701fe2d006675c376c3bd4861b12854842f6fc7f5bec",
        "question": "How many students whose are playing the role of goalie?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Output [ pPos ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "dbcba371b205e33a45105974b7b6ab81ad62afeeebcf4b431b751038f03e6272",
        "question": "What is the number of students playing as a goalie?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Output [ pPos ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e8247cfc58736236cde00bac3215895f96bca09940430c24bd48bed9479f13fc",
        "question": "Find the max, average and min training hours of all players.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Output [ HS ] ; #2 = Aggregate [ #1 ] Output [ MIN(HS) AS Min_HS , AVG(HS) AS Avg_HS , MAX(HS) AS Max_HS ]"
    },
    {
        "id": "dd09ec37305167698436bf3fd71dde9a154da6ce3c85a9de0c83a2e135a548aa",
        "question": "What is the average, maximum, and minimum for the number of hours spent training?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Output [ HS ] ; #2 = Aggregate [ #1 ] Output [ MIN(HS) AS Min_HS , AVG(HS) AS Avg_HS , MAX(HS) AS Max_HS ]"
    },
    {
        "id": "79ab7f81bea369732655a780c13005e0575b6f740ce56531024cca51bd3cadc9",
        "question": "What is average enrollment of colleges in the state FL?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Predicate [ state = 'FL' ] Output [ state , enr ] ; #2 = Aggregate [ #1 ] Output [ AVG(enr) AS Avg_enr ]"
    },
    {
        "id": "35b2e75d1e757b6562bd38f731560e39a59139170f5bc96e5b7789e2652f1937",
        "question": "What is average number of students enrolled in Florida colleges?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Predicate [ state = 'FL' ] Output [ state , enr ] ; #2 = Aggregate [ #1 ] Output [ AVG(enr) AS Avg_enr ]"
    },
    {
        "id": "3eafa590cf4f175b64960ce259811d7e0ddb7113dcdbbd4c93a0a869a7eb05a4",
        "question": "What are the names of players whose training hours is between 500 and 1500?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ HS >= 500.0 AND HS <= 1500.0 ] Output [ pName , HS ]"
    },
    {
        "id": "bd844e45ddee3a500931109f4e8d5bd7d06ca2357b98c343c0063dd327a845d9",
        "question": "What are the names of players who train between 500 and 1500 hours?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ HS >= 500.0 AND HS <= 1500.0 ] Output [ pName , HS ]"
    },
    {
        "id": "7a7fa056b5ec857dbe1f47e2bd1ef5b7d93e9cea66a0af095800a79a82d831a4",
        "question": "Find the players whose names contain letter 'a'.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ pName like '%a%' ] Distinct [ true ] Output [ pName ]"
    },
    {
        "id": "662f37bace914241b51324ca6fcea606f35434c9e140e9d28f81dfb3107bca9e",
        "question": "Who are the players that have names containing the letter a?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ pName like '%a%' ] Distinct [ true ] Output [ pName ]"
    },
    {
        "id": "27f7686820343edcaf981e0e061345393c3afdda91a2bcba2c3e4b4d7b2cbfe6",
        "question": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Predicate [ enr > 10000.0 AND state = 'LA' ] Output [ cName , state , enr ]"
    },
    {
        "id": "ae6c8006245d240df3fd743cbadea37184d5a5e420a4b9c203e0484cacb1c0aa",
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Predicate [ enr > 10000.0 AND state = 'LA' ] Output [ cName , state , enr ]"
    },
    {
        "id": "32a9f5e0b3a27fd4b25432d72dcb85f298a70561d4a119b78964f2c68d9f7d3f",
        "question": "List all information about college sorted by enrollment number in the ascending order.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ cName , state , enr ] ; #2 = Sort [ #1 ] OrderBy [ enr ASC ] Output [ cName , state , enr ]"
    },
    {
        "id": "d32198f16ade46899490093e42c5ba4ba7a9d8c1820a701cf47bde305f980cc0",
        "question": "What information do you have on colleges sorted by increasing enrollment numbers?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ cName , state , enr ] ; #2 = Sort [ #1 ] OrderBy [ enr ASC ] Output [ cName , state , enr ]"
    },
    {
        "id": "18768901a4bb818db2a9ad22479421fe69313455d5b0fdd63d953c0dcefde611",
        "question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Predicate [ enr > 18000.0 ] Output [ cName , enr ] ; #2 = Sort [ #1 ] OrderBy [ cName ASC ] Output [ cName , enr ]"
    },
    {
        "id": "283acc9e5b52c4c5a1650a47ead64bc87a3d678b1b397a0f4389c1f78cb9ee92",
        "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Predicate [ enr > 18000.0 ] Output [ cName , enr ] ; #2 = Sort [ #1 ] OrderBy [ cName ASC ] Output [ cName , enr ]"
    },
    {
        "id": "5892498616b6451995e78ad971eac0a9446b11246c65e7dcc356141a8535d73c",
        "question": "Find the name of players whose card is yes in the descending order of training hours.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ yCard = 'yes' ] Output [ pName , HS , yCard ] ; #2 = Sort [ #1 ] OrderBy [ HS DESC ] Output [ pName , HS ]"
    },
    {
        "id": "9a547a3992f94c272bae3efb5453986fb9f4e97ba2dbeb39e7ca4b8d4145adc0",
        "question": "What are the name of the players who received a card in descending order of the hours of training?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ yCard = 'yes' ] Output [ pName , HS , yCard ] ; #2 = Sort [ #1 ] OrderBy [ HS DESC ] Output [ pName , HS ]"
    },
    {
        "id": "3266834d0be10554e51dcdf4ab783b0b827eecfa406cc77934b4d561b6d1c50d",
        "question": "Find the name of different colleges involved in the tryout in alphabetical order.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Output [ cName ] ; #2 = Sort [ #1 ] OrderBy [ cName ASC ] Distinct [ true ] Output [ cName ]"
    },
    {
        "id": "938495b0a89d67041973444685accefa980f31be3e46f62cf10879e99d18e388",
        "question": "What are the different names of the colleges involved in the tryout in alphabetical order?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Output [ cName ] ; #2 = Sort [ #1 ] OrderBy [ cName ASC ] Distinct [ true ] Output [ cName ]"
    },
    {
        "id": "e00f88c2e22296f3b090c273c8512cd451aa96c33084bdb72edc5e44645897b2",
        "question": "Which position is most popular among players in the tryout?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Output [ pPos ] ; #2 = Aggregate [ #1 ] GroupBy [ pPos ] Output [ countstar AS Count_Star , pPos ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ pPos , Count_Star ]"
    },
    {
        "id": "f116d213eea8a41b0927db58ebb6d026256ea6abb45e36adf47db3b7857b57bd",
        "question": "What was the most popular position at tryouts?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Output [ pPos ] ; #2 = Aggregate [ #1 ] GroupBy [ pPos ] Output [ countstar AS Count_Star , pPos ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ pPos , Count_Star ]"
    },
    {
        "id": "10f9bec37eb45a7cbb7b8fb65208a9afbb1c35594c178cf1f66a0af8aa16396d",
        "question": "Find the number of students who participate in the tryout for each college ordered by descending count.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Output [ cName ] ; #2 = Aggregate [ #1 ] GroupBy [ cName ] Output [ cName , countstar AS Count_Star ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ cName , Count_Star ]"
    },
    {
        "id": "838087ee854d290f1c83cf1c3f5e639ec7f748dc596cfc7cbc6e865486bc48e6",
        "question": "How many students participated in tryouts for each college by descennding count?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Output [ cName ] ; #2 = Aggregate [ #1 ] GroupBy [ cName ] Output [ cName , countstar AS Count_Star ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ cName , Count_Star ]"
    },
    {
        "id": "3bc33ac92fc7c634d29618716e3d5725447182d1b1d53ee6b759e172b7426ea6",
        "question": "What is minimum hours of the students playing in different position?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Output [ pID , HS ] ; #2 = Scan Table [ Tryout ] Output [ pID , pPos ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.pPos , #1.HS ] ; #4 = Aggregate [ #3 ] GroupBy [ pPos ] Output [ pPos , MIN(HS) AS Min_HS ]"
    },
    {
        "id": "502d3135695b8b52c078603ebdd113c36e2616f36b62fd7c3efa42041913aa2e",
        "question": "For each position, what is the minimum time students spent practicing?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Output [ pID , HS ] ; #2 = Scan Table [ Tryout ] Output [ pID , pPos ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.pPos , #1.HS ] ; #4 = Aggregate [ #3 ] GroupBy [ pPos ] Output [ pPos , MIN(HS) AS Min_HS ]"
    },
    {
        "id": "11a3ff148cf3040859d23b81f608187b4c228d71ca4da9ae2cb9c8dbcbe89265",
        "question": "What are the names of schools with the top 3 largest size?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ cName , enr ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ enr DESC ] Output [ cName , enr ]"
    },
    {
        "id": "ea6f01943b1592981c1f0fa5efa3450113cfb2f66083f7c7cdb61a74f866c825",
        "question": "What are the names of the schools with the top 3 largest class sizes?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ cName , enr ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ enr DESC ] Output [ cName , enr ]"
    },
    {
        "id": "51c4b336d3a3262fed2148cbceddf378848aeeb53d31f66af967833874d3f7ab",
        "question": "Find the states where have some college students in tryout.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ cName , state ] ; #2 = Scan Table [ Tryout ] Output [ cName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Distinct [ true ] Output [ #1.state ]"
    },
    {
        "id": "eb3fa9023d8a81e7fb91127e8cf7cf326cd9bf0ac94392751d93dbaa18319cd6",
        "question": "What are the different states that have students trying out?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ cName , state ] ; #2 = Scan Table [ Tryout ] Output [ cName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Distinct [ true ] Output [ #1.state ]"
    },
    {
        "id": "5f489efe275a2f374f8c851a39f6ddc4165de4e235e9939a3fe4b6ca24041b44",
        "question": "Find the states where have some college students in tryout and their decisions are yes.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' ] Output [ cName , decision ] ; #2 = Scan Table [ College ] Output [ cName , state ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Distinct [ true ] Output [ #2.state ]"
    },
    {
        "id": "a788396e1a9dfc33151afbae777c500d5c648eeba9c274fe113548efab971be5",
        "question": "What are the different states that had students successfully try out?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' ] Output [ cName , decision ] ; #2 = Scan Table [ College ] Output [ cName , state ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Distinct [ true ] Output [ #2.state ]"
    },
    {
        "id": "e12cd7ef8a4f49d41d99f9b4400f35650d25cb1de2b3480332268f076a92fdb1",
        "question": "Find the name and college of students whose decisions are yes in the tryout.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' ] Output [ cName , pID , decision ] ; #2 = Scan Table [ Player ] Output [ pID , pName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.pName , #1.cName ]"
    },
    {
        "id": "0927bf2dc827da8109985c482141b9f2deee89b40a00ac2c06d411b9469b8809",
        "question": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' ] Output [ cName , pID , decision ] ; #2 = Scan Table [ Player ] Output [ pID , pName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.pName , #1.cName ]"
    },
    {
        "id": "0a2fe3000bdf5c0d93e3310d936f468ac5c4b0313ea39163ebee6a02d29b839b",
        "question": "Find the name of all students who were in the tryout sorted in alphabetic order.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Output [ pID ] ; #2 = Scan Table [ Player ] Output [ pID , pName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.pName ] ; #4 = Sort [ #3 ] OrderBy [ pName ASC ] Output [ pName ]"
    },
    {
        "id": "03a5070010913b80e18d8c6b20946156cc4f96eaed119a87c393fefcc5818e8f",
        "question": "What are the names of all students who tried out in alphabetical order?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Output [ pID ] ; #2 = Scan Table [ Player ] Output [ pID , pName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.pName ] ; #4 = Sort [ #3 ] OrderBy [ pName ASC ] Output [ pName ]"
    },
    {
        "id": "2dab71127d9f5fdfb8d634ae1111ffa0b70fd99243d47aab5dbe77028defa0b7",
        "question": "Find the name and hours of the students whose tryout decision is yes.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' ] Output [ pID , decision ] ; #2 = Scan Table [ Player ] Output [ pID , pName , HS ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.pName , #2.HS ]"
    },
    {
        "id": "d3631f5d2fd5e5dc7b3093f99843925c92f7ba8eeec8c867271e89fa91e17a95",
        "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' ] Output [ pID , decision ] ; #2 = Scan Table [ Player ] Output [ pID , pName , HS ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.pName , #2.HS ]"
    },
    {
        "id": "e6dea03cbeb83f36ae4b5867d931661d22a4915d384286a48ca7e0f25a7e02dd",
        "question": "Find the states of the colleges that have students in the tryout who played in striker position.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ pPos = 'striker' ] Output [ cName , pPos ] ; #2 = Scan Table [ College ] Output [ cName , state ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Output [ #2.state ]"
    },
    {
        "id": "5906a1db2bcaa9ab30faab3bba5dcfa68529a62a216220a7062d74da71812173",
        "question": "What are the states of the colleges where students who tried out for the striker position attend?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ pPos = 'striker' ] Output [ cName , pPos ] ; #2 = Scan Table [ College ] Output [ cName , state ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Output [ #2.state ]"
    },
    {
        "id": "cd30b5831fc01ef0cb8abdc43a7b0e4d03104e5900eb24ffcabc190cec6b5d4e",
        "question": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' AND pPos = 'striker' ] Output [ pID , pPos , decision ] ; #2 = Scan Table [ Player ] Output [ pID , pName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.pName ]"
    },
    {
        "id": "00728c628650c6d7ef1f33e9a3a47347fb17bcccafd346e4eb5d4aaeb87aafc8",
        "question": "What are the names of all students who successfully tried out for the position of striker?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' AND pPos = 'striker' ] Output [ pID , pPos , decision ] ; #2 = Scan Table [ Player ] Output [ pID , pName ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.pName ]"
    },
    {
        "id": "934e6ae0bd8e02d981bd8aa6fd378534f62120cfa4f30c1f10e23d5acf2cdf2d",
        "question": "Find the state of the college which player Charles is attending.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ pName = 'Charles' ] Output [ pID , pName ] ; #2 = Scan Table [ Tryout ] Output [ cName , pID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.cName ] ; #4 = Scan Table [ College ] Output [ cName , state ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.cName = #4.cName ] Output [ #4.state ]"
    },
    {
        "id": "f9763ce9d3e0077174e71686c30eca22e4550a6c25ebfe368ca355437fd8360a",
        "question": "In which state is the college that Charles attends?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ pName = 'Charles' ] Output [ pID , pName ] ; #2 = Scan Table [ Tryout ] Output [ cName , pID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.cName ] ; #4 = Scan Table [ College ] Output [ cName , state ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.cName = #4.cName ] Output [ #4.state ]"
    },
    {
        "id": "94f9a2c3240fa5e2b35ac1b36a3c6124f1b8465315a563d50b6b4c49b703effb",
        "question": "Find the average and maximum hours for the students whose tryout decision is yes.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' ] Output [ pID , decision ] ; #2 = Scan Table [ Player ] Output [ pID , HS ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.HS ] ; #4 = Aggregate [ #3 ] Output [ AVG(HS) AS Avg_HS , MAX(HS) AS Max_HS ]"
    },
    {
        "id": "54e18bf60355b4383370e2d3b14dea22e1712b773d77b573c39cd26265379cdb",
        "question": "What is the average and maximum number of hours students who made the team practiced?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' ] Output [ pID , decision ] ; #2 = Scan Table [ Player ] Output [ pID , HS ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.HS ] ; #4 = Aggregate [ #3 ] Output [ AVG(HS) AS Avg_HS , MAX(HS) AS Max_HS ]"
    },
    {
        "id": "2a10b38c03f301fe0c1333638df2aed572f72ba2efc329b1fc5ff0402bef8b2f",
        "question": "Find the average hours for the students whose tryout decision is no.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'no' ] Output [ pID , decision ] ; #2 = Scan Table [ Player ] Output [ pID , HS ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.HS ] ; #4 = Aggregate [ #3 ] Output [ AVG(HS) AS Avg_HS ]"
    },
    {
        "id": "474a7d1dee4510f65b0f289014e8ba931b107f789bf9a44e3d07ca461b5f07b8",
        "question": "What is the average number of hours spent practicing for students who got rejected?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'no' ] Output [ pID , decision ] ; #2 = Scan Table [ Player ] Output [ pID , HS ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.HS ] ; #4 = Aggregate [ #3 ] Output [ AVG(HS) AS Avg_HS ]"
    },
    {
        "id": "23cb306dad167495e28505b0f74d8a89b34acffd6d6277aa55b8a401c1adaada",
        "question": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ HS > 1000.0 ] Output [ pID , HS ] ; #2 = Scan Table [ Tryout ] Output [ pID , pPos ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.pPos , #1.HS ] ; #4 = Aggregate [ #3 ] GroupBy [ pPos ] Output [ pPos , MAX(HS) AS Max_HS ]"
    },
    {
        "id": "d82e551100616d49a0dd136ca0123f5ef52cd29258f240c4e34219ea81d7bcb2",
        "question": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ HS > 1000.0 ] Output [ pID , HS ] ; #2 = Scan Table [ Tryout ] Output [ pID , pPos ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.pPos , #1.HS ] ; #4 = Aggregate [ #3 ] GroupBy [ pPos ] Output [ pPos , MAX(HS) AS Max_HS ]"
    },
    {
        "id": "08271435689c7f21e9369dccceb77afd4c58f428b7bf4d99073781dc539f49ed",
        "question": "Which colleges do the tryout players whose name starts with letter D go to?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ pName like 'D%' ] Output [ pID , pName ] ; #2 = Scan Table [ Tryout ] Output [ cName , pID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.cName ]"
    },
    {
        "id": "7425e126574a3133d2ad4534bb433f9762260976ceb75d45f7eebd20f1ce9ac4",
        "question": "Which colleges does each player with a name that starts with the letter D  who tried out go to?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Player ] Predicate [ pName like 'D%' ] Output [ pID , pName ] ; #2 = Scan Table [ Tryout ] Output [ cName , pID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.pID = #2.pID ] Output [ #2.cName ]"
    },
    {
        "id": "988c096c071bb67fd7bc77b4a5f51588663e91dc971970b016d96c57473810e6",
        "question": "Which college has any student who is a goalie and succeeded in the tryout.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' AND pPos = 'goalie' ] Output [ cName , pPos , decision ]"
    },
    {
        "id": "8fbea47c06bb5acb09b19d7059251fec16c021b372a39651e0b2f65cdf995f42",
        "question": "What college has a student who successfully made the team in the role of a goalie?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' AND pPos = 'goalie' ] Output [ cName , pPos , decision ]"
    },
    {
        "id": "ca6dec221d047cfc4cba2391b7f6ddcb5cfef27f8e92bb19e22ee3d4fc0f7f5a",
        "question": "Find the name of the tryout players who are from the college with largest size.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ cName , enr ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ enr DESC ] Output [ cName , enr ] ; #3 = Scan Table [ Tryout ] Output [ cName , pID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.cName = #3.cName ] Output [ #3.pID ] ; #5 = Scan Table [ Player ] Output [ pID , pName ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.pID = #5.pID ] Output [ #5.pName ]"
    },
    {
        "id": "1c8b20252704bd8d308274682d7a0aa02ea29c2029fd9d010bb8192c7829a940",
        "question": "What are the names of all tryout participants who are from the largest college?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ cName , enr ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ enr DESC ] Output [ cName , enr ] ; #3 = Scan Table [ Tryout ] Output [ cName , pID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.cName = #3.cName ] Output [ #3.pID ] ; #5 = Scan Table [ Player ] Output [ pID , pName ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.pID = #5.pID ] Output [ #5.pName ]"
    },
    {
        "id": "6d5a3be038de36886d309da68b7f1baf62f5f4217a73f61eea32f001cbac7bd6",
        "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' ] Output [ cName , decision ] ; #2 = Scan Table [ College ] Output [ cName , state , enr ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Distinct [ true ] Output [ #2.state , #2.enr ]"
    },
    {
        "id": "0e93174c681159b60b1eaaef2dff76d8f885bedde93992ad3c9ff66b1469a4bd",
        "question": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ decision = 'yes' ] Output [ cName , decision ] ; #2 = Scan Table [ College ] Output [ cName , state , enr ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Distinct [ true ] Output [ #2.state , #2.enr ]"
    },
    {
        "id": "10812055d06977c3cb90484e3532bd66ccda58b30692376d3a1e6d2dad98e3cf",
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Predicate [ enr < 13000.0 AND state = 'AZ' ] Output [ cName , state , enr ] ; #2 = Scan Table [ College ] Predicate [ enr > 15000.0 AND state = 'LA' ] Output [ cName , state , enr ] ; #3 = Union [ #1 , #2 ] Output [ #1.cName ]"
    },
    {
        "id": "207830ba920068afbb263daf621f1094a6320787a23bd8ada9196721183955cd",
        "question": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Predicate [ enr < 13000.0 AND state = 'AZ' ] Output [ cName , state , enr ] ; #2 = Scan Table [ College ] Predicate [ enr > 15000.0 AND state = 'LA' ] Output [ cName , state , enr ] ; #3 = Union [ #1 , #2 ] Output [ #1.cName ]"
    },
    {
        "id": "cf679e9eee5a4ddc4262d31ebcbac0819b186c6e7a6433533fd84bf5a488ec14",
        "question": "Find the names of schools that have some students playing in goalie and mid positions.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Distinct [ true ] Output [ cName , pPos ] ; #2 = Scan Table [ Tryout ] Predicate [ pPos = 'mid' ] Output [ cName , pPos ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Output [ #1.cName ]"
    },
    {
        "id": "6a5d05d44708b43d26218f038653a6fd5fee6e51f99093eb8441670bf112ba92",
        "question": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Distinct [ true ] Output [ cName , pPos ] ; #2 = Scan Table [ Tryout ] Predicate [ pPos = 'mid' ] Output [ cName , pPos ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Output [ #1.cName ]"
    },
    {
        "id": "0fbb02182dcb259fc7167e53c2cbb3e6b7b655d9679e8d05308ecb039b14217a",
        "question": "Find the names of states that have some college students playing in goalie and mid positions.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Output [ cName , pPos ] ; #2 = Scan Table [ College ] Output [ cName , state ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Distinct [ true ] Output [ #2.state ] ; #4 = Scan Table [ Tryout ] Predicate [ pPos = 'mid' ] Output [ cName , pPos ] ; #5 = Scan Table [ College ] Output [ cName , state ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.cName = #5.cName ] Output [ #5.state ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.state = #6.state ] Output [ #3.state ]"
    },
    {
        "id": "a717be4b25378179a02d78f506666dff0ca241b2d9d04da8880bfcbfa69c148e",
        "question": "What are the names of the states that have some college students playing in the positions of goalie and mid-field?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Output [ cName , pPos ] ; #2 = Scan Table [ College ] Output [ cName , state ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Distinct [ true ] Output [ #2.state ] ; #4 = Scan Table [ Tryout ] Predicate [ pPos = 'mid' ] Output [ cName , pPos ] ; #5 = Scan Table [ College ] Output [ cName , state ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.cName = #5.cName ] Output [ #5.state ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.state = #6.state ] Output [ #3.state ]"
    },
    {
        "id": "1a2274155e9e736ccb5f9e360df9275ded9a6ccffbd92a43731d1adfc50ab52c",
        "question": "Find the names of schools that have some players in the mid position but not in the goalie position.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ pPos = 'mid' ] Distinct [ true ] Output [ cName , pPos ] ; #2 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Output [ cName , pPos ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Output [ #1.cName ]"
    },
    {
        "id": "b1f32e561d5f3d3c71582b9eb553cfa5268679fdc8fba5e0b21c6e95e90742d6",
        "question": "What are the names of the schools with some players in the mid position but no goalies?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ pPos = 'mid' ] Distinct [ true ] Output [ cName , pPos ] ; #2 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Output [ cName , pPos ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Output [ #1.cName ]"
    },
    {
        "id": "8ba0c60c2c5b25ac5ccc7aa046e2eaa4fc2250a867aa87d8844520eeea873b90",
        "question": "Find the names of states that have some college students playing in the mid position but not in the goalie position.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ pPos = 'mid' ] Output [ cName , pPos ] ; #2 = Scan Table [ College ] Output [ cName , state ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Distinct [ true ] Output [ #2.state ] ; #4 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Output [ cName , pPos ] ; #5 = Scan Table [ College ] Output [ cName , state ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.cName = #5.cName ] Output [ #5.state ] ; #7 = Except [ #3 , #6 ] Predicate [ #3.state = #6.state ] Output [ #3.state ]"
    },
    {
        "id": "58bd0ed68e84b2d5648d36edac7f0bc8be86dddb804a55c15fb0eb0d3b560211",
        "question": "What are the names of all the states with college students playing in the mid position but no goalies?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ pPos = 'mid' ] Output [ cName , pPos ] ; #2 = Scan Table [ College ] Output [ cName , state ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Distinct [ true ] Output [ #2.state ] ; #4 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Output [ cName , pPos ] ; #5 = Scan Table [ College ] Output [ cName , state ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.cName = #5.cName ] Output [ #5.state ] ; #7 = Except [ #3 , #6 ] Predicate [ #3.state = #6.state ] Output [ #3.state ]"
    },
    {
        "id": "317295f3891e8df0b9e0f8fd89bacea4755f2147eebca72bf0f758fe6e5935d9",
        "question": "How many states that have some college students playing in the mid position but not in the goalie position.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ pPos = 'mid' ] Output [ cName , pPos ] ; #2 = Scan Table [ College ] Output [ cName , state ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Distinct [ true ] Output [ #2.state ] ; #4 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Output [ cName , pPos ] ; #5 = Scan Table [ College ] Output [ cName , state ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.cName = #5.cName ] Output [ #5.state ] ; #7 = Except [ #3 , #6 ] Predicate [ #3.state = #6.state ] Output [ 1 AS One ] ; #8 = Aggregate [ #7 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "230db5ee4d212a2e5d63e48c20930b0b90cc629ed7f7e2c6afe178911ff70262",
        "question": "What is the count of states with college students playing in the mid position but not as goalies?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ Tryout ] Predicate [ pPos = 'mid' ] Output [ cName , pPos ] ; #2 = Scan Table [ College ] Output [ cName , state ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.cName = #2.cName ] Distinct [ true ] Output [ #2.state ] ; #4 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Output [ cName , pPos ] ; #5 = Scan Table [ College ] Output [ cName , state ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.cName = #5.cName ] Output [ #5.state ] ; #7 = Except [ #3 , #6 ] Predicate [ #3.state = #6.state ] Output [ 1 AS One ] ; #8 = Aggregate [ #7 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1b10d89309f892b3a9d11c017414f74968878fcc63174e3838dbe1677edc891b",
        "question": "Find the states where have the colleges whose enrollments are less than the largest size.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ enr ] ; #2 = Aggregate [ #1 ] Output [ MAX(enr) AS Max_enr ] ; #3 = Scan Table [ College ] Output [ state , enr ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.enr < #2.Max_enr ] Distinct [ true ] Output [ #3.state ]"
    },
    {
        "id": "c1e0af4ef06fbd4224d5d478c6ea50436698ea652747ef0494953e3ac2ebed96",
        "question": "What are the states with colleges that have enrollments less than the some other college?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ enr ] ; #2 = Aggregate [ #1 ] Output [ MAX(enr) AS Max_enr ] ; #3 = Scan Table [ College ] Output [ state , enr ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.enr < #2.Max_enr ] Distinct [ true ] Output [ #3.state ]"
    },
    {
        "id": "adb2b069a92fbde3242ee1ab590e3d0c3c96cfddde57734b8a6424b727940854",
        "question": "Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Predicate [ state = 'FL' ] Output [ state , enr ] ; #2 = Aggregate [ #1 ] Output [ MIN(enr) AS Min_enr ] ; #3 = Scan Table [ College ] Output [ cName , enr ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.enr > #2.Min_enr ] Output [ #3.cName ]"
    },
    {
        "id": "baf217b109bdb62509b36b3be31714ce755b1606b1e507a83a3fe061eed23f23",
        "question": "What are the names of the colleges that are larger than at least one college in Florida?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Predicate [ state = 'FL' ] Output [ state , enr ] ; #2 = Aggregate [ #1 ] Output [ MIN(enr) AS Min_enr ] ; #3 = Scan Table [ College ] Output [ cName , enr ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.enr > #2.Min_enr ] Output [ #3.cName ]"
    },
    {
        "id": "38b9083d062d2b43fc8ea58185755c4de4d36434908563c4cdc0b08cdd38c271",
        "question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Predicate [ state = 'FL' ] Output [ state , enr ] ; #2 = Aggregate [ #1 ] Output [ MAX(enr) AS Max_enr ] ; #3 = Scan Table [ College ] Output [ cName , enr ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.enr > #2.Max_enr ] Output [ #3.cName ]"
    },
    {
        "id": "a501ed018c2d8ff3db8181a8f594581583322a161453268e1867bc6fdc2c1792",
        "question": "What are the names of all colleges with a larger enrollment than the largest college in Florida?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Predicate [ state = 'FL' ] Output [ state , enr ] ; #2 = Aggregate [ #1 ] Output [ MAX(enr) AS Max_enr ] ; #3 = Scan Table [ College ] Output [ cName , enr ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.enr > #2.Max_enr ] Output [ #3.cName ]"
    },
    {
        "id": "d6cfbe261c0f047ddbefca52b733734bf1ea7b371834d29fdea70455afbe1f25",
        "question": "What is the total number of enrollment of schools that do not have any goalie player?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ cName , enr ] ; #2 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Output [ cName , pPos ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.cName = #1.cName ] Output [ #1.enr ] ; #4 = Aggregate [ #3 ] Output [ SUM(enr) AS Sum_enr ]"
    },
    {
        "id": "6ff57d222cbbf3f6cd9646b2a9a0ff88796fec45a21613f06c11d819efd637e5",
        "question": "What is the total number of students enrolled in schools without any goalies?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ cName , enr ] ; #2 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Output [ cName , pPos ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.cName = #1.cName ] Output [ #1.enr ] ; #4 = Aggregate [ #3 ] Output [ SUM(enr) AS Sum_enr ]"
    },
    {
        "id": "cf7ba77b2b7b98493181ffa01f8d160d0f54b6921ebfa83b9fa44cf2f323274e",
        "question": "What is the number of states that has some college whose enrollment is larger than the average enrollment?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ enr ] ; #2 = Aggregate [ #1 ] Output [ AVG(enr) AS Avg_enr ] ; #3 = Scan Table [ College ] Output [ state , enr ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.enr > #2.Avg_enr ] Distinct [ true ] Output [ #3.state ] ; #5 = Aggregate [ #4 ] Output [ COUNT(state) AS Count_state ]"
    },
    {
        "id": "6087ecbcce383d3b26d9394a4cb61f4975aa2460c1e1706394ffea89b8c34597",
        "question": "How many states have a college with more students than average?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ enr ] ; #2 = Aggregate [ #1 ] Output [ AVG(enr) AS Avg_enr ] ; #3 = Scan Table [ College ] Output [ state , enr ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.enr > #2.Avg_enr ] Distinct [ true ] Output [ #3.state ] ; #5 = Aggregate [ #4 ] Output [ COUNT(state) AS Count_state ]"
    },
    {
        "id": "9af83abae07a7874ea7982eb32575377a3663054ad1a79515ce23c1e241cf0da",
        "question": "What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ enr ] ; #2 = Aggregate [ #1 ] Output [ AVG(enr) AS Avg_enr ] ; #3 = Scan Table [ College ] Output [ state , enr ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.enr < #2.Avg_enr ] Distinct [ true ] Output [ #3.state ] ; #5 = Aggregate [ #4 ] Output [ COUNT(state) AS Count_state ]"
    },
    {
        "id": "8397fe397333c25c9137d6b39fa949b94c498365c4161d15e9060fd6c5da465c",
        "question": "How many states have smaller colleges than average?",
        "parsing_tree": "soccer_2 | #1 = Scan Table [ College ] Output [ enr ] ; #2 = Aggregate [ #1 ] Output [ AVG(enr) AS Avg_enr ] ; #3 = Scan Table [ College ] Output [ state , enr ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.enr < #2.Avg_enr ] Distinct [ true ] Output [ #3.state ] ; #5 = Aggregate [ #4 ] Output [ COUNT(state) AS Count_state ]"
    },
    {
        "id": "f285c7de747e179b6b931a742df09da6dc3078886ab1178b47272071c09e7b27",
        "question": "How many devices are there?",
        "parsing_tree": "device | #1 = Scan Table [ device ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c053992773698d80f6bf249a04ac076a2ee24c0f03828b16b1b17b8a399e2cbe",
        "question": "Count the number of devices.",
        "parsing_tree": "device | #1 = Scan Table [ device ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f49de53846aee418eb436b4a7fbbea63b80658fe9910126e85b30eeb58917446",
        "question": "List the carriers of devices in ascending alphabetical order.",
        "parsing_tree": "device | #1 = Scan Table [ device ] Output [ Carrier ] ; #2 = Sort [ #1 ] OrderBy [ Carrier ASC ] Output [ Carrier ]"
    },
    {
        "id": "66a2a90084e83fb590646a04240c14cb7bc741c38b88b06bd7ddc6cc7341b833",
        "question": "What are the different carriers for devices, listed in alphabetical order?",
        "parsing_tree": "device | #1 = Scan Table [ device ] Output [ Carrier ] ; #2 = Sort [ #1 ] OrderBy [ Carrier ASC ] Output [ Carrier ]"
    },
    {
        "id": "7137e560b9894b1f925a43adeef9611b82c9cdeeba97d1192685111fd9eb3d7f",
        "question": "What are the carriers of devices whose software platforms are not \"Android\"?",
        "parsing_tree": "device | #1 = Scan Table [ device ] Predicate [ Software_Platform <> 'Android' ] Output [ Software_Platform , Carrier ]"
    },
    {
        "id": "61475545732ce21510beae220d1c395f4815a9903a7d152bf275a5a9d42cd501",
        "question": "Return the device carriers that do not have Android as their software platform.",
        "parsing_tree": "device | #1 = Scan Table [ device ] Predicate [ Software_Platform <> 'Android' ] Output [ Software_Platform , Carrier ]"
    },
    {
        "id": "fc059fd6bddca93b1565b5756c80952ff6a69a329056915f127105d93d0170e2",
        "question": "What are the names of shops in ascending order of open year?",
        "parsing_tree": "device | #1 = Scan Table [ shop ] Output [ Open_Year , Shop_Name ] ; #2 = Sort [ #1 ] OrderBy [ Open_Year ASC ] Output [ Open_Year , Shop_Name ]"
    },
    {
        "id": "23fa2385a52c73548d84330327c9561a9be0d60ab3b574665211a985ed501ffe",
        "question": "Return the names of shops, ordered by year of opening ascending.",
        "parsing_tree": "device | #1 = Scan Table [ shop ] Output [ Open_Year , Shop_Name ] ; #2 = Sort [ #1 ] OrderBy [ Open_Year ASC ] Output [ Open_Year , Shop_Name ]"
    },
    {
        "id": "dd426b11402ccb565bdb2638b7b6969024178ba349935363a54fa0369eb71d4c",
        "question": "What is the average quantity of stocks?",
        "parsing_tree": "device | #1 = Scan Table [ stock ] Output [ Quantity ] ; #2 = Aggregate [ #1 ] Output [ AVG(Quantity) AS Avg_Quantity ]"
    },
    {
        "id": "069ea150d1cdb14d16fd32810c8c4f6c9dc7e7eee58151534adaffc1ef4aa176",
        "question": "Give the average quantity of stocks.",
        "parsing_tree": "device | #1 = Scan Table [ stock ] Output [ Quantity ] ; #2 = Aggregate [ #1 ] Output [ AVG(Quantity) AS Avg_Quantity ]"
    },
    {
        "id": "7dcf7b3f9565385be55d84ea5c76d52504af10f90d2e71351326f33c4a99aaef",
        "question": "What are the names and location of the shops in ascending alphabetical order of name.",
        "parsing_tree": "device | #1 = Scan Table [ shop ] Output [ Location , Shop_Name ] ; #2 = Sort [ #1 ] OrderBy [ Shop_Name ASC ] Output [ Location , Shop_Name ]"
    },
    {
        "id": "5bcf3e2b2458c60bc092ca1dc0e633d9d79555a28a9b3c1a898ab2fbdaf93cc5",
        "question": "Return the names and locations of shops, ordered by name in alphabetical order.",
        "parsing_tree": "device | #1 = Scan Table [ shop ] Output [ Location , Shop_Name ] ; #2 = Sort [ #1 ] OrderBy [ Shop_Name ASC ] Output [ Location , Shop_Name ]"
    },
    {
        "id": "314b103361850e5ca3e564ae5b0f2055dfa282781bf31027689a8ce6d247c08d",
        "question": "How many different software platforms are there for devices?",
        "parsing_tree": "device | #1 = Scan Table [ device ] Distinct [ true ] Output [ Software_Platform ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Software_Platform) AS Count_Dist_Software_Platform ]"
    },
    {
        "id": "cbc41ea82ab7f04e0521ba93e736c66da1643bc1964089fc158f40405854456c",
        "question": "Count the number of different software platforms.",
        "parsing_tree": "device | #1 = Scan Table [ device ] Distinct [ true ] Output [ Software_Platform ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Software_Platform) AS Count_Dist_Software_Platform ]"
    },
    {
        "id": "dd4ad16c96d005aca3ae0e87e9abea95e504345b506ae5b28704b63a4b4d0394",
        "question": "List the open date of open year of the shop named \"Apple\".",
        "parsing_tree": "device | #1 = Scan Table [ shop ] Predicate [ Shop_Name = 'Apple' ] Output [ Open_Date , Open_Year , Shop_Name ]"
    },
    {
        "id": "0f9b0889ebfe5d8db1f2fe9922eade0519e67619c9121398d42c9aed10611d38",
        "question": "What are the open dates and years for the shop named Apple?",
        "parsing_tree": "device | #1 = Scan Table [ shop ] Predicate [ Shop_Name = 'Apple' ] Output [ Open_Date , Open_Year , Shop_Name ]"
    },
    {
        "id": "d0449241a3a8b85807da1ff2865996923d9a1fb7afd92024395f81f4d788c27d",
        "question": "List the name of the shop with the latest open year.",
        "parsing_tree": "device | #1 = Scan Table [ shop ] Output [ Open_Year , Shop_Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Open_Year DESC ] Output [ Open_Year , Shop_Name ]"
    },
    {
        "id": "f8ee813c53e73cf6e15820bd2d4b74e9606b148179147dfeda3b9c9589087a83",
        "question": "What is the shop name corresponding to the shop that opened in the most recent year?",
        "parsing_tree": "device | #1 = Scan Table [ shop ] Output [ Open_Year , Shop_Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Open_Year DESC ] Output [ Open_Year , Shop_Name ]"
    },
    {
        "id": "0dd05b8e9d03b20663bc14cf7a954381f7f9cbc5fb1a9218acefe3ff2512c45f",
        "question": "Show names of shops and the carriers of devices they have in stock.",
        "parsing_tree": "device | #1 = Scan Table [ device ] Output [ Device_ID , Carrier ] ; #2 = Scan Table [ stock ] Output [ Device_ID , Shop_ID ] ; #3 = Scan Table [ shop ] Output [ Shop_Name , Shop_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Shop_ID = #3.Shop_ID ] Output [ #3.Shop_Name , #2.Device_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.Device_ID = #4.Device_ID ] Output [ #4.Shop_Name , #1.Carrier ]"
    },
    {
        "id": "9c321849d024a771333dbd3c6760ddef50c8039771ad61efddef081befb5da57",
        "question": "What are the names of device shops, and what are the carriers that they carry devices in stock for?",
        "parsing_tree": "device | #1 = Scan Table [ device ] Output [ Device_ID , Carrier ] ; #2 = Scan Table [ stock ] Output [ Device_ID , Shop_ID ] ; #3 = Scan Table [ shop ] Output [ Shop_Name , Shop_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Shop_ID = #3.Shop_ID ] Output [ #3.Shop_Name , #2.Device_ID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.Device_ID = #4.Device_ID ] Output [ #4.Shop_Name , #1.Carrier ]"
    },
    {
        "id": "198cf985a9e7f7fccad23fa203b8a87f57a3bf72958a347da6317cdc5603d9c8",
        "question": "Show names of shops that have more than one kind of device in stock.",
        "parsing_tree": "device | #1 = Scan Table [ stock ] Output [ Shop_ID ] ; #2 = Scan Table [ shop ] Output [ Shop_Name , Shop_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Shop_ID = #2.Shop_ID ] Output [ #2.Shop_Name , #1.Shop_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Shop_ID ] Output [ countstar AS Count_Star , Shop_Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Shop_Name ]"
    },
    {
        "id": "cda49ebbb6f868bcc4d57ee33497bf784b9471b677e4b7faa2669d674e408e22",
        "question": "What are the names of shops that have more than a single kind of device in stock?",
        "parsing_tree": "device | #1 = Scan Table [ stock ] Output [ Shop_ID ] ; #2 = Scan Table [ shop ] Output [ Shop_Name , Shop_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Shop_ID = #2.Shop_ID ] Output [ #2.Shop_Name , #1.Shop_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Shop_ID ] Output [ countstar AS Count_Star , Shop_Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Shop_Name ]"
    },
    {
        "id": "e5409e988fcd1c22631c1fee179590feef3567eb66717ff9854e6751bb2abcb5",
        "question": "Show the name of the shop that have the largest quantity of devices in stock.",
        "parsing_tree": "device | #1 = Scan Table [ stock ] Output [ Shop_ID , Quantity ] ; #2 = Aggregate [ #1 ] GroupBy [ Shop_ID ] Output [ SUM(Quantity) AS Sum_Quantity , Shop_ID ] ; #3 = Scan Table [ shop ] Output [ Shop_Name , Shop_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Shop_ID = #3.Shop_ID ] Output [ #3.Shop_Name , #2.Sum_Quantity ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_Quantity DESC ] Output [ Shop_Name , Sum_Quantity ]"
    },
    {
        "id": "e1fee785bd3aee122eb5b53c6ebab98c7c1ad3062282767efea1cedf8c0253de",
        "question": "What is the name of the shop that has the greatest quantity of devices in stock?",
        "parsing_tree": "device | #1 = Scan Table [ stock ] Output [ Shop_ID , Quantity ] ; #2 = Aggregate [ #1 ] GroupBy [ Shop_ID ] Output [ SUM(Quantity) AS Sum_Quantity , Shop_ID ] ; #3 = Scan Table [ shop ] Output [ Shop_Name , Shop_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Shop_ID = #3.Shop_ID ] Output [ #3.Shop_Name , #2.Sum_Quantity ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_Quantity DESC ] Output [ Shop_Name , Sum_Quantity ]"
    },
    {
        "id": "6dba8a920e9c02d8c8cb658a27d8cb44c1fcafd2f2c1ac24b2702c5190ca3b4e",
        "question": "Please show different software platforms and the corresponding number of devices using each.",
        "parsing_tree": "device | #1 = Scan Table [ device ] Output [ Software_Platform ] ; #2 = Aggregate [ #1 ] GroupBy [ Software_Platform ] Output [ countstar AS Count_Star , Software_Platform ]"
    },
    {
        "id": "eb37ad810da8d91e87489b52661ec9312cb9f8e0c9371c87e167ebadc6a28621",
        "question": "What are the different software platforms for devices, and how many devices have each?",
        "parsing_tree": "device | #1 = Scan Table [ device ] Output [ Software_Platform ] ; #2 = Aggregate [ #1 ] GroupBy [ Software_Platform ] Output [ countstar AS Count_Star , Software_Platform ]"
    },
    {
        "id": "fb22b7ad2d07226da39028a1152bdef4b58c43fb907778a8133fa27df71fd2ff",
        "question": "Please show the software platforms of devices in descending order of the count.",
        "parsing_tree": "device | #1 = Scan Table [ device ] Output [ Software_Platform ] ; #2 = Aggregate [ #1 ] GroupBy [ Software_Platform ] Output [ countstar AS Count_Star , Software_Platform ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ Software_Platform , Count_Star ]"
    },
    {
        "id": "6a2630c66e531766f59c938fcbfd375c0d18e3df15877c03669d78e68ad74a22",
        "question": "What are the different software platforms for devices, ordered by frequency descending?",
        "parsing_tree": "device | #1 = Scan Table [ device ] Output [ Software_Platform ] ; #2 = Aggregate [ #1 ] GroupBy [ Software_Platform ] Output [ countstar AS Count_Star , Software_Platform ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ Software_Platform , Count_Star ]"
    },
    {
        "id": "01a36c35faffb1f41d9a4072ec317dd7929b585c15c48c4dd22dce74c1363731",
        "question": "List the software platform shared by the greatest number of devices.",
        "parsing_tree": "device | #1 = Scan Table [ device ] Output [ Software_Platform ] ; #2 = Aggregate [ #1 ] GroupBy [ Software_Platform ] Output [ countstar AS Count_Star , Software_Platform ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Software_Platform ]"
    },
    {
        "id": "9dc7f1d175b4b16fd72369f92402577b9f4e4ffa4ddd33ae6dd85fe25f03716d",
        "question": "What is the software platform that is most common amongst all devices?",
        "parsing_tree": "device | #1 = Scan Table [ device ] Output [ Software_Platform ] ; #2 = Aggregate [ #1 ] GroupBy [ Software_Platform ] Output [ countstar AS Count_Star , Software_Platform ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Software_Platform ]"
    },
    {
        "id": "3bce1dc2026fd549c9fc20d635e0ab1f9dd3a65527e76337654d12cea10c190a",
        "question": "List the names of shops that have no devices in stock.",
        "parsing_tree": "device | #1 = Scan Table [ shop ] Output [ Shop_Name , Shop_ID ] ; #2 = Scan Table [ stock ] Output [ Shop_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Shop_ID ] Output [ Shop_ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Shop_ID = #1.Shop_ID ] Output [ #1.Shop_Name ]"
    },
    {
        "id": "c3658fc26b602a9f3cf736b1812e2ba498a2f05501a526c08bc0016f73b46d35",
        "question": "What are the names of shops that do not have any devices in stock?",
        "parsing_tree": "device | #1 = Scan Table [ shop ] Output [ Shop_Name , Shop_ID ] ; #2 = Scan Table [ stock ] Output [ Shop_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Shop_ID ] Output [ Shop_ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Shop_ID = #1.Shop_ID ] Output [ #1.Shop_Name ]"
    },
    {
        "id": "de1c83cab7ac23f7c36953641aeac65ce906b7379ea96c613475672290cb41e1",
        "question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "parsing_tree": "device | #1 = Scan Table [ shop ] Predicate [ Open_Year > 2012 ] Distinct [ true ] Output [ Location , Open_Year ] ; #2 = Scan Table [ shop ] Predicate [ Open_Year < 2008 ] Output [ Location , Open_Year ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Location = #2.Location ] Output [ #1.Location ]"
    },
    {
        "id": "73e0d781661e0cec4fa217422ee8468de6d8c04f2e76d0ae7340714cded7ccc5",
        "question": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?",
        "parsing_tree": "device | #1 = Scan Table [ shop ] Predicate [ Open_Year > 2012 ] Distinct [ true ] Output [ Location , Open_Year ] ; #2 = Scan Table [ shop ] Predicate [ Open_Year < 2008 ] Output [ Location , Open_Year ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Location = #2.Location ] Output [ #1.Location ]"
    },
    {
        "id": "eb6c00d57bcac19a2b9cc55e87d0921e59ede251e11b25d76d822a83045b49ed",
        "question": "List the carriers of devices that have no devices in stock.",
        "parsing_tree": "device | #1 = Scan Table [ device ] Output [ Device_ID , Carrier ] ; #2 = Scan Table [ stock ] Output [ Device_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Device_ID = #1.Device_ID ] Output [ #1.Carrier ]"
    },
    {
        "id": "709b3edfea3d633478617e4cd6d7b5e38c8bea925eba3484c63ba9b460ee6ddf",
        "question": "What are the carriers of devices that are not in stock anywhere?",
        "parsing_tree": "device | #1 = Scan Table [ device ] Output [ Device_ID , Carrier ] ; #2 = Scan Table [ stock ] Output [ Device_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Device_ID = #1.Device_ID ] Output [ #1.Carrier ]"
    },
    {
        "id": "9adee2a02f10bbd9ba7a34675fa2b890a27b0a36c240bd1637076cc87c558a10",
        "question": "Show the carriers of devices in stock at more than one shop.",
        "parsing_tree": "device | #1 = Scan Table [ stock ] Output [ Device_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Device_ID ] Output [ countstar AS Count_Star , Device_ID ] ; #3 = Scan Table [ device ] Output [ Device_ID , Carrier ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Device_ID = #3.Device_ID ] Output [ #3.Carrier , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Carrier ]"
    },
    {
        "id": "986a7bb099ace1448614c10b02738a15feb3a7ba83e6bed552bfb21ef3af111c",
        "question": "What are the carriers of devices that are in stock in more than a single shop?",
        "parsing_tree": "device | #1 = Scan Table [ stock ] Output [ Device_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Device_ID ] Output [ countstar AS Count_Star , Device_ID ] ; #3 = Scan Table [ device ] Output [ Device_ID , Carrier ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Device_ID = #3.Device_ID ] Output [ #3.Carrier , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Carrier ]"
    },
    {
        "id": "b06b81be6dd54f9103e237e1bfc1178a6dc32c0719bc524d69ee609e0fd89505",
        "question": "How many bookings do we have?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Bookings ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "8c6f759cac213a1598ad10bd86229cd3bbbea7fce2323d5eb27b0388597d6520",
        "question": "Count the total number of bookings made.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Bookings ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "031cbd4890d9fcd71ef3ff3faf9cfe60d7450ff6b2578db94bd58b60a8f74449",
        "question": "List the order dates of all the bookings.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Bookings ] Output [ Order_Date ]"
    },
    {
        "id": "caa77afebf42586a4f77104d3477ccb7dbd51e289234ed54bca5bff9a4180233",
        "question": "What is the order date of each booking?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Bookings ] Output [ Order_Date ]"
    },
    {
        "id": "5baaf8bdee5e803d46ef3733febf783dee2049eff42df2e8af772b5c6badbf09",
        "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Bookings ] Output [ Planned_Delivery_Date , Actual_Delivery_Date ]"
    },
    {
        "id": "4c1e385bbce5ed7410a0407b675943c5e2b923796f58ad8a5c6fb83626be868b",
        "question": "What are the planned delivery date and actual delivery date for each booking?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Bookings ] Output [ Planned_Delivery_Date , Actual_Delivery_Date ]"
    },
    {
        "id": "e0032230f4c5a8d3e2db648f17ba31681b149c76760ae531ce35d0705f2b91be",
        "question": "How many customers do we have?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Customers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9264475cef9c7243f81985aaa7f9be8be2d9d120b1dd2bffb248b6acf23e5d21",
        "question": "Count the number of customers recorded.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Customers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5b6cb45fcd015c8ce4ba0b22ca8392a38a57c1f3809790c262cd32c15ca5478a",
        "question": "What are the phone and email for customer Harold?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Customers ] Predicate [ Customer_Name = 'Harold' ] Output [ Customer_Email_Address , Customer_Phone , Customer_Name ]"
    },
    {
        "id": "3551ea4588550132c78125088010776e39cedd3d8af1d03ffe3d507911632c11",
        "question": "Find the phone number and email address of customer \"Harold\".",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Customers ] Predicate [ Customer_Name = 'Harold' ] Output [ Customer_Email_Address , Customer_Phone , Customer_Name ]"
    },
    {
        "id": "2fc6860a57333ecf00b6041e1119c42935ec36845771775bcbe9897679a12726",
        "question": "Show all the Store_Name of drama workshop groups.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Drama_Workshop_Groups ] Output [ Store_Name ]"
    },
    {
        "id": "83d7603c6366055e7e90be992213c0d71104965acb438ab6046d221818ca3e53",
        "question": "What are the store names of drama workshop groups?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Drama_Workshop_Groups ] Output [ Store_Name ]"
    },
    {
        "id": "f2d87cfbb13977a3cb40ab3eace91907dcd1aaaec09f2b816537341f0ddc14dd",
        "question": "Show the minimum, average, maximum order quantity of all invoices.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Invoices ] Output [ Order_Quantity ] ; #2 = Aggregate [ #1 ] Output [ MIN(Order_Quantity) AS Min_Order_Quantity , AVG(Order_Quantity) AS Avg_Order_Quantity , MAX(Order_Quantity) AS Max_Order_Quantity ]"
    },
    {
        "id": "8c96bac1d73a3696cadab09563e46226001593b36e0ad39437667196f9f160bd",
        "question": "What are the minimum, average, and maximum quantities ordered? Check all the invoices.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Invoices ] Output [ Order_Quantity ] ; #2 = Aggregate [ #1 ] Output [ MIN(Order_Quantity) AS Min_Order_Quantity , AVG(Order_Quantity) AS Avg_Order_Quantity , MAX(Order_Quantity) AS Max_Order_Quantity ]"
    },
    {
        "id": "01a00deea66b07563568a87c06013ae65cdbe69091456776316bdb53a44346ac",
        "question": "What are the distinct payment method codes in all the invoices?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Invoices ] Distinct [ true ] Output [ payment_method_code ]"
    },
    {
        "id": "00d2c17f17c506f5777af6dfbf84b98a9692ef83e4b2f7eb5ecb26d96100906e",
        "question": "Show me the distinct payment method codes from the invoice record.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Invoices ] Distinct [ true ] Output [ payment_method_code ]"
    },
    {
        "id": "4a82c2a45fc169b4f04f2bb42ef0f401d1d56230d9ecad44498c99905de8b61a",
        "question": "What is the description of the marketing region China?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Marketing_Regions ] Predicate [ Marketing_Region_Name = 'China' ] Output [ Marketing_Region_Descriptrion , Marketing_Region_Name ]"
    },
    {
        "id": "bdf7a8070520e2821cf13711dd514430c2335399f501ac81008221c5c1fe5228",
        "question": "Find the marketing region description of China?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Marketing_Regions ] Predicate [ Marketing_Region_Name = 'China' ] Output [ Marketing_Region_Descriptrion , Marketing_Region_Name ]"
    },
    {
        "id": "db9c967bda311a5840deb7dc76fb8ff2d082b72e4145a98fb8f0bd09289fdd04",
        "question": "Show all the distinct product names with price higher than the average.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Output [ Product_Price ] ; #2 = Aggregate [ #1 ] Output [ AVG(Product_Price) AS Avg_Product_Price ] ; #3 = Scan Table [ Products ] Output [ Product_Name , Product_Price ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Product_Price > #2.Avg_Product_Price ] Distinct [ true ] Output [ #3.Product_Name ]"
    },
    {
        "id": "c80ae4f0fabbe24dbdde44bddbdf25d0314929e26ca2c0515515029f665a675e",
        "question": "What are the distinct names of the products that cost more than the average?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Output [ Product_Price ] ; #2 = Aggregate [ #1 ] Output [ AVG(Product_Price) AS Avg_Product_Price ] ; #3 = Scan Table [ Products ] Output [ Product_Name , Product_Price ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Product_Price > #2.Avg_Product_Price ] Distinct [ true ] Output [ #3.Product_Name ]"
    },
    {
        "id": "031c2fe089376849e2ddf8533c047842be669021e1a0692e507ae035ce2487e7",
        "question": "What is the name of the most expensive product?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Output [ Product_Name , Product_Price ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Product_Price DESC ] Output [ Product_Name , Product_Price ]"
    },
    {
        "id": "d6a4e166a50f6c6172a0be3b100565d26976e562900a83740e7ff5180f18abd2",
        "question": "Tell me the name of the most pricy product.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Output [ Product_Name , Product_Price ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Product_Price DESC ] Output [ Product_Name , Product_Price ]"
    },
    {
        "id": "34908cafc84608df968703eb3b5b9ebfb1f553d701e1a1cf42e16cccb0cdbe52",
        "question": "List all product names in ascending order of price.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Output [ Product_Name , Product_Price ] ; #2 = Sort [ #1 ] OrderBy [ Product_Price ASC ] Output [ Product_Name , Product_Price ]"
    },
    {
        "id": "739b906948983c219331b721faa585ab6986a5427c5220977fd97a17844e2508",
        "question": "Sort the names of products in ascending order of their price.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Output [ Product_Name , Product_Price ] ; #2 = Sort [ #1 ] OrderBy [ Product_Price ASC ] Output [ Product_Name , Product_Price ]"
    },
    {
        "id": "db9ad99a986fe3f97f78e78cb05738b2d166ce15e803a7ce76e95f67eeecd676",
        "question": "What is the phone number of the performer Ashley?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Performers ] Predicate [ Customer_Name = 'Ashley' ] Output [ Customer_Phone , Customer_Name ]"
    },
    {
        "id": "0a1ddf4b5543e145508e27546898f3348179fbe0fdb8a31e0fff00128da4bf11",
        "question": "Find the phone number of performer \"Ashley\".",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Performers ] Predicate [ Customer_Name = 'Ashley' ] Output [ Customer_Phone , Customer_Name ]"
    },
    {
        "id": "6798cc61878ad2ccde31159cacb9f6bec0c93481a3689cbefcb8b466dd7ed333",
        "question": "Show all payment method codes and the number of orders for each code.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Invoices ] Output [ payment_method_code ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method_code ] Output [ countstar AS Count_Star , payment_method_code ]"
    },
    {
        "id": "d53763f4a706e511627f37de36d8cecd050e3686e5700c5b8c1f52815c78bcba",
        "question": "List the distinct payment method codes with the number of orders made",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Invoices ] Output [ payment_method_code ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method_code ] Output [ countstar AS Count_Star , payment_method_code ]"
    },
    {
        "id": "d020b5edd8d77c33fa425f89b7b5fe65292dc58a03d15c39b1c20c08f182cc6b",
        "question": "What is the payment method code used by the most orders?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Invoices ] Output [ payment_method_code ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method_code ] Output [ countstar AS Count_Star , payment_method_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , payment_method_code ]"
    },
    {
        "id": "4008fac049408bcd212496e666485a54c41a0a25dee34e8a2db836728509e7b3",
        "question": "Find the payment method that is used the most often in all the invoices. Give me its code.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Invoices ] Output [ payment_method_code ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method_code ] Output [ countstar AS Count_Star , payment_method_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , payment_method_code ]"
    },
    {
        "id": "3b1949798a5069f35d5143d6b0104fb1db1a3dba1555daefcb8405ebe61ced52",
        "question": "Which city is the address of the store named \"FJA Filming\" located in?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Stores ] Predicate [ Store_Name = 'FJA Filming' ] Output [ Address_ID , Store_Name ] ; #2 = Scan Table [ Addresses ] Output [ City_Town , Address_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Address_ID = #2.Address_ID ] Output [ #2.City_Town ]"
    },
    {
        "id": "788a0ed9b0c5909b603a206d7f36d556ddfce7a78f58292effe7ad72e2a8f9f1",
        "question": "Find the city the store named \"FJA Filming\" is in.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Stores ] Predicate [ Store_Name = 'FJA Filming' ] Output [ Address_ID , Store_Name ] ; #2 = Scan Table [ Addresses ] Output [ City_Town , Address_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Address_ID = #2.Address_ID ] Output [ #2.City_Town ]"
    },
    {
        "id": "3bbf5ca5b47b46892a482bb7dc395d0c84d3a436a27a4e2373bc4d4733202af5",
        "question": "What are the states or counties of the address of the stores with marketing region code \"CA\"?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Stores ] Predicate [ Marketing_Region_Code = 'CA' ] Output [ Marketing_Region_Code , Address_ID ] ; #2 = Scan Table [ Addresses ] Output [ Address_ID , State_County ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Address_ID = #2.Address_ID ] Output [ #2.State_County ]"
    },
    {
        "id": "f352bc912ea06996b38e38a668b8bf268578db81be222d5dd69cdb76f9ad24cc",
        "question": "Find the states or counties where the stores with marketing region code \"CA\" are located.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Stores ] Predicate [ Marketing_Region_Code = 'CA' ] Output [ Marketing_Region_Code , Address_ID ] ; #2 = Scan Table [ Addresses ] Output [ Address_ID , State_County ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Address_ID = #2.Address_ID ] Output [ #2.State_County ]"
    },
    {
        "id": "8e0e4726643f642259b0b74c4ef3cf0405f13880289720e08d44a630a00dbcd4",
        "question": "What is the name of the marketing region that the store Rob Dinning belongs to?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Stores ] Predicate [ Store_Name = 'Rob Dinning' ] Output [ Marketing_Region_Code , Store_Name ] ; #2 = Scan Table [ Marketing_Regions ] Output [ Marketing_Region_Code , Marketing_Region_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Marketing_Region_Code = #2.Marketing_Region_Code ] Output [ #2.Marketing_Region_Name ]"
    },
    {
        "id": "44c34c022223b4040acd334445297b34670545175ebbd5b67f5b9376560d274b",
        "question": "Return the name of the marketing region the store Rob Dinning is located in.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Stores ] Predicate [ Store_Name = 'Rob Dinning' ] Output [ Marketing_Region_Code , Store_Name ] ; #2 = Scan Table [ Marketing_Regions ] Output [ Marketing_Region_Code , Marketing_Region_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Marketing_Region_Code = #2.Marketing_Region_Code ] Output [ #2.Marketing_Region_Name ]"
    },
    {
        "id": "605a1f4fb0fc58049f2f299d63864f0029921529b234f0c9865d933c1d6ac256",
        "question": "What are the descriptions of the service types with product price above 100?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Ref_Service_Types ] Output [ Service_Type_Code , Service_Type_Description ] ; #2 = Scan Table [ Services ] Predicate [ Product_Price > 100.0 ] Output [ Service_Type_Code , Product_Price ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Service_Type_Code = #2.Service_Type_Code ] Output [ #1.Service_Type_Description ]"
    },
    {
        "id": "ef6943d35ae0cf4c6606c4d3c70e116f3bd1054043240652366ede27cedcdfb1",
        "question": "Give me the descriptions of the service types that cost more than 100.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Ref_Service_Types ] Output [ Service_Type_Code , Service_Type_Description ] ; #2 = Scan Table [ Services ] Predicate [ Product_Price > 100.0 ] Output [ Service_Type_Code , Product_Price ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Service_Type_Code = #2.Service_Type_Code ] Output [ #1.Service_Type_Description ]"
    },
    {
        "id": "2a0ea59eff7279ad2b495148c80fd0fff9413400bff23bea9195cf00df769809",
        "question": "What is the description, code and the corresponding count of each service type?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Services ] Output [ Service_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Service_Type_Code ] Output [ countstar AS Count_Star , Service_Type_Code ] ; #3 = Scan Table [ Ref_Service_Types ] Output [ Service_Type_Code , Service_Type_Description ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Service_Type_Code = #3.Service_Type_Code ] Output [ #2.Service_Type_Code , #3.Service_Type_Description , #2.Count_Star ]"
    },
    {
        "id": "943f9667533177c78d6725d58fa4fb4eb12009c41f9bcfa50eb4a63e63b8ffaa",
        "question": "List the description, code and the number of services for each service type.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Services ] Output [ Service_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Service_Type_Code ] Output [ countstar AS Count_Star , Service_Type_Code ] ; #3 = Scan Table [ Ref_Service_Types ] Output [ Service_Type_Code , Service_Type_Description ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Service_Type_Code = #3.Service_Type_Code ] Output [ #2.Service_Type_Code , #3.Service_Type_Description , #2.Count_Star ]"
    },
    {
        "id": "05bf0228548cd19795068cb08a4d512b1f93b8ee013e1aa377cdcbec5ade06dd",
        "question": "What are the phones and emails of workshop groups in which services are performed?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Services ] Output [ Workshop_Group_ID ] ; #2 = Scan Table [ Drama_Workshop_Groups ] Output [ Workshop_Group_ID , Store_Phone , Store_Email_Address ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Workshop_Group_ID = #2.Workshop_Group_ID ] Output [ #2.Store_Email_Address , #2.Store_Phone ]"
    },
    {
        "id": "8c166cd472546e8c43fa37f3f0900b6e699c1ae0ab5ea05b19a9d98caf089de2",
        "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Services ] Output [ Workshop_Group_ID ] ; #2 = Scan Table [ Drama_Workshop_Groups ] Output [ Workshop_Group_ID , Store_Phone , Store_Email_Address ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Workshop_Group_ID = #2.Workshop_Group_ID ] Output [ #2.Store_Email_Address , #2.Store_Phone ]"
    },
    {
        "id": "fd555a337b79e271a98079573168e4eba051dd5e98c059abd52b29b0500ad5cc",
        "question": "What are the names of workshop groups in which services with product name \"film\" are performed?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Services ] Predicate [ Product_Name = 'film' ] Output [ Workshop_Group_ID , Product_Name ] ; #2 = Scan Table [ Drama_Workshop_Groups ] Output [ Workshop_Group_ID , Store_Phone , Store_Email_Address ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Workshop_Group_ID = #2.Workshop_Group_ID ] Output [ #2.Store_Email_Address , #2.Store_Phone ]"
    },
    {
        "id": "871f6681a60603543e8befe7b55f40ef5c980379f8006ffcf74ca0e42870b5cb",
        "question": "Find the names of the workshop groups where services with product name \"film\" are performed.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Services ] Predicate [ Product_Name = 'film' ] Output [ Workshop_Group_ID , Product_Name ] ; #2 = Scan Table [ Drama_Workshop_Groups ] Output [ Workshop_Group_ID , Store_Phone , Store_Email_Address ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Workshop_Group_ID = #2.Workshop_Group_ID ] Output [ #2.Store_Email_Address , #2.Store_Phone ]"
    },
    {
        "id": "2e389b53b967d280599de8a32f39c5398a4c9483d7f43dce31437b9b56f8c458",
        "question": "What are the different product names? What is the average product price for each of them?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Output [ Product_Name , Product_Price ] ; #2 = Aggregate [ #1 ] GroupBy [ Product_Name ] Output [ Product_Name , AVG(Product_Price) AS Avg_Product_Price ]"
    },
    {
        "id": "0b51eb0290bb5881d54ba33ea6526bf0c5522484a4090aaccb61210528c443be",
        "question": "For each distinct product name, show its average product price.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Output [ Product_Name , Product_Price ] ; #2 = Aggregate [ #1 ] GroupBy [ Product_Name ] Output [ Product_Name , AVG(Product_Price) AS Avg_Product_Price ]"
    },
    {
        "id": "7d2dc3f1b2d42b7fda6180df1448039d783abefb2c941f75063c5fdbcb12cc78",
        "question": "What are the product names with average product price smaller than 1000000?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Output [ Product_Name , Product_Price ] ; #2 = Aggregate [ #1 ] GroupBy [ Product_Name ] Output [ Product_Name , AVG(Product_Price) AS Avg_Product_Price ] ; #3 = Filter [ #2 ] Predicate [ Avg_Product_Price < 1000000.0 ] Output [ Product_Name ]"
    },
    {
        "id": "f8e3e0019f948bbc946bbbd31ba53b4e12cffb1be1ad914ad36005f445ecc79f",
        "question": "Find the product names whose average product price is below 1000000.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Output [ Product_Name , Product_Price ] ; #2 = Aggregate [ #1 ] GroupBy [ Product_Name ] Output [ Product_Name , AVG(Product_Price) AS Avg_Product_Price ] ; #3 = Filter [ #2 ] Predicate [ Avg_Product_Price < 1000000.0 ] Output [ Product_Name ]"
    },
    {
        "id": "e97967b2c58829ffb43b9454211a3c993e1a3e085f3b5b64b6925983b6c5caa1",
        "question": "What are the total order quantities of photo products?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Predicate [ Product_Name = 'photo' ] Output [ Product_ID , Product_Name ] ; #2 = Scan Table [ Order_Items ] Output [ Product_ID , Order_Quantity ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Product_ID = #2.Product_ID ] Output [ #2.Order_Quantity ] ; #4 = Aggregate [ #3 ] Output [ SUM(Order_Quantity) AS Sum_Order_Quantity ]"
    },
    {
        "id": "efa71be216a09565ad6a9c14680a06641957951491754093d47368ce0b11b16f",
        "question": "Compute the total order quantities of the product \"photo\".",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Predicate [ Product_Name = 'photo' ] Output [ Product_ID , Product_Name ] ; #2 = Scan Table [ Order_Items ] Output [ Product_ID , Order_Quantity ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Product_ID = #2.Product_ID ] Output [ #2.Order_Quantity ] ; #4 = Aggregate [ #3 ] Output [ SUM(Order_Quantity) AS Sum_Order_Quantity ]"
    },
    {
        "id": "41d83f62a37da2645fb5ccc97a86d89fb1397776900cf3fb778c84160fba0ae3",
        "question": "What are the order details of the products with price higher than 2000?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Predicate [ Product_Price > 2000.0 ] Output [ Product_ID , Product_Price ] ; #2 = Scan Table [ Order_Items ] Output [ Product_ID , Other_Item_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Product_ID = #2.Product_ID ] Output [ #2.Other_Item_Details ]"
    },
    {
        "id": "1eb007a124b2d8b635ce300937509c01e682fc25152d5cbcf16d556731844444",
        "question": "Find the order detail for the products with price above 2000.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Predicate [ Product_Price > 2000.0 ] Output [ Product_ID , Product_Price ] ; #2 = Scan Table [ Order_Items ] Output [ Product_ID , Other_Item_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Product_ID = #2.Product_ID ] Output [ #2.Other_Item_Details ]"
    },
    {
        "id": "88f7173091eebd292c4a84dbc65f38ba96420bd81309fca606080875c77c5ef5",
        "question": "What are the actual delivery dates of orders with quantity 1?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Order_Items ] Predicate [ Order_Quantity = 1 ] Output [ Order_ID , Order_Quantity ] ; #2 = Scan Table [ Customer_Orders ] Output [ Order_ID , Actual_Delivery_Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Order_ID = #2.Order_ID ] Output [ #2.Actual_Delivery_Date ]"
    },
    {
        "id": "e3d93f49c2d41a9a34318c39eb946477a4c2111d07ac4621d740cd4efc5e10f3",
        "question": "List the actual delivery date for all the orders with quantity 1",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Order_Items ] Predicate [ Order_Quantity = 1 ] Output [ Order_ID , Order_Quantity ] ; #2 = Scan Table [ Customer_Orders ] Output [ Order_ID , Actual_Delivery_Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Order_ID = #2.Order_ID ] Output [ #2.Actual_Delivery_Date ]"
    },
    {
        "id": "cf39e607b300e34bd541499a4c48c072f3131b5b6a8b709f0d324a7667d477c5",
        "question": "What are the order dates of orders with price higher than 1000?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Predicate [ Product_Price > 1000.0 ] Output [ Product_ID , Product_Price ] ; #2 = Scan Table [ Order_Items ] Output [ Order_ID , Product_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Product_ID = #2.Product_ID ] Output [ #2.Order_ID ] ; #4 = Scan Table [ Customer_Orders ] Output [ Order_ID , Order_Date ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Order_ID = #4.Order_ID ] Output [ #4.Order_Date ]"
    },
    {
        "id": "3484b0aad00ee1c6233d2599c7feee65c21be0ef5f2a7cddfa93c08e49007747",
        "question": "Find the order dates of the orders with price above 1000.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Products ] Predicate [ Product_Price > 1000.0 ] Output [ Product_ID , Product_Price ] ; #2 = Scan Table [ Order_Items ] Output [ Order_ID , Product_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Product_ID = #2.Product_ID ] Output [ #2.Order_ID ] ; #4 = Scan Table [ Customer_Orders ] Output [ Order_ID , Order_Date ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Order_ID = #4.Order_ID ] Output [ #4.Order_Date ]"
    },
    {
        "id": "0abab7e32e67df8347bf9453785e636e3170d19c986becc97c1eb882463a920a",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Drama_Workshop_Groups ] Distinct [ true ] Output [ Currency_Code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "49719c69d041983f8a103409a1bb6748937054c6522ad09f04c4b68b201c7ed6",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Drama_Workshop_Groups ] Distinct [ true ] Output [ Currency_Code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1b17754c943ddbdc44c15d45ab31767bd6f202f5c48ffd23b4e8ce34d2d980c6",
        "question": "What are the names of the drama workshop groups with address in Feliciaberg city?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Addresses ] Predicate [ City_Town = 'Feliciaberg' ] Output [ City_Town , Address_ID ] ; #2 = Scan Table [ Drama_Workshop_Groups ] Output [ Address_ID , Store_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Address_ID = #2.Address_ID ] Output [ #2.Store_Name ]"
    },
    {
        "id": "5faa55301824aaf030dc790b430b94866df53f89308215a3afa7d0e6e37b55f1",
        "question": "Return the the names of the drama workshop groups that are located in Feliciaberg city.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Addresses ] Predicate [ City_Town = 'Feliciaberg' ] Output [ City_Town , Address_ID ] ; #2 = Scan Table [ Drama_Workshop_Groups ] Output [ Address_ID , Store_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Address_ID = #2.Address_ID ] Output [ #2.Store_Name ]"
    },
    {
        "id": "18785d1b953816dbcf112b46f77858b4258d2780294a1c366dba10e9f30fc0a2",
        "question": "What are the email addresses of the drama workshop groups with address in Alaska state?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Addresses ] Predicate [ State_County = 'Alaska' ] Output [ Address_ID , State_County ] ; #2 = Scan Table [ Drama_Workshop_Groups ] Output [ Address_ID , Store_Email_Address ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Address_ID = #2.Address_ID ] Output [ #2.Store_Email_Address ]"
    },
    {
        "id": "fc810a40f3a4dd7d3a33d18ed77caf14b4a4c8818b762d7c23f81a115d190a60",
        "question": "List the email addresses of the drama workshop groups located in Alaska state.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Addresses ] Predicate [ State_County = 'Alaska' ] Output [ Address_ID , State_County ] ; #2 = Scan Table [ Drama_Workshop_Groups ] Output [ Address_ID , Store_Email_Address ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Address_ID = #2.Address_ID ] Output [ #2.Store_Email_Address ]"
    },
    {
        "id": "ff0b6056cc4da47bd264d19ad8bcaa02fb9eefe5915b101422ba038a8d6ed166",
        "question": "Show all cities along with the number of drama workshop groups in each city.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Drama_Workshop_Groups ] Output [ Address_ID ] ; #2 = Scan Table [ Addresses ] Output [ City_Town , Address_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Address_ID = #2.Address_ID ] Output [ #2.City_Town ] ; #4 = Aggregate [ #3 ] GroupBy [ City_Town ] Output [ countstar AS Count_Star , City_Town ]"
    },
    {
        "id": "d8d5aabe35eda1e235e5b4eab1677674a9a05c9d4e571c64482ff41aa9e3af76",
        "question": "How many drama workshop groups are there in each city? Return both the city and the count.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Drama_Workshop_Groups ] Output [ Address_ID ] ; #2 = Scan Table [ Addresses ] Output [ City_Town , Address_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Address_ID = #2.Address_ID ] Output [ #2.City_Town ] ; #4 = Aggregate [ #3 ] GroupBy [ City_Town ] Output [ countstar AS Count_Star , City_Town ]"
    },
    {
        "id": "8834d694b73774de368a1494a705da6444abb63c7cb5002e9d090bf7cda86929",
        "question": "What is the marketing region code that has the most drama workshop groups?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Drama_Workshop_Groups ] Output [ Marketing_Region_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Marketing_Region_Code ] Output [ countstar AS Count_Star , Marketing_Region_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Marketing_Region_Code , Count_Star ]"
    },
    {
        "id": "2dafd788c9c24f7817a30d31a328c1e26a8a7314f4eeaadbaeabc6108030ede9",
        "question": "Which marketing region has the most drama workshop groups? Give me the region code.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Drama_Workshop_Groups ] Output [ Marketing_Region_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Marketing_Region_Code ] Output [ countstar AS Count_Star , Marketing_Region_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Marketing_Region_Code , Count_Star ]"
    },
    {
        "id": "28eb5161e0deee24ef9cef0781c66ddc036e59c7d2d6347ac84273095d3ecd0b",
        "question": "Show all cities where at least one customer lives in but no performer lives in.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Customers ] Output [ Address_ID ] ; #2 = Scan Table [ Addresses ] Output [ City_Town , Address_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Address_ID = #2.Address_ID ] Distinct [ true ] Output [ #2.City_Town ] ; #4 = Scan Table [ Performers ] Output [ Address_ID ] ; #5 = Scan Table [ Addresses ] Output [ City_Town , Address_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Address_ID = #5.Address_ID ] Output [ #5.City_Town ] ; #7 = Except [ #3 , #6 ] Predicate [ #3.City_Town = #6.City_Town ] Output [ #3.City_Town ]"
    },
    {
        "id": "f51a7a3a1a2aeff1d33fa5d615abf9852d3b7c4f06de05d9a09fe3789301cecf",
        "question": "Which cities have at least one customer but no performer?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Customers ] Output [ Address_ID ] ; #2 = Scan Table [ Addresses ] Output [ City_Town , Address_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Address_ID = #2.Address_ID ] Distinct [ true ] Output [ #2.City_Town ] ; #4 = Scan Table [ Performers ] Output [ Address_ID ] ; #5 = Scan Table [ Addresses ] Output [ City_Town , Address_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Address_ID = #5.Address_ID ] Output [ #5.City_Town ] ; #7 = Except [ #3 , #6 ] Predicate [ #3.City_Town = #6.City_Town ] Output [ #3.City_Town ]"
    },
    {
        "id": "05ae26653d822f527dbdc273f635cf5002c29f0165e2e1557b6d049edf6c7340",
        "question": "What is the most frequent status of bookings?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Bookings ] Output [ Status_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Status_Code ] Output [ countstar AS Count_Star , Status_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Status_Code ]"
    },
    {
        "id": "9305d8126011e32379db4be3acc4ade0c7fab2e2f42e54364b161cf6e804aff6",
        "question": "Which status code is the most common of all the bookings?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Bookings ] Output [ Status_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Status_Code ] Output [ countstar AS Count_Star , Status_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Status_Code ]"
    },
    {
        "id": "7fb8190e91ccb480bd99f3e4bad2f93d178e192147f2e9d868d299e7a8832ea3",
        "question": "What are the names of the workshop groups that have bookings with status code \"stop\"?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Bookings ] Predicate [ Status_Code = 'stop' ] Output [ Workshop_Group_ID , Status_Code ] ; #2 = Scan Table [ Drama_Workshop_Groups ] Output [ Workshop_Group_ID , Store_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Workshop_Group_ID = #2.Workshop_Group_ID ] Output [ #2.Store_Name ]"
    },
    {
        "id": "e05b28a93ca6b56c1c3943f4fe594c001645e0b1739a8433edb94a05a9db135a",
        "question": "Which workshop groups have bookings with status code \"stop\"? Give me the names.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Bookings ] Predicate [ Status_Code = 'stop' ] Output [ Workshop_Group_ID , Status_Code ] ; #2 = Scan Table [ Drama_Workshop_Groups ] Output [ Workshop_Group_ID , Store_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Workshop_Group_ID = #2.Workshop_Group_ID ] Output [ #2.Store_Name ]"
    },
    {
        "id": "ca0c11a3e6b16a09ce596f9332f5dd530d9c5e7761033510b338949243d8fd23",
        "question": "Show the names of all the clients with no booking.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Clients ] Distinct [ true ] Output [ Customer_Name ] ; #2 = Scan Table [ Bookings ] Output [ Customer_ID ] ; #3 = Scan Table [ Clients ] Output [ Client_ID , Customer_Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Customer_ID = #3.Client_ID ] Output [ #3.Customer_Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Customer_Name = #4.Customer_Name ] Output [ #1.Customer_Name ]"
    },
    {
        "id": "7aa3024657a176abfeb64c81c17d0a667e8deb65b5d3c16a537db5a8d32c66b3",
        "question": "What are the names of the clients who do not have any booking?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Clients ] Distinct [ true ] Output [ Customer_Name ] ; #2 = Scan Table [ Bookings ] Output [ Customer_ID ] ; #3 = Scan Table [ Clients ] Output [ Client_ID , Customer_Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Customer_ID = #3.Client_ID ] Output [ #3.Customer_Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Customer_Name = #4.Customer_Name ] Output [ #1.Customer_Name ]"
    },
    {
        "id": "5b92c54698b430e9e6ab123015a2fd5a3a8922e95d0307ae365bd2c14d1c7e50",
        "question": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Invoices ] Predicate [ payment_method_code = 'MasterCard' ] Output [ payment_method_code , Order_Quantity ] ; #2 = Aggregate [ #1 ] Output [ AVG(Order_Quantity) AS Avg_Order_Quantity ]"
    },
    {
        "id": "e62f6944a402e4051e9d2a64cf79a469ec0b5c8ac3933d55f7a5e11b495c5da0",
        "question": "Check the invoices record and compute the average quantities ordered with the payment method \"MasterCard\".",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Invoices ] Predicate [ payment_method_code = 'MasterCard' ] Output [ payment_method_code , Order_Quantity ] ; #2 = Aggregate [ #1 ] Output [ AVG(Order_Quantity) AS Avg_Order_Quantity ]"
    },
    {
        "id": "b05920eafb31b780c337a8416cf5f4e8d1ac40f933e49f331a6f7feae675f22d",
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Invoices ] Output [ Product_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Product_ID ] Output [ countstar AS Count_Star , Product_ID ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Product_ID , Count_Star ]"
    },
    {
        "id": "f0b6eda2f47143dfefe29cbabd509a7697b1ea1ea348fad2bebbc16f98eea459",
        "question": "Find the id of the product ordered the most often on invoices.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Invoices ] Output [ Product_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Product_ID ] Output [ countstar AS Count_Star , Product_ID ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Product_ID , Count_Star ]"
    },
    {
        "id": "a9bf3c420d60c595415dc845e89a22c10dcbf9fb6512c559f91a4f68c0b6fd5a",
        "question": "What is the description of the service type which offers both the photo product and the film product?",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Ref_Service_Types ] Output [ Service_Type_Code , Service_Type_Description ] ; #2 = Scan Table [ Services ] Predicate [ Product_Name = 'photo' ] Output [ Service_Type_Code , Product_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Service_Type_Code = #2.Service_Type_Code ] Distinct [ true ] Output [ #1.Service_Type_Description ] ; #4 = Scan Table [ Ref_Service_Types ] Output [ Service_Type_Code , Service_Type_Description ] ; #5 = Scan Table [ Services ] Predicate [ Product_Name = 'film' ] Output [ Service_Type_Code , Product_Name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Service_Type_Code = #5.Service_Type_Code ] Output [ #4.Service_Type_Description ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Service_Type_Description = #6.Service_Type_Description ] Output [ #3.Service_Type_Description ]"
    },
    {
        "id": "5cf4f93540a846ae0bede3c5551cb39d35b5eed96f47c1e0bfa93d5fb59ef4d3",
        "question": "Give me the description of the service type that offers not only the photo product but also the film product.",
        "parsing_tree": "cre_Drama_Workshop_Groups | #1 = Scan Table [ Ref_Service_Types ] Output [ Service_Type_Code , Service_Type_Description ] ; #2 = Scan Table [ Services ] Predicate [ Product_Name = 'photo' ] Output [ Service_Type_Code , Product_Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Service_Type_Code = #2.Service_Type_Code ] Distinct [ true ] Output [ #1.Service_Type_Description ] ; #4 = Scan Table [ Ref_Service_Types ] Output [ Service_Type_Code , Service_Type_Description ] ; #5 = Scan Table [ Services ] Predicate [ Product_Name = 'film' ] Output [ Service_Type_Code , Product_Name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Service_Type_Code = #5.Service_Type_Code ] Output [ #4.Service_Type_Description ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Service_Type_Description = #6.Service_Type_Description ] Output [ #3.Service_Type_Description ]"
    },
    {
        "id": "fe6610896d6a4f113aeeb80ae983f09b69d60d68622382e22c3034c90a8110ff",
        "question": "How many bands are there?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Band ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "398a541e09a01c059e07ea088712ae8a8ee81f196dfca0a3069e77afbab87bd1",
        "question": "Find the number of bands.",
        "parsing_tree": "music_2 | #1 = Scan Table [ Band ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "3840829ffe9aa565984df342a83635fbdfdc6f9897f714d19ffe1510c061a723",
        "question": "How many songs are there?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Songs ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "36be30cf2c101545a74332c109be73b0617b30d8dd46f9d580cbad5f97f5962e",
        "question": "Count the number of songs.",
        "parsing_tree": "music_2 | #1 = Scan Table [ Songs ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "aae9ce23a75d73c2dc487255fbbe34959240b9a15b77e2ec88aac0a7ac692548",
        "question": "Hom many musicians performed in the song \"Flash\"?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Performance ] Output [ SongId ] ; #2 = Scan Table [ Songs ] Predicate [ Title = 'Flash' ] Output [ SongId , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SongId = #2.SongId ] Output [ #1.SongId ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "99f5703607cd1764d95d22758309d53856dc232a7c878807bbf9706e872a049b",
        "question": "How many musicians play in the song \"Flash\"?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Performance ] Output [ SongId ] ; #2 = Scan Table [ Songs ] Predicate [ Title = 'Flash' ] Output [ SongId , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SongId = #2.SongId ] Output [ #1.SongId ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "991e3e927fdf76efdba884ca14be4e4da1003932945610fe7a7bf1eb7fb13934",
        "question": "How many unique labels are there for albums?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Albums ] Distinct [ true ] Output [ Label ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Label) AS Count_Dist_Label ]"
    },
    {
        "id": "67ff746237d1250d7041406e7233ccea99afa5575a75ca3795cc8429dbf098c7",
        "question": "What are the unique labels for the albums?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Albums ] Distinct [ true ] Output [ Label ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Label) AS Count_Dist_Label ]"
    },
    {
        "id": "c4e3000478013b41dbffea7398450c4b741a05ce930de032a3b59abeebb939fb",
        "question": "How many songs have used the instrument \"drums\"?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Instruments ] Predicate [ Instrument = 'drums' ] Output [ Instrument ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "51bf836f55632fbb9104f6d317e4a49df3bdc1181f4379f4ce258727a4c30630",
        "question": "How many songs use drums as an instrument?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Instruments ] Predicate [ Instrument = 'drums' ] Output [ Instrument ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7cac28d9a6a8c4adc4178d07efabb59131562f784a63ffa6dcc058bbfe633d41",
        "question": "How many instruments does the song \"Le Pop\" use?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Songs ] Predicate [ Title = 'Le Pop' ] Output [ SongId , Title ] ; #2 = Scan Table [ Instruments ] Output [ SongId , Instrument ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SongId = #2.SongId ] Distinct [ true ] Output [ #2.Instrument ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "da1f6c474c111d1e5d9ec7dc991f6fd674fbee1ffdbb068732356fd922c1eb45",
        "question": "How many different instruments are used in the song \"Le Pop\"?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Songs ] Predicate [ Title = 'Le Pop' ] Output [ SongId , Title ] ; #2 = Scan Table [ Instruments ] Output [ SongId , Instrument ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SongId = #2.SongId ] Distinct [ true ] Output [ #2.Instrument ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2573ed513194154f9585efbc9725299be10cdcbe3b8cc4693feb320d4288d456",
        "question": "How many instrument does the musician with last name \"Heilo\" use?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Band ] Predicate [ Lastname = 'Heilo' ] Output [ Id , Lastname ] ; #2 = Scan Table [ Instruments ] Output [ BandmateId , Instrument ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.BandmateId ] Distinct [ true ] Output [ #2.Instrument ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "3d6668f90a3385f644280f074d138fdf76826616aa64e600b88deb76b06beb37",
        "question": "How many different instruments does the musician with the last name \"Heilo\" use?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Band ] Predicate [ Lastname = 'Heilo' ] Output [ Id , Lastname ] ; #2 = Scan Table [ Instruments ] Output [ BandmateId , Instrument ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Id = #2.BandmateId ] Distinct [ true ] Output [ #2.Instrument ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6ef6ad4d39f2002ef833764b518315636e33f9ae30b33277e490b515770d7208",
        "question": "Find the number of vocal types used in song \"Demon Kitty Rag\"?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Vocals ] Output [ SongId ] ; #2 = Scan Table [ Songs ] Predicate [ Title = 'Demon Kitty Rag' ] Output [ SongId , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SongId = #2.SongId ] Output [ #1.SongId ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9c4ec2e3dcd4ba0cb2c4d82de213b47ea802d4a4c38d4c39d7df877eac55d52a",
        "question": "What are the types of vocals used in the song \"Demon Kitty Rag\"?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Vocals ] Output [ SongId ] ; #2 = Scan Table [ Songs ] Predicate [ Title = 'Demon Kitty Rag' ] Output [ SongId , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SongId = #2.SongId ] Output [ #1.SongId ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ac5430c21420d0f867419833290b35adae522f4349446a04c2742961c70a6b2c",
        "question": "How many songs have a lead vocal?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Vocals ] Predicate [ Type = 'lead' ] Output [ SongId , Type ] ; #2 = Scan Table [ Songs ] Output [ SongId , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SongId = #2.SongId ] Distinct [ true ] Output [ #2.Title ] ; #4 = Aggregate [ #3 ] Output [ COUNT(Title) AS Count_Title ]"
    },
    {
        "id": "d12bde2e5f231b02d26a06b37c911dfbce30baf2006bf3f7a82ee0288fb5d45c",
        "question": "How many songs have vocals of type lead?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Vocals ] Predicate [ Type = 'lead' ] Output [ SongId , Type ] ; #2 = Scan Table [ Songs ] Output [ SongId , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SongId = #2.SongId ] Distinct [ true ] Output [ #2.Title ] ; #4 = Aggregate [ #3 ] Output [ COUNT(Title) AS Count_Title ]"
    },
    {
        "id": "0fcdbc9aeab6a8b7dc6df67663a424b8bb9b8e25e65a6fe97f5eae8b3c92c9aa",
        "question": "How many instruments does the song \"Badlands\" use?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Songs ] Predicate [ Title = 'Badlands' ] Output [ SongId , Title ] ; #2 = Scan Table [ Instruments ] Output [ SongId , Instrument ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SongId = #2.SongId ] Distinct [ true ] Output [ #2.Instrument ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "091bc0c8f9520b9340a315787027468ce2748b56dbb76fe975b8efc1dd38c076",
        "question": "How many different instruments are used in the song \"Badlands\"?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Songs ] Predicate [ Title = 'Badlands' ] Output [ SongId , Title ] ; #2 = Scan Table [ Instruments ] Output [ SongId , Instrument ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SongId = #2.SongId ] Distinct [ true ] Output [ #2.Instrument ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "dac25361cbbd78339a5b166581185075ae6f08a278855a542cdf01152a5243eb",
        "question": "Find the number of vocal types used in song \"Le Pop\"",
        "parsing_tree": "music_2 | #1 = Scan Table [ Vocals ] Output [ SongId ] ; #2 = Scan Table [ Songs ] Predicate [ Title = 'Le Pop' ] Output [ SongId , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SongId = #2.SongId ] Output [ #1.SongId ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6399c48473e7e41d2d36b4bfb51c066cbc24059ad1f87b6838a1da0dc5fe2307",
        "question": "How many vocal types are used in the song \"Le Pop\"?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Vocals ] Output [ SongId ] ; #2 = Scan Table [ Songs ] Predicate [ Title = 'Le Pop' ] Output [ SongId , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SongId = #2.SongId ] Output [ #1.SongId ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ba7e38f5ad33cb53c76a9dbe20b69ea7bd6fc55405755fc2784f2245367d4e9a",
        "question": "How many songs have a shared vocal?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Vocals ] Predicate [ Type = 'shared' ] Output [ SongId , Type ] ; #2 = Scan Table [ Songs ] Output [ SongId , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SongId = #2.SongId ] Distinct [ true ] Output [ #2.Title ] ; #4 = Aggregate [ #3 ] Output [ COUNT(Title) AS Count_Title ]"
    },
    {
        "id": "811a58715b3f0643d63c93b2cc34ad1aeede59af857b2f704d73b7db85824115",
        "question": "How many different songs have shared vocals?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Vocals ] Predicate [ Type = 'shared' ] Output [ SongId , Type ] ; #2 = Scan Table [ Songs ] Output [ SongId , Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SongId = #2.SongId ] Distinct [ true ] Output [ #2.Title ] ; #4 = Aggregate [ #3 ] Output [ COUNT(Title) AS Count_Title ]"
    },
    {
        "id": "077359bb555f49f432d08da916eff09781fb6e50ed2d6ce058fcbddc57fcb415",
        "question": "Find the number of songs in all the studio albums.",
        "parsing_tree": "music_2 | #1 = Scan Table [ Albums ] Predicate [ Type = 'Studio' ] Output [ Type , AId ] ; #2 = Scan Table [ Tracklists ] Output [ SongId , AlbumId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.AId = #2.AlbumId ] Output [ #2.SongId ] ; #4 = Scan Table [ Songs ] Output [ SongId , Title ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.SongId = #4.SongId ] Distinct [ true ] Output [ #4.Title ] ; #6 = Aggregate [ #5 ] Output [ COUNT(Title) AS Count_Title ]"
    },
    {
        "id": "eabd1bb4a0bc5ef748fe0abf89c930368be62bdfe6c6c8f4f3b51c49672603a1",
        "question": "How many songs appear in studio albums?",
        "parsing_tree": "music_2 | #1 = Scan Table [ Albums ] Predicate [ Type = 'Studio' ] Output [ Type , AId ] ; #2 = Scan Table [ Tracklists ] Output [ SongId , AlbumId ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.AId = #2.AlbumId ] Output [ #2.SongId ] ; #4 = Scan Table [ Songs ] Output [ SongId , Title ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.SongId = #4.SongId ] Distinct [ true ] Output [ #4.Title ] ; #6 = Aggregate [ #5 ] Output [ COUNT(Title) AS Count_Title ]"
    },
    {
        "id": "c02e8de4a56bca3eebb8bf100c49c36ad3c92ba9f8a3036c6fb6dd935a32b755",
        "question": "Who is the founder of Sony?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Name = 'Sony' ] Output [ Founder , Name ]"
    },
    {
        "id": "a65ee997ca52f9fba7162fa973195c3c7baabbd203017986f07449990d77b831",
        "question": "Return the founder of Sony.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Name = 'Sony' ] Output [ Founder , Name ]"
    },
    {
        "id": "b47b29bfae5633be3a19bb7ee410d22fed6d30f3585858b618b9a2dd387ba240",
        "question": "Where is the headquarter of the company founded by James?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Founder = 'James' ] Output [ Headquarter , Founder ]"
    },
    {
        "id": "27ab7e01f0b7a269a36d98ed1ba4f2cbb79106d581ca6f749a12ab0e9ea10b7d",
        "question": "What is the headquarter of the company whose founder is James?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Founder = 'James' ] Output [ Headquarter , Founder ]"
    },
    {
        "id": "22d4ad8532732810d37a526c5828d5e20414ec800d431125572d706b950be898",
        "question": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Headquarter , Name , Revenue ] ; #2 = Sort [ #1 ] OrderBy [ Revenue DESC ] Output [ Headquarter , Name , Revenue ]"
    },
    {
        "id": "01a2e6071f5c1fd0baf535df46eb7acc1781500424cb6d3bf90342e7c0a2badc",
        "question": "What are the names and headquarters of all manufacturers, ordered by revenue descending?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Headquarter , Name , Revenue ] ; #2 = Sort [ #1 ] OrderBy [ Revenue DESC ] Output [ Headquarter , Name , Revenue ]"
    },
    {
        "id": "a041cb5a092ca1a2d33fbb7e2f4fb3701e4ed5d0b315bb59bebeb9ada25ed919",
        "question": "What are the average, maximum and total revenues of all companies?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Revenue ] ; #2 = Aggregate [ #1 ] Output [ SUM(Revenue) AS Sum_Revenue , MAX(Revenue) AS Max_Revenue , AVG(Revenue) AS Avg_Revenue ]"
    },
    {
        "id": "6ea2b82ce18e5da85f10033ea5546e0ca90259466bf9e307f46f931e911ff472",
        "question": "Return the average, maximum, and total revenues across all manufacturers.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Revenue ] ; #2 = Aggregate [ #1 ] Output [ SUM(Revenue) AS Sum_Revenue , MAX(Revenue) AS Max_Revenue , AVG(Revenue) AS Avg_Revenue ]"
    },
    {
        "id": "359789c093f0111be0327620078bac2ba28f8c625300a400446a14ba781e8a82",
        "question": "How many companies were created by Andy?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Founder = 'Andy' ] Output [ Founder ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "fce5ec18351092b6fd6b3018c8cf48a11d55592f40049df56f9d1153a1b782a4",
        "question": "Return the number of companies created by Andy.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Founder = 'Andy' ] Output [ Founder ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1613732dd0d295d06d9447d3122fc41ad5f2d1aa115bd73394b9be3b54cd86d6",
        "question": "Find the total revenue created by the companies whose headquarter is located at Austin.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Headquarter = 'Austin' ] Output [ Headquarter , Revenue ] ; #2 = Aggregate [ #1 ] Output [ SUM(Revenue) AS Sum_Revenue ]"
    },
    {
        "id": "1d97cf0db03bd0618e85077ca3ff97e43b5a554304aaf0b8d6daad8e8724e7f2",
        "question": "What is the sum of revenue from companies with headquarters in Austin?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Headquarter = 'Austin' ] Output [ Headquarter , Revenue ] ; #2 = Aggregate [ #1 ] Output [ SUM(Revenue) AS Sum_Revenue ]"
    },
    {
        "id": "e07ee60472158078f204c02844e792182e341c03d54292855b39655eb2e68011",
        "question": "What are the different cities listed?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Distinct [ true ] Output [ Headquarter ]"
    },
    {
        "id": "8a571f77ce38ec235c50301017efeb64d4f58b63a5879f27c285e8c158ceae8d",
        "question": "Give the distinct headquarters of manufacturers.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Distinct [ true ] Output [ Headquarter ]"
    },
    {
        "id": "ca1dd1741f58a1470487f3200b4474b2c163ba3163c048749e50314913d8a182",
        "question": "Find the number of manufactures that are based in Tokyo or Beijing.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Headquarter = 'Beijing' OR Headquarter = 'Tokyo' ] Output [ Headquarter ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ab697fc25c725ff89d7f47380e4e30d4c3073e93aa4aff139c9196455e2ded9f",
        "question": "How many manufacturers have headquarters in either Tokyo or Beijing?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Headquarter = 'Beijing' OR Headquarter = 'Tokyo' ] Output [ Headquarter ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ef38f654979197373efa4b300ef9a52c2a59eea7e2f8c2876003a5f0e26bd0bc",
        "question": "Find the founder of the company whose name begins with the letter 'S'.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Name like 'S%' ] Output [ Founder , Name ]"
    },
    {
        "id": "95b87fe2762ae02e2736806c58f8944e3987f1d3320d9eb4c5ee56e77a87ad13",
        "question": "Who is the founders of companies whose first letter is S?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Name like 'S%' ] Output [ Founder , Name ]"
    },
    {
        "id": "fd25f3ab8ab2927f6da18e3472b9b715d0e7da22be251b65df2854e98da4b192",
        "question": "Find the name of companies whose revenue is between 100 and 150.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Revenue >= 100.0 AND Revenue <= 150.0 ] Output [ Name , Revenue ]"
    },
    {
        "id": "5056baa3273bd604ce9954c2adfc54dd1ce84cac201ed6e16f15b8457270e120",
        "question": "What are the names of companies with revenue between 100 and 150?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Revenue >= 100.0 AND Revenue <= 150.0 ] Output [ Name , Revenue ]"
    },
    {
        "id": "c59fa699551bf9073919e83f61b6453c9c8a6ea5592521b958f63ee3d2331467",
        "question": "What is the total revenue of all companies whose main office is at Tokyo or Taiwan?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Headquarter = 'Taiwan' OR Headquarter = 'Tokyo' ] Output [ Headquarter , Revenue ] ; #2 = Aggregate [ #1 ] Output [ SUM(Revenue) AS Sum_Revenue ]"
    },
    {
        "id": "96e0b8c87abe6c94ba7032eec6cd621d9fa7f8395ee9cf3debde8af32ed578b1",
        "question": "Return the total revenue of companies with headquarters in Tokyo or Taiwan.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Headquarter = 'Taiwan' OR Headquarter = 'Tokyo' ] Output [ Headquarter , Revenue ] ; #2 = Aggregate [ #1 ] Output [ SUM(Revenue) AS Sum_Revenue ]"
    },
    {
        "id": "7fceaaac711b103a8aa577c808bf3cb28bf80b7973437c7cba0b89b6e3a1df56",
        "question": "Find the name of product that is produced by both companies Creative Labs and Sony.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Name = 'Creative Labs' ] Output [ Code , Name ] ; #2 = Scan Table [ Products ] Output [ Name , Manufacturer ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Manufacturer ] Distinct [ true ] Output [ #2.Name ] ; #4 = Scan Table [ Manufacturers ] Predicate [ Name = 'Sony' ] Output [ Code , Name ] ; #5 = Scan Table [ Products ] Output [ Name , Manufacturer ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Code = #5.Manufacturer ] Output [ #5.Name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Name = #6.Name ] Output [ #3.Name ]"
    },
    {
        "id": "4e4c181ea25e7046cbf7b57f552d2fe073b93e75659606a1f3f8072b51917289",
        "question": "What are the names of products produced by both Creative Labs and Sony?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Name = 'Creative Labs' ] Output [ Code , Name ] ; #2 = Scan Table [ Products ] Output [ Name , Manufacturer ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Manufacturer ] Distinct [ true ] Output [ #2.Name ] ; #4 = Scan Table [ Manufacturers ] Predicate [ Name = 'Sony' ] Output [ Code , Name ] ; #5 = Scan Table [ Products ] Output [ Name , Manufacturer ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Code = #5.Manufacturer ] Output [ #5.Name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Name = #6.Name ] Output [ #3.Name ]"
    },
    {
        "id": "013e805e1d10a908182802403274044313728ef13dce2907af91a92dace20230",
        "question": "Find the name, headquarter and founder of the manufacturer that has the highest revenue.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Headquarter , Founder , Name , Revenue ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Revenue DESC ] Output [ Headquarter , Founder , Name , Revenue ]"
    },
    {
        "id": "4a54a51b9fc0f87417596eeb2f7dc6a3fd2563072ecfb0396cc7d2cdba31dee8",
        "question": "What are the names, headquarters and founders of the company with the highest revenue?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Headquarter , Founder , Name , Revenue ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Revenue DESC ] Output [ Headquarter , Founder , Name , Revenue ]"
    },
    {
        "id": "81320ce42802b8583407a1f4e882ba74d8125863a2fa276a1fdd634a7faefdaa",
        "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Headquarter , Name , Revenue ] ; #2 = Sort [ #1 ] OrderBy [ Revenue DESC ] Output [ Headquarter , Name , Revenue ]"
    },
    {
        "id": "66e124cb76b64fe55de818c4aac07a0f77afe7e208baeaf26872f925a51187f0",
        "question": "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Headquarter , Name , Revenue ] ; #2 = Sort [ #1 ] OrderBy [ Revenue DESC ] Output [ Headquarter , Name , Revenue ]"
    },
    {
        "id": "19717f3e0a7572f3f9e01f89ffc48e43e0da84cafd5631e70128e184a2f2389c",
        "question": "Find the name of companies whose revenue is greater than the average revenue of all companies.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Revenue ] ; #2 = Aggregate [ #1 ] Output [ AVG(Revenue) AS Avg_Revenue ] ; #3 = Scan Table [ Manufacturers ] Output [ Name , Revenue ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Revenue > #2.Avg_Revenue ] Output [ #3.Name ]"
    },
    {
        "id": "8bf26d3ee1e50857c87c79db47319ff3eb8e9e1f8488279140b6c47d23b302e5",
        "question": "What are the names of manufacturers with revenue greater than the average of all revenues?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Revenue ] ; #2 = Aggregate [ #1 ] Output [ AVG(Revenue) AS Avg_Revenue ] ; #3 = Scan Table [ Manufacturers ] Output [ Name , Revenue ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Revenue > #2.Avg_Revenue ] Output [ #3.Name ]"
    },
    {
        "id": "0765a0410a8d09ec96a12f75069cf0d41d6a1a028d46f53139a8304411a9c803",
        "question": "Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Headquarter = 'Austin' ] Output [ Headquarter , Revenue ] ; #2 = Aggregate [ #1 ] Output [ MIN(Revenue) AS Min_Revenue ] ; #3 = Scan Table [ Manufacturers ] Output [ Name , Revenue ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Revenue < #2.Min_Revenue ] Output [ #3.Name ]"
    },
    {
        "id": "3f4bd7df343059a2eb736f5d84c04a7998d8efde9ee49af95d5af9ab836bf9d3",
        "question": "What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Headquarter = 'Austin' ] Output [ Headquarter , Revenue ] ; #2 = Aggregate [ #1 ] Output [ MIN(Revenue) AS Min_Revenue ] ; #3 = Scan Table [ Manufacturers ] Output [ Name , Revenue ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Revenue < #2.Min_Revenue ] Output [ #3.Name ]"
    },
    {
        "id": "c9100690e5597f485acee50fb20df98b92ed4659629f0912e26319990531b2d3",
        "question": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Headquarter = 'Austin' ] Output [ Headquarter , Revenue ] ; #2 = Aggregate [ #1 ] Output [ MIN(Revenue) AS Min_Revenue ] ; #3 = Scan Table [ Manufacturers ] Output [ Revenue ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Revenue > #2.Min_Revenue ] Output [ #3.Revenue ] ; #5 = Aggregate [ #4 ] Output [ SUM(Revenue) AS Sum_Revenue ]"
    },
    {
        "id": "d10c45d36f13b4d0265cd506b66a974ba58445b32a545c7b6dc3e69c18cba6ab",
        "question": "What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Predicate [ Headquarter = 'Austin' ] Output [ Headquarter , Revenue ] ; #2 = Aggregate [ #1 ] Output [ MIN(Revenue) AS Min_Revenue ] ; #3 = Scan Table [ Manufacturers ] Output [ Revenue ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Revenue > #2.Min_Revenue ] Output [ #3.Revenue ] ; #5 = Aggregate [ #4 ] Output [ SUM(Revenue) AS Sum_Revenue ]"
    },
    {
        "id": "ed1a3e520ea2830aac402f86b9afa9ed2f02b81e3db33c34fca0afdf21bc7b9c",
        "question": "Find the total revenue of companies of each founder.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Founder , Revenue ] ; #2 = Aggregate [ #1 ] GroupBy [ Founder ] Output [ Founder , SUM(Revenue) AS Sum_Revenue ]"
    },
    {
        "id": "91b5660c16b0beeb7897632c52fe0af073bda7a7664b400b5ba7741c4f18023d",
        "question": "What is the total revenue of companies started by founder?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Founder , Revenue ] ; #2 = Aggregate [ #1 ] GroupBy [ Founder ] Output [ Founder , SUM(Revenue) AS Sum_Revenue ]"
    },
    {
        "id": "fae83c6530806eb99a8b34c006cdb7c953d44482c68454a537c220e6a7dd5eb2",
        "question": "Find the name and revenue of the company that earns the highest revenue in each city.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Headquarter , Name , Revenue ] ; #2 = Aggregate [ #1 ] GroupBy [ Headquarter , Name ] Output [ Headquarter , MAX(Revenue) AS Max_Revenue , Name ]"
    },
    {
        "id": "9fb7c392cb6fa5b6f29340d8a4de456ea7ac928819e6059cc6c91c3ca8dad8e3",
        "question": "What are the names and revenues of the companies with the highest revenues in each headquarter city?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Headquarter , Name , Revenue ] ; #2 = Aggregate [ #1 ] GroupBy [ Headquarter , Name ] Output [ Headquarter , MAX(Revenue) AS Max_Revenue , Name ]"
    },
    {
        "id": "2eaeeb22f3c2c5e2cad8b8a7953c4afcfcc2ab2a47355237d9c80a33e6dac1fb",
        "question": "Find the total revenue for each manufacturer.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Name , Revenue ] ; #2 = Aggregate [ #1 ] GroupBy [ Name ] Output [ SUM(Revenue) AS Sum_Revenue , Name ]"
    },
    {
        "id": "c6109a7fe280f3bd957c54fa5ec25f444449612bb02a7338488ef85636c3f9f1",
        "question": "What is the total revenue of each manufacturer?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Name , Revenue ] ; #2 = Aggregate [ #1 ] GroupBy [ Name ] Output [ SUM(Revenue) AS Sum_Revenue , Name ]"
    },
    {
        "id": "171e6f04d092e19a55883bec031b98bb340f9ac8bfa06f168e132694eb72d35f",
        "question": "Find the average prices of all products from each manufacture, and list each company's name.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Code , Name ] ; #2 = Scan Table [ Products ] Output [ Price , Manufacturer ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Manufacturer ] Output [ #2.Price , #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ AVG(Price) AS Avg_Price , Name ]"
    },
    {
        "id": "3f35fd26e57c7d26d054a70cf60ebc956184f6121761ecd4d5b73f1e5d53a126",
        "question": "What are the average prices of products for each manufacturer?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Code , Name ] ; #2 = Scan Table [ Products ] Output [ Price , Manufacturer ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Manufacturer ] Output [ #2.Price , #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ AVG(Price) AS Avg_Price , Name ]"
    },
    {
        "id": "e2933ddc986eaa882d64967ecfaf85d9032b520ffb0dc68d7d659aac7718c54d",
        "question": "Find the number of different products that are produced by companies at different headquarter cities.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Code , Headquarter ] ; #2 = Scan Table [ Products ] Output [ Name , Manufacturer ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Manufacturer ] Distinct [ true ] Output [ #2.Name , #1.Headquarter ] ; #4 = Aggregate [ #3 ] GroupBy [ Headquarter ] Output [ Headquarter , countstar AS Count_Star ]"
    },
    {
        "id": "3374b42bb9898e9c4d469d5e1fac0008f97f045ae9131aaeb737d51cb79537f1",
        "question": "How many different products are produced in each headquarter city?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Code , Headquarter ] ; #2 = Scan Table [ Products ] Output [ Name , Manufacturer ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Manufacturer ] Distinct [ true ] Output [ #2.Name , #1.Headquarter ] ; #4 = Aggregate [ #3 ] GroupBy [ Headquarter ] Output [ Headquarter , countstar AS Count_Star ]"
    },
    {
        "id": "8c5525a8a1a02527e5a0e8efb3f871f5020363ba98dbb46764bc8a6997e24771",
        "question": "Find the name of companies that do not make DVD drive.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ Products ] Predicate [ Name = 'DVD drive' ] Output [ Name , Manufacturer ] ; #3 = Scan Table [ Manufacturers ] Output [ Code , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Manufacturer = #3.Code ] Output [ #3.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Name ]"
    },
    {
        "id": "99c7f916773d5a1cdf0ddd8b012a5903c84269a53b4c715eebb9817098b29b2d",
        "question": "What are the names of companies that do not make DVD drives?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Distinct [ true ] Output [ Name ] ; #2 = Scan Table [ Products ] Predicate [ Name = 'DVD drive' ] Output [ Name , Manufacturer ] ; #3 = Scan Table [ Manufacturers ] Output [ Code , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Manufacturer = #3.Code ] Output [ #3.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Name ]"
    },
    {
        "id": "3df90a768f80ee4a01b5493ec16fcb821302e82c38e54ffc9504cb5ad860a30e",
        "question": "Find the number of products for each manufacturer, showing the name of each company.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Code , Name ] ; #2 = Scan Table [ Products ] Output [ Manufacturer ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Manufacturer ] Output [ #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "86d58a2590cf3162b302212ac34694e6a0b30fa3add784e7ff5d0723e01ad794",
        "question": "How many products are there for each manufacturer?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Code , Name ] ; #2 = Scan Table [ Products ] Output [ Manufacturer ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Manufacturer ] Output [ #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "90466ed601b48727bad817c1673da769908575adc869345647eca9e2129cb32f",
        "question": "Select the names of all the products in the store.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Output [ Name ]"
    },
    {
        "id": "526c49e2c39ded63c6481cdf8982b5a16909499743fc41e5de5bbe98d29bf751",
        "question": "What are the names of all products?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Output [ Name ]"
    },
    {
        "id": "3e5e3ae80f6cbac0760ba414c0a6ba3ceed0b5d9b538a1a57c8968f30fd14093",
        "question": "Select the names and the prices of all the products in the store.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Output [ Price , Name ]"
    },
    {
        "id": "94ba4a28122364ecce9e024455ed393dc4fbf07fd8a0ff3da8c493bf77114a23",
        "question": "What are the names and prices of all products in the store?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Output [ Price , Name ]"
    },
    {
        "id": "7f7daeacbae720b7018b8d4177dfce1039e540b9bfb55aad88311bc8b4d04ff3",
        "question": "Select the name of the products with a price less than or equal to $200.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Predicate [ Price <= 200.0 ] Output [ Price , Name ]"
    },
    {
        "id": "ba8431a45358632a6199e67f6df96e0d126868fc97a68a9d5714009236c558ee",
        "question": "What are the names of products with price at most 200?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Predicate [ Price <= 200.0 ] Output [ Price , Name ]"
    },
    {
        "id": "ef656c369ce9e3d092bd0638fb31e8a6d04a76d6139430d965cac94da9e9e633",
        "question": "Find all information of all the products with a price between $60 and $120.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Predicate [ Price >= 60.0 AND Price <= 120.0 ] Output [ Code , Name , Manufacturer , Price ]"
    },
    {
        "id": "a221e72a298b4e5388dff0823f2764aa69d92cf8d3cebf9fc1a43281335109e7",
        "question": "What is all the information of all the products that have a price between 60 and 120?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Predicate [ Price >= 60.0 AND Price <= 120.0 ] Output [ Code , Name , Manufacturer , Price ]"
    },
    {
        "id": "c06c5737d7f6dc2f7a8f4e7720dff22412907426596d6e9f4c3f62efd7080d31",
        "question": "Compute the average price of all the products.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Output [ Price ] ; #2 = Aggregate [ #1 ] Output [ AVG(Price) AS Avg_Price ]"
    },
    {
        "id": "b4c228b5f8e576473a9e5bdcd8f1df4fc942ca9dc46663b6811c6322407ae8cb",
        "question": "What is the average price across all products?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Output [ Price ] ; #2 = Aggregate [ #1 ] Output [ AVG(Price) AS Avg_Price ]"
    },
    {
        "id": "a0c2bd3ccddff60506d4dac6718b21f5c0114548caff0e2db1b1887282076fdd",
        "question": "Compute the average price of all products with manufacturer code equal to 2.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Predicate [ Manufacturer = 2 ] Output [ Price , Manufacturer ] ; #2 = Aggregate [ #1 ] Output [ AVG(Price) AS Avg_Price ]"
    },
    {
        "id": "dad23c7f42cce4bee5c46387a5ad228610eb458b52e9ea9f33fc0d48bc7ba9e3",
        "question": "What is the average price of products with manufacturer codes equal to 2?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Predicate [ Manufacturer = 2 ] Output [ Price , Manufacturer ] ; #2 = Aggregate [ #1 ] Output [ AVG(Price) AS Avg_Price ]"
    },
    {
        "id": "dc0273d3beacced37ccdf308df854fc13593aed43092ddb4bb61c28d1b096469",
        "question": "Compute the number of products with a price larger than or equal to $180.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Predicate [ Price >= 180.0 ] Output [ Price ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "840694cc913e9de4629d4da664033e3cf2e53127a82e05839e7b4d4e62380e0f",
        "question": "How many products have prices of at least 180?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Predicate [ Price >= 180.0 ] Output [ Price ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1cd18944460c4d76e21c9539e0ae55dbf3d16c0e9ba6eff97f7f62cacb6451c6",
        "question": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Predicate [ Price >= 180.0 ] Output [ Price , Name ] ; #2 = Sort [ #1 ] OrderBy [ Price DESC , Name ASC ] Output [ Price , Name ]"
    },
    {
        "id": "34bd980dcbb9789ee34e95bc2bcc45035327feb0749f7be693066d9934ffc2e9",
        "question": "What are the names and prices of products that cost at least 180, sorted by price decreasing and name ascending?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Predicate [ Price >= 180.0 ] Output [ Price , Name ] ; #2 = Sort [ #1 ] OrderBy [ Price DESC , Name ASC ] Output [ Price , Name ]"
    },
    {
        "id": "0f3e40e7f299cc838575f7e749a0a75b38c66a1dd23398e20f77da502c3caf1b",
        "question": "Select the average price of each manufacturer's products, showing only the manufacturer's code.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Output [ Price , Manufacturer ] ; #2 = Aggregate [ #1 ] GroupBy [ Manufacturer ] Output [ AVG(Price) AS Avg_Price , Manufacturer ]"
    },
    {
        "id": "be9e0166579fc907664a96bd4dce2fb69f083bb8de9c4c8e9736689773a63d2f",
        "question": "What are the average prices of products, grouped by manufacturer code?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Output [ Price , Manufacturer ] ; #2 = Aggregate [ #1 ] GroupBy [ Manufacturer ] Output [ AVG(Price) AS Avg_Price , Manufacturer ]"
    },
    {
        "id": "a3a68f7edf4939e8c41060dad1cac6356aa2db68e60e3682a9f07106a55d7fd3",
        "question": "Select the average price of each manufacturer's products, showing the manufacturer's name.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Code , Name ] ; #2 = Scan Table [ Products ] Output [ Price , Manufacturer ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Manufacturer ] Output [ #2.Price , #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ AVG(Price) AS Avg_Price , Name ]"
    },
    {
        "id": "95f718d92abd1f71ccd7608d529ba1cfb4028d48b9b7acb96620a1ae60afe8e8",
        "question": "What are the average prices of products, grouped by manufacturer name?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Code , Name ] ; #2 = Scan Table [ Products ] Output [ Price , Manufacturer ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Manufacturer ] Output [ #2.Price , #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ AVG(Price) AS Avg_Price , Name ]"
    },
    {
        "id": "a791ea3e45692d4d0d896048c47ccd02b7bc806bedb638a8b946cacb0c887d84",
        "question": "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Code , Name ] ; #2 = Scan Table [ Products ] Output [ Price , Manufacturer ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Manufacturer ] Output [ #2.Price , #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ AVG(Price) AS Avg_Price , Name ] ; #5 = Filter [ #4 ] Predicate [ Avg_Price >= 150.0 ] Output [ Name , Avg_Price ]"
    },
    {
        "id": "0d1a3e365f620ab91dc34e889f03eaadcdb0e8467f3a4e5f7c1ffa7792236b44",
        "question": "What are the names and average prices of products for manufacturers whose products cost on average 150 or more?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Manufacturers ] Output [ Code , Name ] ; #2 = Scan Table [ Products ] Output [ Price , Manufacturer ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Manufacturer ] Output [ #2.Price , #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ AVG(Price) AS Avg_Price , Name ] ; #5 = Filter [ #4 ] Predicate [ Avg_Price >= 150.0 ] Output [ Name , Avg_Price ]"
    },
    {
        "id": "e54290619551bc880ec404400366f0e36d5ed370a4d972180cae135ef63d71ea",
        "question": "Select the name and price of the cheapest product.",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Output [ Price , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Price ASC ] Output [ Price , Name ]"
    },
    {
        "id": "515dcc852f78bb40d61b5dad66048d3803e66e435e3415ec7131f68befde4e1f",
        "question": "What is the name and price of the cheapest product?",
        "parsing_tree": "manufactory_1 | #1 = Scan Table [ Products ] Output [ Price , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Price ASC ] Output [ Price , Name ]"
    },
    {
        "id": "77b159939ae5bbda1874edd8d38434d60e11bb74ebfac935c83d6f2c0b10b30c",
        "question": "What is the id of the problem log that is created most recently?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problem_Log ] Output [ log_entry_date , problem_log_id ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ log_entry_date DESC ] Output [ log_entry_date , problem_log_id ]"
    },
    {
        "id": "24eb65c74adf842287ab9f51cc5c1a695489035cbb78ef5933a58d8efba5ae64",
        "question": "Which problem log was created most recently? Give me the log id.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problem_Log ] Output [ log_entry_date , problem_log_id ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ log_entry_date DESC ] Output [ log_entry_date , problem_log_id ]"
    },
    {
        "id": "5e60e0a0934db4353de85286b778d96dd02a9df4ac84804be7bbbafb1150b81f",
        "question": "What is the oldest log id and its corresponding problem id?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problem_Log ] Output [ log_entry_date , problem_log_id , problem_id ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ log_entry_date ASC ] Output [ log_entry_date , problem_log_id , problem_id ]"
    },
    {
        "id": "8c5d1073d5869028dd90e50818754fe6f9b45461004b82868f9042d683e926a0",
        "question": "Find the oldest log id and its corresponding problem id.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problem_Log ] Output [ log_entry_date , problem_log_id , problem_id ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ log_entry_date ASC ] Output [ log_entry_date , problem_log_id , problem_id ]"
    },
    {
        "id": "a2cfe9554d3e56e4c084f0a595bff9c43b0579951ca9fa9657cb2727e162fd30",
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problem_Log ] Predicate [ problem_id = 10 ] Output [ log_entry_date , problem_log_id , problem_id ]"
    },
    {
        "id": "c7bf72478a70db21c7de37cce20fb7ed0ee0b41056a3243cf2d23d36aec644d3",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problem_Log ] Predicate [ problem_id = 10 ] Output [ log_entry_date , problem_log_id , problem_id ]"
    },
    {
        "id": "3329515d065802ba8264ac983bfd5c61e18959e466ffd181a837e09c1c7be6e6",
        "question": "List all the log ids and their descriptions from the problem logs.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problem_Log ] Output [ log_entry_description , problem_log_id ]"
    },
    {
        "id": "d0ed048fac3317f88a976563e6c9425f3cc8ffd74187b2c0b70c19cbf22d777f",
        "question": "What are the log id and entry description of each problem?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problem_Log ] Output [ log_entry_description , problem_log_id ]"
    },
    {
        "id": "f4f296c0ba852041d2e9b80184a26e32cbfb24395390c85c070421fc8d32892c",
        "question": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problem_Log ] Predicate [ problem_id = 1 ] Output [ assigned_to_staff_id , problem_id ] ; #2 = Scan Table [ Staff ] Output [ staff_first_name , staff_last_name , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.assigned_to_staff_id = #2.staff_id ] Distinct [ true ] Output [ #2.staff_first_name , #2.staff_last_name ]"
    },
    {
        "id": "c2451f935bb870e984ff7cb6735d370bed7de77f0d9b6bcbd47712a2f5580697",
        "question": "Which staff members are assigned to the problem with id 1? Give me their first and last names.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problem_Log ] Predicate [ problem_id = 1 ] Output [ assigned_to_staff_id , problem_id ] ; #2 = Scan Table [ Staff ] Output [ staff_first_name , staff_last_name , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.assigned_to_staff_id = #2.staff_id ] Distinct [ true ] Output [ #2.staff_first_name , #2.staff_last_name ]"
    },
    {
        "id": "f5ba0c4b2c3a9d0ad010af0e6e95bad9ee85dc885488232b6069d58eb3f4fa57",
        "question": "List the problem id and log id which are assigned to the staff named Rylan Homenick.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Rylan' AND staff_last_name = 'Homenick' ] Output [ staff_first_name , staff_last_name , staff_id ] ; #2 = Scan Table [ Problem_Log ] Output [ assigned_to_staff_id , problem_log_id , problem_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.assigned_to_staff_id ] Output [ #2.problem_id , #2.problem_log_id ]"
    },
    {
        "id": "035186c97ea299a6cc0c66689ce79287e1a97724c8041e061bec76099565109d",
        "question": "Which problem id and log id are assigned to the staff named Rylan Homenick?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Rylan' AND staff_last_name = 'Homenick' ] Output [ staff_first_name , staff_last_name , staff_id ] ; #2 = Scan Table [ Problem_Log ] Output [ assigned_to_staff_id , problem_log_id , problem_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.assigned_to_staff_id ] Output [ #2.problem_id , #2.problem_log_id ]"
    },
    {
        "id": "acc3f53f101bac9df26a9d062d99c99f13a7d9f18d089978cc39c9aead9c0b99",
        "question": "How many problems are there for product voluptatem?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Product ] Predicate [ product_name = 'voluptatem' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Problems ] Output [ product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_id , #1.product_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d7f29f795318a12c12282949be9b3be85b8fc0262cb2465930c61c5ca4c2f643",
        "question": "How many problems did the product called \"voluptatem\" have in record?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Product ] Predicate [ product_name = 'voluptatem' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Problems ] Output [ product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_id , #1.product_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "fa9a1d8841d8e866e2a777070c411b6a2ebfe2a41528e97b3e7a319a9e382a8f",
        "question": "How many problems does the product with the most problems have? List the number of the problems and product name.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problems ] Output [ product_id ] ; #2 = Scan Table [ Product ] Output [ product_name , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.product_name ] ; #4 = Aggregate [ #3 ] GroupBy [ product_name ] Output [ countstar AS Count_Star , product_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ product_name , Count_Star ]"
    },
    {
        "id": "0f5d4e22b69b4c0e31651602c0b5ae19ca8be104172ef629756977f83d7efb5c",
        "question": "Which product has the most problems? Give me the number of problems and the product name.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problems ] Output [ product_id ] ; #2 = Scan Table [ Product ] Output [ product_name , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.product_name ] ; #4 = Aggregate [ #3 ] GroupBy [ product_name ] Output [ countstar AS Count_Star , product_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ product_name , Count_Star ]"
    },
    {
        "id": "6f268531bd38c769feb466220d53f9d7ff081c768e470601f62cde9bbb801cb1",
        "question": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Christop' ] Output [ staff_first_name , staff_id ] ; #2 = Scan Table [ Problems ] Output [ problem_description , reported_by_staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.reported_by_staff_id ] Output [ #2.problem_description ]"
    },
    {
        "id": "269fea1180b2d72508130ff38222494668fcd663e4656eeea2d3ae11cfd4287b",
        "question": "Which problems are reported by the staff with first name \"Christop\"? Show the descriptions of the problems.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Christop' ] Output [ staff_first_name , staff_id ] ; #2 = Scan Table [ Problems ] Output [ problem_description , reported_by_staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.reported_by_staff_id ] Output [ #2.problem_description ]"
    },
    {
        "id": "fd78c47672d7643dabb2c605467e6981a03a200b031de64989379a02415de46b",
        "question": "Find the ids of the problems that are reported by the staff whose last name is Bosco.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Staff ] Predicate [ staff_last_name = 'Bosco' ] Output [ staff_last_name , staff_id ] ; #2 = Scan Table [ Problems ] Output [ reported_by_staff_id , problem_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.reported_by_staff_id ] Output [ #2.problem_id ]"
    },
    {
        "id": "10ff60061ec0d1b0551226d6c5975733447cb61d10cbb396785c8b1e294296f3",
        "question": "Which problems are reported by the staff with last name \"Bosco\"? Show the ids of the problems.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Staff ] Predicate [ staff_last_name = 'Bosco' ] Output [ staff_last_name , staff_id ] ; #2 = Scan Table [ Problems ] Output [ reported_by_staff_id , problem_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.reported_by_staff_id ] Output [ #2.problem_id ]"
    },
    {
        "id": "592a4eef8b2a81c10f751a367c45d04af428ed7464cb732c3a25b13fa6cb83f8",
        "question": "What are the ids of the problems which are reported after 1978-06-26?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problems ] Predicate [ date_problem_reported > '1978-06-26 00:00:00.000' ] Output [ date_problem_reported , problem_id ]"
    },
    {
        "id": "3db9845c46ae3482e2d9786f802920205cb1058e7b305a5ad2dcb1bdf675a884",
        "question": "Find the ids of the problems reported after 1978-06-26.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problems ] Predicate [ date_problem_reported > '1978-06-26 00:00:00.000' ] Output [ date_problem_reported , problem_id ]"
    },
    {
        "id": "df8d998c7fa13e4d515aa39c88e65936479ba9aa2d5fcce329bf97db40db6d76",
        "question": "What are the ids of the problems which are reported before 1978-06-26?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problems ] Predicate [ date_problem_reported < '1978-06-26 00:00:00.000' ] Output [ date_problem_reported , problem_id ]"
    },
    {
        "id": "466d4cba046705a8fd803ab90d30b6e2d8e6d1c58de5ee4155bce4ddf74b7507",
        "question": "Which problems are reported before 1978-06-26? Give me the ids of the problems.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problems ] Predicate [ date_problem_reported < '1978-06-26 00:00:00.000' ] Output [ date_problem_reported , problem_id ]"
    },
    {
        "id": "520bb6b84f7e5fed73c9ce479e2ff62506890d226a803d5d8e3620337067def8",
        "question": "For each product which has problems, what are the number of problems and the product id?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problems ] Output [ product_id ] ; #2 = Aggregate [ #1 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_id ] ; #3 = Scan Table [ Product ] Output [ product_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.product_id = #3.product_id ] Output [ #3.product_id , #2.Count_Star ]"
    },
    {
        "id": "bef5a5308932f1d6f1ee199e1eb5aa2ffbe83cbf60e3dddc9fb9f432e8282fa4",
        "question": "For each product with some problems, list the count of problems and the product id.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problems ] Output [ product_id ] ; #2 = Aggregate [ #1 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_id ] ; #3 = Scan Table [ Product ] Output [ product_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.product_id = #3.product_id ] Output [ #3.product_id , #2.Count_Star ]"
    },
    {
        "id": "a15d11f9344a4897165b558fce6b3e790b94f149cbfd275f7c1ddd5d4806be53",
        "question": "List the names of all the distinct product names in alphabetical order?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Product ] Output [ product_name ] ; #2 = Sort [ #1 ] OrderBy [ product_name ASC ] Distinct [ true ] Output [ product_name ]"
    },
    {
        "id": "a5e029493ce5990311a41321de06c9b32672056760f31bd9b39a0e08fd4127e4",
        "question": "Sort all the distinct product names in alphabetical order.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Product ] Output [ product_name ] ; #2 = Sort [ #1 ] OrderBy [ product_name ASC ] Distinct [ true ] Output [ product_name ]"
    },
    {
        "id": "154865ab4056bd44ce37bfa88deefb9fd28db705fb3409bfdbd338c417d4801d",
        "question": "List all the distinct product names ordered by product id?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Product ] Output [ product_name , product_id ] ; #2 = Sort [ #1 ] OrderBy [ product_id ASC ] Distinct [ true ] Output [ product_name , product_id ]"
    },
    {
        "id": "1498032d219ef76753ffd432542bf61e4cac8c4153529f7915ffcba3a0043675",
        "question": "What is the list of distinct product names sorted by product id?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Product ] Output [ product_name , product_id ] ; #2 = Sort [ #1 ] OrderBy [ product_id ASC ] Distinct [ true ] Output [ product_name , product_id ]"
    },
    {
        "id": "aae3194fd18d130c752278628f974fefe1ba5c4a519536599188358900c3ac34",
        "question": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Dameon' AND staff_last_name = 'Frami' ] Output [ staff_first_name , staff_last_name , staff_id ] ; #2 = Scan Table [ Problems ] Output [ reported_by_staff_id , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.reported_by_staff_id ] Output [ #2.product_id ] ; #4 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Jolie' AND staff_last_name = 'Weber' ] Output [ staff_first_name , staff_last_name , staff_id ] ; #5 = Scan Table [ Problems ] Output [ reported_by_staff_id , product_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.staff_id = #5.reported_by_staff_id ] Output [ #5.product_id ] ; #7 = Union [ #3 , #6 ] Output [ #3.product_id ]"
    },
    {
        "id": "18b8acc4227d0d3d27c26dbf603129bd13095db340f07b5acd34346c7567bc78",
        "question": "Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Dameon' AND staff_last_name = 'Frami' ] Output [ staff_first_name , staff_last_name , staff_id ] ; #2 = Scan Table [ Problems ] Output [ reported_by_staff_id , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.reported_by_staff_id ] Output [ #2.product_id ] ; #4 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Jolie' AND staff_last_name = 'Weber' ] Output [ staff_first_name , staff_last_name , staff_id ] ; #5 = Scan Table [ Problems ] Output [ reported_by_staff_id , product_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.staff_id = #5.reported_by_staff_id ] Output [ #5.product_id ] ; #7 = Union [ #3 , #6 ] Output [ #3.product_id ]"
    },
    {
        "id": "16d744f91201626a0c711723119fc7153e5fa8bce98e3effdc2a5cfcbe2b386a",
        "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Christop' AND staff_last_name = 'Berge' ] Output [ staff_first_name , staff_last_name , staff_id ] ; #2 = Scan Table [ Problems ] Output [ reported_by_staff_id , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.reported_by_staff_id ] Distinct [ true ] Output [ #2.product_id ] ; #4 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Ashley' AND staff_last_name = 'Medhurst' ] Output [ staff_first_name , staff_last_name , staff_id ] ; #5 = Scan Table [ Problems ] Output [ product_id , closure_authorised_by_staff_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.staff_id = #5.closure_authorised_by_staff_id ] Output [ #5.product_id ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.product_id = #6.product_id ] Output [ #3.product_id ]"
    },
    {
        "id": "4f207c78ca58c12b0bcff6035f8e9f4bf852369a92cb596e25ef815ee2e47d8d",
        "question": "For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Christop' AND staff_last_name = 'Berge' ] Output [ staff_first_name , staff_last_name , staff_id ] ; #2 = Scan Table [ Problems ] Output [ reported_by_staff_id , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.reported_by_staff_id ] Distinct [ true ] Output [ #2.product_id ] ; #4 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Ashley' AND staff_last_name = 'Medhurst' ] Output [ staff_first_name , staff_last_name , staff_id ] ; #5 = Scan Table [ Problems ] Output [ product_id , closure_authorised_by_staff_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.staff_id = #5.closure_authorised_by_staff_id ] Output [ #5.product_id ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.product_id = #6.product_id ] Output [ #3.product_id ]"
    },
    {
        "id": "8374169a4aaf7eef1b48b9272ee6bb8ee04f5217c8e35524ca4c90850b26e9b6",
        "question": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Lysanne' AND staff_last_name = 'Turcotte' ] Output [ staff_first_name , staff_last_name , staff_id ] ; #2 = Scan Table [ Problems ] Output [ reported_by_staff_id , date_problem_reported ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.reported_by_staff_id = #1.staff_id ] Output [ #2.date_problem_reported ] ; #4 = Aggregate [ #3 ] Output [ MIN(date_problem_reported) AS Min_date_problem_reported ] ; #5 = Scan Table [ Problems ] Output [ date_problem_reported , problem_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #5.date_problem_reported < #4.Min_date_problem_reported ] Output [ #5.problem_id ]"
    },
    {
        "id": "2fb63a542e939b13987eb1e242004f88a7089379af516542f7ed5ce457b4c6c5",
        "question": "Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Lysanne' AND staff_last_name = 'Turcotte' ] Output [ staff_first_name , staff_last_name , staff_id ] ; #2 = Scan Table [ Problems ] Output [ reported_by_staff_id , date_problem_reported ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.reported_by_staff_id = #1.staff_id ] Output [ #2.date_problem_reported ] ; #4 = Aggregate [ #3 ] Output [ MIN(date_problem_reported) AS Min_date_problem_reported ] ; #5 = Scan Table [ Problems ] Output [ date_problem_reported , problem_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #5.date_problem_reported < #4.Min_date_problem_reported ] Output [ #5.problem_id ]"
    },
    {
        "id": "ffdcf3e03b17bbac4816281e7e5df5e51008bb7a8c2188dc34e93cbe96daaf13",
        "question": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Rylan' AND staff_last_name = 'Homenick' ] Output [ staff_first_name , staff_last_name , staff_id ] ; #2 = Scan Table [ Problems ] Output [ reported_by_staff_id , date_problem_reported ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.reported_by_staff_id = #1.staff_id ] Output [ #2.date_problem_reported ] ; #4 = Aggregate [ #3 ] Output [ MAX(date_problem_reported) AS Max_date_problem_reported ] ; #5 = Scan Table [ Problems ] Output [ date_problem_reported , problem_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #5.date_problem_reported > #4.Max_date_problem_reported ] Output [ #5.problem_id ]"
    },
    {
        "id": "8565f5ba20973d61533a28437b721554206e887b8ff19a4696eef8cae4aedb28",
        "question": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Staff ] Predicate [ staff_first_name = 'Rylan' AND staff_last_name = 'Homenick' ] Output [ staff_first_name , staff_last_name , staff_id ] ; #2 = Scan Table [ Problems ] Output [ reported_by_staff_id , date_problem_reported ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.reported_by_staff_id = #1.staff_id ] Output [ #2.date_problem_reported ] ; #4 = Aggregate [ #3 ] Output [ MAX(date_problem_reported) AS Max_date_problem_reported ] ; #5 = Scan Table [ Problems ] Output [ date_problem_reported , problem_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #5.date_problem_reported > #4.Max_date_problem_reported ] Output [ #5.problem_id ]"
    },
    {
        "id": "87983bd52ddb2f7da5efb78bc4166a92e9c8a17c30dd08a540242f7d33f5d0c8",
        "question": "Find the top 3 products which have the largest number of problems?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problems ] Output [ product_id ] ; #2 = Scan Table [ Product ] Output [ product_name , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.product_name ] ; #4 = Aggregate [ #3 ] GroupBy [ product_name ] Output [ countstar AS Count_Star , product_name ] ; #5 = TopSort [ #4 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ product_name , Count_Star ]"
    },
    {
        "id": "aaac099542ee25fad30a0675b5d1faa150c3a5a5aa18103dc1e4293821903df1",
        "question": "What are the three products that have the most problems?s",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Problems ] Output [ product_id ] ; #2 = Scan Table [ Product ] Output [ product_name , product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.product_name ] ; #4 = Aggregate [ #3 ] GroupBy [ product_name ] Output [ countstar AS Count_Star , product_name ] ; #5 = TopSort [ #4 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ product_name , Count_Star ]"
    },
    {
        "id": "051e0e116f49eb0a199052b22b3430df5d15d8fc1e9ed050ad0cfa3b2fa6ef7e",
        "question": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Product ] Predicate [ product_name = 'voluptatem' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Problems ] Predicate [ date_problem_reported > '1995-01-01 00:00:00.000' ] Output [ product_id , date_problem_reported , problem_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.problem_id ]"
    },
    {
        "id": "bdb263885e1a994e19d393fa3a265770967c520ac69ffb184921d4922d9e5a39",
        "question": "What are the ids of the problems that are from the product \"voluptatem\" and are reported after 1995?",
        "parsing_tree": "tracking_software_problems | #1 = Scan Table [ Product ] Predicate [ product_name = 'voluptatem' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Problems ] Predicate [ date_problem_reported > '1995-01-01 00:00:00.000' ] Output [ product_id , date_problem_reported , problem_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.problem_id ]"
    },
    {
        "id": "1b2f975c2e950abfded34f2c7d2753105a1183933a4520e7a096b1b9ace184a1",
        "question": "How many branches where have more than average number of memberships are there?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Output [ membership_amount ] ; #2 = Aggregate [ #1 ] Output [ AVG(membership_amount) AS Avg_membership_amount ] ; #3 = Scan Table [ branch ] Output [ membership_amount ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.membership_amount > #2.Avg_membership_amount ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "294988c8464c05678bc0e998cb73e28698517256dfde17dc18ac029e5265fa7e",
        "question": "What is the number of branches that have more than the average number of memberships?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Output [ membership_amount ] ; #2 = Aggregate [ #1 ] Output [ AVG(membership_amount) AS Avg_membership_amount ] ; #3 = Scan Table [ branch ] Output [ membership_amount ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.membership_amount > #2.Avg_membership_amount ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "fb41ec28120b3b0d0e1f75c417386fa49fc58ea7df3bab230c729c601b0fd808",
        "question": "Show name, address road, and city for all branches sorted by open year.",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Output [ Address_road , Open_year , City , Name ] ; #2 = Sort [ #1 ] OrderBy [ Open_year ASC ] Output [ Open_year , Address_road , City , Name ]"
    },
    {
        "id": "bf6b426471799ec17a37aab85d210115cae5ab69e4025cc0853a3e66824bcb3f",
        "question": "What are the names, address roads, and cities of the branches ordered by opening year?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Output [ Address_road , Open_year , City , Name ] ; #2 = Sort [ #1 ] OrderBy [ Open_year ASC ] Output [ Open_year , Address_road , City , Name ]"
    },
    {
        "id": "faf54b1564771806a90d1eef8a9b270ef89a5f8ded0232d8158027783a64999e",
        "question": "What are names for top three branches with most number of membership?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Output [ membership_amount , Name ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ membership_amount DESC ] Output [ membership_amount , Name ]"
    },
    {
        "id": "56a25d1bf5801eee2465285e563c1e66d6d2c14b60ac44d6c630e870f5f0b640",
        "question": "What are the names for the 3 branches that have the most memberships?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Output [ membership_amount , Name ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ membership_amount DESC ] Output [ membership_amount , Name ]"
    },
    {
        "id": "3436a08cff79ee9bf13af21ab7fe58184fd25df0761fc6d60a8a9f286e435dfc",
        "question": "Show all distinct city where branches with at least 100 memberships are located.",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Predicate [ membership_amount >= 100 ] Distinct [ true ] Output [ City ]"
    },
    {
        "id": "0ea1294c9da186b7072d1c94c5152adad4d8e8201ad2c5b290667bd80c6e14f9",
        "question": "What are the different cities that have more than 100 memberships?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Predicate [ membership_amount >= 100 ] Distinct [ true ] Output [ City ]"
    },
    {
        "id": "bd5f10b791b0af7d6344d0265148c6be16a88d8e60ec57fad1e14d010b340843",
        "question": "List all open years when at least two shops are opened.",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Output [ Open_year ] ; #2 = Aggregate [ #1 ] GroupBy [ Open_year ] Output [ countstar AS Count_Star , Open_year ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Open_year ]"
    },
    {
        "id": "dda978391205922173052299ce365f95b20572f5af6052168d3ebffe4e2daf51",
        "question": "What are the opening years in which at least two shops opened?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Output [ Open_year ] ; #2 = Aggregate [ #1 ] GroupBy [ Open_year ] Output [ countstar AS Count_Star , Open_year ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Open_year ]"
    },
    {
        "id": "e69b731863b043760d8c81a28117cc3969781fb38c2f179995088e5d42b00c76",
        "question": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Predicate [ Open_year = 2011 OR City = 'London' ] Output [ membership_amount , Open_year , City ] ; #2 = Aggregate [ #1 ] Output [ MIN(membership_amount) AS Min_membership_amount , MAX(membership_amount) AS Max_membership_amount ]"
    },
    {
        "id": "defb6240e142f138c4086a6823b20d9b0deede28e60e596ad65f818b767bbcbb",
        "question": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Predicate [ Open_year = 2011 OR City = 'London' ] Output [ membership_amount , Open_year , City ] ; #2 = Aggregate [ #1 ] Output [ MIN(membership_amount) AS Min_membership_amount , MAX(membership_amount) AS Max_membership_amount ]"
    },
    {
        "id": "d6b3c87a7fd96debc057e95ef8ca26452332626e991290a4898408fcc4f1745b",
        "question": "Show the city and the number of branches opened before 2010 for each city.",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Predicate [ Open_year < 2010 ] Output [ Open_year , City ] ; #2 = Aggregate [ #1 ] GroupBy [ City ] Output [ countstar AS Count_Star , City ]"
    },
    {
        "id": "2a3ed014d8e4d2f5bede36187d1f314ac2e64397cb6ffce82b42f45a04747da1",
        "question": "For each city, how many branches opened before 2010?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Predicate [ Open_year < 2010 ] Output [ Open_year , City ] ; #2 = Aggregate [ #1 ] GroupBy [ City ] Output [ countstar AS Count_Star , City ]"
    },
    {
        "id": "262c86c8fc6ae62c6d4fa827a992cd0d7174f9cf463afdaa74e937bbe084e280",
        "question": "How many different levels do members have?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ member ] Distinct [ true ] Output [ Level ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Level) AS Count_Dist_Level ]"
    },
    {
        "id": "94f277d00ae81433e67566302b75349802b5af9ebed1451cd63caeadd1adaeab",
        "question": "What are the different membership levels?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ member ] Distinct [ true ] Output [ Level ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Level) AS Count_Dist_Level ]"
    },
    {
        "id": "a679b88772a5ae5bd422ddd947ae1300b7a23dc7435beb06c11cda26c3fe376b",
        "question": "Show card number, name, and hometown for all members in a descending order of level.",
        "parsing_tree": "shop_membership | #1 = Scan Table [ member ] Output [ Level , Hometown , Card_Number , Name ] ; #2 = Sort [ #1 ] OrderBy [ Level DESC ] Output [ Level , Hometown , Card_Number , Name ]"
    },
    {
        "id": "e038ce979cb34e6470187a4e6c6bafe4811682d200d8abae0c16460952190e6f",
        "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ member ] Output [ Level , Hometown , Card_Number , Name ] ; #2 = Sort [ #1 ] OrderBy [ Level DESC ] Output [ Level , Hometown , Card_Number , Name ]"
    },
    {
        "id": "c1884ce09fb37d35a5c80212d08a2634f12c445f14102992d3ef425bb79ed148",
        "question": "Show the membership level with most number of members.",
        "parsing_tree": "shop_membership | #1 = Scan Table [ member ] Output [ Level ] ; #2 = Aggregate [ #1 ] GroupBy [ Level ] Output [ countstar AS Count_Star , Level ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Level , Count_Star ]"
    },
    {
        "id": "333191338ae796f5d141e969847ab31d83971803335e0c9b8c983a274a09a18c",
        "question": "What is the membership level with the most people?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ member ] Output [ Level ] ; #2 = Aggregate [ #1 ] GroupBy [ Level ] Output [ countstar AS Count_Star , Level ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Level , Count_Star ]"
    },
    {
        "id": "bbfbfe454f7ff2c1c1f29497fc5ad99997c6c5eb7ef553a35943b4aa68f5ca7c",
        "question": "Show member names without any registered branch.",
        "parsing_tree": "shop_membership | #1 = Scan Table [ member ] Output [ Name , Member_ID ] ; #2 = Scan Table [ membership_register_branch ] Output [ Member_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Member_ID = #1.Member_ID ] Output [ #1.Name ]"
    },
    {
        "id": "32e882ed113d219ff29a41b1d9e55c7bdb933d4aa91fc06688fe72150c7ada72",
        "question": "What are the names of the members that have never registered at any branch?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ member ] Output [ Name , Member_ID ] ; #2 = Scan Table [ membership_register_branch ] Output [ Member_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Member_ID = #1.Member_ID ] Output [ #1.Name ]"
    },
    {
        "id": "c77f0613deeafc7dbfb8a094f0a46477421447a5faac588ad7566c0755ffb060",
        "question": "List the branch name and city without any registered members.",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Output [ Branch_ID , City , Name ] ; #2 = Scan Table [ membership_register_branch ] Output [ Branch_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Branch_ID IS NULL OR #1.Branch_ID = #2.Branch_ID ] Output [ #1.City , #1.Name ]"
    },
    {
        "id": "4e49b4fefeb8d40e0e63629970385489f5f27bf1fc96b61a1fa0d60f8fd84ec0",
        "question": "What are the names and cities of the branches that do not have any registered members?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Output [ Branch_ID , City , Name ] ; #2 = Scan Table [ membership_register_branch ] Output [ Branch_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Branch_ID IS NULL OR #1.Branch_ID = #2.Branch_ID ] Output [ #1.City , #1.Name ]"
    },
    {
        "id": "8f00702ac26caea2f5d4faa4bb7142e8413a89ed450ecd581f65698b76b36d0e",
        "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ membership_register_branch ] Predicate [ Register_Year = 2016 ] Output [ Branch_ID , Register_Year ] ; #2 = Aggregate [ #1 ] GroupBy [ Branch_ID ] Output [ Branch_ID , countstar AS Count_Star ] ; #3 = Scan Table [ branch ] Output [ Branch_ID , Open_year , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Branch_ID = #3.Branch_ID ] Output [ #3.Name , #3.Open_year , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Open_year , Name ]"
    },
    {
        "id": "e386d200cdacb8493977ceaf0260f8e29da73e7cabd018d45e2ef14b934800ff",
        "question": "What is the name and opening year for the branch that registered the most members in 2016?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ membership_register_branch ] Predicate [ Register_Year = 2016 ] Output [ Branch_ID , Register_Year ] ; #2 = Aggregate [ #1 ] GroupBy [ Branch_ID ] Output [ Branch_ID , countstar AS Count_Star ] ; #3 = Scan Table [ branch ] Output [ Branch_ID , Open_year , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Branch_ID = #3.Branch_ID ] Output [ #3.Name , #3.Open_year , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Open_year , Name ]"
    },
    {
        "id": "a01887fd483d765030c7c9370df0cfde7975e026ec47f5f0ecb78fbd8ac3d9bc",
        "question": "Show the member name and hometown who registered a branch in 2016.",
        "parsing_tree": "shop_membership | #1 = Scan Table [ membership_register_branch ] Predicate [ Register_Year = 2016 ] Output [ Register_Year , Member_ID ] ; #2 = Scan Table [ member ] Output [ Hometown , Name , Member_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Member_ID = #2.Member_ID ] Output [ #2.Name , #2.Hometown ]"
    },
    {
        "id": "4ecf37ea6d98ac5d677f02f4e31b9cd3a8b6235ca42e2480df8f06784d718d8f",
        "question": "What are the member names and hometowns of those who registered at a branch in 2016?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ membership_register_branch ] Predicate [ Register_Year = 2016 ] Output [ Register_Year , Member_ID ] ; #2 = Scan Table [ member ] Output [ Hometown , Name , Member_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Member_ID = #2.Member_ID ] Output [ #2.Name , #2.Hometown ]"
    },
    {
        "id": "57e225f560332823f0a0a6579af48ba114442db804f2ec116dad7765267491d0",
        "question": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Predicate [ membership_amount > 100 AND Open_year = 2001 ] Output [ membership_amount , Open_year , City ]"
    },
    {
        "id": "fba9d51203c2e0e8c942c701ef3a23e7b54e4896792fe28236bfebdd19389a28",
        "question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Predicate [ membership_amount > 100 AND Open_year = 2001 ] Output [ membership_amount , Open_year , City ]"
    },
    {
        "id": "afe649ae392baee6fb28edac082937488621fa3417919042dd72829193962e54",
        "question": "Show all cities without a branch having more than 100 memberships.",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Distinct [ true ] Output [ City ] ; #2 = Scan Table [ branch ] Predicate [ membership_amount > 100 ] Output [ membership_amount , City ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.City = #2.City ] Output [ #1.City ]"
    },
    {
        "id": "01e0d41df1a5df14f939349d82bc8292e0dc6e84ec872a2cf82f59729fad520c",
        "question": "What are the cities that do not have any branches with more than 100 members?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ branch ] Distinct [ true ] Output [ City ] ; #2 = Scan Table [ branch ] Predicate [ membership_amount > 100 ] Output [ membership_amount , City ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.City = #2.City ] Output [ #1.City ]"
    },
    {
        "id": "0ec0925f4d22dfca305a9d495f1684a48b4c1db1ab52807fabefbc9d1bfafeb0",
        "question": "What is the sum of total pounds of purchase in year 2018 for all branches in London?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ purchase ] Predicate [ Year = 2018 ] Output [ Branch_ID , Total_pounds , Year ] ; #2 = Scan Table [ branch ] Predicate [ City = 'London' ] Output [ Branch_ID , City ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Branch_ID = #2.Branch_ID ] Output [ #1.Total_pounds ] ; #4 = Aggregate [ #3 ] Output [ SUM(Total_pounds) AS Sum_Total_pounds ]"
    },
    {
        "id": "288714e013a972f2d60067aa0f0293268755c233f1a8b09ae511f3fd576eaaa7",
        "question": "How many total pounds were purchased in the year 2018 at all London branches?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ purchase ] Predicate [ Year = 2018 ] Output [ Branch_ID , Total_pounds , Year ] ; #2 = Scan Table [ branch ] Predicate [ City = 'London' ] Output [ Branch_ID , City ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Branch_ID = #2.Branch_ID ] Output [ #1.Total_pounds ] ; #4 = Aggregate [ #3 ] Output [ SUM(Total_pounds) AS Sum_Total_pounds ]"
    },
    {
        "id": "c151651f0316bbf87425f797d778c06cd98f70b6be146057a882db45a1a1661f",
        "question": "What is the total number of purchases for members with level 6?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ purchase ] Output [ Member_ID ] ; #2 = Scan Table [ member ] Predicate [ Level = 6 ] Output [ Level , Member_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Member_ID = #2.Member_ID ] Output [ #1.Member_ID ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "308623eede7908866abd14d306e093e79c7085d72b3bc852e6ac4b8ecdb6ac3e",
        "question": "What are the total purchases for members rated at level 6?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ purchase ] Output [ Member_ID ] ; #2 = Scan Table [ member ] Predicate [ Level = 6 ] Output [ Level , Member_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Member_ID = #2.Member_ID ] Output [ #1.Member_ID ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ec62a5ee38d34263c9df05fe8da2556c126dcdeae3131b04c0122806f89281ea",
        "question": "list the card number of all members whose hometown address includes word \"Kentucky\".",
        "parsing_tree": "shop_membership | #1 = Scan Table [ member ] Predicate [ Hometown like '%Kentucky%' ] Output [ Hometown , Card_Number ]"
    },
    {
        "id": "894b1f07131c70ed87f23e8e3a40c24d6f4b5c3af6779beb2e64f3676d560834",
        "question": "What are the card numbers of members from Kentucky?",
        "parsing_tree": "shop_membership | #1 = Scan Table [ member ] Predicate [ Hometown like '%Kentucky%' ] Output [ Hometown , Card_Number ]"
    },
    {
        "id": "7f1709a647f3e2fee477f89b9361ac7432301a09924fd43112e1f43f8a39bc0d",
        "question": "Find the number of students in total.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "02780053d053340a91b18d92ea65a29ebd48657491d233702471de84cff708da",
        "question": "How many students are there in total?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1ba763db851387b13d35fbcbe3e3e80f4af7c1f69ad612bf0a2d67edf7733d6f",
        "question": "Find the number of voting records in total.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "8b66ba2df49adec491fe103788115de5c8c9b1d23819efff7ef9b36046cf83bb",
        "question": "How many voting records do we have?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7cf4a54d746c3fea4442a32809132694baaa1ee4030f714a4bac9aee9e172c6b",
        "question": "Find the distinct number of president votes.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Distinct [ true ] Output [ President_Vote ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT President_Vote) AS Count_Dist_President_Vote ]"
    },
    {
        "id": "2ef5028aaf15e9e97034dc9007e544b042dda240cbdbfc79524feb9cd7c8e8be",
        "question": "How many distinct president votes are recorded?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Distinct [ true ] Output [ President_Vote ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT President_Vote) AS Count_Dist_President_Vote ]"
    },
    {
        "id": "43c8585f4c37cac0395cbc58192e146ee51e353748dd2f2b72c490cdfbc0cb98",
        "question": "Find the maximum age of all the students.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ MAX(Age) AS Max_Age ]"
    },
    {
        "id": "7a3aea7a048693c5914051954c7abb3c1d686d8c68f6d1c9102a9c90c645103d",
        "question": "What is the oldest age among the students?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ MAX(Age) AS Max_Age ]"
    },
    {
        "id": "079d219abdae6966948c8c43435c561e1e0101b1a6ad1359bf5f2ab991ddfcf0",
        "question": "Find the last names of students with major 50.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ Major = 50 ] Output [ LName , Major ]"
    },
    {
        "id": "ada6ca5985160029ab50a0a446db667a8511c65030805fdad93783b669bb015e",
        "question": "What are the last names of students studying major 50?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ Major = 50 ] Output [ LName , Major ]"
    },
    {
        "id": "41581c8ae0aa011f70d3c745d05eb05ca0b57afd659bb29f8b92c5ea4de8f5eb",
        "question": "Find the first names of students with age above 22.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ Age > 22 ] Output [ Fname , Age ]"
    },
    {
        "id": "47b7a916936e9de4deb2c4b272fbfa4e61436cee4cd7acd160c20c6e4074f39e",
        "question": "What are the first names of all the students aged above 22?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ Age > 22 ] Output [ Fname , Age ]"
    },
    {
        "id": "ba1dec6fc108f968641ccbdf9defc4167789aa51b3c19a9be92f38d619dc0788",
        "question": "What are the majors of male (sex is M) students?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ Sex = 'M' ] Output [ Sex , Major ]"
    },
    {
        "id": "b86a6972eefcd904f04f9861f49e742661d9e0121d852e346c1dc8546b1bf9fc",
        "question": "List the major of each male student.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ Sex = 'M' ] Output [ Sex , Major ]"
    },
    {
        "id": "324a34499aa3c3abf82563e4b7ad10518e86126b3442706d91b95ff58faf29d9",
        "question": "What is the average age of female (sex is F) students?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , Age ] ; #2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "e23f1236dfb85f9e025da70f012f8905a33035be12c52b05c07bfb3fe56b4d35",
        "question": "Find the average age of female students.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , Age ] ; #2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "3e8c844cc3c09b4098445bc814e0a169cf83a6e42442912aca63802cad5de34b",
        "question": "What are the maximum and minimum age of students with major 600?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ Major = 600 ] Output [ Major , Age ] ; #2 = Aggregate [ #1 ] Output [ MAX(Age) AS Max_Age , MIN(Age) AS Min_Age ]"
    },
    {
        "id": "f3b588b79d87ce356c43edd17604734179be34ad258881dcff15baf3eeee89e5",
        "question": "Tell me the ages of the oldest and youngest students studying major 600.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ Major = 600 ] Output [ Major , Age ] ; #2 = Aggregate [ #1 ] Output [ MAX(Age) AS Max_Age , MIN(Age) AS Min_Age ]"
    },
    {
        "id": "b526633520a8c9d2aeb7759778cd9efab8c6d8298d00c597818d3e1c3fd165b9",
        "question": "Who are the advisors for students that live in a city with city code \"BAL\"?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ city_code = 'BAL' ] Output [ Advisor , city_code ]"
    },
    {
        "id": "0d781be908a77c57114e66513e51eebd7d590d4635226eacf6758f87c4939257",
        "question": "Show the advisors of the students whose city of residence has city code \"BAL\".",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ city_code = 'BAL' ] Output [ Advisor , city_code ]"
    },
    {
        "id": "6c07991ed83a05b68d23976d50ae13fc893e5284afe5a61fe0fd5375f7e5c145",
        "question": "What are the distinct secretary votes in the fall election cycle?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Predicate [ Election_Cycle = 'Fall' ] Distinct [ true ] Output [ Secretary_Vote ]"
    },
    {
        "id": "3f879b83e1e5a04ab1d14bcddde7faa2f1418a0c2d0d2ca66c9e3a615e46de3f",
        "question": "Return all the distinct secretary votes made in the fall election cycle.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Predicate [ Election_Cycle = 'Fall' ] Distinct [ true ] Output [ Secretary_Vote ]"
    },
    {
        "id": "2daf1e4dd4a45e9786de2d464d136bfd32b07b9457047f35bb6fb9d172df379f",
        "question": "What are the distinct president votes on 08/30/2015?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Predicate [ Registration_Date = '08/30/2015' ] Distinct [ true ] Output [ President_Vote ]"
    },
    {
        "id": "3c0b950f0d4175cec5993b0af7da51f55e7f393a40fb7b01d25d3458be946429",
        "question": "Show all the distinct president votes made on 08/30/2015.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Predicate [ Registration_Date = '08/30/2015' ] Distinct [ true ] Output [ President_Vote ]"
    },
    {
        "id": "64887fe6aadecbb92c786fe230b9fca6a621cdaaac3041003b46fce340fcd5ed",
        "question": "Report the distinct registration date and the election cycle.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Distinct [ true ] Output [ Registration_Date , Election_Cycle ]"
    },
    {
        "id": "314a28a464762636ff4b2490f873ab4c434dc7f8e560c50e882155f9c26af249",
        "question": "What are the distinct registration dates and the election cycles?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Distinct [ true ] Output [ Registration_Date , Election_Cycle ]"
    },
    {
        "id": "978342d37dca16ed769d8cc972a8f12f9299b6b615bc96d4948cffe25b729a27",
        "question": "Report the distinct president vote and the vice president vote.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Distinct [ true ] Output [ Vice_President_Vote , President_Vote ]"
    },
    {
        "id": "8bc48e40559e7a9d6880cba7817db97e3780dd0c95ef69b11b7ea576b7fca755",
        "question": "List all the distinct president votes and the vice president votes.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Distinct [ true ] Output [ Vice_President_Vote , President_Vote ]"
    },
    {
        "id": "9f8bb9faf7d5b473f0025862b5844fe72ad6f0cc96795904a664470c483e2820",
        "question": "Find the distinct last names of the students who have class president votes.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ Class_President_Vote ] ; #2 = Scan Table [ Student ] Output [ LName , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Class_President_Vote = #2.StuID ] Distinct [ true ] Output [ #2.LName ]"
    },
    {
        "id": "c0e82f33ccea4a1d172b57a001f83704fa7449016a4a188591e8315bb25113c9",
        "question": "What are the distinct last names of the students who have class president votes?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ Class_President_Vote ] ; #2 = Scan Table [ Student ] Output [ LName , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Class_President_Vote = #2.StuID ] Distinct [ true ] Output [ #2.LName ]"
    },
    {
        "id": "d7bef44ad185d50e440ff9ebc51ca8f718410188960a6e05686a02b622385400",
        "question": "Find the distinct first names of the students who have class senator votes.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ Class_Senator_Vote ] ; #2 = Scan Table [ Student ] Output [ Fname , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Class_Senator_Vote = #2.StuID ] Distinct [ true ] Output [ #2.Fname ]"
    },
    {
        "id": "a4eceb8bde539a57ad13c1aa3fe011fd005f3db93c2086c6da4ac218f9cd28db",
        "question": "What are the distinct first names of the students who have class president votes?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ Class_Senator_Vote ] ; #2 = Scan Table [ Student ] Output [ Fname , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Class_Senator_Vote = #2.StuID ] Distinct [ true ] Output [ #2.Fname ]"
    },
    {
        "id": "c09c0e6127906330a9e7c5fbd9ac90f6c935f091c8136e0d85133be0c0b3be89",
        "question": "Find the distinct ages of students who have secretary votes in the fall election cycle.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Predicate [ Election_Cycle = 'Fall' ] Output [ Secretary_Vote , Election_Cycle ] ; #2 = Scan Table [ Student ] Output [ StuID , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Secretary_Vote = #2.StuID ] Distinct [ true ] Output [ #2.Age ]"
    },
    {
        "id": "4efae174515fc855996777d47fc43e9d467d49c66ccb8b8b5aa4eb4f959be920",
        "question": "What are the distinct ages of students who have secretary votes in the fall election cycle?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Predicate [ Election_Cycle = 'Fall' ] Output [ Secretary_Vote , Election_Cycle ] ; #2 = Scan Table [ Student ] Output [ StuID , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Secretary_Vote = #2.StuID ] Distinct [ true ] Output [ #2.Age ]"
    },
    {
        "id": "a30ebb67622ef93386e8d5bc8f967897adae0639802c9288c2f1dfaf785cd70b",
        "question": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Predicate [ Election_Cycle = 'Spring' ] Output [ Treasurer_Vote , Election_Cycle ] ; #2 = Scan Table [ Student ] Output [ Advisor , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Treasurer_Vote = #2.StuID ] Distinct [ true ] Output [ #2.Advisor ]"
    },
    {
        "id": "34a491c38876f98c7381bed46c88d926e2099e15460edd472d088255f2416fa8",
        "question": "Who served as an advisor for students who have treasurer votes in the spring election cycle?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Predicate [ Election_Cycle = 'Spring' ] Output [ Treasurer_Vote , Election_Cycle ] ; #2 = Scan Table [ Student ] Output [ Advisor , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Treasurer_Vote = #2.StuID ] Distinct [ true ] Output [ #2.Advisor ]"
    },
    {
        "id": "934988e89f6a949862917c1d336cc29a26cfdf8253db3e3f97c66e984f2837ad",
        "question": "Find the distinct majors of students who have treasurer votes.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ Treasurer_Vote ] ; #2 = Scan Table [ Student ] Output [ StuID , Major ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Treasurer_Vote = #2.StuID ] Distinct [ true ] Output [ #2.Major ]"
    },
    {
        "id": "166e4b8a483974ef1bcf29ae4a26d31da859acb77dff411c2d63c6a15d58a0e9",
        "question": "What are the distinct majors that students with treasurer votes are studying?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ Treasurer_Vote ] ; #2 = Scan Table [ Student ] Output [ StuID , Major ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Treasurer_Vote = #2.StuID ] Distinct [ true ] Output [ #2.Major ]"
    },
    {
        "id": "c2b47a95da6926ecd374d58e16351c1d72f5ebe4e28e5f541a83d9e5403307eb",
        "question": "Find the first and last names of all the female (sex is F) students who have president votes.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ President_Vote ] ; #2 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , LName , Fname , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.President_Vote = #2.StuID ] Distinct [ true ] Output [ #2.LName , #2.Fname ]"
    },
    {
        "id": "2c3c1b31e502ad4502818dd0c5f3f387de44e9fd16a303616839f5f6fe9052fe",
        "question": "What are the first and last names of all the female students who have president votes?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ President_Vote ] ; #2 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , LName , Fname , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.President_Vote = #2.StuID ] Distinct [ true ] Output [ #2.LName , #2.Fname ]"
    },
    {
        "id": "fed88e538c0960810a18d498ddf363d8fc80ddf380a23fed2ceb4ded0a654ec1",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ Vice_President_Vote ] ; #2 = Scan Table [ Student ] Predicate [ Age = 18 ] Output [ LName , Fname , StuID , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Vice_President_Vote = #2.StuID ] Distinct [ true ] Output [ #2.LName , #2.Fname ]"
    },
    {
        "id": "cec87fa455a539125a79fea481ec57f244e93f2478431b6a9bc7068926c16c5d",
        "question": "What are the first names and last names of the students who are 18 years old and have vice president votes.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ Vice_President_Vote ] ; #2 = Scan Table [ Student ] Predicate [ Age = 18 ] Output [ LName , Fname , StuID , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Vice_President_Vote = #2.StuID ] Distinct [ true ] Output [ #2.LName , #2.Fname ]"
    },
    {
        "id": "a69e461e8be6fbb4216125d56f7f8ef3e94297b94ddeaf9e45611a53c9b00fdf",
        "question": "How many male (sex is M) students have class senator votes in the fall election cycle?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Predicate [ Election_Cycle = 'Fall' ] Output [ Class_Senator_Vote , Election_Cycle ] ; #2 = Scan Table [ Student ] Predicate [ Sex = 'M' ] Output [ Sex , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Class_Senator_Vote = #2.StuID ] Output [ #1.Class_Senator_Vote , #1.Election_Cycle ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "04c3e5fb5b95460ac2a17e3e044bc9e856533945c23959ad074f041a6c334481",
        "question": "Count the number of male students who had class senator votes in the fall election cycle.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Predicate [ Election_Cycle = 'Fall' ] Output [ Class_Senator_Vote , Election_Cycle ] ; #2 = Scan Table [ Student ] Predicate [ Sex = 'M' ] Output [ Sex , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Class_Senator_Vote = #2.StuID ] Output [ #1.Class_Senator_Vote , #1.Election_Cycle ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "de0d5092cdc02db5ced631b3ead073ee858da641c9daf65ad3c087d4259a2499",
        "question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ city_code = 'NYC' ] Output [ StuID , city_code ] ; #2 = Scan Table [ Voting_record ] Predicate [ Election_Cycle = 'Spring' ] Output [ Class_Senator_Vote , Election_Cycle ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.Class_Senator_Vote ] Output [ #1.city_code , #1.StuID ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "51d86d578c3eac336d7ea6b9f3984c97d67555908967d33d170d77e77a9d2a2a",
        "question": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ city_code = 'NYC' ] Output [ StuID , city_code ] ; #2 = Scan Table [ Voting_record ] Predicate [ Election_Cycle = 'Spring' ] Output [ Class_Senator_Vote , Election_Cycle ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.Class_Senator_Vote ] Output [ #1.city_code , #1.StuID ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "26c9e59bfc91829730bcf372263a3498d46f5d3a0e71fdc604fb5288ce93c140",
        "question": "Find the average age of students who live in the city with code \"NYC\" and have secretary votes in the spring election cycle.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ city_code = 'NYC' ] Output [ city_code , StuID , Age ] ; #2 = Scan Table [ Voting_record ] Predicate [ Election_Cycle = 'Spring' ] Output [ Secretary_Vote , Election_Cycle ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.Secretary_Vote ] Output [ #1.Age ] ; #4 = Aggregate [ #3 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "be96c68b4029c57401328436061d24ac54389328423789a5943463976814256f",
        "question": "What is the average age of students who have city code \"NYC\" and have secretary votes for the spring election cycle?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ city_code = 'NYC' ] Output [ city_code , StuID , Age ] ; #2 = Scan Table [ Voting_record ] Predicate [ Election_Cycle = 'Spring' ] Output [ Secretary_Vote , Election_Cycle ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.Secretary_Vote ] Output [ #1.Age ] ; #4 = Aggregate [ #3 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "f5a9346cba00634ae797640c7d0e287245504d934061dda3f0f0f288e6f6fcee",
        "question": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Predicate [ Election_Cycle = 'Spring' ] Output [ Secretary_Vote , Election_Cycle ] ; #2 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , StuID , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Secretary_Vote = #2.StuID ] Output [ #2.Age ] ; #4 = Aggregate [ #3 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "73c357eaa35c20f902a3deadd67bd0d1105bb86af7548bc3b0dd0f8e1670a0ee",
        "question": "What is the average age of the female students with secretary votes in the spring election cycle?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Predicate [ Election_Cycle = 'Spring' ] Output [ Secretary_Vote , Election_Cycle ] ; #2 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , StuID , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Secretary_Vote = #2.StuID ] Output [ #2.Age ] ; #4 = Aggregate [ #3 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "901bb399fb0a494d44084032a6614e4045c9711f4e9bd1100b5ea2c2dcccd520",
        "question": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ Vice_President_Vote ] ; #2 = Scan Table [ Student ] Output [ Fname , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Vice_President_Vote = #2.StuID ] Distinct [ true ] Output [ #2.Fname ] ; #4 = Scan Table [ Student ] Predicate [ city_code = 'PIT' ] Distinct [ true ] Output [ Fname , city_code ] ; #5 = Except [ #3 , #4 ] Predicate [ #3.Fname = #4.Fname ] Output [ #3.Fname ]"
    },
    {
        "id": "9b3bf0a433960e91e9241cc9c936a44d37982657d8094bf250a012e704aad808",
        "question": "What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ Vice_President_Vote ] ; #2 = Scan Table [ Student ] Output [ Fname , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Vice_President_Vote = #2.StuID ] Distinct [ true ] Output [ #2.Fname ] ; #4 = Scan Table [ Student ] Predicate [ city_code = 'PIT' ] Distinct [ true ] Output [ Fname , city_code ] ; #5 = Except [ #3 , #4 ] Predicate [ #3.Fname = #4.Fname ] Output [ #3.Fname ]"
    },
    {
        "id": "ca049662c01099e1d952252f59d8eac81845e90204292bab55022465c5baf355",
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ President_Vote ] ; #2 = Scan Table [ Student ] Output [ LName , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.President_Vote = #2.StuID ] Distinct [ true ] Output [ #2.LName ] ; #4 = Scan Table [ Student ] Predicate [ Advisor = 2192 ] Distinct [ true ] Output [ LName , Advisor ] ; #5 = Except [ #3 , #4 ] Predicate [ #3.LName = #4.LName ] Output [ #3.LName ]"
    },
    {
        "id": "7c57a446b35e8b2c362b85a824ac855bccb6d5b7684765306885d48e7d52fcae",
        "question": "What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ President_Vote ] ; #2 = Scan Table [ Student ] Output [ LName , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.President_Vote = #2.StuID ] Distinct [ true ] Output [ #2.LName ] ; #4 = Scan Table [ Student ] Predicate [ Advisor = 2192 ] Distinct [ true ] Output [ LName , Advisor ] ; #5 = Except [ #3 , #4 ] Predicate [ #3.LName = #4.LName ] Output [ #3.LName ]"
    },
    {
        "id": "8476172904279be6a0e68d118177a9d24ce35964989c8d2a705cb0ced202120f",
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ Advisor = 8741 ] Distinct [ true ] Output [ LName , Advisor ] ; #2 = Scan Table [ Student ] Output [ LName , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.LName = #2.LName ] Output [ #1.LName , #2.StuID ] ; #4 = Scan Table [ Voting_record ] Output [ President_Vote ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.President_Vote ] Distinct [ true ] Output [ #3.LName ]"
    },
    {
        "id": "6bde129f49dafb807bb4ff0c6e786a81b6c5c8d2f3c976b6524ad0785c2bbb96",
        "question": "What are the distinct last names of the students who have president votes and have 8741 as the advisor?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ Advisor = 8741 ] Distinct [ true ] Output [ LName , Advisor ] ; #2 = Scan Table [ Student ] Output [ LName , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.LName = #2.LName ] Output [ #1.LName , #2.StuID ] ; #4 = Scan Table [ Voting_record ] Output [ President_Vote ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.President_Vote ] Distinct [ true ] Output [ #3.LName ]"
    },
    {
        "id": "1630463438c97f5d91a2c109adb53107f2055496edf9ab915a230748d37bc87f",
        "question": "For each advisor, report the total number of students advised by him or her.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ]"
    },
    {
        "id": "3da1bdc5630a164b2aac67b7dfd88c526dfb2f21f09f179048b7413d9c91e36b",
        "question": "How many students does each advisor have?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ]"
    },
    {
        "id": "b0b767d06b3e79bf07152f2a2c1c4901ab7d775ea661719d1047f05a1181fe96",
        "question": "Report all advisors that advise more than 2 students.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Advisor ]"
    },
    {
        "id": "b621de42d5c14a79467639137e70d42b80d8c81154615241a36b8290cccc4e44",
        "question": "Which advisors have more than two students?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Advisor ]"
    },
    {
        "id": "c042334800d88b8745cf78e3775bb461210cdf9a8d8fbb74503ef84a39db825a",
        "question": "Report all majors that have less than 3 students.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ Major ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ countstar AS Count_Star , Major ] ; #3 = Filter [ #2 ] Predicate [ Count_Star < 3 ] Output [ Major ]"
    },
    {
        "id": "cf35572cae3cb80ea68c565988c6b6f9ea703e3ea58ea1a80c02fbfb61f49a6c",
        "question": "What are the majors only less than three students are studying?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ Major ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ countstar AS Count_Star , Major ] ; #3 = Filter [ #2 ] Predicate [ Count_Star < 3 ] Output [ Major ]"
    },
    {
        "id": "c99072ca8bcf2bf4d190bb664d3071656a57fa7c39372dddd627711fd4079989",
        "question": "For each election cycle, report the number of voting records.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ Election_Cycle ] ; #2 = Aggregate [ #1 ] GroupBy [ Election_Cycle ] Output [ countstar AS Count_Star , Election_Cycle ]"
    },
    {
        "id": "f6ad7eb23f01730cefef9e23dd1fa84bb1b8dc274f77832c42e0e5d0cb77a4db",
        "question": "Count the number of voting records for each election cycle.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Voting_record ] Output [ Election_Cycle ] ; #2 = Aggregate [ #1 ] GroupBy [ Election_Cycle ] Output [ countstar AS Count_Star , Election_Cycle ]"
    },
    {
        "id": "428d45b4761e537f75e0ffb04de00f811ce67bc0ebfa56f1e9fe62ce1a4dc2a0",
        "question": "Which major has the most students?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ Major ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ countstar AS Count_Star , Major ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Major ]"
    },
    {
        "id": "2748b00c6f2112753e9fb4be53d1c2cf26c5c5c39d28813289fd6a38067314ef",
        "question": "Find the major that is studied by the largest number of students.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ Major ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ countstar AS Count_Star , Major ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Major ]"
    },
    {
        "id": "ab48d6d44f45736fba5cbc9e3c0ba0e80bde4cc52a249a03667af90047cc456e",
        "question": "What is the most common major among female (sex is F) students?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , Major ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ countstar AS Count_Star , Major ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Major ]"
    },
    {
        "id": "8ea0e31a6fb3f83dae92c4710ccff99360ae3ea0d2e4375bef2a4eff48b5fdec",
        "question": "Find the major that is studied by the most female students.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , Major ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ countstar AS Count_Star , Major ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Major ]"
    },
    {
        "id": "d8ce7506d5b0cdb7f63da6569c2dada6f5e26f52c6279ddccbf91f42172070c8",
        "question": "What is the city_code of the city that the most students live in?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ city_code ] ; #2 = Aggregate [ #1 ] GroupBy [ city_code ] Output [ countstar AS Count_Star , city_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , city_code ]"
    },
    {
        "id": "3f6efeedbb304c11379db2267042bc8c96ff2827bb913e0d0896b28f00563b62",
        "question": "Return the code of the city that has the most students.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ city_code ] ; #2 = Aggregate [ #1 ] GroupBy [ city_code ] Output [ countstar AS Count_Star , city_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , city_code ]"
    },
    {
        "id": "5448125ac124ba1a1a4a4eac90dbf377dabc381ffb12e45a9a170c461dc50161",
        "question": "Report the distinct advisors who have more than 2 students.",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Advisor ]"
    },
    {
        "id": "c705c20bf444a51f58328f59e9d3937bae9ae41efe8c632cd1ba6e90c5217ee1",
        "question": "Which advisors are advising more than 2 students?",
        "parsing_tree": "voter_2 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Advisor ]"
    },
    {
        "id": "635ea75b06cb2fcde790c0b58d082c91cd5b842c0870086b649a85e62c6c24a7",
        "question": "How many products are there?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "31aae39566cdeb2df7d26ff8df3a580c681891bcaec55dd33b3d4026a359b2cf",
        "question": "Count the number of products.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "819c8af6d905cf9f73183244c8ab937392804c8285e400718d1386c755ca0ed8",
        "question": "How many colors are there?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f70c900a024ea90a70807fc3b6ecb248287d98fc792802c38e89672cd5f0e246",
        "question": "Count the number of colors.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a1f7ec56312f3514d47172da07483e94999a83daef88e5ab100e9b2d60cd2983",
        "question": "How many characteristics are there?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Characteristics ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f51041462d8bd44de9a5dfb8f891aec6ca9409c00b5f874e9e5bdfd99d20610d",
        "question": "Count the number of characteristics.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Characteristics ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "486ce83549e8da7443457f465f2703c29ff5a672381a8bdf0d3ac38ff5873203",
        "question": "What are the names and buying prices of all the products?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Output [ typical_buying_price , product_name ]"
    },
    {
        "id": "5128146ccd80efe6e09e6bf1c5736a9e227e6ad48ba154590ae993965dfb8475",
        "question": "Return the names and typical buying prices for all products.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Output [ typical_buying_price , product_name ]"
    },
    {
        "id": "b14b9c423e0bc60bcf0edf382418948cbcf8e6ee9c554c479de138b9e295400d",
        "question": "List the description of all the colors.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Output [ color_description ]"
    },
    {
        "id": "87403b64b20d13308762db514d77fbc4ec6c72467d5b1a1dc2c8e3c54e5f12de",
        "question": "What are the descriptions for each color?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Output [ color_description ]"
    },
    {
        "id": "1544dd74d4ecf6154bd33e437b84a6609157e342210a7271c55b65842ce09c9c",
        "question": "Find the names of all the product characteristics.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Characteristics ] Distinct [ true ] Output [ characteristic_name ]"
    },
    {
        "id": "3e6ed15b2acb691f2629bd5cde433e93a63784e55328b77caf185813d6d1d02b",
        "question": "What are the different names of the product characteristics?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Characteristics ] Distinct [ true ] Output [ characteristic_name ]"
    },
    {
        "id": "8d9378ed2b2ea06f25eaf6b06653562455f7fe16dfcaf565d1252ca1483cb415",
        "question": "What are the names of products with category \"Spices\"?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_category_code = 'Spices' ] Output [ product_category_code , product_name ]"
    },
    {
        "id": "cbfe36e42bdea2a0cfbab304df92d41df140de9551a4090da7af92d2eb50aab2",
        "question": "Return the names of products in the category 'Spices'.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_category_code = 'Spices' ] Output [ product_category_code , product_name ]"
    },
    {
        "id": "c36da67e70d7320e3f44b66d438d0ece5ccba77ae720045e71a0c0435b313ca9",
        "question": "List the names, color descriptions and product descriptions of products with category \"Herbs\".",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_category_code = 'Herbs' ] Output [ color_code , product_name , product_description , product_category_code ] ; #2 = Scan Table [ Ref_Colors ] Output [ color_code , color_description ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #2.color_description , #1.product_description , #1.product_name ]"
    },
    {
        "id": "455e29182c821b70697dd434368cc54ba9e858759061576157e97d447861ef14",
        "question": "What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_category_code = 'Herbs' ] Output [ color_code , product_name , product_description , product_category_code ] ; #2 = Scan Table [ Ref_Colors ] Output [ color_code , color_description ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #2.color_description , #1.product_description , #1.product_name ]"
    },
    {
        "id": "86c0702e9c55ddf5ad974c20ad6f28d20c450408a61e48bdaeb75c9a14496513",
        "question": "How many products are there under the category \"Seeds\"?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_category_code = 'Seeds' ] Output [ product_category_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ec1f3383384857106c9e3493dffd48dfab405ffade96ebe5f08a8b305d6550be",
        "question": "Count the number of products in the category 'Seeds'.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_category_code = 'Seeds' ] Output [ product_category_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "93658dcb448cb982139893c171889f73e39d9dbb9fe1beb5fd7a3199d4a6a836",
        "question": "What is the category and typical buying price  of the product with name \"cumin\"?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'cumin' ] Output [ product_category_code , product_name , typical_buying_price ]"
    },
    {
        "id": "adc6737ed983dd2d32824a4ff44bcec881ee0ac42a28cee2e250c124f5577e4d",
        "question": "Return the category code and typical price of 'cumin'.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'cumin' ] Output [ product_category_code , product_name , typical_buying_price ]"
    },
    {
        "id": "a12f1a79541bb35465537be418113fa2bf69adcc4e69100dc16b0e50ee3767d6",
        "question": "Which category does the product named \"flax\" belong to?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'flax' ] Output [ product_category_code , product_name ]"
    },
    {
        "id": "7a35952b1dc4e4724c6cfd1990814f5f1db4a7e35702c2dbb31b6b5f6c31dec1",
        "question": "What is the code of the category that the product with the name 'flax' belongs to?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'flax' ] Output [ product_category_code , product_name ]"
    },
    {
        "id": "887123e304fac7540b90df9f953ecaf1d45429790a61d1dc4d9dd154039a049b",
        "question": "What is the name of the product with the color description 'yellow'?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Predicate [ color_description = 'yellow' ] Output [ color_code , color_description ] ; #2 = Scan Table [ Products ] Output [ color_code , product_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #2.product_name ]"
    },
    {
        "id": "f4454fe7e23fa067658fc40965b4fc6f63545aa8c7b572658395a836423ba031",
        "question": "Give the name of the products that have a color description 'yellow'.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Predicate [ color_description = 'yellow' ] Output [ color_code , color_description ] ; #2 = Scan Table [ Products ] Output [ color_code , product_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #2.product_name ]"
    },
    {
        "id": "50a3668892fa3beeaef151042d7a4486a57c325ca0a80b00acd5587ce32c1955",
        "question": "Find the category descriptions of the products whose descriptions include letter 't'.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Product_Categories ] Output [ product_category_code , product_category_description ] ; #2 = Scan Table [ Products ] Predicate [ product_description like '%t%' ] Output [ product_category_code , product_description ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_category_code = #2.product_category_code ] Output [ #1.product_category_description ]"
    },
    {
        "id": "4359f17d7b5ab2c21089ba1021d3eea800a5a437d71c1d27ad8651d3e693bbc8",
        "question": "What are the descriptions of the categories that products with product descriptions that contain the letter t are in?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Product_Categories ] Output [ product_category_code , product_category_description ] ; #2 = Scan Table [ Products ] Predicate [ product_description like '%t%' ] Output [ product_category_code , product_description ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_category_code = #2.product_category_code ] Output [ #1.product_category_description ]"
    },
    {
        "id": "c971e61d31c2240bace332dd5a7f91088b9eb85b5fe64a857dffded196410e7c",
        "question": "What is the color description of the product with name \"catnip\"?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'catnip' ] Output [ color_code , product_name ] ; #2 = Scan Table [ Ref_Colors ] Output [ color_code , color_description ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #2.color_description ]"
    },
    {
        "id": "32365a534f961f80ba4ceb0ec8aeb489c524dcb1cae874aaa6eeb2c98574bb55",
        "question": "Give the color description for the product 'catnip'.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'catnip' ] Output [ color_code , product_name ] ; #2 = Scan Table [ Ref_Colors ] Output [ color_code , color_description ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #2.color_description ]"
    },
    {
        "id": "98ae4af723913df5c549001e2be62cf2a1a4ff6172b79740f32089100d3cb410",
        "question": "What is the color code and description of the product named \"chervil\"?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'chervil' ] Output [ color_code , product_name ] ; #2 = Scan Table [ Ref_Colors ] Output [ color_code , color_description ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #2.color_description , #1.color_code ]"
    },
    {
        "id": "85ed19c867f5bcbb792ecf402ab708798592a7398400bdd33d02e4a305d82682",
        "question": "Return the color code and description for the product with the name 'chervil'.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'chervil' ] Output [ color_code , product_name ] ; #2 = Scan Table [ Ref_Colors ] Output [ color_code , color_description ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #2.color_description , #1.color_code ]"
    },
    {
        "id": "256c2c1afc7b5e7e279cfe84b89dbc5dde4350fbdfefc69cf25b700251b954c1",
        "question": "Find the id and color description of the products with at least 2 characteristics.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Product_Characteristics ] Output [ product_id ] ; #2 = Scan Table [ Ref_Colors ] Output [ color_code , color_description ] ; #3 = Scan Table [ Products ] Output [ color_code , product_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.color_code = #3.color_code ] Output [ #3.product_id , #2.color_description ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.product_id = #4.product_id ] Output [ #4.product_id , #4.color_description ] ; #6 = Aggregate [ #5 ] GroupBy [ color_description , product_id ] Output [ countstar AS Count_Star , product_id , color_description ] ; #7 = Filter [ #6 ] Predicate [ Count_Star >= 2 ] Output [ product_id , color_description ]"
    },
    {
        "id": "0ca0b511d9d609d2be4cd60addcbddb8d77c6f9b4d146539ac5c664e29d67c80",
        "question": "What are the product ids and color descriptions for products with two or more characteristics?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Product_Characteristics ] Output [ product_id ] ; #2 = Scan Table [ Ref_Colors ] Output [ color_code , color_description ] ; #3 = Scan Table [ Products ] Output [ color_code , product_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.color_code = #3.color_code ] Output [ #3.product_id , #2.color_description ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.product_id = #4.product_id ] Output [ #4.product_id , #4.color_description ] ; #6 = Aggregate [ #5 ] GroupBy [ color_description , product_id ] Output [ countstar AS Count_Star , product_id , color_description ] ; #7 = Filter [ #6 ] Predicate [ Count_Star >= 2 ] Output [ product_id , color_description ]"
    },
    {
        "id": "2fd8b1f9f43fa5e0e7bf9a0554e4de67f40ed2159562f0b9e4dcf1bf4b75d181",
        "question": "List all the product names with the color description \"white\".",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Predicate [ color_description = 'white' ] Output [ color_code , color_description ] ; #2 = Scan Table [ Products ] Output [ color_code , product_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #2.product_name ]"
    },
    {
        "id": "4bc22ce672cad47ad1a767ced3daf4cd2e37edcafbef0b2ea00c5d7e435a0fa1",
        "question": "What are the names of products with 'white' as their color description?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Predicate [ color_description = 'white' ] Output [ color_code , color_description ] ; #2 = Scan Table [ Products ] Output [ color_code , product_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #2.product_name ]"
    },
    {
        "id": "f9256c9f42696de58540377a8069d2afb9ee636898c075f7e6054e5882100778",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Predicate [ color_description = 'yellow' ] Output [ color_code , color_description ] ; #2 = Scan Table [ Products ] Output [ color_code , product_name , typical_selling_price , typical_buying_price ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #2.product_name , #2.typical_selling_price , #2.typical_buying_price ]"
    },
    {
        "id": "a3928ad1affa55ab6f10a7b41ed82d3fc5d9e543ce1832cd08553df6c448e6f7",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Predicate [ color_description = 'yellow' ] Output [ color_code , color_description ] ; #2 = Scan Table [ Products ] Output [ color_code , product_name , typical_selling_price , typical_buying_price ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #2.product_name , #2.typical_selling_price , #2.typical_buying_price ]"
    },
    {
        "id": "f16e454395e72c794cc179cfff87541e081ab533adef8a1df290d2109e761908",
        "question": "How many characteristics does the product named \"sesame\" have?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'sesame' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_id , #1.product_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2eb527067bf5950abceb388047d0130d041e411b355735583ecc0866b3ccb97e",
        "question": "Count the number of characteristics the product 'sesame' has.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'sesame' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_id , #1.product_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "58b59ed0db210c7ae20895192fe7cb977baed56348c4bf9dddb62cbc5704184c",
        "question": "How many distinct characteristic names does the product \"cumin\" have?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'sesame' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id , characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.characteristic_id ] ; #4 = Scan Table [ Characteristics ] Output [ characteristic_name , characteristic_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.characteristic_id = #4.characteristic_id ] Distinct [ true ] Output [ #4.characteristic_name ] ; #6 = Aggregate [ #5 ] Output [ COUNT(characteristic_name) AS Count_characteristic_name ]"
    },
    {
        "id": "c6830f70430ac09ba74e355cecb0beed6e4fef989380df385540287669a66b26",
        "question": "Count the number of different characteristic names the product 'cumin' has.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'sesame' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id , characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.characteristic_id ] ; #4 = Scan Table [ Characteristics ] Output [ characteristic_name , characteristic_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.characteristic_id = #4.characteristic_id ] Distinct [ true ] Output [ #4.characteristic_name ] ; #6 = Aggregate [ #5 ] Output [ COUNT(characteristic_name) AS Count_characteristic_name ]"
    },
    {
        "id": "6e442a367bb1f11bc54816d5c93bac0274d2a42caf5f01cf90fb6d5df68e0dd5",
        "question": "What are all the characteristic names of product \"sesame\"?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'sesame' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id , characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.characteristic_id ] ; #4 = Scan Table [ Characteristics ] Output [ characteristic_name , characteristic_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.characteristic_id = #4.characteristic_id ] Output [ #4.characteristic_name ]"
    },
    {
        "id": "bf6b8fb7e2b760a7a45e64bfd7683b3c74d3e23ccd28cf018758883e32a77d0a",
        "question": "Return the characteristic names of the 'sesame' product.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'sesame' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id , characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.characteristic_id ] ; #4 = Scan Table [ Characteristics ] Output [ characteristic_name , characteristic_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.characteristic_id = #4.characteristic_id ] Output [ #4.characteristic_name ]"
    },
    {
        "id": "4d67b234064b62eb2ef53d6e3b8d0c7793dc894a9f6aee4a71ea5d4b295e466b",
        "question": "List all the characteristic names and data types of product \"cumin\".",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'cumin' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id , characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.characteristic_id ] ; #4 = Scan Table [ Characteristics ] Output [ characteristic_name , characteristic_data_type , characteristic_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.characteristic_id = #4.characteristic_id ] Output [ #4.characteristic_name , #4.characteristic_data_type ]"
    },
    {
        "id": "fec7e7db9d5729666ad6176dbd5c7bff1d3414a7f79898143267ed94b48258e4",
        "question": "What are the names and data types of the characteristics of the 'cumin' product?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'cumin' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id , characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.characteristic_id ] ; #4 = Scan Table [ Characteristics ] Output [ characteristic_name , characteristic_data_type , characteristic_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.characteristic_id = #4.characteristic_id ] Output [ #4.characteristic_name , #4.characteristic_data_type ]"
    },
    {
        "id": "80a5cacbfaa31fe581f4a41c79a43b83812846107585c4e52da1c7f201c48a2b",
        "question": "List all characteristics of product named \"sesame\" with type code \"Grade\".",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'sesame' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id , characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.characteristic_id ] ; #4 = Scan Table [ Characteristics ] Predicate [ characteristic_type_code = 'Grade' ] Output [ characteristic_type_code , characteristic_name , characteristic_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.characteristic_id = #4.characteristic_id ] Output [ #4.characteristic_name ]"
    },
    {
        "id": "8bc92b46ff8d7b206efde3fa1c11aa10cb4abb6805e99022e18160e7c40e25d5",
        "question": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'sesame' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id , characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.characteristic_id ] ; #4 = Scan Table [ Characteristics ] Predicate [ characteristic_type_code = 'Grade' ] Output [ characteristic_type_code , characteristic_name , characteristic_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.characteristic_id = #4.characteristic_id ] Output [ #4.characteristic_name ]"
    },
    {
        "id": "794124a4dd48c3c246bab3ad693558e60cd04ee97fc7cfc4576f098853804332",
        "question": "How many characteristics does the product named \"laurel\" have?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'laurel' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_id , #1.product_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "040715129ef86c57fca57d0c94709d2ef21ef62ff159cd189107cbb38be96b87",
        "question": "Count the number of characteristics of the product named 'laurel'.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'laurel' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_id , #1.product_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c070da7f2db5ac4d6263e0c0edd55fdd483b36adefee97ea344980b236e90fb6",
        "question": "Find the number of characteristics that the product \"flax\" has.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'flax' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_id , #1.product_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f272698b7c20eab1c6002ba6ba9d700dd379008cf7be3a60463da947356758b9",
        "question": "Count the number of characteristics of the 'flax' product.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'flax' ] Output [ product_name , product_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_id , #1.product_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a612054cd7fbe70140fe67569717e765639db35064442a5c544be5b702f4a802",
        "question": "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Characteristics ] Predicate [ characteristic_name = 'fast' ] Output [ characteristic_name , characteristic_id ] ; #2 = Scan Table [ Ref_Colors ] Predicate [ color_description = 'red' ] Output [ color_code , color_description ] ; #3 = Scan Table [ Products ] Output [ color_code , product_name , product_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.color_code = #3.color_code ] Output [ #3.product_id , #3.product_name ] ; #5 = Scan Table [ Product_Characteristics ] Output [ product_id , characteristic_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.product_id = #5.product_id ] Output [ #5.characteristic_id , #4.product_name ] ; #7 = Join [ #1 , #6 ] Predicate [ #1.characteristic_id = #6.characteristic_id ] Output [ #6.product_name ]"
    },
    {
        "id": "dee0e3d696615e87b73affbc1b000ec6d350f209594c3776b73006178cb24e48",
        "question": "What are the names of the products that have a color description of 'red' and the 'fast' characteristic?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Characteristics ] Predicate [ characteristic_name = 'fast' ] Output [ characteristic_name , characteristic_id ] ; #2 = Scan Table [ Ref_Colors ] Predicate [ color_description = 'red' ] Output [ color_code , color_description ] ; #3 = Scan Table [ Products ] Output [ color_code , product_name , product_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.color_code = #3.color_code ] Output [ #3.product_id , #3.product_name ] ; #5 = Scan Table [ Product_Characteristics ] Output [ product_id , characteristic_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.product_id = #5.product_id ] Output [ #5.characteristic_id , #4.product_name ] ; #7 = Join [ #1 , #6 ] Predicate [ #1.characteristic_id = #6.characteristic_id ] Output [ #6.product_name ]"
    },
    {
        "id": "fd1ff94fa9797109c5066b5323a415a19a8246867457f21b61b49b7b18cf14cc",
        "question": "How many products have the characteristic named \"hot\"?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Characteristics ] Predicate [ characteristic_name = 'hot' ] Output [ characteristic_name , characteristic_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.characteristic_id = #2.characteristic_id ] Output [ #1.characteristic_name , #1.characteristic_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4e26c9addbc7710b8f2b468c643ee8a4b65b2d6b99ce3629639d264d79d72b56",
        "question": "Count the number of products with the 'hot' charactersitic.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Characteristics ] Predicate [ characteristic_name = 'hot' ] Output [ characteristic_name , characteristic_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.characteristic_id = #2.characteristic_id ] Output [ #1.characteristic_name , #1.characteristic_id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9c8b5ad4927b4f1108685771be252a592ab5719ccd5eab8854f07bdbdf33fcbc",
        "question": "List the all the distinct names of the products with the characteristic name 'warm'.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Characteristics ] Predicate [ characteristic_name = 'warm' ] Output [ characteristic_name , characteristic_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id , characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.characteristic_id = #2.characteristic_id ] Output [ #2.product_id ] ; #4 = Scan Table [ Products ] Output [ product_name , product_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.product_id = #4.product_id ] Distinct [ true ] Output [ #4.product_name ]"
    },
    {
        "id": "bade926d6909f18526c310d20082af5565aca8b9f3f6b32ed774149ac474d19c",
        "question": "What are the different product names for products that have the 'warm' characteristic:?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Characteristics ] Predicate [ characteristic_name = 'warm' ] Output [ characteristic_name , characteristic_id ] ; #2 = Scan Table [ Product_Characteristics ] Output [ product_id , characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.characteristic_id = #2.characteristic_id ] Output [ #2.product_id ] ; #4 = Scan Table [ Products ] Output [ product_name , product_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.product_id = #4.product_id ] Distinct [ true ] Output [ #4.product_name ]"
    },
    {
        "id": "55c0f15bf89ca1aadd3702a77a1fda035f847e33d5f33e030e88d6ba522127be",
        "question": "Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\".",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Characteristics ] Predicate [ characteristic_name = 'slow' ] Output [ characteristic_name , characteristic_id ] ; #2 = Scan Table [ Ref_Colors ] Predicate [ color_description = 'red' ] Output [ color_code , color_description ] ; #3 = Scan Table [ Products ] Output [ color_code , product_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.color_code = #3.color_code ] Output [ #3.product_id ] ; #5 = Scan Table [ Product_Characteristics ] Output [ product_id , characteristic_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.product_id = #5.product_id ] Output [ #5.characteristic_id ] ; #7 = Join [ #1 , #6 ] Predicate [ #1.characteristic_id = #6.characteristic_id ] Output [ #1.characteristic_name , #1.characteristic_id ] ; #8 = Aggregate [ #7 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "b8323b98b5afcc94a0127c880335c72f5998e2a54faaf2b2d43d1f99c2c1e514",
        "question": "How many products have the color description 'red' and the characteristic name 'slow'?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Characteristics ] Predicate [ characteristic_name = 'slow' ] Output [ characteristic_name , characteristic_id ] ; #2 = Scan Table [ Ref_Colors ] Predicate [ color_description = 'red' ] Output [ color_code , color_description ] ; #3 = Scan Table [ Products ] Output [ color_code , product_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.color_code = #3.color_code ] Output [ #3.product_id ] ; #5 = Scan Table [ Product_Characteristics ] Output [ product_id , characteristic_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.product_id = #5.product_id ] Output [ #5.characteristic_id ] ; #7 = Join [ #1 , #6 ] Predicate [ #1.characteristic_id = #6.characteristic_id ] Output [ #1.characteristic_name , #1.characteristic_id ] ; #8 = Aggregate [ #7 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6c57e3f1552d61dec74b7372acf382a92ea256f67e581f70fdcac1567f110f93",
        "question": "What is the unit of measuerment of the product category code \"Herbs\"?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Product_Categories ] Predicate [ product_category_code = 'Herbs' ] Output [ product_category_code , unit_of_measure ]"
    },
    {
        "id": "9e0b2867d57189336b1bd4c9dc0f5b624cc2b314f4ae9f1316ee31f7c818f513",
        "question": "Return the unit of measure for 'Herb' products.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Product_Categories ] Predicate [ product_category_code = 'Herbs' ] Output [ product_category_code , unit_of_measure ]"
    },
    {
        "id": "c0e60de250a4c3efecefdff9a9c99c22cb9e0a9ea8dc0198fcdece1d3d41df13",
        "question": "Find the product category description of the product category with code \"Spices\".",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Product_Categories ] Predicate [ product_category_code = 'Spices' ] Output [ product_category_code , product_category_description ]"
    },
    {
        "id": "6aaecf110677146c88377269529c1610bc09ba45cdeed0a481f1a784ee832ad9",
        "question": "What is the description of the product category with the code 'Spices'?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Product_Categories ] Predicate [ product_category_code = 'Spices' ] Output [ product_category_code , product_category_description ]"
    },
    {
        "id": "08fa56de539350773be3426335243552b46f06de2253edf1403d7adc60bf3f7c",
        "question": "What is the product category description and unit of measurement of category \"Herbs\"?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Product_Categories ] Predicate [ product_category_code = 'Herbs' ] Output [ product_category_code , unit_of_measure , product_category_description ]"
    },
    {
        "id": "4b7495e7e5294984d3f1bd05c57c3eb81df0fae71eb0d10f977a5dcc5665aaa4",
        "question": "Return the description and unit of measurement for products in the 'Herbs' category.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Product_Categories ] Predicate [ product_category_code = 'Herbs' ] Output [ product_category_code , unit_of_measure , product_category_description ]"
    },
    {
        "id": "80fc22a5bad0e22578f1cc1699f10cd079534bf8d7945ea42423ed0af3c1a75f",
        "question": "What is the unit of measurement of product named \"cumin\"?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'cumin' ] Output [ product_category_code , product_name ] ; #2 = Scan Table [ Ref_Product_Categories ] Output [ product_category_code , unit_of_measure ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_category_code = #2.product_category_code ] Output [ #2.unit_of_measure ]"
    },
    {
        "id": "125c28fea5919d7c42483e8fb9b9185b1e5d8ddad80911231762ba1d9b3b7503",
        "question": "Give the unit of measure for the product with the name 'cumin'.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'cumin' ] Output [ product_category_code , product_name ] ; #2 = Scan Table [ Ref_Product_Categories ] Output [ product_category_code , unit_of_measure ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_category_code = #2.product_category_code ] Output [ #2.unit_of_measure ]"
    },
    {
        "id": "d2b53bd0026cc70a73161ed055f788bd2a467b6ee236fd9571f1008bb4bd06e4",
        "question": "Find the unit of measurement and product category code of product named \"chervil\".",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'chervil' ] Output [ product_category_code , product_name ] ; #2 = Scan Table [ Ref_Product_Categories ] Output [ product_category_code , unit_of_measure ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_category_code = #2.product_category_code ] Output [ #2.product_category_code , #2.unit_of_measure ]"
    },
    {
        "id": "9df8aff79585b889d19da8e455ed3d08e0a6ce9f041d1ef670c331f216c7282d",
        "question": "What are the unit of measure and category code for the 'chervil' product?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Products ] Predicate [ product_name = 'chervil' ] Output [ product_category_code , product_name ] ; #2 = Scan Table [ Ref_Product_Categories ] Output [ product_category_code , unit_of_measure ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_category_code = #2.product_category_code ] Output [ #2.product_category_code , #2.unit_of_measure ]"
    },
    {
        "id": "48d0e03123fa7f1e90d270c492a55d6140c01e450fd5dd9d76917f027ae3a379",
        "question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Product_Categories ] Predicate [ unit_of_measure <> 'Handful' ] Output [ product_category_code , unit_of_measure ] ; #2 = Scan Table [ Ref_Colors ] Predicate [ color_description = 'white' ] Output [ color_code , color_description ] ; #3 = Scan Table [ Products ] Output [ color_code , product_name , product_category_code ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.color_code = #3.color_code ] Output [ #3.product_category_code , #3.product_name ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.product_category_code = #4.product_category_code ] Output [ #4.product_name ]"
    },
    {
        "id": "7235d82c8dae401cb687462883aa7748ba41503889e056b311e12dfdc4f80d46",
        "question": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Product_Categories ] Predicate [ unit_of_measure <> 'Handful' ] Output [ product_category_code , unit_of_measure ] ; #2 = Scan Table [ Ref_Colors ] Predicate [ color_description = 'white' ] Output [ color_code , color_description ] ; #3 = Scan Table [ Products ] Output [ color_code , product_name , product_category_code ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.color_code = #3.color_code ] Output [ #3.product_category_code , #3.product_name ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.product_category_code = #4.product_category_code ] Output [ #4.product_name ]"
    },
    {
        "id": "78b2ce82d8aa6235d98b9ea8870810d5cd7069b8087864fcde7a48070a3797d3",
        "question": "What is the description of the color for most products?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Output [ color_code , color_description ] ; #2 = Scan Table [ Products ] Output [ color_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #1.color_description ] ; #4 = Aggregate [ #3 ] GroupBy [ color_description ] Output [ countstar AS Count_Star , color_description ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , color_description ]"
    },
    {
        "id": "9138696c47b168ea7e2350867bfbcdacb5f925b5bda7d56889bd1c930e67f1ba",
        "question": "Return the color description that is most common across all products.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Output [ color_code , color_description ] ; #2 = Scan Table [ Products ] Output [ color_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #1.color_description ] ; #4 = Aggregate [ #3 ] GroupBy [ color_description ] Output [ countstar AS Count_Star , color_description ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , color_description ]"
    },
    {
        "id": "a4b4ad6afc7c58a2f3dec182ca4dd1a69bd2616de24ae5f665f99bfede9b7451",
        "question": "What is the description of the color used by least products?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Output [ color_code , color_description ] ; #2 = Scan Table [ Products ] Output [ color_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #1.color_description ] ; #4 = Aggregate [ #3 ] GroupBy [ color_description ] Output [ countstar AS Count_Star , color_description ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , color_description ]"
    },
    {
        "id": "b532825e4de86fcb699728b07135ab11a4b1991e7588a6fa94e190c84a096e63",
        "question": "Give the color description that is least common across products.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Output [ color_code , color_description ] ; #2 = Scan Table [ Products ] Output [ color_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ #1.color_description ] ; #4 = Aggregate [ #3 ] GroupBy [ color_description ] Output [ countstar AS Count_Star , color_description ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , color_description ]"
    },
    {
        "id": "f871baeecc8eb08f90b86a20dcd07c21e541b1afeffd74ea33f3dfa3e3a3a276",
        "question": "What is the characteristic name used by most number of the products?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Product_Characteristics ] Output [ characteristic_id ] ; #2 = Scan Table [ Characteristics ] Output [ characteristic_name , characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.characteristic_id = #2.characteristic_id ] Output [ #2.characteristic_name ] ; #4 = Aggregate [ #3 ] GroupBy [ characteristic_name ] Output [ countstar AS Count_Star , characteristic_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , characteristic_name ]"
    },
    {
        "id": "ed4c7393075c0c1774ae798f61eb91a2b14a89b452be1b8fbd5373840d10e404",
        "question": "Return the name of the characteristic that is most common across all products.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Product_Characteristics ] Output [ characteristic_id ] ; #2 = Scan Table [ Characteristics ] Output [ characteristic_name , characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.characteristic_id = #2.characteristic_id ] Output [ #2.characteristic_name ] ; #4 = Aggregate [ #3 ] GroupBy [ characteristic_name ] Output [ countstar AS Count_Star , characteristic_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , characteristic_name ]"
    },
    {
        "id": "db38ce20d59da5ea9fe4e0ad556dd7953f33c57ce64c4a0bd650a504c208ffd7",
        "question": "What are characteristic names used at least twice across all products?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Product_Characteristics ] Output [ characteristic_id ] ; #2 = Scan Table [ Characteristics ] Output [ characteristic_name , characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.characteristic_id = #2.characteristic_id ] Output [ #2.characteristic_name ] ; #4 = Aggregate [ #3 ] GroupBy [ characteristic_name ] Output [ countstar AS Count_Star , characteristic_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ characteristic_name ]"
    },
    {
        "id": "05b28337b74b6f32d19e2336908e428cad361dea9d418316cf813679ec42d39b",
        "question": "Give the names of characteristics that are in two or more products?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Product_Characteristics ] Output [ characteristic_id ] ; #2 = Scan Table [ Characteristics ] Output [ characteristic_name , characteristic_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.characteristic_id = #2.characteristic_id ] Output [ #2.characteristic_name ] ; #4 = Aggregate [ #3 ] GroupBy [ characteristic_name ] Output [ countstar AS Count_Star , characteristic_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ characteristic_name ]"
    },
    {
        "id": "8a87572b624327f4be0cb19b86e3d3364384cb71783720d8c12a450a49e8442c",
        "question": "How many colors are never used by any product?",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Output [ color_code ] ; #2 = Scan Table [ Products ] Output [ color_code ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "246d07c5a454ede4946f5e700de09452f126b172b2282055680708ff8cdc418f",
        "question": "Count the number of colors that are not used in any products.",
        "parsing_tree": "products_gen_characteristics | #1 = Scan Table [ Ref_Colors ] Output [ color_code ] ; #2 = Scan Table [ Products ] Output [ color_code ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.color_code = #2.color_code ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a263a432de42de2580e4cd06b3d3cae0bf01e14b275a15390576c5c91e74234a",
        "question": "How many events are there?",
        "parsing_tree": "swimming | #1 = Scan Table [ event ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c9e2a05632d2e8d6676aeacd50439412afc374a4f9d3f89eef4be1eb62613834",
        "question": "List all the event names by year from the most recent to the oldest.",
        "parsing_tree": "swimming | #1 = Scan Table [ event ] Output [ Name , Year ] ; #2 = Sort [ #1 ] OrderBy [ Year DESC ] Output [ Name , Year ]"
    },
    {
        "id": "49d1977985d33bfab73dfbbeb9474feb36e103f641c76e042a38e399cbdbeb46",
        "question": "What is the name of the event that happened in the most recent year?",
        "parsing_tree": "swimming | #1 = Scan Table [ event ] Output [ Name , Year ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Year DESC ] Output [ Name , Year ]"
    },
    {
        "id": "43f6b3a03eb4b8b028fa0ffdf2a1db29911732521815ee64a40fac5cdcc889b2",
        "question": "How many stadiums are there?",
        "parsing_tree": "swimming | #1 = Scan Table [ stadium ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "29765d5a4f237a1c76fadf66e5105fb47f1a7d02bfa87897105233d662c80f1a",
        "question": "Find the name of the stadium that has the maximum capacity.",
        "parsing_tree": "swimming | #1 = Scan Table [ stadium ] Output [ name , Capacity ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Capacity DESC ] Output [ name , Capacity ]"
    },
    {
        "id": "44c5767a157d1b2303500c67572b864121dde74ccf6f245f8d1582db320ae456",
        "question": "Find the names of stadiums whose capacity is smaller than the average capacity.",
        "parsing_tree": "swimming | #1 = Scan Table [ stadium ] Output [ Capacity ] ; #2 = Aggregate [ #1 ] Output [ AVG(Capacity) AS Avg_Capacity ] ; #3 = Scan Table [ stadium ] Output [ name , Capacity ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Capacity < #2.Avg_Capacity ] Output [ #3.name ]"
    },
    {
        "id": "783f201bf54e010782bb3ec36fb3533b3ddbb2a3b5894be112daa6800d386bc6",
        "question": "Find the country that has the most stadiums.",
        "parsing_tree": "swimming | #1 = Scan Table [ stadium ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Country ]"
    },
    {
        "id": "18f59138627430196a7ecc34ef2f1645cca084c526eae9e2473a123578e29884",
        "question": "Which country has at most 3 stadiums listed?",
        "parsing_tree": "swimming | #1 = Scan Table [ stadium ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ] ; #3 = Filter [ #2 ] Predicate [ Count_Star <= 3 ] Output [ Country ]"
    },
    {
        "id": "a50e6bd2cc08b756c38bc29e75116d522186996c8eb5021ef42dd21179dbf4ad",
        "question": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?",
        "parsing_tree": "swimming | #1 = Scan Table [ stadium ] Predicate [ Capacity > 60000 ] Distinct [ true ] Output [ Capacity , Country ] ; #2 = Scan Table [ stadium ] Predicate [ Capacity < 50000 ] Output [ Capacity , Country ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Country = #2.Country ] Output [ #1.Country ]"
    },
    {
        "id": "ea05bf48b31c78f7f9506c32f74e31cc301eb01bf60b87d4c7c66b8a6e768407",
        "question": "How many cities have a stadium that was opened before the year of 2006?",
        "parsing_tree": "swimming | #1 = Scan Table [ stadium ] Predicate [ Opening_year < 2006 ] Distinct [ true ] Output [ Opening_year , City ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT City) AS Count_Dist_City ]"
    },
    {
        "id": "f58f22e2a7258ec03b254f22552f50229a22b91eb6a13271d851d110122aff6f",
        "question": "How many stadiums does each country have?",
        "parsing_tree": "swimming | #1 = Scan Table [ stadium ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]"
    },
    {
        "id": "0f91ec5f305bf399d3c51f9f5aa4455863667167428e0dc33a85b3312683c1f0",
        "question": "Which countries do not have a stadium that was opened after 2006?",
        "parsing_tree": "swimming | #1 = Scan Table [ stadium ] Distinct [ true ] Output [ Country ] ; #2 = Scan Table [ stadium ] Predicate [ Opening_year > 2006 ] Output [ Opening_year , Country ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Country = #2.Country ] Output [ #1.Country ]"
    },
    {
        "id": "bb5767b368eaa1b97379c11bd2feae92608bbe3e4ee672243cb4c32e13ebc53e",
        "question": "How many stadiums are not in country \"Russia\"?",
        "parsing_tree": "swimming | #1 = Scan Table [ stadium ] Predicate [ Country <> 'Russia' ] Output [ Country ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c4d27396d59389f2aa5d577ca32d5fd8a2fbb5a24d109e4ed596e3dfce026ed3",
        "question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.",
        "parsing_tree": "swimming | #1 = Scan Table [ swimmer ] Output [ name , meter_100 ] ; #2 = Sort [ #1 ] OrderBy [ meter_100 ASC ] Output [ name , meter_100 ]"
    },
    {
        "id": "7fccb2ab1ac5d68a9960b9b612695c3bb769a1891a9def8723af7b8bd3575a64",
        "question": "How many different countries are all the swimmers from?",
        "parsing_tree": "swimming | #1 = Scan Table [ swimmer ] Distinct [ true ] Output [ Nationality ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Nationality) AS Count_Dist_Nationality ]"
    },
    {
        "id": "b5639fad0a3e12d4f07ed305f9e1d002e7bbb801dde0cf5425dce9ca385f218c",
        "question": "List countries that have more than one swimmer.",
        "parsing_tree": "swimming | #1 = Scan Table [ swimmer ] Output [ Nationality ] ; #2 = Aggregate [ #1 ] GroupBy [ Nationality ] Output [ Nationality , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Nationality , Count_Star ]"
    },
    {
        "id": "3167b6dd8b48188c4039c2ca2618d3592bc5c5b76a6e3b9d36c301d3689faebb",
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "parsing_tree": "swimming | #1 = Scan Table [ swimmer ] Predicate [ Nationality = 'Australia' ] Output [ Nationality , meter_300 , meter_200 ]"
    },
    {
        "id": "675c29f6d78cbab03f5957f81fd5b46fb2aa3626caab43199a0801b855ef50d7",
        "question": "Find the names of swimmers who has a result of \"win\".",
        "parsing_tree": "swimming | #1 = Scan Table [ swimmer ] Output [ name , ID ] ; #2 = Scan Table [ record ] Predicate [ Result = 'Win' ] Output [ Result , Swimmer_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.Swimmer_ID ] Output [ #1.name ]"
    },
    {
        "id": "273474dc24b44ddf1edc474d4dbcf1915aa6ae94297faf004b0f441155422dd8",
        "question": "Find the name and capacity of the stadium where the event named \"World Junior\" happened.",
        "parsing_tree": "swimming | #1 = Scan Table [ event ] Predicate [ Name = 'World Junior' ] Output [ Stadium_ID , Name ] ; #2 = Scan Table [ stadium ] Output [ name , Capacity , ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Stadium_ID = #2.ID ] Output [ #2.Capacity , #2.name ]"
    },
    {
        "id": "dd07e777d04bfd927e24c05e6b4c474ba855de66976d803accf5e35dcadbe484",
        "question": "Find the names of stadiums which have never had any event.",
        "parsing_tree": "swimming | #1 = Scan Table [ stadium ] Output [ name , ID ] ; #2 = Scan Table [ event ] Output [ Stadium_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Stadium_ID IS NULL OR #1.ID = #2.Stadium_ID ] Output [ #1.name ]"
    },
    {
        "id": "728ef060eadec84d32c386d3a01568a1d86b86b162682bb4352da870913aeeb0",
        "question": "Find the name of the swimmer who has the most records.",
        "parsing_tree": "swimming | #1 = Scan Table [ record ] Output [ Swimmer_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Swimmer_ID ] Output [ countstar AS Count_Star , Swimmer_ID ] ; #3 = Scan Table [ swimmer ] Output [ name , ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Swimmer_ID = #3.ID ] Output [ #3.name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "42a346075218c1dfe5a45e06d1228c06ef3b66fe631d486da423594521abcfb9",
        "question": "Find the name of the swimmer who has at least 2 records.",
        "parsing_tree": "swimming | #1 = Scan Table [ record ] Output [ Swimmer_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Swimmer_ID ] Output [ countstar AS Count_Star , Swimmer_ID ] ; #3 = Scan Table [ swimmer ] Output [ name , ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Swimmer_ID = #3.ID ] Output [ #3.name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]"
    },
    {
        "id": "fdd240e4a2c79edefc49c4ff476fc9a91622f8ce069f027ed638a89a1f8f7693",
        "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.",
        "parsing_tree": "swimming | #1 = Scan Table [ record ] Predicate [ Result = 'Win' ] Output [ Result , Swimmer_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Swimmer_ID ] Output [ countstar AS Count_Star , Swimmer_ID ] ; #3 = Scan Table [ swimmer ] Output [ name , Nationality , ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Swimmer_ID = #3.ID ] Output [ #3.name , #3.Nationality , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name , Nationality ]"
    },
    {
        "id": "31996713517c4ea31271189b5ea1197073739625b0994bd9cd7306584debac42",
        "question": "Find the names of the swimmers who have no record.",
        "parsing_tree": "swimming | #1 = Scan Table [ swimmer ] Output [ name , ID ] ; #2 = Scan Table [ record ] Output [ Swimmer_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Swimmer_ID ] Output [ Swimmer_ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Swimmer_ID = #1.ID ] Output [ #1.name ]"
    },
    {
        "id": "4370e201b1ec3c42ee48f4a90a47299622620f1528bdd218f0046f812a108fbb",
        "question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.",
        "parsing_tree": "swimming | #1 = Scan Table [ swimmer ] Output [ name , ID ] ; #2 = Scan Table [ record ] Predicate [ Result = 'Win' ] Output [ Result , Swimmer_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.Swimmer_ID ] Distinct [ true ] Output [ #1.name ] ; #4 = Scan Table [ record ] Predicate [ Result = 'Loss' ] Output [ Result , Swimmer_ID ] ; #5 = Scan Table [ swimmer ] Output [ name , ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Swimmer_ID = #5.ID ] Output [ #5.name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.name = #6.name ] Output [ #3.name ]"
    },
    {
        "id": "902a970cc510fca714b9cb20ebc44a6826988af4a31304e05df514e02db23ce7",
        "question": "Find the names of stadiums that some Australian swimmers have been to.",
        "parsing_tree": "swimming | #1 = Scan Table [ swimmer ] Predicate [ Nationality = 'Australia' ] Output [ Nationality , ID ] ; #2 = Scan Table [ record ] Output [ Swimmer_ID , Event_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.Swimmer_ID ] Output [ #2.Event_ID ] ; #4 = Scan Table [ event ] Output [ Stadium_ID , ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Event_ID = #4.ID ] Output [ #4.Stadium_ID ] ; #6 = Scan Table [ stadium ] Output [ name , ID ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.Stadium_ID = #6.ID ] Output [ #6.name ]"
    },
    {
        "id": "c5374db4879b7227959b2a2c0a36922c829e9738b3a36ae13c6278310195717a",
        "question": "Find the names of stadiums that the most swimmers have been to.",
        "parsing_tree": "swimming | #1 = Scan Table [ event ] Output [ Stadium_ID , ID ] ; #2 = Scan Table [ stadium ] Output [ name , ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Stadium_ID = #2.ID ] Output [ #1.ID , #2.name , #1.Stadium_ID ] ; #4 = Scan Table [ record ] Output [ Event_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.ID = #4.Event_ID ] Output [ #3.name , #3.Stadium_ID ] ; #6 = Aggregate [ #5 ] GroupBy [ Stadium_ID ] Output [ name , countstar AS Count_Star ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "50ecda6a2102899011797cb5466d3ef2a7f2d852887278e793d98ba42cd2b220",
        "question": "Find all details for each swimmer.",
        "parsing_tree": "swimming | #1 = Scan Table [ swimmer ] Output [ name , meter_300 , meter_600 , meter_700 , meter_100 , meter_500 , Time , Nationality , meter_400 , meter_200 , ID ]"
    },
    {
        "id": "1ae95047cbb42f3b5b0b78e6b1b66f2a4593e47319804cca789a89f6615904ec",
        "question": "What is the average capacity of the stadiums that were opened in year 2005?",
        "parsing_tree": "swimming | #1 = Scan Table [ stadium ] Predicate [ Opening_year = 2005 ] Output [ Opening_year , Capacity ] ; #2 = Aggregate [ #1 ] Output [ AVG(Capacity) AS Avg_Capacity ]"
    },
    {
        "id": "fdc352346e44f3cc140d2be2d154718c748dee4cec94dd108b09a1ea413f0909",
        "question": "How many railways are there?",
        "parsing_tree": "railway | #1 = Scan Table [ railway ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "04954d3f856ae91c78a8a0bf3a3c441513cdb096f49e7ee50de01ebaf393e619",
        "question": "List the builders of railways in ascending alphabetical order.",
        "parsing_tree": "railway | #1 = Scan Table [ railway ] Output [ Builder ] ; #2 = Sort [ #1 ] OrderBy [ Builder ASC ] Output [ Builder ]"
    },
    {
        "id": "abfea13baa51e5ddcb3d10155f47fe5e3c1b541601839707eb8e7a469545bf1f",
        "question": "List the wheels and locations of the railways.",
        "parsing_tree": "railway | #1 = Scan Table [ railway ] Output [ Wheels , Location ]"
    },
    {
        "id": "8420612d78d47c2d4a560ad15ee032d11d84e007ebb8f8b6897c6556fcc85359",
        "question": "What is the maximum level of managers in countries that are not \"Australia\"?",
        "parsing_tree": "railway | #1 = Scan Table [ manager ] Predicate [ Country <> 'Australia' ] Output [ Level , Country ] ; #2 = Aggregate [ #1 ] Output [ MAX(Level) AS Max_Level ]"
    },
    {
        "id": "2ced2623f2174c1a248a124b7d43769202cf53846d77d9430d082e76f7984ecc",
        "question": "What is the average age for all managers?",
        "parsing_tree": "railway | #1 = Scan Table [ manager ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "4d2aec07712753930a79cc9d333333a60b05e7da0b596bd41263ade496f6928f",
        "question": "What are the names of managers in ascending order of level?",
        "parsing_tree": "railway | #1 = Scan Table [ manager ] Output [ Level , Name ] ; #2 = Sort [ #1 ] OrderBy [ Level ASC ] Output [ Level , Name ]"
    },
    {
        "id": "cb063bc2a3122ca1f91c01375cdf4c3ff4f505f286cbef0a8ca8013db9bbfb52",
        "question": "What are the names and arrival times of trains?",
        "parsing_tree": "railway | #1 = Scan Table [ train ] Output [ Name , Arrival ]"
    },
    {
        "id": "bd2d460892fecb079b8d267e4ac5b44d7980a7dee2685885667adad137e4dbe8",
        "question": "What is the name of the oldest manager?",
        "parsing_tree": "railway | #1 = Scan Table [ manager ] Output [ Name , Age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Age DESC ] Output [ Name , Age ]"
    },
    {
        "id": "0a4f72dff8802b7b0e559849a34800e1d40ace69f39b113503311494425d6613",
        "question": "Show the names of trains and locations of railways they are in.",
        "parsing_tree": "railway | #1 = Scan Table [ train ] Output [ Railway_ID , Name ] ; #2 = Scan Table [ railway ] Output [ Location , Railway_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Railway_ID = #2.Railway_ID ] Output [ #1.Name , #2.Location ]"
    },
    {
        "id": "f4bdf6a21096ed89ee736b7b103dc744c1562e32962e29bfb8fcee1a685d3515",
        "question": "Show the builder of railways associated with the trains named \"Andaman Exp\".",
        "parsing_tree": "railway | #1 = Scan Table [ train ] Predicate [ Name = 'Andaman Exp' ] Output [ Railway_ID , Name ] ; #2 = Scan Table [ railway ] Output [ Railway_ID , Builder ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Railway_ID = #2.Railway_ID ] Output [ #2.Builder ]"
    },
    {
        "id": "4743bad50ffe1b8d7636b4b2e618080df97796d0bd3aab341496d8482ff991d2",
        "question": "Show different builders of railways, along with the corresponding number of railways using each builder.",
        "parsing_tree": "railway | #1 = Scan Table [ railway ] Output [ Builder ] ; #2 = Aggregate [ #1 ] GroupBy [ Builder ] Output [ countstar AS Count_Star , Builder ]"
    },
    {
        "id": "6d14a11624be7db08977b9a25398046743a1778a789b346033b4450ae731c5eb",
        "question": "Show the most common builder of railways.",
        "parsing_tree": "railway | #1 = Scan Table [ railway ] Output [ Builder ] ; #2 = Aggregate [ #1 ] GroupBy [ Builder ] Output [ countstar AS Count_Star , Builder ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Builder ]"
    },
    {
        "id": "d4cae4daa51c5cefe4063de4af5ca745630ddee6aa052038e08d26e837f9e811",
        "question": "Show different locations of railways along with the corresponding number of railways at each location.",
        "parsing_tree": "railway | #1 = Scan Table [ railway ] Output [ Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ]"
    },
    {
        "id": "7d59cf93033340c659ba1f780029998c68891389f87409ff90ccca41149963b0",
        "question": "Show the locations that have more than one railways.",
        "parsing_tree": "railway | #1 = Scan Table [ railway ] Output [ Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Location ]"
    },
    {
        "id": "1f9ca18d9e50ccdfa4b1e7f9bb432e6dd9ce667db44117a02e7e68b9ff406365",
        "question": "List the object number of railways that do not have any trains.",
        "parsing_tree": "railway | #1 = Scan Table [ railway ] Output [ ObjectNumber , Railway_ID ] ; #2 = Scan Table [ train ] Output [ Railway_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Railway_ID IS NULL OR #1.Railway_ID = #2.Railway_ID ] Output [ #1.ObjectNumber ]"
    },
    {
        "id": "caabdf77271420a52a3045add93697f6d02be4751d9a03b47c500da565d05db9",
        "question": "Show the countries that have both managers of age above 50 and managers of age below 46.",
        "parsing_tree": "railway | #1 = Scan Table [ manager ] Predicate [ Age > 50 ] Distinct [ true ] Output [ Country , Age ] ; #2 = Scan Table [ manager ] Predicate [ Age < 46 ] Output [ Country , Age ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Country = #2.Country ] Output [ #1.Country ]"
    },
    {
        "id": "da79b995420c0758a59b8d7963f74f5f31e3c38b1929f2a19d90c399dde82eb6",
        "question": "Show the distinct countries of managers.",
        "parsing_tree": "railway | #1 = Scan Table [ manager ] Distinct [ true ] Output [ Country ]"
    },
    {
        "id": "244aa03423b45f13d576563f42a637f7438aceab5099666cb7c2b15777f03537",
        "question": "Show the working years of managers in descending order of their level.",
        "parsing_tree": "railway | #1 = Scan Table [ manager ] Output [ Level , Working_year_starts ] ; #2 = Sort [ #1 ] OrderBy [ Level DESC ] Output [ Level , Working_year_starts ]"
    },
    {
        "id": "4c5548459aa900d3a444a5f53492eaafc601777e48dde36ff050ea92fb58bca5",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "parsing_tree": "railway | #1 = Scan Table [ manager ] Predicate [ Age < 46 OR Age > 50 ] Output [ Country , Age ]"
    },
    {
        "id": "db05d9f849e1ffdf0e20c067e2eb4750051130396cf413bc74c288f65e37cfc6",
        "question": "How many addresses are there in country USA?",
        "parsing_tree": "customers_and_products_contacts | #1 = Scan Table [ Addresses ] Predicate [ country = 'USA' ] Output [ country ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0b4841167b7103edcbf887cc25fba529f8b1b8061b6f5bcff2a718061477db9c",
        "question": "Show all distinct cities in the address record.",
        "parsing_tree": "customers_and_products_contacts | #1 = Scan Table [ Addresses ] Distinct [ true ] Output [ city ]"
    },
    {
        "id": "d0eab216a213536fd8d52e7f5e594d7426be03dfef8e2b0664675d8cbc577646",
        "question": "Show each state and the number of addresses in each state.",
        "parsing_tree": "customers_and_products_contacts | #1 = Scan Table [ Addresses ] Output [ state_province_county ] ; #2 = Aggregate [ #1 ] GroupBy [ state_province_county ] Output [ countstar AS Count_Star , state_province_county ]"
    },
    {
        "id": "12271d1abca01671663374f9e204919c208bef33d46df7bc4c63e06e0e3ac972",
        "question": "Show names and phones of customers who do not have address information.",
        "parsing_tree": "customers_and_products_contacts | #1 = Scan Table [ Customers ] Output [ customer_id , customer_phone , customer_name ] ; #2 = Scan Table [ Customer_Address_History ] Output [ customer_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.customer_id = #1.customer_id ] Output [ #1.customer_phone , #1.customer_name ]"
    },
    {
        "id": "8d9634f4db2795b108d40a569c7550757bd73968be09b1d910ec7db974102372",
        "question": "Show the name of the customer who has the most orders.",
        "parsing_tree": "customers_and_products_contacts | #1 = Scan Table [ Customer_Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , customer_name ]"
    },
    {
        "id": "e8ee5af3e36645f70333c9a9de836410383267f168c76f1a628e6dd27ff46f53",
        "question": "Show the product type codes which have at least two products.",
        "parsing_tree": "customers_and_products_contacts | #1 = Scan Table [ Products ] Output [ product_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ product_type_code ] Output [ countstar AS Count_Star , product_type_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ product_type_code ]"
    },
    {
        "id": "e2df810ee53f7204c2f47e787888001d2272e8f4f852525a4884d55591f09bbe",
        "question": "Show the names of customers who have both an order in completed status and an order in part status.",
        "parsing_tree": "customers_and_products_contacts | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status_code = 'Completed' ] Output [ order_status_code , customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Distinct [ true ] Output [ #2.customer_name ] ; #4 = Scan Table [ Customer_Orders ] Predicate [ order_status_code = 'Part' ] Output [ order_status_code , customer_id ] ; #5 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.customer_id = #5.customer_id ] Output [ #5.customer_name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.customer_name = #6.customer_name ] Output [ #3.customer_name ]"
    },
    {
        "id": "974e581c9f6d92fbdb14ef9c0ce8ed8fd0a67ca90ed8f7c513bad300a03ef942",
        "question": "Show the name, phone, and payment method code for all customers in descending order of customer number.",
        "parsing_tree": "customers_and_products_contacts | #1 = Scan Table [ Customers ] Output [ customer_number , customer_phone , payment_method_code , customer_name ] ; #2 = Sort [ #1 ] OrderBy [ customer_number DESC ] Output [ customer_number , customer_phone , payment_method_code , customer_name ]"
    },
    {
        "id": "287fcf194d4fe8929e06e62e7b67ba0564042006632b07c727d9c24dd40be3d6",
        "question": "Show the minimum, maximum, average price for all products.",
        "parsing_tree": "customers_and_products_contacts | #1 = Scan Table [ Products ] Output [ product_price ] ; #2 = Aggregate [ #1 ] Output [ AVG(product_price) AS Avg_product_price , MIN(product_price) AS Min_product_price , MAX(product_price) AS Max_product_price ]"
    },
    {
        "id": "4b1ebf9ee067fe3d53736372d808154ee42ef22f6ca2071cdcc894354b9a09f9",
        "question": "How many products have a price higher than the average?",
        "parsing_tree": "customers_and_products_contacts | #1 = Scan Table [ Products ] Output [ product_price ] ; #2 = Aggregate [ #1 ] Output [ AVG(product_price) AS Avg_product_price ] ; #3 = Scan Table [ Products ] Output [ product_price ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.product_price > #2.Avg_product_price ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7423e9244bc8edab8ff890a1a0730d9a3ac9a0b366f4181352f0ccf3a4e725b3",
        "question": "Show the customer name, customer address city, date from, and date to for each customer address history.",
        "parsing_tree": "customers_and_products_contacts | #1 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Addresses ] Output [ address_id , city ] ; #3 = Scan Table [ Customer_Address_History ] Output [ date_to , address_id , customer_id , date_from ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.address_id = #3.address_id ] Output [ #3.date_to , #3.customer_id , #3.date_from , #2.city ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.customer_id = #4.customer_id ] Output [ #4.date_to , #4.city , #4.date_from , #1.customer_name ]"
    },
    {
        "id": "071eb3b3118053c6b97e703096948f726e31adf3054d2f70d42c621453c10110",
        "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "parsing_tree": "customers_and_products_contacts | #1 = Scan Table [ Customers ] Predicate [ payment_method_code = 'Credit Card' ] Output [ customer_id , payment_method_code , customer_name ] ; #2 = Scan Table [ Customer_Orders ] Output [ customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.customer_id , #1.customer_name ] ; #4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ customer_name ]"
    },
    {
        "id": "03bfbe57503bdf94d84abfc6e83a052d706ce87c315fdbd56d651232ac64b1e8",
        "question": "Show the product type and name for the products with price higher than 1000 or lower than 500.",
        "parsing_tree": "customers_and_products_contacts | #1 = Scan Table [ Products ] Predicate [ product_price < 500.0 OR product_price > 1000.0 ] Output [ product_name , product_type_code , product_price ]"
    },
    {
        "id": "a7b34e8af861baa71f76bbfd1ba809824a997c85cba951fb11ff0348dcc63a0b",
        "question": "Find the name of dorms only for female (F gender).",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ gender = 'F' ] Output [ dorm_name , gender ]"
    },
    {
        "id": "e4550a6264861794a7df60000a9c3126c6e5960a160e734022f790b33c108e7a",
        "question": "What are the names of the all-female dorms?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ gender = 'F' ] Output [ dorm_name , gender ]"
    },
    {
        "id": "b5efa070bddb1fdec9df20972fcc463d9b2da6705b5b9692ae1579d885c9d438",
        "question": "Find the name of dorms that can accommodate more than 300 students.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ student_capacity > 300 ] Output [ student_capacity , dorm_name ]"
    },
    {
        "id": "cb34a52db74636a3af3511bd731305507d8e5998bb71c070b6e84ea22a8ecb93",
        "question": "What are the names of all the dorms that can accomdate more than 300 students?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ student_capacity > 300 ] Output [ student_capacity , dorm_name ]"
    },
    {
        "id": "612c6153ef9c51f80763da142e3d79ca11c273fd4de8bc8f188ecdb8c58cba80",
        "question": "How many female students (sex is F) whose age is below 25?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Predicate [ Age < 25 AND Sex = 'F' ] Output [ Sex , Age ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0d0b6a0c1ef421f0cb82361c9d7e2bc81e145cecd5087cdf2394de48037f3575",
        "question": "How many girl students who are younger than 25?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Predicate [ Age < 25 AND Sex = 'F' ] Output [ Sex , Age ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cc1d6b8cc924da6d9a8c8da0a0fd7f102e172c470e85254456c82ab5f3eaec70",
        "question": "Find the first name of students who is older than 20.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Predicate [ Age > 20 ] Output [ Fname , Age ]"
    },
    {
        "id": "6344d2aa7f91cf54db2a029464e3bd6b04e47d8008f93f42bdded35993c08449",
        "question": "What are the first names of all students who are older than 20?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Predicate [ Age > 20 ] Output [ Fname , Age ]"
    },
    {
        "id": "fbfe3d1f27dd4713fdf6c53c112298b6aaee9c488997cc17a8b8c29f48b4a5fb",
        "question": "How many dorms are there?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f736ee6d1f0188357b104af60ed5811c874e390329c3877c06f5a2ca200903fe",
        "question": "How many dorms are in the database?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a02f99fce848ed827881f157e101319bd20c4a08091f61ea2c88f6c3c128648a",
        "question": "Find the number of distinct amenities.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm_amenity ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a33b88a44ba5072c63f2352985150e599f090ca5912649dd39c24956d9a3a37d",
        "question": "How many diffrent dorm amenities are there?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm_amenity ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "862960b5ec9cc4b238125e062bb8059e71f48d33d72a70e80a2d3ca6b9243e92",
        "question": "Find the total capacity of all dorms.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Output [ student_capacity ] ; #2 = Aggregate [ #1 ] Output [ SUM(student_capacity) AS Sum_student_capacity ]"
    },
    {
        "id": "e464b2ce0bcd41415db46361d83e40965829d68cde8a65605793dbac8fc08e13",
        "question": "What is the total student capacity of all dorms?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Output [ student_capacity ] ; #2 = Aggregate [ #1 ] Output [ SUM(student_capacity) AS Sum_student_capacity ]"
    },
    {
        "id": "c77da6f372ee8141ecbee18e01f8baed552be99dd1c2a59b8396eb050bd6a579",
        "question": "How many students are there?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "15e3c4fedc3782d9e7a72eb3c59654af55204f5e393b48b7e10f1a7609df5d47",
        "question": "How many students exist?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "77fb525cbede3b951fedf23bca7a267f1279db0819300cd7745d8efa6a5ba870",
        "question": "Find the average age of all students living in the each city.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ city_code , Age ] ; #2 = Aggregate [ #1 ] GroupBy [ city_code ] Output [ AVG(Age) AS Avg_Age , city_code ]"
    },
    {
        "id": "22bf0cbb6f66051d70b5aa1f6040b112d4a8aba8318b66048decac91b6ef47dc",
        "question": "What is the average age for each city and what are those cities?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ city_code , Age ] ; #2 = Aggregate [ #1 ] GroupBy [ city_code ] Output [ AVG(Age) AS Avg_Age , city_code ]"
    },
    {
        "id": "11f59839e748eea84ba859983675268411e27e26d129e2420ffc19e17b045283",
        "question": "Find the average and total capacity of dorms for the students with gender X.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ gender = 'X' ] Output [ student_capacity , gender ] ; #2 = Aggregate [ #1 ] Output [ AVG(student_capacity) AS Avg_student_capacity , SUM(student_capacity) AS Sum_student_capacity ]"
    },
    {
        "id": "375607360bcc9b25b34d1ede6c8eb1258a68d29e39c965a6a142887037711f94",
        "question": "What is the average and total capacity for all dorms who are of gender X?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ gender = 'X' ] Output [ student_capacity , gender ] ; #2 = Aggregate [ #1 ] Output [ AVG(student_capacity) AS Avg_student_capacity , SUM(student_capacity) AS Sum_student_capacity ]"
    },
    {
        "id": "7fe8c13bc40b258e98b06a8b0c2ba5ffdf5c4e20cfd3077f294b8b3ce6e96876",
        "question": "Find the number of dorms that have some amenity.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Has_amenity ] Distinct [ true ] Output [ dormid ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT dormid) AS Count_Dist_dormid ]"
    },
    {
        "id": "9b3f43e31b234c2e1b6fc538bfee6d94bca3ecbd6999c227ed186fd0a0d0a8bd",
        "question": "How many dorms have amenities?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Has_amenity ] Distinct [ true ] Output [ dormid ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT dormid) AS Count_Dist_dormid ]"
    },
    {
        "id": "100c65d0b7d513cae9ba20953d99bbb2ccca8b853fc6468829f16083d6f498c6",
        "question": "Find the name of dorms that do not have any amenity",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #2 = Scan Table [ Has_amenity ] Output [ dormid ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.dormid IS NULL OR #1.dormid = #2.dormid ] Output [ #1.dorm_name ]"
    },
    {
        "id": "1629de975c90a0013e8f8a85303f986ce9fc0cfe56a3e6c5830183f562a7f87b",
        "question": "What are the names of all the dorms that don't have any amenities?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #2 = Scan Table [ Has_amenity ] Output [ dormid ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.dormid IS NULL OR #1.dormid = #2.dormid ] Output [ #1.dorm_name ]"
    },
    {
        "id": "ed9fa116b340bb435e1bd1968901df47e745c4448983ce0909382acbe0d1dd63",
        "question": "Find the number of distinct gender for dorms.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Distinct [ true ] Output [ gender ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT gender) AS Count_Dist_gender ]"
    },
    {
        "id": "6c1fc0275b1b08981892d5b999e06751a7b0e66b8721e72c3f6704d6e19dc9db",
        "question": "How many different genders are there in the dorms?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Distinct [ true ] Output [ gender ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT gender) AS Count_Dist_gender ]"
    },
    {
        "id": "dc946f35299fb45fc6eb4a6b1989827a9cd532ad26bf905ef558920b0a7bd2ad",
        "question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ dorm_name like '%Donor%' ] Output [ student_capacity , dorm_name , gender ]"
    },
    {
        "id": "b38c4a48ac7b10471e00845b22ba8799d2002fcac85f8f2046c276169493dae7",
        "question": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ dorm_name like '%Donor%' ] Output [ student_capacity , dorm_name , gender ]"
    },
    {
        "id": "1e0158283f587c6b68467fdb0140476757092027c98c0d8fc7098cdbc62bc7ab",
        "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ student_capacity < 100 OR student_capacity > 300 ] Output [ student_capacity , dorm_name , gender ]"
    },
    {
        "id": "f8238fc85cb0b249fc4ddf61ad0810c3d5c114977f38123fe5750815c0773fc7",
        "question": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ student_capacity < 100 OR student_capacity > 300 ] Output [ student_capacity , dorm_name , gender ]"
    },
    {
        "id": "dff09f755ca2e5861cc218e925249671524eb8079b29aa42a7516a1a7f1de5c5",
        "question": "Find the numbers of different majors and cities.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Distinct [ true ] Output [ Major ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Major) AS Count_Dist_Major ] ; #3 = Scan Table [ Student ] Distinct [ true ] Output [ city_code ] ; #4 = Aggregate [ #3 ] Output [ COUNT(DISTINCT city_code) AS Count_Dist_city_code ] ; #5 = Join [ #2 , #4 ] Output [ #2.Count_Dist_Major , #4.Count_Dist_city_code ]"
    },
    {
        "id": "7dae7470ea6ad029232d3cfa50de5a35d343f2df1b1d1e8233e410558cdfa735",
        "question": "How many different majors are there and how many different city codes are there for each student?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Distinct [ true ] Output [ Major ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Major) AS Count_Dist_Major ] ; #3 = Scan Table [ Student ] Distinct [ true ] Output [ city_code ] ; #4 = Aggregate [ #3 ] Output [ COUNT(DISTINCT city_code) AS Count_Dist_city_code ] ; #5 = Join [ #2 , #4 ] Output [ #2.Count_Dist_Major , #4.Count_Dist_city_code ]"
    },
    {
        "id": "3abd26dc2d9d6868dd86493ae1a43fbc3e5b61893e95a58e23e5c057fca1a65a",
        "question": "Find the name of dorms which have both TV Lounge and Study Room as amenities.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ] ; #2 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.amenid = #2.amenid ] Output [ #2.dormid ] ; #4 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.dormid = #4.dormid ] Distinct [ true ] Output [ #4.dorm_name ] ; #6 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'Study Room' ] Output [ amenid , amenity_name ] ; #7 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.amenid = #7.amenid ] Output [ #7.dormid ] ; #9 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.dormid = #9.dormid ] Output [ #9.dorm_name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.dorm_name = #10.dorm_name ] Output [ #5.dorm_name ]"
    },
    {
        "id": "f80a9bbd5874970ab258e586af388cf3a86c3b6c91aeea1c0a815bda4e4a28af",
        "question": "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ] ; #2 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.amenid = #2.amenid ] Output [ #2.dormid ] ; #4 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.dormid = #4.dormid ] Distinct [ true ] Output [ #4.dorm_name ] ; #6 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'Study Room' ] Output [ amenid , amenity_name ] ; #7 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.amenid = #7.amenid ] Output [ #7.dormid ] ; #9 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.dormid = #9.dormid ] Output [ #9.dorm_name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.dorm_name = #10.dorm_name ] Output [ #5.dorm_name ]"
    },
    {
        "id": "795c2115578b159037a1c25067546dc3c4c861f7b763a2f2231cd5082686b1de",
        "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ] ; #2 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.amenid = #2.amenid ] Output [ #2.dormid ] ; #4 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.dormid = #4.dormid ] Distinct [ true ] Output [ #4.dorm_name ] ; #6 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'Study Room' ] Output [ amenid , amenity_name ] ; #7 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.amenid = #7.amenid ] Output [ #7.dormid ] ; #9 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.dormid = #9.dormid ] Output [ #9.dorm_name ] ; #11 = Except [ #5 , #10 ] Predicate [ #5.dorm_name = #10.dorm_name ] Output [ #5.dorm_name ]"
    },
    {
        "id": "3d741426fe7a61c85e8d264ceb14398390d52b279155c795a7aa6de3b44cadc9",
        "question": "What is the name of each dorm that has a TV Lounge but no study rooms?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ] ; #2 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.amenid = #2.amenid ] Output [ #2.dormid ] ; #4 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.dormid = #4.dormid ] Distinct [ true ] Output [ #4.dorm_name ] ; #6 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'Study Room' ] Output [ amenid , amenity_name ] ; #7 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.amenid = #7.amenid ] Output [ #7.dormid ] ; #9 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.dormid = #9.dormid ] Output [ #9.dorm_name ] ; #11 = Except [ #5 , #10 ] Predicate [ #5.dorm_name = #10.dorm_name ] Output [ #5.dorm_name ]"
    },
    {
        "id": "b029b914e9ecd6a1548a5862178e58c5455f69abed66663db991f38ef0bcf71d",
        "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Predicate [ Sex = 'F' AND city_code = 'BAL' ] Output [ LName , Sex , city_code ] ; #2 = Scan Table [ Student ] Predicate [ Age < 20 AND Sex = 'M' ] Output [ LName , Sex , Age ] ; #3 = Union [ #1 , #2 ] Output [ #1.LName ]"
    },
    {
        "id": "6e29e62b6de5dea51ac223ca5dd1f0b8bc32b28042d6bd4400e43e4a75cc8570",
        "question": "What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Predicate [ Sex = 'F' AND city_code = 'BAL' ] Output [ LName , Sex , city_code ] ; #2 = Scan Table [ Student ] Predicate [ Age < 20 AND Sex = 'M' ] Output [ LName , Sex , Age ] ; #3 = Union [ #1 , #2 ] Output [ #1.LName ]"
    },
    {
        "id": "70cb91035bc4ca5658f5ca92fe8d0062a55e7048fab905b9ea365c730ae5a099",
        "question": "Find the name of the dorm with the largest capacity.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Output [ student_capacity , dorm_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ student_capacity DESC ] Output [ student_capacity , dorm_name ]"
    },
    {
        "id": "8ff45294adc9fa64b97ca030cd3cc90d6847964240bc336dadf3212e6c99ea1b",
        "question": "What are the names of the dorm with the largest capacity?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Output [ student_capacity , dorm_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ student_capacity DESC ] Output [ student_capacity , dorm_name ]"
    },
    {
        "id": "aafc3b9e0ee95d4cc422cbee975b7e0d1b12167dca3db929759ca3952aabf4c0",
        "question": "List in alphabetic order all different amenities.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm_amenity ] Output [ amenity_name ] ; #2 = Sort [ #1 ] OrderBy [ amenity_name ASC ] Output [ amenity_name ]"
    },
    {
        "id": "908ae3b8d28a4d1bcfd41b476d9db67603ecc8bf4e3aec5d9825e2db1296ffbf",
        "question": "What are the different dorm amenity names in alphabetical order?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm_amenity ] Output [ amenity_name ] ; #2 = Sort [ #1 ] OrderBy [ amenity_name ASC ] Output [ amenity_name ]"
    },
    {
        "id": "716b6bcef8fcd52143b30dbc89bc1019ace6162e416023f7bd71cea29671881d",
        "question": "Find the code of city where most of students are living in.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ city_code ] ; #2 = Aggregate [ #1 ] GroupBy [ city_code ] Output [ countstar AS Count_Star , city_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , city_code ]"
    },
    {
        "id": "deeedbdcfeeb0e562248a7d6a02abed7b41ca86503528e890eea7b475bdcd6f0",
        "question": "What is the code of the city with the most students?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ city_code ] ; #2 = Aggregate [ #1 ] GroupBy [ city_code ] Output [ countstar AS Count_Star , city_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , city_code ]"
    },
    {
        "id": "00df4b64ae5f3b04e6a0b8418d4a80c35b4e2be1af1eaf69caff90e5f46f251e",
        "question": "Find the first and last name of students whose age is younger than the average age.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ] ; #3 = Scan Table [ Student ] Output [ LName , Fname , Age ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Age < #2.Avg_Age ] Output [ #3.LName , #3.Fname ]"
    },
    {
        "id": "0d1bb5b76928dbd772904bcde1e2382fa2b3bae010939f68e0a83fc7a1819a8e",
        "question": "What is the first and last name of all students who are younger than average?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ] ; #3 = Scan Table [ Student ] Output [ LName , Fname , Age ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Age < #2.Avg_Age ] Output [ #3.LName , #3.Fname ]"
    },
    {
        "id": "5327c620dcf84829d2ef369c415e29a105b7ac557ba093e39617afcfcd44b964",
        "question": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Predicate [ city_code <> 'HKG' ] Output [ LName , Fname , city_code , Age ] ; #2 = Sort [ #1 ] OrderBy [ Age ASC ] Output [ LName , Fname , Age ]"
    },
    {
        "id": "ec83cf7d5796e4eceb7b622c144047663205c33a4ba5d7de02740320b73b55c9",
        "question": "What are the first and last names of all students who are not living in the city HKG and order the results by age?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Predicate [ city_code <> 'HKG' ] Output [ LName , Fname , city_code , Age ] ; #2 = Sort [ #1 ] OrderBy [ Age ASC ] Output [ LName , Fname , Age ]"
    },
    {
        "id": "20967100faad1b463fae9736b8e1f473005fe6dffb4e48fc484f836b78abf7e3",
        "question": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ dorm_name = 'Anonymous Donor Hall' ] Output [ dormid , dorm_name ] ; #2 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.dormid = #2.dormid ] Output [ #2.amenid ] ; #4 = Scan Table [ Dorm_amenity ] Output [ amenid , amenity_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.amenid = #4.amenid ] Output [ #4.amenity_name ] ; #6 = Sort [ #5 ] OrderBy [ amenity_name ASC ] Output [ amenity_name ]"
    },
    {
        "id": "ff11f627a1eb573f4f5795c33a5fed01e9d12d8eff7473050492f7341f46b2be",
        "question": "What are the amenities in alphabetical order that Anonymous Donor Hall has?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ dorm_name = 'Anonymous Donor Hall' ] Output [ dormid , dorm_name ] ; #2 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.dormid = #2.dormid ] Output [ #2.amenid ] ; #4 = Scan Table [ Dorm_amenity ] Output [ amenid , amenity_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.amenid = #4.amenid ] Output [ #4.amenity_name ] ; #6 = Sort [ #5 ] OrderBy [ amenity_name ASC ] Output [ amenity_name ]"
    },
    {
        "id": "1f6b1c6916cd63bb0604727d9e10751d7280b017fd2788c712db12a84b72734f",
        "question": "Find the number of dorms and total capacity for each gender.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Output [ student_capacity , gender ] ; #2 = Aggregate [ #1 ] GroupBy [ gender ] Output [ countstar AS Count_Star , gender , SUM(student_capacity) AS Sum_student_capacity ]"
    },
    {
        "id": "bc522a6533a4d141e7c5133adca9e92b0ebda49c93d52ffb37ea40e07ad7350f",
        "question": "How many dorms are there and what is the total capacity for each gender?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Output [ student_capacity , gender ] ; #2 = Aggregate [ #1 ] GroupBy [ gender ] Output [ countstar AS Count_Star , gender , SUM(student_capacity) AS Sum_student_capacity ]"
    },
    {
        "id": "351f435354529bb49304c522ccf5721eb758111483c25e5c77a28d3dde8b3852",
        "question": "Find the average and oldest age for students with different sex.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ Sex , Age ] ; #2 = Aggregate [ #1 ] GroupBy [ Sex ] Output [ MAX(Age) AS Max_Age , Sex , AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "9b496ae7019ad653ce12aa482b1edddfb873c2934b78d6574f5a96fd10197f3c",
        "question": "What is the average and oldest age for each gender of student?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ Sex , Age ] ; #2 = Aggregate [ #1 ] GroupBy [ Sex ] Output [ MAX(Age) AS Max_Age , Sex , AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "713449908c3da207ea3d9c0ed1765492ef25304b54a0736b680e80ce413c789c",
        "question": "Find the number of students in each major.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ Major ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ countstar AS Count_Star , Major ]"
    },
    {
        "id": "9a7149d7cd50e363b22bfbbfc491e1da89ecdc214ed11e08d5856f75dc0e961e",
        "question": "How many students are there in each major?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ Major ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ countstar AS Count_Star , Major ]"
    },
    {
        "id": "eb2660346c22ed1091cca1b560f96f84d0a93c04b61bb89c3fed726b94cd83de",
        "question": "Find the number and average age of students living in each city.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ city_code , Age ] ; #2 = Aggregate [ #1 ] GroupBy [ city_code ] Output [ countstar AS Count_Star , AVG(Age) AS Avg_Age , city_code ]"
    },
    {
        "id": "2c8a94bca6a0271906563a1597f98d7a41c6f5cb538b1dc73e217f128dba4b9a",
        "question": "How many students live in each city and what are their average ages?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ city_code , Age ] ; #2 = Aggregate [ #1 ] GroupBy [ city_code ] Output [ countstar AS Count_Star , AVG(Age) AS Avg_Age , city_code ]"
    },
    {
        "id": "a96648676c520ba330db5d2a9839b1dde9d58f48a14740d89e46dbe5ff0be28c",
        "question": "Find the average age and number of male students (with sex M) from each city.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Predicate [ Sex = 'M' ] Output [ Sex , city_code , Age ] ; #2 = Aggregate [ #1 ] GroupBy [ city_code ] Output [ countstar AS Count_Star , AVG(Age) AS Avg_Age , city_code ]"
    },
    {
        "id": "2a1535abf764678b2842024cefb8958199c0ce5a80c17799315644bff2cf4a5f",
        "question": "What is the average age and how many male students are there in each city?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Predicate [ Sex = 'M' ] Output [ Sex , city_code , Age ] ; #2 = Aggregate [ #1 ] GroupBy [ city_code ] Output [ countstar AS Count_Star , AVG(Age) AS Avg_Age , city_code ]"
    },
    {
        "id": "141c2baba79d29262b76898fcdc9858cbf839ce6f921c9187135bf93d5abc77f",
        "question": "Find the number of students for the cities where have more than one student.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ city_code ] ; #2 = Aggregate [ #1 ] GroupBy [ city_code ] Output [ countstar AS Count_Star , city_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Count_Star , city_code ]"
    },
    {
        "id": "a30e0d22d2d65082f55f9410c13bdb5a0c71187c18ccdac1fc0cc6c8f26aaffc",
        "question": "How many students are from each city, and which cities have more than one cities?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ city_code ] ; #2 = Aggregate [ #1 ] GroupBy [ city_code ] Output [ countstar AS Count_Star , city_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Count_Star , city_code ]"
    },
    {
        "id": "c007aba1f301b54656da7700c7bccd8bcb37293381685890729b9ec263f8a2e4",
        "question": "Find the number of students whose age is older than the average age for each gender.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ] ; #3 = Scan Table [ Student ] Output [ Sex , Age ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Age > #2.Avg_Age ] Output [ #3.Sex ] ; #5 = Aggregate [ #4 ] GroupBy [ Sex ] Output [ countstar AS Count_Star , Sex ]"
    },
    {
        "id": "9ea04fc5423b247d8d53126053b9be54469cf141344d7347ee5f70b65f72950c",
        "question": "How many students are older than average for each gender?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ] ; #3 = Scan Table [ Student ] Output [ Sex , Age ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Age > #2.Avg_Age ] Output [ #3.Sex ] ; #5 = Aggregate [ #4 ] GroupBy [ Sex ] Output [ countstar AS Count_Star , Sex ]"
    },
    {
        "id": "8f82c497e1c33130be42844d961f6cbdf431e2469b12289589b8f0564c3cf7bc",
        "question": "Find the average age of students living in each dorm and the name of dorm.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #2 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #3 = Scan Table [ Student ] Output [ StuID , Age ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.stuid = #3.StuID ] Output [ #2.dormid , #3.Age ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.dormid = #4.dormid ] Output [ #1.dorm_name , #4.Age ] ; #6 = Aggregate [ #5 ] GroupBy [ dorm_name ] Output [ dorm_name , AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "ed7216f51127e0ea24659cd8f44b5e31e36ac324236a72fd589224b0ffd977f4",
        "question": "What is the average age for each dorm and what are the names of each dorm?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #2 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #3 = Scan Table [ Student ] Output [ StuID , Age ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.stuid = #3.StuID ] Output [ #2.dormid , #3.Age ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.dormid = #4.dormid ] Output [ #1.dorm_name , #4.Age ] ; #6 = Aggregate [ #5 ] GroupBy [ dorm_name ] Output [ dorm_name , AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "d4a24eff84ab1be82dbdf9bf03d652d72a1428e9e7f1739ca9f42b0ddf5be375",
        "question": "Find the number of amenities for each of the dorms that can accommodate more than 100 students.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ student_capacity > 100 ] Output [ dormid , student_capacity ] ; #2 = Scan Table [ Has_amenity ] Output [ dormid ] ; #3 = Aggregate [ #2 ] GroupBy [ dormid ] Output [ countstar AS Count_Star , dormid ] ; #4 = Join [ #1 , #3 ] Predicate [ #1.dormid = #3.dormid ] Output [ #3.Count_Star , #1.dormid ]"
    },
    {
        "id": "db533961932597927c0da087e0ed4aa56ae5f1a161bd546e25db01c58ec28dc7",
        "question": "For each dorm, how many amenities does it have?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ student_capacity > 100 ] Output [ dormid , student_capacity ] ; #2 = Scan Table [ Has_amenity ] Output [ dormid ] ; #3 = Aggregate [ #2 ] GroupBy [ dormid ] Output [ countstar AS Count_Star , dormid ] ; #4 = Join [ #1 , #3 ] Predicate [ #1.dormid = #3.dormid ] Output [ #3.Count_Star , #1.dormid ]"
    },
    {
        "id": "b84452999458f41db9cf1f922738608aca57ea5a9e1625c0cfdd004d43ae7604",
        "question": "Find the number of students who is older than 20 in each dorm.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Predicate [ Age > 20 ] Output [ StuID , Age ] ; #2 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.stuid ] Output [ #2.dormid ] ; #4 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.dormid = #4.dormid ] Output [ #4.dorm_name ] ; #6 = Aggregate [ #5 ] GroupBy [ dorm_name ] Output [ countstar AS Count_Star , dorm_name ]"
    },
    {
        "id": "c552042db2d4390c1836085676c903717f7d37fabaf647fd96d97f6d09af413a",
        "question": "How many students are older than 20 in each dorm?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Predicate [ Age > 20 ] Output [ StuID , Age ] ; #2 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.stuid ] Output [ #2.dormid ] ; #4 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.dormid = #4.dormid ] Output [ #4.dorm_name ] ; #6 = Aggregate [ #5 ] GroupBy [ dorm_name ] Output [ countstar AS Count_Star , dorm_name ]"
    },
    {
        "id": "60b7ee76335fe8d15617f965c378b893f2da1d7a58781eb2f58a9e11fbe59abf",
        "question": "Find the first name of students who are living in the Smith Hall.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ dorm_name = 'Smith Hall' ] Output [ dormid , dorm_name ] ; #2 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.dormid = #2.dormid ] Output [ #2.stuid ] ; #4 = Scan Table [ Student ] Output [ Fname , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.stuid = #4.StuID ] Output [ #4.Fname ]"
    },
    {
        "id": "f38406ee2505aaae1a46c48c172f474b537a27c9d50797d17073f139b410a373",
        "question": "What are the first names of all students in Smith Hall?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ dorm_name = 'Smith Hall' ] Output [ dormid , dorm_name ] ; #2 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.dormid = #2.dormid ] Output [ #2.stuid ] ; #4 = Scan Table [ Student ] Output [ Fname , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.stuid = #4.StuID ] Output [ #4.Fname ]"
    },
    {
        "id": "0a27dc030b747b532c11da4b964031f5353baf3d3850151c92371b538dc95bb2",
        "question": "Find the total number of students living in the male dorm (with gender M).",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ gender = 'M' ] Output [ dormid , gender ] ; #2 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.dormid = #2.dormid ] Output [ #2.stuid ] ; #4 = Scan Table [ Student ] Output [ StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.stuid = #4.StuID ] Output [ #3.stuid ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e8933f5a3bd0307a936df7b2b38e1ea0c5cd32961740619d45fa721d9fc82b37",
        "question": "What are the total number of students who are living in a male dorm?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ gender = 'M' ] Output [ dormid , gender ] ; #2 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.dormid = #2.dormid ] Output [ #2.stuid ] ; #4 = Scan Table [ Student ] Output [ StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.stuid = #4.StuID ] Output [ #3.stuid ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e3ad5a783befb1f19fddd31715a7350b69257e25ceb9b8b91bb3d20dee9ffc3c",
        "question": "Find the number of female students (with F sex) living in Smith Hall",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ dorm_name = 'Smith Hall' ] Output [ dormid , dorm_name ] ; #2 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.dormid = #2.dormid ] Output [ #2.stuid ] ; #4 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.stuid = #4.StuID ] Output [ #3.stuid ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5ed9ae9fa29afc61600d6220c37ecd4098199c123a6f9245ac2c12a1e7c7d22f",
        "question": "How many female students live in Smith Hall?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ dorm_name = 'Smith Hall' ] Output [ dormid , dorm_name ] ; #2 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.dormid = #2.dormid ] Output [ #2.stuid ] ; #4 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , StuID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.stuid = #4.StuID ] Output [ #3.stuid ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "82d65dc6393e347619ddab8e206f4e24c34bc079ab7eddfa357d0f26644b5d64",
        "question": "Find the name of amenities Smith Hall dorm have.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ dorm_name = 'Smith Hall' ] Output [ dormid , dorm_name ] ; #2 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.dormid = #2.dormid ] Output [ #2.amenid ] ; #4 = Scan Table [ Dorm_amenity ] Output [ amenid , amenity_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.amenid = #4.amenid ] Output [ #4.amenity_name ]"
    },
    {
        "id": "ab05c23d2e06d587a573e025e72cfd6827602522dd537fb40fb65412840e9cf5",
        "question": "What are the names of the amenities that Smith Hall has?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ dorm_name = 'Smith Hall' ] Output [ dormid , dorm_name ] ; #2 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.dormid = #2.dormid ] Output [ #2.amenid ] ; #4 = Scan Table [ Dorm_amenity ] Output [ amenid , amenity_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.amenid = #4.amenid ] Output [ #4.amenity_name ]"
    },
    {
        "id": "1673c2d3c2875828ea20f5ac29849eac662bb18e7bb99768b2cb765754b19ae5",
        "question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ dorm_name = 'Smith Hall' ] Output [ dormid , dorm_name ] ; #2 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.dormid = #2.dormid ] Output [ #2.amenid ] ; #4 = Scan Table [ Dorm_amenity ] Output [ amenid , amenity_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.amenid = #4.amenid ] Output [ #4.amenity_name ] ; #6 = Sort [ #5 ] OrderBy [ amenity_name ASC ] Output [ amenity_name ]"
    },
    {
        "id": "709d439adda8f2d55e33b310b5cf8f1a37fee9c1a68cccabb1d9afc24826b669",
        "question": "What amenities does Smith Hall have in alphabetical order?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Predicate [ dorm_name = 'Smith Hall' ] Output [ dormid , dorm_name ] ; #2 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.dormid = #2.dormid ] Output [ #2.amenid ] ; #4 = Scan Table [ Dorm_amenity ] Output [ amenid , amenity_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.amenid = #4.amenid ] Output [ #4.amenity_name ] ; #6 = Sort [ #5 ] OrderBy [ amenity_name ASC ] Output [ amenity_name ]"
    },
    {
        "id": "329994af3ca4288a2696a19889307ef10d6b091483ccbd183dc64319f215e732",
        "question": "Find the name of amenity that is most common in all dorms.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Has_amenity ] Output [ amenid ] ; #2 = Aggregate [ #1 ] GroupBy [ amenid ] Output [ countstar AS Count_Star , amenid ] ; #3 = Scan Table [ Dorm_amenity ] Output [ amenid , amenity_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.amenid = #3.amenid ] Output [ #3.amenity_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , amenity_name ]"
    },
    {
        "id": "50fc44a5b4100ea02424489a78c8ce744c2cf7cff3c11671303f112489946bd3",
        "question": "What is the most common amenity in the dorms?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Has_amenity ] Output [ amenid ] ; #2 = Aggregate [ #1 ] GroupBy [ amenid ] Output [ countstar AS Count_Star , amenid ] ; #3 = Scan Table [ Dorm_amenity ] Output [ amenid , amenity_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.amenid = #3.amenid ] Output [ #3.amenity_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , amenity_name ]"
    },
    {
        "id": "c57e3e7f08e40d551e046e657a63a74cffb13cb8608a9f7502629a0a6116d2b8",
        "question": "Find the name of dorms that do not have amenity TV Lounge.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Distinct [ true ] Output [ dorm_name ] ; #2 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ] ; #3 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.amenid = #3.amenid ] Output [ #3.dormid ] ; #5 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.dormid = #5.dormid ] Output [ #5.dorm_name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.dorm_name = #6.dorm_name ] Output [ #1.dorm_name ]"
    },
    {
        "id": "6ff08d4d668d39b64a2d534ac4a9a332f45cd06301cb6832bb323b8386fc2ffa",
        "question": "What are the names of the dorm that does not have a TV Lounge?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Dorm ] Distinct [ true ] Output [ dorm_name ] ; #2 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ] ; #3 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.amenid = #3.amenid ] Output [ #3.dormid ] ; #5 = Scan Table [ Dorm ] Output [ dormid , dorm_name ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.dormid = #5.dormid ] Output [ #5.dorm_name ] ; #7 = Except [ #1 , #6 ] Predicate [ #1.dorm_name = #6.dorm_name ] Output [ #1.dorm_name ]"
    },
    {
        "id": "14902c1ef45405eb5406194dc7a4b42f979c13da883af6b35af05c39b393ee64",
        "question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #2 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ] ; #3 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.amenid = #3.amenid ] Output [ #3.dormid ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #4.dormid = #1.dormid ] Output [ #1.stuid ] ; #6 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.stuid = #6.StuID ] Output [ #6.Fname , #6.LName ]"
    },
    {
        "id": "fcae795e8d35d9a5d4e6665dc48e99934be6acb07e7babc20bfa0169b815eccd",
        "question": "What are the first and last names of all students who are living in a dorm with a TV Lounge?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #2 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ] ; #3 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.amenid = #3.amenid ] Output [ #3.dormid ] ; #5 = Intersect [ #1 , #4 ] Predicate [ #4.dormid = #1.dormid ] Output [ #1.stuid ] ; #6 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.stuid = #6.StuID ] Output [ #6.Fname , #6.LName ]"
    },
    {
        "id": "d2ee3897eefc07904eb7edec94346bc4d384fecd1b6cced0ee66154651ec5df1",
        "question": "Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ Fname , StuID , Age ] ; #2 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #3 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #4 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.amenid = #3.amenid ] Output [ #3.dormid ] ; #6 = Except [ #2 , #5 ] Predicate [ #2.dormid IS NULL OR #5.dormid IS NULL ] Output [ #2.stuid ] ; #7 = Join [ #1 , #6 ] Predicate [ #6.stuid = #1.StuID ] Output [ #1.Age , #1.Fname ]"
    },
    {
        "id": "a04e975e28adf69fb9fcb711761485e7dedfcabc1ecc1e5b6a88141fa01e5b61",
        "question": "What is the first name and age of every student who lives in a dorm with a TV Lounge?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Output [ Fname , StuID , Age ] ; #2 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #3 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #4 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.amenid = #3.amenid ] Output [ #3.dormid ] ; #6 = Except [ #2 , #5 ] Predicate [ #2.dormid IS NULL OR #5.dormid IS NULL ] Output [ #2.stuid ] ; #7 = Join [ #1 , #6 ] Predicate [ #6.stuid = #1.StuID ] Output [ #1.Age , #1.Fname ]"
    },
    {
        "id": "780a9c6ba65497b8b58381ca4582a07dfbb2500b85768e18d19e74135dfff2f4",
        "question": "Find the name of amenities of the dorm where the student with last name Smith is living in.",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Predicate [ LName = 'Smith' ] Output [ LName , StuID ] ; #2 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.stuid ] Output [ #2.dormid ] ; #4 = Scan Table [ Dorm ] Output [ dormid ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.dormid = #4.dormid ] Output [ #3.dormid ] ; #6 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.dormid = #6.dormid ] Output [ #6.amenid ] ; #8 = Scan Table [ Dorm_amenity ] Output [ amenid , amenity_name ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.amenid = #8.amenid ] Output [ #8.amenity_name ]"
    },
    {
        "id": "137430bcd4c93e4e6675c3577fcd11834847dd6331720b3953e4edf2dfd2b009",
        "question": "What are the amenities in the dorm that a student who has the last name of Smith lives in?",
        "parsing_tree": "dorm_1 | #1 = Scan Table [ Student ] Predicate [ LName = 'Smith' ] Output [ LName , StuID ] ; #2 = Scan Table [ Lives_in ] Output [ dormid , stuid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.stuid ] Output [ #2.dormid ] ; #4 = Scan Table [ Dorm ] Output [ dormid ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.dormid = #4.dormid ] Output [ #3.dormid ] ; #6 = Scan Table [ Has_amenity ] Output [ dormid , amenid ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.dormid = #6.dormid ] Output [ #6.amenid ] ; #8 = Scan Table [ Dorm_amenity ] Output [ amenid , amenity_name ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.amenid = #8.amenid ] Output [ #8.amenity_name ]"
    },
    {
        "id": "bd9fdcb800813302f7182f2f403803159235f558414514d09f476e700c9bf87b",
        "question": "How many customers are there?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a2170862008b8ae080d0e70266efdfd4ce7d8b547e0fac8f80837fb443b58193",
        "question": "Count the number of customers.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7a42a9d8b8aeca77b0baffe453a42c3504cb46b07627cc3eb228d76d57593bee",
        "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Output [ email_address , phone_number ] ; #2 = Sort [ #1 ] OrderBy [ email_address ASC , phone_number ASC ] Output [ email_address , phone_number ]"
    },
    {
        "id": "dd8a7e6933cf6d98cbe90dfadf7aee877d6436bdce42249ae994c5e291311277",
        "question": "What are the emails and phone numbers of all customers, sorted by email address and phone number?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Output [ email_address , phone_number ] ; #2 = Sort [ #1 ] OrderBy [ email_address ASC , phone_number ASC ] Output [ email_address , phone_number ]"
    },
    {
        "id": "12245c212da941c964bc4b647e20303b69fc3234c51c736661ff0c441a765c95",
        "question": "Which city has the least number of customers whose type code is \"Good Credit Rating\"?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Predicate [ customer_type_code = 'Good Credit Rating' ] Output [ customer_type_code , town_city ] ; #2 = Aggregate [ #1 ] GroupBy [ town_city ] Output [ countstar AS Count_Star , town_city ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , town_city ]"
    },
    {
        "id": "61177458b1fbd88a7cc579f40e558fe3f5dd58ce3336b289df583db58c33b151",
        "question": "Return the city with the customer type code \"Good Credit Rating\" that had the fewest customers.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Predicate [ customer_type_code = 'Good Credit Rating' ] Output [ customer_type_code , town_city ] ; #2 = Aggregate [ #1 ] GroupBy [ town_city ] Output [ countstar AS Count_Star , town_city ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , town_city ]"
    },
    {
        "id": "41be01d2c1c7b72e6054b4a5f6b07bf7a32670b117214ef87164e344abf60bc6",
        "question": "List the name of all products along with the number of complaints that they have received.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Products ] Output [ product_name , product_id ] ; #2 = Scan Table [ Complaints ] Output [ product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_name ] ; #4 = Aggregate [ #3 ] GroupBy [ product_name ] Output [ countstar AS Count_Star , product_name ]"
    },
    {
        "id": "357c6fe65a5a0d3b8e538c114c81d0291e5ffd4ee5ff248dbad72d6e8746f5bc",
        "question": "What are all the different product names, and how many complains has each received?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Products ] Output [ product_name , product_id ] ; #2 = Scan Table [ Complaints ] Output [ product_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_name ] ; #4 = Aggregate [ #3 ] GroupBy [ product_name ] Output [ countstar AS Count_Star , product_name ]"
    },
    {
        "id": "66e4c714b5cd94accaf83dcd64df15492d3be064c3f2918cad3aeb9975963525",
        "question": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Complaints ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ email_address , customer_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.email_address , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ email_address , Count_Star ]"
    },
    {
        "id": "fe3455d658a93244b1ed83132c2cb9626b447f84724f7d068bc4a9caf105bd18",
        "question": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Complaints ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ email_address , customer_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.email_address , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ email_address , Count_Star ]"
    },
    {
        "id": "b641401cf8ea992ca2a814842a0e689b98fd496bcb2e7afdb188699e114d2ca7",
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Output [ customer_id , phone_number ] ; #2 = Scan Table [ Complaints ] Output [ customer_id , date_complaint_raised ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.date_complaint_raised , #1.phone_number ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ date_complaint_raised DESC ] Output [ phone_number , date_complaint_raised ]"
    },
    {
        "id": "1be037415b29698d6e77cc51f5d3f4cc2a22af566b2012ca0d89fde75f84248c",
        "question": "Return the phone number of the customer who filed the complaint that was raised most recently.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Output [ customer_id , phone_number ] ; #2 = Scan Table [ Complaints ] Output [ customer_id , date_complaint_raised ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.date_complaint_raised , #1.phone_number ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ date_complaint_raised DESC ] Output [ phone_number , date_complaint_raised ]"
    },
    {
        "id": "45172f2f982ea088144bb7962348a1326adbc66abd7fae677bfb2bdd19a61f2d",
        "question": "Find the email and phone number of the customers who have never filed a complaint before.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Output [ email_address , customer_id , phone_number ] ; #2 = Scan Table [ Complaints ] Output [ customer_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.customer_id = #1.customer_id ] Output [ #1.email_address , #1.phone_number ]"
    },
    {
        "id": "26c806ae5ae3ce386ee55e182b7e242c6c87d1fe6d2867e3c2fd0d6b403835ee",
        "question": "What are the emails and phone numbers of custoemrs who have never filed a complaint?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Output [ email_address , customer_id , phone_number ] ; #2 = Scan Table [ Complaints ] Output [ customer_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.customer_id = #1.customer_id ] Output [ #1.email_address , #1.phone_number ]"
    },
    {
        "id": "85dcd048ee16f3d91ca2d666df4cbc536c0f61834b26e22f901c5352541e1f62",
        "question": "Find the phone number of all the customers and staff.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Output [ phone_number ] ; #2 = Scan Table [ Staff ] Output [ phone_number ] ; #3 = Union [ #1 , #2 ] Output [ #1.phone_number ]"
    },
    {
        "id": "e1f7fc55113df4a51c32e5ea7722cf191714247c18e1eb4bb34b16713def705c",
        "question": "What are the phone numbers of all customers and all staff members?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Output [ phone_number ] ; #2 = Scan Table [ Staff ] Output [ phone_number ] ; #3 = Union [ #1 , #2 ] Output [ #1.phone_number ]"
    },
    {
        "id": "d39806566c2593bb5816f6a2a4605edd1979db4fdc4d721822ae1d2b81a963dd",
        "question": "What is the description of the product named \"Chocolate\"?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Products ] Predicate [ product_name = 'Chocolate' ] Output [ product_description , product_name ]"
    },
    {
        "id": "62ba8e200f66d74d5185ca3ab5436b127fd7aa57241b413ee4a2058615ffa655",
        "question": "Return the description of the product called \"Chocolate\".",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Products ] Predicate [ product_name = 'Chocolate' ] Output [ product_description , product_name ]"
    },
    {
        "id": "ebc6e27223cb3cb2292a98f8c1f3043acc99134968761e3c3843d9cfccaf9807",
        "question": "Find the name and category of the most expensive product.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Products ] Output [ product_category_code , product_name , product_price ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ product_price DESC ] Output [ product_category_code , product_name , product_price ]"
    },
    {
        "id": "dd31d6b674055f970cdddeebe36ac3f4fad8ecad629fa4490dd8c3b4413bd41c",
        "question": "What is the name and category code of the product with the highest price?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Products ] Output [ product_category_code , product_name , product_price ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ product_price DESC ] Output [ product_category_code , product_name , product_price ]"
    },
    {
        "id": "2b29c386440d2d09c3c1e2bf065c60bbd548ca5d365ab9da6cf0448dd2d6ea9f",
        "question": "Find the prices of products which has never received a single complaint.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Products ] Output [ product_id , product_price ] ; #2 = Scan Table [ Complaints ] Output [ product_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_price ]"
    },
    {
        "id": "11e5ec0814ede22259b4de7cbc7fef93a9768fc9030e7f9c71e22a33c9571148",
        "question": "What are the prices of products that have never gotten a complaint?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Products ] Output [ product_id , product_price ] ; #2 = Scan Table [ Complaints ] Output [ product_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_price ]"
    },
    {
        "id": "7504eacd492af272012af104247f2abd62848db24a18545a79082b02ed3f8cbd",
        "question": "What is the average price of the products for each category?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Products ] Output [ product_category_code , product_price ] ; #2 = Aggregate [ #1 ] GroupBy [ product_category_code ] Output [ product_category_code , AVG(product_price) AS Avg_product_price ]"
    },
    {
        "id": "8cf9c518e20b6e600ca675ceaad60e3566fd6098909fac82e6bb6ee236415c1b",
        "question": "Return the average price of products that have each category code.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Products ] Output [ product_category_code , product_price ] ; #2 = Aggregate [ #1 ] GroupBy [ product_category_code ] Output [ product_category_code , AVG(product_price) AS Avg_product_price ]"
    },
    {
        "id": "ad72feada0fcf75e4732565965e185fcd6b81a9283285876302d3782e403164e",
        "question": "Find the last name of the staff member who processed the complaint of the cheapest product.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Staff ] Output [ last_name , staff_id ] ; #2 = Scan Table [ Products ] Output [ product_id , product_price ] ; #3 = Scan Table [ Complaints ] Output [ product_id , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.product_id = #3.product_id ] Output [ #3.staff_id , #2.product_price ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.staff_id = #4.staff_id ] Output [ #4.product_price , #1.last_name ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ product_price ASC ] Output [ last_name , product_price ]"
    },
    {
        "id": "9c7e5da7a864bbf193eb61730b25b7c79bdbc31fdd06e910b4e13d3604c293f0",
        "question": "What is the last name of the staff member in charge of the complaint on the product with the lowest price?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Staff ] Output [ last_name , staff_id ] ; #2 = Scan Table [ Products ] Output [ product_id , product_price ] ; #3 = Scan Table [ Complaints ] Output [ product_id , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.product_id = #3.product_id ] Output [ #3.staff_id , #2.product_price ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.staff_id = #4.staff_id ] Output [ #4.product_price , #1.last_name ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ product_price ASC ] Output [ last_name , product_price ]"
    },
    {
        "id": "d8260518674b160338bb124db2b6d8a940602f5f1552b57c426dfedc044a5534",
        "question": "Which complaint status has more than 3 records on file?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Complaints ] Output [ complaint_status_code ] ; #2 = Aggregate [ #1 ] GroupBy [ complaint_status_code ] Output [ countstar AS Count_Star , complaint_status_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ complaint_status_code ]"
    },
    {
        "id": "e9174f78202801d0b07bd6e799c53821ef51630cdce13b9810248e86f09fb0b4",
        "question": "Return complaint status codes have more than 3 corresponding complaints?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Complaints ] Output [ complaint_status_code ] ; #2 = Aggregate [ #1 ] GroupBy [ complaint_status_code ] Output [ countstar AS Count_Star , complaint_status_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ complaint_status_code ]"
    },
    {
        "id": "fc6cfdb6fed69dd81289fcf86cd74112c2cb872b54f0991ed5739e23de26aa81",
        "question": "Find the last name of the staff whose email address contains \"wrau\".",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Staff ] Predicate [ email_address like '%wrau%' ] Output [ last_name , email_address ]"
    },
    {
        "id": "cfd304e2ccbec020e309ba79e073223059ce0eb48b2add526bc7c70397cf6dee",
        "question": "What are the last names of staff with email addressed containing the substring \"wrau\"?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Staff ] Predicate [ email_address like '%wrau%' ] Output [ last_name , email_address ]"
    },
    {
        "id": "1066bf63d50927289b2df31dc7d94098467732b0a8913e7ced4c5ec082a79423",
        "question": "How many customers are there in the customer type with the most customers?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Output [ customer_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_type_code ] Output [ countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star ]"
    },
    {
        "id": "b05a5ccf389c4b418e4a3ed539aa5a1c4c40912e96c258ccd1c440e589c2e9cb",
        "question": "Count the number of customers that have the customer type that is most common.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Output [ customer_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_type_code ] Output [ countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star ]"
    },
    {
        "id": "16342140f0c393964183a30855a2e3bfb31d1d12fea4698898f3b7ab7e1bcb28",
        "question": "What is the last name of the staff who has handled the first ever complaint?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Staff ] Output [ last_name , staff_id ] ; #2 = Scan Table [ Complaints ] Output [ staff_id , date_complaint_raised ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Output [ #2.date_complaint_raised , #1.last_name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ date_complaint_raised ASC ] Output [ last_name , date_complaint_raised ]"
    },
    {
        "id": "3b2ddf02a18512f64ef9af6841b46e9a2db31ce32e0bf1b0529604544bfc002e",
        "question": "Return the last name of the staff member who handled the complaint with the earliest date raised.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Staff ] Output [ last_name , staff_id ] ; #2 = Scan Table [ Complaints ] Output [ staff_id , date_complaint_raised ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Output [ #2.date_complaint_raised , #1.last_name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ date_complaint_raised ASC ] Output [ last_name , date_complaint_raised ]"
    },
    {
        "id": "0bb67aae07c42a264cb5e46a138f18cc7c387868d4be2ae253f1197a36be4450",
        "question": "How many distinct complaint type codes are there in the database?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Complaints ] Distinct [ true ] Output [ complaint_type_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0c777051532639a40eb61f88e73903da54a9e850f63b5be8a4987d2073f51fe2",
        "question": "Count the number of different complaint type codes.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Complaints ] Distinct [ true ] Output [ complaint_type_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f80fc987e91578f8c2dbf5debf578c5f9445757bd7a85ea16e549f8832aa6232",
        "question": "Find the number of complaints with Product Failure type for each complaint status.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Complaints ] Predicate [ complaint_type_code = 'Product Failure' ] Output [ complaint_type_code , complaint_status_code ] ; #2 = Aggregate [ #1 ] GroupBy [ complaint_status_code ] Output [ countstar AS Count_Star , complaint_status_code ]"
    },
    {
        "id": "e885c484e57c0555f637c5ead15f5661d94e16fab16c00826e47a7dc04fe22bf",
        "question": "Of complaints with the type code \"Product Failure\", how many had each different status code?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Complaints ] Predicate [ complaint_type_code = 'Product Failure' ] Output [ complaint_type_code , complaint_status_code ] ; #2 = Aggregate [ #1 ] GroupBy [ complaint_status_code ] Output [ countstar AS Count_Star , complaint_status_code ]"
    },
    {
        "id": "727cf6ca2af1b995a0a707802a8d92c933a867347dd46661001f567775ed2cf4",
        "question": "What is first names of the top 5 staff who have handled the greatest number of complaints?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Complaints ] Output [ staff_id ] ; #2 = Aggregate [ #1 ] GroupBy [ staff_id ] Output [ countstar AS Count_Star , staff_id ] ; #3 = Scan Table [ Staff ] Output [ first_name , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.staff_id = #3.staff_id ] Output [ #3.first_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 5 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , first_name ]"
    },
    {
        "id": "6d6695ffa795c9757f74154871f822314700cd7ea06b406d68ead91f92bbdac4",
        "question": "Return the first names of the 5 staff members who have handled the most complaints.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Complaints ] Output [ staff_id ] ; #2 = Aggregate [ #1 ] GroupBy [ staff_id ] Output [ countstar AS Count_Star , staff_id ] ; #3 = Scan Table [ Staff ] Output [ first_name , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.staff_id = #3.staff_id ] Output [ #3.first_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 5 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , first_name ]"
    },
    {
        "id": "18fd4c625136004f777e80f23f7bd81e8eea96860c18a37fd88f7e118fb17a12",
        "question": "Which state has the most customers?",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Output [ state ] ; #2 = Aggregate [ #1 ] GroupBy [ state ] Output [ countstar AS Count_Star , state ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , state ]"
    },
    {
        "id": "1c733aa0052327d9ab947d0c877bbdbb6b6536bad4a0051afdd66b523364485b",
        "question": "Give the state that has the most customers.",
        "parsing_tree": "customer_complaints | #1 = Scan Table [ Customers ] Output [ state ] ; #2 = Aggregate [ #1 ] GroupBy [ state ] Output [ countstar AS Count_Star , state ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , state ]"
    },
    {
        "id": "c904af2d018896e0ba414b5c60a6842a708018188bb257850d09736a65decfd1",
        "question": "How many submissions are there?",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "adb5683a9803bfe09fa5d34135d250f1fb4a2203a1da97dca9f0b0ceb1137beb",
        "question": "Count the number of submissions.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "03148a19eb7ce47f265c062f784f1de3fac58f2f2aefdae5933c151ad2f07410",
        "question": "List the authors of submissions in ascending order of scores.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ Author , Scores ] ; #2 = Sort [ #1 ] OrderBy [ Scores ASC ] Output [ Scores , Author ]"
    },
    {
        "id": "f62722099ed0061f336bcbb7f9c640941234a1e1efb77cca2e34ee6774b92671",
        "question": "Find the author for each submission and list them in ascending order of submission score.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ Author , Scores ] ; #2 = Sort [ #1 ] OrderBy [ Scores ASC ] Output [ Scores , Author ]"
    },
    {
        "id": "9aa3c9026afb00e5d924ebd5761be0ad64e80ca43c35c345445f23ebbcb676a1",
        "question": "What are the authors of submissions and their colleges?",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ College , Author ]"
    },
    {
        "id": "b0f5206e8e2087278199003ad06919339abf410e05ed406e75c814cf07a580d0",
        "question": "For each submission, show the author and their affiliated college.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ College , Author ]"
    },
    {
        "id": "d839fb2fa60ccfdeee063dc8a5aa7652e2d6fa45f9bca642ccf4149b13bda4e5",
        "question": "Show the names of authors from college \"Florida\" or \"Temple\"",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Predicate [ College = 'Florida' OR College = 'Temple' ] Output [ College , Author ]"
    },
    {
        "id": "d6bbf6bf69faa070652b2a57816dd6eb33e7fad6ae18006c825a9849a5b78ded",
        "question": "Which authors with submissions are from college \"Florida\" or \"Temple\"?",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Predicate [ College = 'Florida' OR College = 'Temple' ] Output [ College , Author ]"
    },
    {
        "id": "1c13bef4f76be3b6dae80e4dda40602d459b1136bbe43bb9d013f3349fa7fb54",
        "question": "What is the average score of submissions?",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ Scores ] ; #2 = Aggregate [ #1 ] Output [ AVG(Scores) AS Avg_Scores ]"
    },
    {
        "id": "1b67f3988ee7c65e40d1c75c8a7c27f3afd89557967662df6364d45666f604f1",
        "question": "Compute the average score of submissions.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ Scores ] ; #2 = Aggregate [ #1 ] Output [ AVG(Scores) AS Avg_Scores ]"
    },
    {
        "id": "7d9f064036eb81abb13116467678dcdf12dad2a2e04a35b3a57661ea16da1f93",
        "question": "What is the author of the submission with the highest score?",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ Author , Scores ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Scores DESC ] Output [ Author , Scores ]"
    },
    {
        "id": "dce3f841f1e425b47163f0da47f553868cde5929033e1a8fa652a8a701bc56dc",
        "question": "Find the author who achieved the highest score in a submission.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ Author , Scores ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Scores DESC ] Output [ Author , Scores ]"
    },
    {
        "id": "3df21a17fe2843b8b23c83ebd85084c6b74861ea23b6b5f189c66f1dd5cc6ead",
        "question": "Show different colleges along with the number of authors of submission from each college.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ College ] ; #2 = Aggregate [ #1 ] GroupBy [ College ] Output [ countstar AS Count_Star , College ]"
    },
    {
        "id": "489de496352f7a4326d73107b24b5806501ea356cbb024066dbb2cba95017c35",
        "question": "For each college, return the college name and the count of authors with submissions from that college.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ College ] ; #2 = Aggregate [ #1 ] GroupBy [ College ] Output [ countstar AS Count_Star , College ]"
    },
    {
        "id": "4d6f68bbc010e27a9155b832c370ae6b6b1c26671ba6b6a664aefcbc2b2ebbba",
        "question": "Show the most common college of authors of submissions.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ College ] ; #2 = Aggregate [ #1 ] GroupBy [ College ] Output [ countstar AS Count_Star , College ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , College ]"
    },
    {
        "id": "1ee67f99f6364612099d4c1ed04f8ff54fd179e10d1ce1005d015b75e6df5b41",
        "question": "Which college has the most authors with submissions?",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ College ] ; #2 = Aggregate [ #1 ] GroupBy [ College ] Output [ countstar AS Count_Star , College ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , College ]"
    },
    {
        "id": "3bde769563272e3fe3f919a21404c17976bb21958d45564192a20869a98c9772",
        "question": "Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Predicate [ Scores > 90.0 ] Distinct [ true ] Output [ College , Scores ] ; #2 = Scan Table [ submission ] Predicate [ Scores < 80.0 ] Output [ College , Scores ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.College = #2.College ] Output [ #1.College ]"
    },
    {
        "id": "cd74c0d1506fed5aceaaf394b6a463b2720cb9743253b29a25e4a163936d90db",
        "question": "Which colleges have both authors with submission score above 90 and authors with submission score below 80?",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Predicate [ Scores > 90.0 ] Distinct [ true ] Output [ College , Scores ] ; #2 = Scan Table [ submission ] Predicate [ Scores < 80.0 ] Output [ College , Scores ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.College = #2.College ] Output [ #1.College ]"
    },
    {
        "id": "c5aa1840c74ae985fadfc963089053777a8ad3b29a662ddc6e996c5e4d5d7789",
        "question": "Show the authors of submissions and the acceptance results of their submissions.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ Acceptance ] Output [ Result , Submission_ID ] ; #2 = Scan Table [ submission ] Output [ Submission_ID , Author ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Submission_ID = #2.Submission_ID ] Output [ #1.Result , #2.Author ]"
    },
    {
        "id": "cae8d9d98842701ad94fd50bbb108cc68ec76ec5b36a8f7aa56486fb66cc3491",
        "question": "For each submission, find its author and acceptance result.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ Acceptance ] Output [ Result , Submission_ID ] ; #2 = Scan Table [ submission ] Output [ Submission_ID , Author ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Submission_ID = #2.Submission_ID ] Output [ #1.Result , #2.Author ]"
    },
    {
        "id": "d3b4d52796e1e42c2b0ebe68c9fcd8fccc418d04de68e86db940770afee8cc4f",
        "question": "Show the result of the submission with the highest score.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ Acceptance ] Output [ Result , Submission_ID ] ; #2 = Scan Table [ submission ] Output [ Submission_ID , Scores ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Submission_ID = #2.Submission_ID ] Output [ #1.Result , #2.Scores ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Scores DESC ] Output [ Result , Scores ]"
    },
    {
        "id": "a595c672bfacdcb8f072c855472c11bd6ac44ba1b04b8dbfe45fd7199fedd7c6",
        "question": "Which submission received the highest score in acceptance result. Show me the result.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ Acceptance ] Output [ Result , Submission_ID ] ; #2 = Scan Table [ submission ] Output [ Submission_ID , Scores ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Submission_ID = #2.Submission_ID ] Output [ #1.Result , #2.Scores ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Scores DESC ] Output [ Result , Scores ]"
    },
    {
        "id": "b784f0af337c67c95f3dba95d2fa88ae2a751bdee52f86a47649f33e71d08a5e",
        "question": "Show each author and the number of workshops they submitted to.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ Acceptance ] Output [ Workshop_ID , Submission_ID ] ; #2 = Scan Table [ submission ] Output [ Submission_ID , Author ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Submission_ID = #2.Submission_ID ] Distinct [ true ] Output [ #2.Author , #1.Workshop_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Author ] Output [ countstar AS Count_Star , Author ]"
    },
    {
        "id": "47af52c92051ff4e77312bc213035be1a64d3d638493a3f40b1b2f83dbfd53da",
        "question": "How many workshops did each author submit to? Return the author name and the number of workshops.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ Acceptance ] Output [ Workshop_ID , Submission_ID ] ; #2 = Scan Table [ submission ] Output [ Submission_ID , Author ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Submission_ID = #2.Submission_ID ] Distinct [ true ] Output [ #2.Author , #1.Workshop_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Author ] Output [ countstar AS Count_Star , Author ]"
    },
    {
        "id": "df6ca64fc68f79f8093cd6407e67a106d80cccea70a8f5dccbbed384adea9375",
        "question": "Show the authors who have submissions to more than one workshop.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ Acceptance ] Output [ Workshop_ID , Submission_ID ] ; #2 = Scan Table [ submission ] Output [ Submission_ID , Author ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Submission_ID = #2.Submission_ID ] Distinct [ true ] Output [ #2.Author , #1.Workshop_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Author ] Output [ countstar AS Count_Star , Author ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Author ]"
    },
    {
        "id": "a2bcd5313b81d2fd00ecbf3d473547ee0c695f9ae0307254a0f8163f4dc5865d",
        "question": "Which authors have submitted to more than one workshop?",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ Acceptance ] Output [ Workshop_ID , Submission_ID ] ; #2 = Scan Table [ submission ] Output [ Submission_ID , Author ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Submission_ID = #2.Submission_ID ] Distinct [ true ] Output [ #2.Author , #1.Workshop_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Author ] Output [ countstar AS Count_Star , Author ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Author ]"
    },
    {
        "id": "d6f570bc4bb4c977b0c0fe943f9075bcd11920fecfa7eb5d96a18732222b39a9",
        "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ workshop ] Output [ Venue , Date ] ; #2 = Sort [ #1 ] OrderBy [ Venue ASC ] Output [ Venue , Date ]"
    },
    {
        "id": "0498720bffe0953cfac33b0558dad47c1a263926e449ffcf58656d77820117d9",
        "question": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ workshop ] Output [ Venue , Date ] ; #2 = Sort [ #1 ] OrderBy [ Venue ASC ] Output [ Venue , Date ]"
    },
    {
        "id": "eac6cfa7db189aaf205433510e67ebdba6f9f3e043d9c923f01337c9f21ebe8f",
        "question": "List the authors who do not have submission to any workshop.",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ Submission_ID , Author ] ; #2 = Scan Table [ Acceptance ] Output [ Submission_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Submission_ID ] Output [ Submission_ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Submission_ID = #1.Submission_ID ] Output [ #1.Author ]"
    },
    {
        "id": "ff108f1ce08ffb1119da08e61650f830ed95f445352766693b3805d0e3b01ace",
        "question": "Which authors did not submit to any workshop?",
        "parsing_tree": "workshop_paper | #1 = Scan Table [ submission ] Output [ Submission_ID , Author ] ; #2 = Scan Table [ Acceptance ] Output [ Submission_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Submission_ID ] Output [ Submission_ID ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Submission_ID = #1.Submission_ID ] Output [ #1.Author ]"
    },
    {
        "id": "346135fd8fc8a88051c2971f903f080dcf5211bd8d10f4dc73cfb2c4ec598b60",
        "question": "Find the number of investors in total.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Investors ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4e9f51282e0d53a8a49e5d4f48d614704162e709b45283e394857dbfde4c9d0b",
        "question": "Show all investor details.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Investors ] Output [ Investor_details ]"
    },
    {
        "id": "bd8826dd5b5020dbf0a2d278e1e79a1eee4800a280e887b716006bd6808c6c89",
        "question": "Show all distinct lot details.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Lots ] Distinct [ true ] Output [ lot_details ]"
    },
    {
        "id": "c9ef4e504d5d5a9d1555583a074ef376c90455ac04b441b9528efc57bc61faf5",
        "question": "Show the maximum amount of transaction.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Output [ amount_of_transaction ] ; #2 = Aggregate [ #1 ] Output [ MAX(amount_of_transaction) AS Max_amount_of_transaction ]"
    },
    {
        "id": "955a735cedee20bc6a67071c6df7c059b07e0d78dece1065f6340daf3b74e221",
        "question": "Show all date and share count of transactions.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Output [ date_of_transaction , share_count ]"
    },
    {
        "id": "28931e456bf0dc973b81ce43b6b90ce9cd682db264a9d06d5c1aa607cca45158",
        "question": "What is the total share of transactions?",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Output [ share_count ] ; #2 = Aggregate [ #1 ] Output [ SUM(share_count) AS Sum_share_count ]"
    },
    {
        "id": "7e46b199e347434c16bfc514e6d963383593064df0c8b78eca89f6440b950765",
        "question": "Show all transaction ids with transaction code 'PUR'.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Predicate [ transaction_type_code = 'PUR' ] Output [ transaction_id , transaction_type_code ]"
    },
    {
        "id": "a53a105c6a3ad4d81ae0932f2ed63e20be0291968cff10d6fea29ebceb69a1d1",
        "question": "Show all dates of transactions whose type code is \"SALE\".",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Predicate [ transaction_type_code = 'SALE' ] Output [ date_of_transaction , transaction_type_code ]"
    },
    {
        "id": "bf1b3d3018f851142b1abd8247a672971c4dae7d6a9ae4fa9c9036043bcc323c",
        "question": "Show the average amount of transactions with type code \"SALE\".",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Predicate [ transaction_type_code = 'SALE' ] Output [ amount_of_transaction , transaction_type_code ] ; #2 = Aggregate [ #1 ] Output [ AVG(amount_of_transaction) AS Avg_amount_of_transaction ]"
    },
    {
        "id": "f136f20dcd160f2c054b8fc29a9be4b4ab96b58fc6046170e3a4959cf93ad6d2",
        "question": "Show the description of transaction type with code \"PUR\".",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Ref_Transaction_Types ] Predicate [ transaction_type_code = 'PUR' ] Output [ transaction_type_description , transaction_type_code ]"
    },
    {
        "id": "bd48bddb111e187c86f7b4c763406b291d1e354dca9ec0c6fd04324a5040f7ee",
        "question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Predicate [ share_count > 50 AND transaction_type_code = 'PUR' ] Output [ amount_of_transaction , share_count , transaction_type_code ] ; #2 = Aggregate [ #1 ] Output [ MIN(amount_of_transaction) AS Min_amount_of_transaction ]"
    },
    {
        "id": "a3b9192abb4f23c8f6292cbf362ca651a336a9dd964e4717db94dabff0dc4645",
        "question": "Show the maximum share count of transactions where the amount is smaller than 10000",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Predicate [ amount_of_transaction < 10000.0 ] Output [ amount_of_transaction , share_count ] ; #2 = Aggregate [ #1 ] Output [ MAX(share_count) AS Max_share_count ]"
    },
    {
        "id": "df0e87da49f6f03d7f2e01dddde2ef9d8796019f7f7d9801f1bab5f472b26be3",
        "question": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Predicate [ share_count > 100 OR amount_of_transaction > 1000.0 ] Output [ amount_of_transaction , date_of_transaction , share_count ]"
    },
    {
        "id": "cc0af3092a5b262d10018aed2e6f5a90f36d598cef4edb82f2888e5e3b315944",
        "question": "Show the transaction type descriptions and dates if the share count is smaller than 10.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Ref_Transaction_Types ] Output [ transaction_type_description , transaction_type_code ] ; #2 = Scan Table [ Transactions ] Predicate [ share_count < 10 ] Output [ date_of_transaction , share_count , transaction_type_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.transaction_type_code = #2.transaction_type_code ] Output [ #1.transaction_type_description , #2.date_of_transaction ]"
    },
    {
        "id": "15c41bec0525b0424570367b0e2565129b3bc11a221b1321bc1b4918acd02517",
        "question": "Show details of all investors if they make any transaction with share count greater than 100.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Predicate [ share_count > 100 ] Output [ share_count , investor_id ] ; #2 = Scan Table [ Investors ] Output [ Investor_details , investor_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.investor_id = #2.investor_id ] Output [ #2.Investor_details ]"
    },
    {
        "id": "f8513507428a5cc7e2501167d5a0715d64a5b4e2d723cbe61c6b0b74c447deb0",
        "question": "How many distinct transaction types are used in the transactions?",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Distinct [ true ] Output [ transaction_type_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "393f58033ec2cba092df99d92f6ad1b9e139d20819545b6e07b329d35bdf1aff",
        "question": "Return the lot details and investor ids.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Lots ] Output [ lot_details , investor_id ]"
    },
    {
        "id": "f3a826c4070880de577f302edae99a66b143aaaee9f84fc8b204c0698d8a69f0",
        "question": "Return the lot details of lots that belong to investors with details \"l\"?",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Investors ] Predicate [ Investor_details = 'l' ] Output [ Investor_details , investor_id ] ; #2 = Scan Table [ Lots ] Output [ lot_details , investor_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.investor_id = #2.investor_id ] Output [ #2.lot_details ]"
    },
    {
        "id": "af58cc50116d375f706bd100e4cfb2060ffa78d98b9ba260af694220755feb67",
        "question": "What are the purchase details of transactions with amount bigger than 10000?",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Predicate [ amount_of_transaction > 10000.0 ] Output [ amount_of_transaction , transaction_id ] ; #2 = Scan Table [ Purchases ] Output [ purchase_details , purchase_transaction_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.transaction_id = #2.purchase_transaction_id ] Output [ #2.purchase_details ]"
    },
    {
        "id": "b8f0a7ece06624a581e38ea5c354493e5bf9e6e14576c7f4f5a05229898ec9d8",
        "question": "What are the sale details and dates of transactions with amount smaller than 3000?",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Predicate [ amount_of_transaction < 3000.0 ] Output [ amount_of_transaction , transaction_id , date_of_transaction ] ; #2 = Scan Table [ Sales ] Output [ sales_details , sales_transaction_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.transaction_id = #2.sales_transaction_id ] Output [ #1.date_of_transaction , #2.sales_details ]"
    },
    {
        "id": "5bdfacd4774ed766f250f7f85c68bfab83aad1d3d2761774fa50b56813552c31",
        "question": "What are the lot details of lots associated with transactions with share count smaller than 50?",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Predicate [ share_count < 50 ] Output [ transaction_id , share_count ] ; #2 = Scan Table [ Lots ] Output [ lot_id , lot_details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.transaction_id = #2.lot_id ] Output [ #2.lot_details , #1.transaction_id ] ; #4 = Scan Table [ Transactions_Lots ] Output [ transaction_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.transaction_id = #4.transaction_id ] Output [ #3.lot_details ]"
    },
    {
        "id": "617a3dcef6d5e5d4c41778d1f3193ff0a769c55e679edd3f442ec85518bf6fdc",
        "question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Predicate [ share_count > 100 AND transaction_type_code = 'PUR' ] Output [ transaction_id , share_count , transaction_type_code ] ; #2 = Scan Table [ Lots ] Output [ lot_id , lot_details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.transaction_id = #2.lot_id ] Output [ #2.lot_details , #1.transaction_id ] ; #4 = Scan Table [ Transactions_Lots ] Output [ transaction_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.transaction_id = #4.transaction_id ] Output [ #3.lot_details ]"
    },
    {
        "id": "fa50aaf4ec85fa379b1ad08e809e6f80e8141ac091fc884324e49fc0b6d902c1",
        "question": "Show the average transaction amount for different transaction types.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Output [ amount_of_transaction , transaction_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ transaction_type_code ] Output [ AVG(amount_of_transaction) AS Avg_amount_of_transaction , transaction_type_code ]"
    },
    {
        "id": "9736783227d3bc8b3575ef88480ce6b86a2c9bb001586c99bef90241535e274d",
        "question": "Show the maximum and minimum share count of different transaction types.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Output [ share_count , transaction_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ transaction_type_code ] Output [ MAX(share_count) AS Max_share_count , MIN(share_count) AS Min_share_count , transaction_type_code ]"
    },
    {
        "id": "e03308f445e03ec7b0db68962a40585caed7c633e9fa98a667e025369e735370",
        "question": "Show the average share count of transactions for different investors.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Output [ share_count , investor_id ] ; #2 = Aggregate [ #1 ] GroupBy [ investor_id ] Output [ AVG(share_count) AS Avg_share_count , investor_id ]"
    },
    {
        "id": "23bfa771285ba7f56fd758a6e4027a5539c127328ae57c8cfea38cccb716dbcb",
        "question": "Show the average amount of transactions for different investors.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Output [ amount_of_transaction , investor_id ] ; #2 = Aggregate [ #1 ] GroupBy [ investor_id ] Output [ AVG(amount_of_transaction) AS Avg_amount_of_transaction , investor_id ]"
    },
    {
        "id": "44b0a671dc0b0da01a87521124ccf7a41e2814d03019de9e8f12f353856ee417",
        "question": "Show the average amount of transactions for different lots.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions_Lots ] Output [ lot_id , transaction_id ] ; #2 = Scan Table [ Transactions ] Output [ amount_of_transaction , transaction_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.transaction_id = #2.transaction_id ] Output [ #2.amount_of_transaction , #1.lot_id ] ; #4 = Aggregate [ #3 ] GroupBy [ lot_id ] Output [ lot_id , AVG(amount_of_transaction) AS Avg_amount_of_transaction ]"
    },
    {
        "id": "7ac14d5c4714e47a083f118b059fe7e0656be8ee1249545084a7caa0aae5f0c9",
        "question": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Predicate [ transaction_type_code = 'SALE' ] Output [ transaction_type_code , investor_id ] ; #2 = Aggregate [ #1 ] GroupBy [ investor_id ] Output [ countstar AS Count_Star , investor_id ]"
    },
    {
        "id": "47eebe36a571d1eb1e57221f3d74bddf9d92fc6979c4475ea4fd1d2367e3eb8b",
        "question": "Show the number of transactions for different investors.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Output [ investor_id ] ; #2 = Aggregate [ #1 ] GroupBy [ investor_id ] Output [ countstar AS Count_Star , investor_id ]"
    },
    {
        "id": "1b15ee03fa21f9201f3b34197017b0c9d7eb9a667092af685706adc63f98e3b7",
        "question": "Show the transaction type code that occurs the fewest times.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Output [ transaction_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ transaction_type_code ] Output [ countstar AS Count_Star , transaction_type_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , transaction_type_code ]"
    },
    {
        "id": "45f600ac470a24a6adfa8e602a72693bdadba5e6862cabdb823c6d1f4e466037",
        "question": "Show the transaction type code that occurs the most frequently.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Output [ transaction_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ transaction_type_code ] Output [ countstar AS Count_Star , transaction_type_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , transaction_type_code ]"
    },
    {
        "id": "f790b5d4776d33712b98d49ca60b6ba9413c9d50bf2398c20da861937be991c0",
        "question": "Show the description of the transaction type that occurs most frequently.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Output [ transaction_type_code ] ; #2 = Aggregate [ #1 ] GroupBy [ transaction_type_code ] Output [ countstar AS Count_Star , transaction_type_code ] ; #3 = Scan Table [ Ref_Transaction_Types ] Output [ transaction_type_description , transaction_type_code ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.transaction_type_code = #3.transaction_type_code ] Output [ #3.transaction_type_description , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , transaction_type_description ]"
    },
    {
        "id": "366c87e6beac222d663e6558411c50ca91aa9b9f17308c9ce945ee367165cf04",
        "question": "Show the id and details of the investor that has the largest number of transactions.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Output [ investor_id ] ; #2 = Aggregate [ #1 ] GroupBy [ investor_id ] Output [ countstar AS Count_Star , investor_id ] ; #3 = Scan Table [ Investors ] Output [ Investor_details , investor_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.investor_id = #3.investor_id ] Output [ #3.Investor_details , #2.investor_id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Investor_details , investor_id ]"
    },
    {
        "id": "11b23e53e9a8e4e7cf715fd9edaedef2e02f385b26af90ec41609249d264adaf",
        "question": "Show the ids of the investors who have at least two transactions.",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Output [ investor_id ] ; #2 = Aggregate [ #1 ] GroupBy [ investor_id ] Output [ countstar AS Count_Star , investor_id ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ investor_id ]"
    },
    {
        "id": "bce2f3db7b0bb45240166a5bbdb974caa26e6eb77c3773d834948dff085301a6",
        "question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Transactions ] Predicate [ share_count >= 100 OR amount_of_transaction >= 100.0 ] Output [ amount_of_transaction , date_of_transaction , share_count ]"
    },
    {
        "id": "45fdb7d1acb453f32ad1aaf0e5b1ab467fb95c6b41966dd1e391875913de7fc0",
        "question": "What are the details of the lots which are not used in any transactions?",
        "parsing_tree": "tracking_share_transactions | #1 = Scan Table [ Lots ] Distinct [ true ] Output [ lot_details ] ; #2 = Scan Table [ Transactions_Lots ] Output [ lot_id ] ; #3 = Scan Table [ Lots ] Output [ lot_id , lot_details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.lot_id = #3.lot_id ] Output [ #3.lot_details ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.lot_details = #4.lot_details ] Output [ #1.lot_details ]"
    },
    {
        "id": "e8f690ae1a5aaf3752005536470e5de882cc765a4aedbdd0a6e350d1f0802a1b",
        "question": "How many available hotels are there in total?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Hotels ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ef728c2d4768691c927c5f1781148ad93ed4a1f5b1462b8920065065b988cc03",
        "question": "Find the total number of available hotels.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Hotels ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "189b68179039074226d175f67dcf16426015feec5b56f2b3787f70128c0c4f64",
        "question": "Show all distinct location names.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Locations ] Distinct [ true ] Output [ Location_Name ]"
    },
    {
        "id": "0aa98252fcad6b819da7ca135ecbcb9392d5c290dfc516ee1ae70fa459b1cf5f",
        "question": "What are the distinct location names?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Locations ] Distinct [ true ] Output [ Location_Name ]"
    },
    {
        "id": "e93e8851bda21134c18595f278914195335d049e76e1aa9df79e443a1aa66254",
        "question": "Show the names and details of all the staff members.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Staff ] Output [ Name , Other_Details ]"
    },
    {
        "id": "f3b5aedf0d98dc7e1251497bb1ebd09e980c7e28cf1c28b19ac0ea9bae26c199",
        "question": "What is the name and detail of each staff member?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Staff ] Output [ Name , Other_Details ]"
    },
    {
        "id": "18a5c64878d42d444191d2263c719ab5cac96ede542425d31b1b0dd8ffb02658",
        "question": "Show details of all visitors.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visitors ] Output [ Tourist_Details ]"
    },
    {
        "id": "cba4d07ce6736ad88f56b8aed075a76a28bb31d8b99f7111c06c725be7f9d252",
        "question": "What is the detail of each visitor?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visitors ] Output [ Tourist_Details ]"
    },
    {
        "id": "f23adec92d71078988065ea2c0c6a543c80eb15af800bc2ad1a551de6a5da7aa",
        "question": "Show the average price range of hotels that have 5 star ratings and allow pets.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Hotels ] Predicate [ star_rating_code = '5' AND pets_allowed_yn = 1 ] Output [ pets_allowed_yn , star_rating_code , price_range ] ; #2 = Aggregate [ #1 ] Output [ AVG(price_range) AS Avg_price_range ]"
    },
    {
        "id": "9d772efbe2a86a0db0ae88f638c7461397877517474c3a6fea0ff122ac9e040c",
        "question": "What is the average price range of five star hotels that allow pets?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Hotels ] Predicate [ star_rating_code = '5' AND pets_allowed_yn = 1 ] Output [ pets_allowed_yn , star_rating_code , price_range ] ; #2 = Aggregate [ #1 ] Output [ AVG(price_range) AS Avg_price_range ]"
    },
    {
        "id": "53ae2494041cfc2af537add712a36f551dfce911bfbe9552be8fbad9dd892059",
        "question": "What is the address of the location \"UK Gallery\"?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Locations ] Predicate [ Location_Name = 'UK Gallery' ] Output [ Location_Name , Address ]"
    },
    {
        "id": "877222d27d59e695fe8eaaf9f9f51c3730f0d9decb273ee1de50f9bac429db7f",
        "question": "Find the address of the location named \"UK Gallery\".",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Locations ] Predicate [ Location_Name = 'UK Gallery' ] Output [ Location_Name , Address ]"
    },
    {
        "id": "b3017b73235e7eab25ddb2b66cbfe5ec71f91b610c734451063f7f8c8bfca7e1",
        "question": "What is the detail of the location UK Gallery?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Locations ] Predicate [ Location_Name = 'UK Gallery' ] Output [ Location_Name , Other_Details ]"
    },
    {
        "id": "bc06fa92a953e680d5266b8a2e498a8c4657b40d2af86758fda844d9f5edf470",
        "question": "Return the detail of the location named \"UK Gallery\".",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Locations ] Predicate [ Location_Name = 'UK Gallery' ] Output [ Location_Name , Other_Details ]"
    },
    {
        "id": "581dd09a373196c70a48e81bce084524f9cfad4ef9f099a381694ec6c08189fb",
        "question": "Which location names contain the word \"film\"?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Locations ] Predicate [ Location_Name like '%film%' ] Output [ Location_Name ]"
    },
    {
        "id": "8d416002f526ae53e51c3786687c65e27e47b8613bf926aab8d7fab5eed136ff",
        "question": "Find all the locations whose names contain the word \"film\".",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Locations ] Predicate [ Location_Name like '%film%' ] Output [ Location_Name ]"
    },
    {
        "id": "63aeb08348f9cf4dea1b55436c2c0d4f2d9410cbf6e795670bcea467c7231042",
        "question": "How many distinct names are associated with all the photos?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Photos ] Distinct [ true ] Output [ Name ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Name) AS Count_Dist_Name ]"
    },
    {
        "id": "a5fe320ad7930c02b9fccc791a279409fc9b1ebf60ab0e2c798e1b0f5836743d",
        "question": "Count the number of distinct names associated with the photos.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Photos ] Distinct [ true ] Output [ Name ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Name) AS Count_Dist_Name ]"
    },
    {
        "id": "b325884ac09303f2e7fde6bac81b2b4ff2d985fdaadedd9eccef4eff12059f2c",
        "question": "What are the distinct visit dates?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visits ] Distinct [ true ] Output [ Visit_Date ]"
    },
    {
        "id": "98a9b451b7b99aef0769f7966268ad2cea43b951a93239fde56c09cb0a42f722",
        "question": "Find all the distinct visit dates.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visits ] Distinct [ true ] Output [ Visit_Date ]"
    },
    {
        "id": "411d5b1a013414b86fe3cc856a56b8c36bc6b1ec663b7e6fa3d140a14facee71",
        "question": "What are the names of the tourist attractions that can be accessed by bus?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Tourist_Attractions ] Predicate [ How_to_Get_There = 'bus' ] Output [ How_to_Get_There , Name ]"
    },
    {
        "id": "3bcffe5e64e648d935cb35154137396b2a1262c5a4e92c97fa90c384b3448bd6",
        "question": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Tourist_Attractions ] Predicate [ How_to_Get_There = 'bus' ] Output [ How_to_Get_There , Name ]"
    },
    {
        "id": "cca93914f54b096c603849c15782ed6720845250f5f08c2ccec16e6d9461eea1",
        "question": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Tourist_Attractions ] Predicate [ How_to_Get_There = 'bus' OR How_to_Get_There = 'walk' ] Output [ How_to_Get_There , Opening_Hours , Name ]"
    },
    {
        "id": "e83aaec49115e6ac21b0effb85be2a2a81efd6a9eb9550acca19e3f3de69da18",
        "question": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Tourist_Attractions ] Predicate [ How_to_Get_There = 'bus' OR How_to_Get_There = 'walk' ] Output [ How_to_Get_There , Opening_Hours , Name ]"
    },
    {
        "id": "346f9d94d9eb9d8a1152dc0c1891dd692e3c94760bc1843f9940ec3363931c4c",
        "question": "What are the star rating descriptions of the hotels with price above 10000?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Ref_Hotel_Star_Ratings ] Output [ star_rating_code , star_rating_description ] ; #2 = Scan Table [ Hotels ] Predicate [ price_range > 10000.0 ] Output [ star_rating_code , price_range ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.star_rating_code = #2.star_rating_code ] Output [ #1.star_rating_description ]"
    },
    {
        "id": "604e8907aea6fae46ac0f0487a8671cb528ebd85eb148213a4b7181b4d688ee5",
        "question": "Give me the star rating descriptions of the hotels that cost more than 10000.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Ref_Hotel_Star_Ratings ] Output [ star_rating_code , star_rating_description ] ; #2 = Scan Table [ Hotels ] Predicate [ price_range > 10000.0 ] Output [ star_rating_code , price_range ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.star_rating_code = #2.star_rating_code ] Output [ #1.star_rating_description ]"
    },
    {
        "id": "3e5f133750bd8b95fe7401ed6f0fcff0689178b08bc2cfe7e1320a354ff87f98",
        "question": "What are the details and opening hours of the museums?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Museums ] Output [ Museum_Details , Museum_ID ] ; #2 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Opening_Hours ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Museum_ID = #2.Tourist_Attraction_ID ] Output [ #2.Opening_Hours , #1.Museum_Details ]"
    },
    {
        "id": "d6546b6bb5af8d5db78264fd418bd34216d85849ef0322d9d7fd90da8c6f2a5f",
        "question": "Give me the detail and opening hour for each museum.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Museums ] Output [ Museum_Details , Museum_ID ] ; #2 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Opening_Hours ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Museum_ID = #2.Tourist_Attraction_ID ] Output [ #2.Opening_Hours , #1.Museum_Details ]"
    },
    {
        "id": "a4e608a29166e9b2d03cadeac3f6ff1a8814b0e10b614c58b85511f767caaccf",
        "question": "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Photos ] Predicate [ Name = 'game1' ] Output [ Tourist_Attraction_ID , Name ] ; #2 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Tourist_Attraction_ID = #2.Tourist_Attraction_ID ] Output [ #2.Name ]"
    },
    {
        "id": "628a849b9162571a3a358c9a38cd2e68e28cf28dae31efa49600aca3c5b51ff3",
        "question": "Which tourist attraction is associated with the photo \"game1\"? Return its name.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Photos ] Predicate [ Name = 'game1' ] Output [ Tourist_Attraction_ID , Name ] ; #2 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Tourist_Attraction_ID = #2.Tourist_Attraction_ID ] Output [ #2.Name ]"
    },
    {
        "id": "d23e8d713a89d330f1a33045e2412e78a6ee7a9f143556859de0e6cbe2c09b53",
        "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Tourist_Attractions ] Predicate [ Name = 'film festival' ] Output [ Tourist_Attraction_ID , Name ] ; #2 = Scan Table [ Photos ] Output [ Tourist_Attraction_ID , Name , Description ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Tourist_Attraction_ID = #2.Tourist_Attraction_ID ] Output [ #2.Name , #2.Description ]"
    },
    {
        "id": "410dd6b82590f60835ce2449187d193f6187b1674daf86aa9b3a4297f17f56a1",
        "question": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Tourist_Attractions ] Predicate [ Name = 'film festival' ] Output [ Tourist_Attraction_ID , Name ] ; #2 = Scan Table [ Photos ] Output [ Tourist_Attraction_ID , Name , Description ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Tourist_Attraction_ID = #2.Tourist_Attraction_ID ] Output [ #2.Name , #2.Description ]"
    },
    {
        "id": "abc4c82c62fe12d4412eb4b77bb4540ca1e8c766c9b4f3e4c34eaa3b2222c5a3",
        "question": "What are the details and ways to get to tourist attractions related to royal family?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Royal_Family ] Output [ Royal_Family_Details , Royal_Family_ID ] ; #2 = Scan Table [ Tourist_Attractions ] Output [ How_to_Get_There , Tourist_Attraction_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Royal_Family_ID = #2.Tourist_Attraction_ID ] Output [ #2.How_to_Get_There , #1.Royal_Family_Details ]"
    },
    {
        "id": "4c5a97ad58b99ee886b32190a5c082304ed380199ec34dfe1ce1ee3b85c640ec",
        "question": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Royal_Family ] Output [ Royal_Family_Details , Royal_Family_ID ] ; #2 = Scan Table [ Tourist_Attractions ] Output [ How_to_Get_There , Tourist_Attraction_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Royal_Family_ID = #2.Tourist_Attraction_ID ] Output [ #2.How_to_Get_There , #1.Royal_Family_Details ]"
    },
    {
        "id": "7cfa821aa49ea0a41e7287cbfe6496cb7d9080df7ec7a8b5ed40966dcd7a0466",
        "question": "What are the details of the shops that can be accessed by walk?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Shops ] Output [ Shop_ID , Shop_Details ] ; #2 = Scan Table [ Tourist_Attractions ] Predicate [ How_to_Get_There = 'walk' ] Output [ How_to_Get_There , Tourist_Attraction_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Shop_ID = #2.Tourist_Attraction_ID ] Output [ #1.Shop_Details ]"
    },
    {
        "id": "75a4d5c546e5c13801f5bd9adba98df796411f39f6739eb79dcb0a90dea3bbaf",
        "question": "Find the details of the shops that can be reached by walk.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Shops ] Output [ Shop_ID , Shop_Details ] ; #2 = Scan Table [ Tourist_Attractions ] Predicate [ How_to_Get_There = 'walk' ] Output [ How_to_Get_There , Tourist_Attraction_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Shop_ID = #2.Tourist_Attraction_ID ] Output [ #1.Shop_Details ]"
    },
    {
        "id": "5b2f5cc22b026900b9eaac6ecd6cba7a711a9131dea46c1acf6d8c1f15e0fbfb",
        "question": "What is the name of the staff that is in charge of the attraction named \"US museum\"?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Tourist_Attractions ] Predicate [ Name = 'US museum' ] Output [ Tourist_Attraction_ID , Name ] ; #2 = Scan Table [ Staff ] Output [ Tourist_Attraction_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Tourist_Attraction_ID = #2.Tourist_Attraction_ID ] Output [ #2.Name ]"
    },
    {
        "id": "9ddfd255446172b534c76a989339931601338d30b4b8c6af19dc21870c7c1d79",
        "question": "Tell me the name of the staff in charge of the attraction called \"US museum\".",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Tourist_Attractions ] Predicate [ Name = 'US museum' ] Output [ Tourist_Attraction_ID , Name ] ; #2 = Scan Table [ Staff ] Output [ Tourist_Attraction_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Tourist_Attraction_ID = #2.Tourist_Attraction_ID ] Output [ #2.Name ]"
    },
    {
        "id": "a90b0165f0401bd9a34eedac5b18f44f26283d27557d01fedd2f6f759cff4db3",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Street_Markets ] Output [ Market_ID , Market_Details ] ; #2 = Scan Table [ Tourist_Attractions ] Predicate [ How_to_Get_There = 'bus' OR How_to_Get_There = 'walk' ] Output [ How_to_Get_There , Tourist_Attraction_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Market_ID = #2.Tourist_Attraction_ID ] Output [ #1.Market_Details ]"
    },
    {
        "id": "e0899ff66e2ba37161091324a88ec565080a2e8a53ead079d64f81710b45000d",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Street_Markets ] Output [ Market_ID , Market_Details ] ; #2 = Scan Table [ Tourist_Attractions ] Predicate [ How_to_Get_There = 'bus' OR How_to_Get_There = 'walk' ] Output [ How_to_Get_There , Tourist_Attraction_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Market_ID = #2.Tourist_Attraction_ID ] Output [ #1.Market_Details ]"
    },
    {
        "id": "dca465ccb450c33c1985a4770614f5c55bdf7fa232f9f71716bcabdfcf5c8e88",
        "question": "What are the visit date and details of the visitor whose detail is 'Vincent'?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visitors ] Predicate [ Tourist_Details = 'Vincent' ] Output [ Tourist_ID , Tourist_Details ] ; #2 = Scan Table [ Visits ] Output [ Tourist_ID , Visit_Details , Visit_Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Tourist_ID = #2.Tourist_ID ] Output [ #2.Visit_Date , #2.Visit_Details ]"
    },
    {
        "id": "4de839e59a112e9d23da61feec59e07e61638260921c0a80e7ff2703997878ae",
        "question": "Find the visit date and details of the tourist whose detail is 'Vincent'",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visitors ] Predicate [ Tourist_Details = 'Vincent' ] Output [ Tourist_ID , Tourist_Details ] ; #2 = Scan Table [ Visits ] Output [ Tourist_ID , Visit_Details , Visit_Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Tourist_ID = #2.Tourist_ID ] Output [ #2.Visit_Date , #2.Visit_Details ]"
    },
    {
        "id": "a318e221cc3a7103f63c00d9ae0e209a4e05c8451474d1769a8770a55c9b24dd",
        "question": "Which tourist attractions does the visitor with detail 'Vincent' visit?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visitors ] Predicate [ Tourist_Details = 'Vincent' ] Output [ Tourist_ID , Tourist_Details ] ; #2 = Scan Table [ Visits ] Output [ Tourist_ID , Tourist_Attraction_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Tourist_ID = #2.Tourist_ID ] Output [ #2.Tourist_Attraction_ID ] ; #4 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Tourist_Attraction_ID = #4.Tourist_Attraction_ID ] Output [ #4.Name ]"
    },
    {
        "id": "0b40f112f76a3127f0a78c4319d9d65da87d2a85e01c96ef25cb2dfe0ac95ff3",
        "question": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visitors ] Predicate [ Tourist_Details = 'Vincent' ] Output [ Tourist_ID , Tourist_Details ] ; #2 = Scan Table [ Visits ] Output [ Tourist_ID , Tourist_Attraction_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Tourist_ID = #2.Tourist_ID ] Output [ #2.Tourist_Attraction_ID ] ; #4 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Tourist_Attraction_ID = #4.Tourist_Attraction_ID ] Output [ #4.Name ]"
    },
    {
        "id": "f304089dbb6ac6d2ccf7bbe09f150732efc286dfa0bb55c1b9485cb9fb43597b",
        "question": "Show the average price of hotels for each star rating code.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Hotels ] Output [ star_rating_code , price_range ] ; #2 = Aggregate [ #1 ] GroupBy [ star_rating_code ] Output [ star_rating_code , AVG(price_range) AS Avg_price_range ]"
    },
    {
        "id": "a41ac730ddac15670639b5188a23a0af4efb58fa054167206c6ae4d8dc17f4f0",
        "question": "What is the average price range of hotels for each each star rating code?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Hotels ] Output [ star_rating_code , price_range ] ; #2 = Aggregate [ #1 ] GroupBy [ star_rating_code ] Output [ star_rating_code , AVG(price_range) AS Avg_price_range ]"
    },
    {
        "id": "41344a298f0876270cf50414aacd67268660aad091c89360361dd8c97044d09f",
        "question": "Show the average price of hotels for different pet policy.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Hotels ] Output [ pets_allowed_yn , price_range ] ; #2 = Aggregate [ #1 ] GroupBy [ pets_allowed_yn ] Output [ pets_allowed_yn , AVG(price_range) AS Avg_price_range ]"
    },
    {
        "id": "1a86b47f8f0b259933cf4b29a9593574b1ddd8a0d6a012c5d331cd2a0694da8d",
        "question": "What are the average prices of hotels grouped by their pet policy.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Hotels ] Output [ pets_allowed_yn , price_range ] ; #2 = Aggregate [ #1 ] GroupBy [ pets_allowed_yn ] Output [ pets_allowed_yn , AVG(price_range) AS Avg_price_range ]"
    },
    {
        "id": "faf9fb32f28b2a8dc4cb44531c92aa5c99b80995ad5b79bc67367103f96d5ac7",
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Hotels ] Output [ star_rating_code , hotel_id , price_range ] ; #2 = Sort [ #1 ] OrderBy [ price_range ASC ] Output [ star_rating_code , hotel_id , price_range ]"
    },
    {
        "id": "278037479f60e99b7561c41a082d6bb9a01bed3098342c328c414de0c71755fa",
        "question": "Find the id and star rating of each hotel and sort them in increasing order of price.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Hotels ] Output [ star_rating_code , hotel_id , price_range ] ; #2 = Sort [ #1 ] OrderBy [ price_range ASC ] Output [ star_rating_code , hotel_id , price_range ]"
    },
    {
        "id": "a6e74b1773e8281c6239567063a95341554364169bfc1487e29baaa6adf63de0",
        "question": "Show the details of the top 3 most expensive hotels.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Hotels ] Output [ other_hotel_details , price_range ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ price_range DESC ] Output [ other_hotel_details , price_range ]"
    },
    {
        "id": "f2549ed62869cb46e78e23bbe1c3e7317cbd468bd097b0ac7567b71509360c77",
        "question": "What are the details of the three most expensive hotels?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Hotels ] Output [ other_hotel_details , price_range ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ price_range DESC ] Output [ other_hotel_details , price_range ]"
    },
    {
        "id": "1df4665cb781c174f2683aa7498fec4d72c9d2597431b3bdcedcadc7c60b9385",
        "question": "Show the details and star ratings of the 3 least expensive hotels.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Hotels ] Output [ star_rating_code , other_hotel_details , price_range ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ price_range ASC ] Output [ star_rating_code , other_hotel_details , price_range ]"
    },
    {
        "id": "987aa61379a9006fc6f1399101ee9a3614d1049c0d3a1cbfd271a6914f84430e",
        "question": "What are the details and star ratings of the three hotels with the lowest price ranges?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Hotels ] Output [ star_rating_code , other_hotel_details , price_range ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ price_range ASC ] Output [ star_rating_code , other_hotel_details , price_range ]"
    },
    {
        "id": "588d260a04db6f802e8cf258f89d090cd173f9aebf941520c89d5f08f06e1da6",
        "question": "Show the transportation method most people choose to get to tourist attractions.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Tourist_Attractions ] Output [ How_to_Get_There ] ; #2 = Aggregate [ #1 ] GroupBy [ How_to_Get_There ] Output [ countstar AS Count_Star , How_to_Get_There ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , How_to_Get_There ]"
    },
    {
        "id": "4418c9d159b89f3cb76741ea997d2f549e0e911b5eb48ed50ca2b54cec2192ee",
        "question": "Which transportation method is used the most often to get to tourist attractions?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Tourist_Attractions ] Output [ How_to_Get_There ] ; #2 = Aggregate [ #1 ] GroupBy [ How_to_Get_There ] Output [ countstar AS Count_Star , How_to_Get_There ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , How_to_Get_There ]"
    },
    {
        "id": "f078565b1020b08a850e61bd88817c2a1650e2bb5cf208169a304e976cf31255",
        "question": "Show the description and code of the attraction type most tourist attractions belong to.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Tourist_Attractions ] Output [ Attraction_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Attraction_Type_Code ] Output [ countstar AS Count_Star , Attraction_Type_Code ] ; #3 = Scan Table [ Ref_Attraction_Types ] Output [ Attraction_Type_Description , Attraction_Type_Code ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Attraction_Type_Code = #3.Attraction_Type_Code ] Output [ #3.Attraction_Type_Description , #2.Attraction_Type_Code , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Attraction_Type_Code , Attraction_Type_Description ]"
    },
    {
        "id": "54de68859d21b52de895e56513f6ef7eae9409d79acbb860e6502b6053d7c549",
        "question": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Tourist_Attractions ] Output [ Attraction_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Attraction_Type_Code ] Output [ countstar AS Count_Star , Attraction_Type_Code ] ; #3 = Scan Table [ Ref_Attraction_Types ] Output [ Attraction_Type_Description , Attraction_Type_Code ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Attraction_Type_Code = #3.Attraction_Type_Code ] Output [ #3.Attraction_Type_Description , #2.Attraction_Type_Code , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Attraction_Type_Code , Attraction_Type_Description ]"
    },
    {
        "id": "75d0c41ac7e4d63d63537f97eb1639212a46451bc4d7eb1d43062a6c4e5668bd",
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Tourist_Attractions ] Output [ How_to_Get_There ] ; #2 = Aggregate [ #1 ] GroupBy [ How_to_Get_There ] Output [ countstar AS Count_Star , How_to_Get_There ]"
    },
    {
        "id": "493621d6f2ea583734c5411672a6fdd8c9216dd1aa8da23e5f00b231e935c0d3",
        "question": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Tourist_Attractions ] Output [ How_to_Get_There ] ; #2 = Aggregate [ #1 ] GroupBy [ How_to_Get_There ] Output [ countstar AS Count_Star , How_to_Get_There ]"
    },
    {
        "id": "4ab9e5fffab674a73c281879e9ac512a5fd1f0504f0f4eff033ed413b2c22104",
        "question": "Show different tourist attractions' names, ids, and the corresponding number of visits.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visits ] Output [ Tourist_Attraction_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Tourist_Attraction_ID ] Output [ countstar AS Count_Star , Tourist_Attraction_ID ] ; #3 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Tourist_Attraction_ID = #3.Tourist_Attraction_ID ] Output [ #3.Name , #2.Tourist_Attraction_ID , #2.Count_Star ]"
    },
    {
        "id": "6bb7a57c16c8c76eb1ecd550ba3a78e90cd6b4445a3c3d0949c9f8a1cc912b7c",
        "question": "What are the name, id and the corresponding number of visits for each  tourist attraction?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visits ] Output [ Tourist_Attraction_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Tourist_Attraction_ID ] Output [ countstar AS Count_Star , Tourist_Attraction_ID ] ; #3 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Tourist_Attraction_ID = #3.Tourist_Attraction_ID ] Output [ #3.Name , #2.Tourist_Attraction_ID , #2.Count_Star ]"
    },
    {
        "id": "be3a59ff35561d7abc04700f6382f257e13e01e3b185ce109de6ee34d35c5204",
        "question": "Show the names and ids of tourist attractions that are visited at least two times.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visits ] Output [ Tourist_Attraction_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Tourist_Attraction_ID ] Output [ countstar AS Count_Star , Tourist_Attraction_ID ] ; #3 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Tourist_Attraction_ID = #3.Tourist_Attraction_ID ] Output [ #3.Name , #2.Tourist_Attraction_ID , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Tourist_Attraction_ID , Name ]"
    },
    {
        "id": "1b7f3862310355c7fac6e2a076bb70b208732220325e639e580c69b55cf936bc",
        "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visits ] Output [ Tourist_Attraction_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Tourist_Attraction_ID ] Output [ countstar AS Count_Star , Tourist_Attraction_ID ] ; #3 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Tourist_Attraction_ID = #3.Tourist_Attraction_ID ] Output [ #3.Name , #2.Tourist_Attraction_ID , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Tourist_Attraction_ID , Name ]"
    },
    {
        "id": "6c02cb5e99170c6f51227a4d5b3feba5caefef32f880507a9b5047565b5e16a2",
        "question": "Show the names and ids of tourist attractions that are visited at most once.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visits ] Output [ Tourist_Attraction_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Tourist_Attraction_ID ] Output [ countstar AS Count_Star , Tourist_Attraction_ID ] ; #3 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Tourist_Attraction_ID = #3.Tourist_Attraction_ID ] Output [ #3.Name , #3.Tourist_Attraction_ID , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star <= 1 ] Output [ Tourist_Attraction_ID , Name ]"
    },
    {
        "id": "6f0bf84863fc2b94268ad5d9042e1af424d2a3913a26dc4189d42ca0fc8d252d",
        "question": "What are the names and ids of the tourist attractions that are visited at most once?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visits ] Output [ Tourist_Attraction_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Tourist_Attraction_ID ] Output [ countstar AS Count_Star , Tourist_Attraction_ID ] ; #3 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Tourist_Attraction_ID = #3.Tourist_Attraction_ID ] Output [ #3.Name , #3.Tourist_Attraction_ID , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star <= 1 ] Output [ Tourist_Attraction_ID , Name ]"
    },
    {
        "id": "768e0f106c693ed7679bf780065cfa25580a400203c6b2df3a4494bbcbe04eee",
        "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Features ] Predicate [ Feature_Details = 'park' ] Output [ Feature_Details , Feature_ID ] ; #2 = Scan Table [ Tourist_Attraction_Features ] Output [ Tourist_Attraction_ID , Feature_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Feature_ID = #2.Feature_ID ] Output [ #2.Tourist_Attraction_ID ] ; #4 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Tourist_Attraction_ID = #4.Tourist_Attraction_ID ] Output [ #4.Name ] ; #6 = Scan Table [ Features ] Predicate [ Feature_Details = 'shopping' ] Output [ Feature_Details , Feature_ID ] ; #7 = Scan Table [ Tourist_Attraction_Features ] Output [ Tourist_Attraction_ID , Feature_ID ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.Feature_ID = #7.Feature_ID ] Output [ #7.Tourist_Attraction_ID ] ; #9 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Name ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.Tourist_Attraction_ID = #9.Tourist_Attraction_ID ] Output [ #9.Name ] ; #11 = Union [ #5 , #10 ] Output [ #5.Name ]"
    },
    {
        "id": "c3f84488111add09388447d09215026dfc1a178d78ef1e59b7f74ae93c73962e",
        "question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Features ] Predicate [ Feature_Details = 'park' ] Output [ Feature_Details , Feature_ID ] ; #2 = Scan Table [ Tourist_Attraction_Features ] Output [ Tourist_Attraction_ID , Feature_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Feature_ID = #2.Feature_ID ] Output [ #2.Tourist_Attraction_ID ] ; #4 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Tourist_Attraction_ID = #4.Tourist_Attraction_ID ] Output [ #4.Name ] ; #6 = Scan Table [ Features ] Predicate [ Feature_Details = 'shopping' ] Output [ Feature_Details , Feature_ID ] ; #7 = Scan Table [ Tourist_Attraction_Features ] Output [ Tourist_Attraction_ID , Feature_ID ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.Feature_ID = #7.Feature_ID ] Output [ #7.Tourist_Attraction_ID ] ; #9 = Scan Table [ Tourist_Attractions ] Output [ Tourist_Attraction_ID , Name ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.Tourist_Attraction_ID = #9.Tourist_Attraction_ID ] Output [ #9.Name ] ; #11 = Union [ #5 , #10 ] Output [ #5.Name ]"
    },
    {
        "id": "3d11eea3c88a47c1726e07512a13902e561a6f6eb8f7e1b3585b7bab99d79548",
        "question": "How many tourists did not make any visit?",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visitors ] Output [ Tourist_ID ] ; #2 = Scan Table [ Visits ] Output [ Tourist_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Tourist_ID = #2.Tourist_ID ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5993c1a3a8528c3e323d27b71d9efbc44d400a5216af91db46690f2217f9d6d7",
        "question": "Count the number of tourists who did not visit any place.",
        "parsing_tree": "cre_Theme_park | #1 = Scan Table [ Visitors ] Output [ Tourist_ID ] ; #2 = Scan Table [ Visits ] Output [ Tourist_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Tourist_ID = #2.Tourist_ID ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a6054cb706120dcab78855bb514d397ab31e519ab71e3c760f86821cb1711bbe",
        "question": "How many video games exist?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cebf006020035103b29b87f0fabc8cc2216fa268573f99f541d4673bf5244527",
        "question": "How many video games do you have?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e6825b0fbbf627fee72a740db2b6cc37a5c6dbd81dd78397678e2a3b27b9a128",
        "question": "How many video game types exist?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Distinct [ true ] Output [ GType ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT GType) AS Count_Dist_GType ]"
    },
    {
        "id": "bbd9c5ac4488b4ff28f42847c98a39f0c75c5179a65cb1925496d49e0add1177",
        "question": "What is the count of different game types?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Distinct [ true ] Output [ GType ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT GType) AS Count_Dist_GType ]"
    },
    {
        "id": "075f5efeaf48970dd37ac009416ee8394a2be2eab89c35ee6b169ab685658712",
        "question": "Show all video game types.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Distinct [ true ] Output [ GType ]"
    },
    {
        "id": "ab1be38560675015c52af19b72e321c36674ac90b9c6abd8cb9a6514f0c3dcfb",
        "question": "What are the different types of video games?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Distinct [ true ] Output [ GType ]"
    },
    {
        "id": "2e2b5fd83ab9a7001c1f8efdf7213b8f73b29ea8566cb72b2829ad9e9a9ce540",
        "question": "Show all video games and their types in the order of their names.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Output [ GName , GType ] ; #2 = Sort [ #1 ] OrderBy [ GName ASC ] Output [ GName , GType ]"
    },
    {
        "id": "a725697bd59f2abbdf2b8db2223593ac4b24bff322947b2788b7e254fb5ecdda",
        "question": "What are the names of all the video games and their types in alphabetical order?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Output [ GName , GType ] ; #2 = Sort [ #1 ] OrderBy [ GName ASC ] Output [ GName , GType ]"
    },
    {
        "id": "454ae412524a87d4a3d9fc76c60c19b9c9a2521785fa462fcb0bcd6861c48371",
        "question": "Show all video games with type Collectible card game.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Predicate [ GType = 'Collectible card game' ] Output [ GName , GType ]"
    },
    {
        "id": "c3ad3fb16e82a59962c44ea19eba021cf179fc1ea5d07daf875a5ac1a0ba584b",
        "question": "What are the names of all video games that are collectible cards?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Predicate [ GType = 'Collectible card game' ] Output [ GName , GType ]"
    },
    {
        "id": "c7ba27af8f824ab98f3e4c84b168d2601bf0f25934d832d604fd6cf8713d2ec9",
        "question": "What is the type of video game Call of Destiny.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Predicate [ GName = 'Call of Destiny' ] Output [ GName , GType ]"
    },
    {
        "id": "9a8c920db26bdc9e97fa300f3f8e4d0f1eadd54b2d87a19360e3f2abfec5cb79",
        "question": "What type of game is Call of Destiny?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Predicate [ GName = 'Call of Destiny' ] Output [ GName , GType ]"
    },
    {
        "id": "6d54a617cdc8cd7c47c569bdc71823b943d3fa1f0dbed3f4d671b0eae99e97d4",
        "question": "How many video games have type Massively multiplayer online game?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Predicate [ GType = 'Massively multiplayer online game' ] Output [ GType ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2e48fc883e80edf9daa2f34997697dfa626b213a96e6fa0a72a592112c92f48e",
        "question": "Count the number of video games with Massively multiplayer online game type .",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Predicate [ GType = 'Massively multiplayer online game' ] Output [ GType ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9687e206768a2ae029b6072d1a4577412fec10cf16ea5f054e99db86809a4fb8",
        "question": "Show all video game types and the number of video games in each type.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Output [ GType ] ; #2 = Aggregate [ #1 ] GroupBy [ GType ] Output [ countstar AS Count_Star , GType ]"
    },
    {
        "id": "5f1bfea778fa40a5b598882db94208e06e8f1ef720e5bc79990e3d4b663f7858",
        "question": "What are the types of video games and how many are in each type?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Output [ GType ] ; #2 = Aggregate [ #1 ] GroupBy [ GType ] Output [ countstar AS Count_Star , GType ]"
    },
    {
        "id": "f2ac363e6e05357fbfc13c41f40a32db076a9dc669840412460b0e04b659ce73",
        "question": "Which game type has most number of games?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Output [ GType ] ; #2 = Aggregate [ #1 ] GroupBy [ GType ] Output [ countstar AS Count_Star , GType ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , GType ]"
    },
    {
        "id": "56c1c512af237a414e99c65c0600fe37254267582b560a17bd3e46f9f7c15a39",
        "question": "What type has the most games?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Output [ GType ] ; #2 = Aggregate [ #1 ] GroupBy [ GType ] Output [ countstar AS Count_Star , GType ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , GType ]"
    },
    {
        "id": "559e16f51636e3aaff20b00e658484700ec694872281ab3f653c40d24368b84a",
        "question": "Which game type has least number of games?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Output [ GType ] ; #2 = Aggregate [ #1 ] GroupBy [ GType ] Output [ countstar AS Count_Star , GType ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , GType ]"
    },
    {
        "id": "c391c1145efebee2e4c4e6f7e3345be65a39ac652c412190ac3f967d33b00f3b",
        "question": "What is the type with the fewest games?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Output [ GType ] ; #2 = Aggregate [ #1 ] GroupBy [ GType ] Output [ countstar AS Count_Star , GType ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , GType ]"
    },
    {
        "id": "cb211871db3ae38f6558a04d075d891107490039f4b8e77ee04f5994ec9dbedb",
        "question": "Show ids for all students who live in CHI.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ city_code = 'CHI' ] Output [ StuID , city_code ]"
    },
    {
        "id": "053f159e1e3e8d56de728cd8d4913706f8d2844946373aac74497a926e8a80a6",
        "question": "What are the ids of all students who live in CHI?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ city_code = 'CHI' ] Output [ StuID , city_code ]"
    },
    {
        "id": "5ae5cb1518128e95612de12ed08e9171fb122659293bd30cb835c53a16ca2a68",
        "question": "Show ids for all students who have advisor 1121.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ Advisor = 1121 ] Output [ Advisor , StuID ]"
    },
    {
        "id": "25343c07ad00ba4b2a430af67cd4c7729cf142a06fdee64b0172bd24661f4916",
        "question": "What are the ids of all students who have advisor number 1121?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ Advisor = 1121 ] Output [ Advisor , StuID ]"
    },
    {
        "id": "72fd73abc7c53b63c66935bf58d49f84f474ae309856e615d9675527622cbdfa",
        "question": "Show first name for all students with major 600.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ Major = 600 ] Output [ Fname , Major ]"
    },
    {
        "id": "1b9388ec2a73a778d6160aa6209431fc877195d05b0e76f005f66bcc7073f474",
        "question": "What are the first names for all students who are from the major numbered 600?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ Major = 600 ] Output [ Fname , Major ]"
    },
    {
        "id": "7e16c80e283974d6b1b957108c6d32bfb3966f319593f0183b85772ef1118261",
        "question": "Show the average, minimum, and maximum age for different majors.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Output [ Major , Age ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ MAX(Age) AS Max_Age , AVG(Age) AS Avg_Age , Major , MIN(Age) AS Min_Age ]"
    },
    {
        "id": "1d1ee4ceebc9a5c41a954088ff5a909876064008d87ba6aaba7e35b01bed9cae",
        "question": "What are the average, minimum, and max ages for each of the different majors?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Output [ Major , Age ] ; #2 = Aggregate [ #1 ] GroupBy [ Major ] Output [ MAX(Age) AS Max_Age , AVG(Age) AS Avg_Age , Major , MIN(Age) AS Min_Age ]"
    },
    {
        "id": "07d7ea8feef19b45b37ed14d70f68e40276b21110b02b116960de0657784ab6e",
        "question": "Show all advisors who have at least two students.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Advisor ]"
    },
    {
        "id": "116c955bbeef21258da6f569fcd3a84ab561f9b2a52fb95d2f0815058e5cec47",
        "question": "What are the advisors",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Advisor ]"
    },
    {
        "id": "e22b377e7f90a2396738c06a094683aec5067f4b0e1090ec424a035f9aa3dbe5",
        "question": "How many sports do we have?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Distinct [ true ] Output [ SportName ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT SportName) AS Count_Dist_SportName ]"
    },
    {
        "id": "333c60dd9f221fb903457a6f595c77f69c61edb10a38b6222809dbf5e402f7bb",
        "question": "How many different types of sports do we offer?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Distinct [ true ] Output [ SportName ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT SportName) AS Count_Dist_SportName ]"
    },
    {
        "id": "23b7150cca1b858bfddcf9d0c423379b007998363cf198dd331089c47e9b022c",
        "question": "How many students play sports?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Distinct [ true ] Output [ StuID ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT StuID) AS Count_Dist_StuID ]"
    },
    {
        "id": "45344fa1d356a4254b4622d94e21a80b9d54d3abefcdabb3e75fadd2dd193fbd",
        "question": "How many different students are involved in sports?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Distinct [ true ] Output [ StuID ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT StuID) AS Count_Dist_StuID ]"
    },
    {
        "id": "390d5c5c1a241db01f7490c17bb88193c422efdea396d3d038493aaf41c79542",
        "question": "List ids for all student who are on scholarship.",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Predicate [ OnScholarship = 'Y' ] Output [ OnScholarship , StuID ]"
    },
    {
        "id": "a989519b8db7c173494cbaa5d46212d2808e7c3586543e8e4b7ab8a7e66c8a83",
        "question": "What are the ids for all sporty students who are on scholarship?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Predicate [ OnScholarship = 'Y' ] Output [ OnScholarship , StuID ]"
    },
    {
        "id": "702d8a2378ad503d3b766ca1e358564f14314b25a84d5a5020fdc6d05f0c95e7",
        "question": "Show last names for all student who are on scholarship.",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Predicate [ OnScholarship = 'Y' ] Output [ OnScholarship , StuID ] ; #2 = Scan Table [ Student ] Output [ LName , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.LName ]"
    },
    {
        "id": "9e288f675232a7138eaa8e34b63fd7d2669c5a0416f8ab82d222fddb78521c50",
        "question": "What are the last names for all scholarship students?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Predicate [ OnScholarship = 'Y' ] Output [ OnScholarship , StuID ] ; #2 = Scan Table [ Student ] Output [ LName , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.LName ]"
    },
    {
        "id": "9a794132a0346e42af427d8d6161f95508b4cf4028e1e3b429082389fb6bb5de",
        "question": "How many games are played for all students?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Output [ GamesPlayed ] ; #2 = Aggregate [ #1 ] Output [ SUM(GamesPlayed) AS Sum_GamesPlayed ]"
    },
    {
        "id": "97f252c9b1e9f25e46f47153f99fc89409b1caca5ce54e88468aefa0b164dbdd",
        "question": "What is the total number of games played?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Output [ GamesPlayed ] ; #2 = Aggregate [ #1 ] Output [ SUM(GamesPlayed) AS Sum_GamesPlayed ]"
    },
    {
        "id": "1a6c025f0b57c76beb6c784a157b682d36f5a4204f946784ffe7083e7d0ee0cf",
        "question": "How many games are played for all football games by students on scholarship?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Football' AND OnScholarship = 'Y' ] Output [ OnScholarship , GamesPlayed , SportName ] ; #2 = Aggregate [ #1 ] Output [ SUM(GamesPlayed) AS Sum_GamesPlayed ]"
    },
    {
        "id": "bf6106b8a278cf3bf1e48f89f501bc5ca402da0afc3048878a84abbadb12a771",
        "question": "What is the total number of all football games played by scholarship students?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Football' AND OnScholarship = 'Y' ] Output [ OnScholarship , GamesPlayed , SportName ] ; #2 = Aggregate [ #1 ] Output [ SUM(GamesPlayed) AS Sum_GamesPlayed ]"
    },
    {
        "id": "e4b9d4ac4430eb7f8860ca86280a17ce7afb06a281255cb8c164279c18aa295c",
        "question": "Show all sport name and the number of students.",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Output [ SportName ] ; #2 = Aggregate [ #1 ] GroupBy [ SportName ] Output [ countstar AS Count_Star , SportName ]"
    },
    {
        "id": "8430bfb5daf4787f355d7cb2aeb1bb738c4de55a5bfa7b165fa65922cc1b487b",
        "question": "How many students play each sport?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Output [ SportName ] ; #2 = Aggregate [ #1 ] GroupBy [ SportName ] Output [ countstar AS Count_Star , SportName ]"
    },
    {
        "id": "fe27d743f7f6f2cf59417e1837134afacb3b1998b16f2b123d2cc19b46056529",
        "question": "Show all student IDs with the number of sports and total number of games played",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Output [ GamesPlayed , StuID ] ; #2 = Aggregate [ #1 ] GroupBy [ StuID ] Output [ countstar AS Count_Star , StuID , SUM(GamesPlayed) AS Sum_GamesPlayed ]"
    },
    {
        "id": "6ec9bca204e66486b0ebc315efd39c5dc79fc26da377e3698f49634c563df2e2",
        "question": "What are the ids of all students along with how many sports and games did they play?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Output [ GamesPlayed , StuID ] ; #2 = Aggregate [ #1 ] GroupBy [ StuID ] Output [ countstar AS Count_Star , StuID , SUM(GamesPlayed) AS Sum_GamesPlayed ]"
    },
    {
        "id": "a9b0ccc4812567a177e9b66f2010dc25fe53dc2c41a4815dc3de0369e4d6fa9a",
        "question": "Show all student IDs with more than total 10 hours per week on all sports played.",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Output [ StuID , HoursPerWeek ] ; #2 = Aggregate [ #1 ] GroupBy [ StuID ] Output [ SUM(HoursPerWeek) AS Sum_HoursPerWeek , StuID ] ; #3 = Filter [ #2 ] Predicate [ Sum_HoursPerWeek > 10 ] Output [ StuID ]"
    },
    {
        "id": "ed8870ba1332332d083299e1624cd76777069cfe9067c4ee0a99213f28576622",
        "question": "What are the student IDs for everybody who worked for more than 10 hours per week on all sports?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Output [ StuID , HoursPerWeek ] ; #2 = Aggregate [ #1 ] GroupBy [ StuID ] Output [ SUM(HoursPerWeek) AS Sum_HoursPerWeek , StuID ] ; #3 = Filter [ #2 ] Predicate [ Sum_HoursPerWeek > 10 ] Output [ StuID ]"
    },
    {
        "id": "04f43d4e6c6a30450d7d34ea386ef91714ec79c5718e19f973fdf1834d88e1fa",
        "question": "What is the first name and last name of the student who have most number of sports?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Output [ StuID ] ; #2 = Aggregate [ #1 ] GroupBy [ StuID ] Output [ countstar AS Count_Star , StuID ] ; #3 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.StuID = #3.StuID ] Output [ #2.Count_Star , #3.LName , #3.Fname ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ LName , Count_Star , Fname ]"
    },
    {
        "id": "cddbc7af0d788720e1cbb729132fc9103836121be8610d3b649657a8d4c3dddb",
        "question": "What is the first and last name of the student who played the most sports?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Output [ StuID ] ; #2 = Aggregate [ #1 ] GroupBy [ StuID ] Output [ countstar AS Count_Star , StuID ] ; #3 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.StuID = #3.StuID ] Output [ #2.Count_Star , #3.LName , #3.Fname ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ LName , Count_Star , Fname ]"
    },
    {
        "id": "b77e92228ef5fd6e622508520f5ccfa0a24fd0021fe9b1c10c91206bb8f0368f",
        "question": "Which sport has most number of students on scholarship?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Predicate [ OnScholarship = 'Y' ] Output [ OnScholarship , SportName ] ; #2 = Aggregate [ #1 ] GroupBy [ SportName ] Output [ countstar AS Count_Star , SportName ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , SportName ]"
    },
    {
        "id": "18e04640c83d38500ac1efeb942cf038b97ee03e209689349f452a712d8847f8",
        "question": "What is the sport with the most scholarship students?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Predicate [ OnScholarship = 'Y' ] Output [ OnScholarship , SportName ] ; #2 = Aggregate [ #1 ] GroupBy [ SportName ] Output [ countstar AS Count_Star , SportName ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , SportName ]"
    },
    {
        "id": "416ff02c224b720aedb8b2ac959281db013f1902102f20e0bfe69ee4deaac074",
        "question": "Show student ids who don't have any sports.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Output [ StuID ] ; #2 = Scan Table [ SportsInfo ] Output [ StuID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]"
    },
    {
        "id": "b67e4d0b79922a786f37b19f0b2672f06c7dd375d89c97ef471b52268846fdb3",
        "question": "What are the ids of all students who don't play sports?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Output [ StuID ] ; #2 = Scan Table [ SportsInfo ] Output [ StuID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]"
    },
    {
        "id": "fd71c2ecbd1fe353a89a7c712c886e29ae87fab2735ae05f93eac64c40ddd9ac",
        "question": "Show student ids who are on scholarship and have major 600.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ Major = 600 ] Output [ StuID , Major ] ; #2 = Scan Table [ SportsInfo ] Predicate [ OnScholarship = 'Y' ] Output [ OnScholarship , StuID ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]"
    },
    {
        "id": "cceeb794fbafce7a82cdad795534a13ac24c75c6d17a9349df7233379890ea70",
        "question": "What are the student ids for those on scholarship in major number 600?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ Major = 600 ] Output [ StuID , Major ] ; #2 = Scan Table [ SportsInfo ] Predicate [ OnScholarship = 'Y' ] Output [ OnScholarship , StuID ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]"
    },
    {
        "id": "170fe601d9df554bfeffbde1f223a1f0f764723fb1dedc69ca66982535c9d4da",
        "question": "Show student ids who are female and play football.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , StuID ] ; #2 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Football' ] Output [ StuID , SportName ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]"
    },
    {
        "id": "4e347bdc724bca9b345f4cfbc9fc207c8d81af4256bfa37b878eb7133c2a8a41",
        "question": "What are the ids of all female students who play football?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , StuID ] ; #2 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Football' ] Output [ StuID , SportName ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]"
    },
    {
        "id": "4200cbab7cb96cb63696aff8c8d6513ed421c0b33d18189eccf540b9c8a7af2f",
        "question": "Show all male student ids who don't play football.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ Sex = 'M' ] Output [ Sex , StuID ] ; #2 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Football' ] Output [ StuID , SportName ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]"
    },
    {
        "id": "a5bd15988c6201f7634919989ee7083a8366bb665aab09e97f64ce9b47a47f66",
        "question": "What are the ids of all male students who do not play football?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ Sex = 'M' ] Output [ Sex , StuID ] ; #2 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Football' ] Output [ StuID , SportName ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]"
    },
    {
        "id": "d7837f38dd43730931e9a539fd12d44204265ec7ce500bb360b5fc6ec7cbb83c",
        "question": "Show total hours per week and number of games played for student David Shieber.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'David' AND LName = 'Shieber' ] Output [ Fname , LName , StuID ] ; #2 = Scan Table [ SportsInfo ] Output [ GamesPlayed , StuID , HoursPerWeek ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.HoursPerWeek , #2.GamesPlayed ] ; #4 = Aggregate [ #3 ] Output [ SUM(HoursPerWeek) AS Sum_HoursPerWeek , SUM(GamesPlayed) AS Sum_GamesPlayed ]"
    },
    {
        "id": "b0bb4592cec7476d6539ba6a1d466610e137b87a1c24a8257212051cc23aeae3",
        "question": "What is the total number of hours per work and number of games played by David Shieber?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'David' AND LName = 'Shieber' ] Output [ Fname , LName , StuID ] ; #2 = Scan Table [ SportsInfo ] Output [ GamesPlayed , StuID , HoursPerWeek ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.HoursPerWeek , #2.GamesPlayed ] ; #4 = Aggregate [ #3 ] Output [ SUM(HoursPerWeek) AS Sum_HoursPerWeek , SUM(GamesPlayed) AS Sum_GamesPlayed ]"
    },
    {
        "id": "c909e36dd2238b813685e24b08d9d8852f3acd67fac6c7b6f62d05dab5d94c44",
        "question": "Show total hours per week and number of games played for students under 20.",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Output [ GamesPlayed , StuID , HoursPerWeek ] ; #2 = Scan Table [ Student ] Predicate [ Age < 20 ] Output [ StuID , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.GamesPlayed , #1.HoursPerWeek ] ; #4 = Aggregate [ #3 ] Output [ SUM(HoursPerWeek) AS Sum_HoursPerWeek , SUM(GamesPlayed) AS Sum_GamesPlayed ]"
    },
    {
        "id": "575fe9dfb550542d36159bb763944a33a2c12b1ab7e213dd9d8cee90f596b420",
        "question": "What is the total number of hours per week and number of games played by students under 20?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Output [ GamesPlayed , StuID , HoursPerWeek ] ; #2 = Scan Table [ Student ] Predicate [ Age < 20 ] Output [ StuID , Age ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.GamesPlayed , #1.HoursPerWeek ] ; #4 = Aggregate [ #3 ] Output [ SUM(HoursPerWeek) AS Sum_HoursPerWeek , SUM(GamesPlayed) AS Sum_GamesPlayed ]"
    },
    {
        "id": "e8f3433492b7687e322dc869908a9d53dcdd4bf0aec17e2d0c4893b5b0562054",
        "question": "How many students play video games?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Plays_Games ] Distinct [ true ] Output [ StuID ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT StuID) AS Count_Dist_StuID ]"
    },
    {
        "id": "2b3655dd99eaf113cbfab3fb052a7258bfc8f1bb4ae31dc3facd244ad794559c",
        "question": "How many different students play games?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Plays_Games ] Distinct [ true ] Output [ StuID ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT StuID) AS Count_Dist_StuID ]"
    },
    {
        "id": "39b3c0f7347d5cc17ace448d73e97143422dc92ec4f1722a9e90873a7ba78212",
        "question": "Show ids of students who don't play video game.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Output [ StuID ] ; #2 = Scan Table [ Plays_Games ] Output [ StuID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]"
    },
    {
        "id": "ca3d01e3c1cfaf134fc7caaa3615e47419b8733a192147546b98f6b7edb68222",
        "question": "What are the ids of all students who are not video game players?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Output [ StuID ] ; #2 = Scan Table [ Plays_Games ] Output [ StuID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]"
    },
    {
        "id": "b5531fd9e6c6a46c37fc268420ec4774c53e8fe14dc1fa5ed2c50c189d97babb",
        "question": "Show ids of students who play video game and play sports.",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Distinct [ true ] Output [ StuID ] ; #2 = Scan Table [ Plays_Games ] Output [ StuID ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]"
    },
    {
        "id": "afbcaaa43f880688398b3e82332fa3e02fe6a8552d0561b5b19e9f7de789cf84",
        "question": "What are the ids of all students who played video games and sports?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Distinct [ true ] Output [ StuID ] ; #2 = Scan Table [ Plays_Games ] Output [ StuID ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]"
    },
    {
        "id": "39ccaa1cc09c003377a30722916c75c660dba7b498e51d316fc4314dea027870",
        "question": "Show all game ids and the number of hours played.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Plays_Games ] Output [ GameID , Hours_Played ] ; #2 = Aggregate [ #1 ] GroupBy [ GameID ] Output [ SUM(Hours_Played) AS Sum_Hours_Played , GameID ]"
    },
    {
        "id": "f402b85e330937ebe72c9fd8792191930c5739864d356f5d0a523ea93b4263ba",
        "question": "What are ids and total number of hours played for each game?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Plays_Games ] Output [ GameID , Hours_Played ] ; #2 = Aggregate [ #1 ] GroupBy [ GameID ] Output [ SUM(Hours_Played) AS Sum_Hours_Played , GameID ]"
    },
    {
        "id": "6b2ba4dab303af9ff3685959a945d11479eb330c8adc9ea53e0adc260ba077ed",
        "question": "Show all student ids and the number of hours played.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Plays_Games ] Output [ Hours_Played , StuID ] ; #2 = Aggregate [ #1 ] GroupBy [ StuID ] Output [ SUM(Hours_Played) AS Sum_Hours_Played , StuID ]"
    },
    {
        "id": "2ebbb379a79b0d6940f5abbd8ee509a327602dcb4f07514fcebbea0ddcc4805c",
        "question": "What are the ids of all students and number of hours played?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Plays_Games ] Output [ Hours_Played , StuID ] ; #2 = Aggregate [ #1 ] GroupBy [ StuID ] Output [ SUM(Hours_Played) AS Sum_Hours_Played , StuID ]"
    },
    {
        "id": "f2020914d441919b3075069773c82e89e13e725d9319c5568db6d7eacf2fcf40",
        "question": "Show the game name that has most number of hours played.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Plays_Games ] Output [ GameID , Hours_Played ] ; #2 = Aggregate [ #1 ] GroupBy [ GameID ] Output [ SUM(Hours_Played) AS Sum_Hours_Played , GameID ] ; #3 = Scan Table [ Video_Games ] Output [ GameID , GName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.GameID = #3.GameID ] Output [ #3.GName , #2.Sum_Hours_Played ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_Hours_Played DESC ] Output [ Sum_Hours_Played , GName ]"
    },
    {
        "id": "c2cac40cacfae6f546d34a7e1b8861017c57e90f1241be2049e250a8468a01b5",
        "question": "What is the name of the game that has been played the most?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Plays_Games ] Output [ GameID , Hours_Played ] ; #2 = Aggregate [ #1 ] GroupBy [ GameID ] Output [ SUM(Hours_Played) AS Sum_Hours_Played , GameID ] ; #3 = Scan Table [ Video_Games ] Output [ GameID , GName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.GameID = #3.GameID ] Output [ #3.GName , #2.Sum_Hours_Played ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_Hours_Played DESC ] Output [ Sum_Hours_Played , GName ]"
    },
    {
        "id": "9733fd9db9151a509a76a6cc74f25ef7c7673aef41d50bc0fa3ca1578c465072",
        "question": "Show all game names played by at least 1000 hours.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Plays_Games ] Output [ GameID , Hours_Played ] ; #2 = Aggregate [ #1 ] GroupBy [ GameID ] Output [ SUM(Hours_Played) AS Sum_Hours_Played , GameID ] ; #3 = Scan Table [ Video_Games ] Output [ GameID , GName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.GameID = #3.GameID ] Output [ #3.GName , #2.Sum_Hours_Played ] ; #5 = Filter [ #4 ] Predicate [ Sum_Hours_Played >= 1000 ] Output [ GName ]"
    },
    {
        "id": "931f5012443a763abbae07dc721715a76f634e163688aa889be4cb76d988a3bc",
        "question": "What are the names of all the games that have been played for at least 1000 hours?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Plays_Games ] Output [ GameID , Hours_Played ] ; #2 = Aggregate [ #1 ] GroupBy [ GameID ] Output [ SUM(Hours_Played) AS Sum_Hours_Played , GameID ] ; #3 = Scan Table [ Video_Games ] Output [ GameID , GName ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.GameID = #3.GameID ] Output [ #3.GName , #2.Sum_Hours_Played ] ; #5 = Filter [ #4 ] Predicate [ Sum_Hours_Played >= 1000 ] Output [ GName ]"
    },
    {
        "id": "95ec378875c2d77f0b939f76f92e1ffd3ffdfd271e8c328e154fa5531a042df3",
        "question": "Show all game names played by Linda Smith",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ LName = 'Smith' AND Fname = 'Linda' ] Output [ LName , Fname , StuID ] ; #2 = Scan Table [ Plays_Games ] Output [ GameID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.GameID ] ; #4 = Scan Table [ Video_Games ] Output [ GameID , GName ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.GameID = #4.GameID ] Output [ #4.GName ]"
    },
    {
        "id": "2966eab2734e461a0fbb0ac95305614084200e70def801d790829cee19df81d2",
        "question": "What are the names of all games played by Linda Smith?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Student ] Predicate [ LName = 'Smith' AND Fname = 'Linda' ] Output [ LName , Fname , StuID ] ; #2 = Scan Table [ Plays_Games ] Output [ GameID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.GameID ] ; #4 = Scan Table [ Video_Games ] Output [ GameID , GName ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.GameID = #4.GameID ] Output [ #4.GName ]"
    },
    {
        "id": "b2affe953702ee9655fdb300f223863d83d12a7ef7c7c764dada5e7dd37ec30d",
        "question": "Find the last and first name of students who are playing Football or Lacrosse.",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Football' OR SportName = 'Lacrosse' ] Output [ StuID , SportName ] ; #2 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.LName , #2.Fname ]"
    },
    {
        "id": "33259fde2ee4b0fbd877d7df3fa5215df42dcc730d7a4a18ead38acb4f60bcfa",
        "question": "What is the first and last name of all students who play Football or Lacrosse?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Football' OR SportName = 'Lacrosse' ] Output [ StuID , SportName ] ; #2 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.LName , #2.Fname ]"
    },
    {
        "id": "73584bcc70ec4184d45036548267ec0018d727c53f2c4b35ce01b8d9f475e888",
        "question": "Find the first name and age of the students who are playing both Football and Lacrosse.",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Football' ] Distinct [ true ] Output [ StuID , SportName ] ; #2 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Lacrosse' ] Output [ StuID , SportName ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.StuID ] ; #4 = Scan Table [ Student ] Output [ Fname , StuID , Age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.Age ]"
    },
    {
        "id": "b7f39cfeafb6bf99612fbb90d2230ba2d2ef8c15a2e4c7819fb87de33ce2083a",
        "question": "What are the first names and ages of all students who are playing both Football and Lacrosse?",
        "parsing_tree": "game_1 | #1 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Football' ] Distinct [ true ] Output [ StuID , SportName ] ; #2 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Lacrosse' ] Output [ StuID , SportName ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.StuID ] ; #4 = Scan Table [ Student ] Output [ Fname , StuID , Age ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.Age ]"
    },
    {
        "id": "41cd4ce3f9f3a5e799efdeed1c8a33baf759d6e3ddef4bdead098f0c2afa5608",
        "question": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Predicate [ GName = 'Call of Destiny' ] Output [ GameID , GName ] ; #2 = Scan Table [ Plays_Games ] Output [ GameID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.GameID = #2.GameID ] Distinct [ true ] Output [ #2.StuID ] ; #4 = Scan Table [ Video_Games ] Predicate [ GName = 'Works of Widenius' ] Output [ GameID , GName ] ; #5 = Scan Table [ Plays_Games ] Output [ GameID , StuID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.GameID = #5.GameID ] Output [ #5.StuID ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.StuID = #6.StuID ] Output [ #3.StuID ] ; #8 = Scan Table [ Student ] Output [ LName , Sex , StuID ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.StuID = #8.StuID ] Output [ #8.Sex , #8.LName ]"
    },
    {
        "id": "d804059f83fc6cb45598ceaaa59db6aa2f3c44965683db27cbe74820abeeeda4",
        "question": "what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?",
        "parsing_tree": "game_1 | #1 = Scan Table [ Video_Games ] Predicate [ GName = 'Call of Destiny' ] Output [ GameID , GName ] ; #2 = Scan Table [ Plays_Games ] Output [ GameID , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.GameID = #2.GameID ] Distinct [ true ] Output [ #2.StuID ] ; #4 = Scan Table [ Video_Games ] Predicate [ GName = 'Works of Widenius' ] Output [ GameID , GName ] ; #5 = Scan Table [ Plays_Games ] Output [ GameID , StuID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.GameID = #5.GameID ] Output [ #5.StuID ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.StuID = #6.StuID ] Output [ #3.StuID ] ; #8 = Scan Table [ Student ] Output [ LName , Sex , StuID ] ; #9 = Join [ #7 , #8 ] Predicate [ #7.StuID = #8.StuID ] Output [ #8.Sex , #8.LName ]"
    },
    {
        "id": "9212667e6994c2f4d47a63c5462b0014da75ccc31dee9b64a24e94b710ca697f",
        "question": "Find the name of all customers.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Output [ customer_name ]"
    },
    {
        "id": "770c45c51451a809b4a8830b8d9eda4fda04fcbff866f0959599b58d9ed4b9e7",
        "question": "What are the names of all the customers?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Output [ customer_name ]"
    },
    {
        "id": "1b544fbf054d301b01b9e5e1aa798f0842ab84f49890af740ca3b7fce10687aa",
        "question": "How many customers are there?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2be6c054c8adc9f57b525af1dc35c4b389ea8b894ff26278e387c78b04f4548c",
        "question": "Return the total number of distinct customers.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "dd91fae2067a317a95981714590a49822215346a80a9f9980e968d68f7b3bdda",
        "question": "What is the average amount of items ordered in each order?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Order_Items ] Output [ order_quantity ] ; #2 = Aggregate [ #1 ] Output [ AVG(order_quantity) AS Avg_order_quantity ]"
    },
    {
        "id": "61602c8595a5c7f1075dc89b8d7ac92b0905b7999787bb949a72761ad646f203",
        "question": "Find the average order quantity per order.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Order_Items ] Output [ order_quantity ] ; #2 = Aggregate [ #1 ] Output [ AVG(order_quantity) AS Avg_order_quantity ]"
    },
    {
        "id": "9a4961f19ead3a62b885e508e46f9c6c524034a2abc9765e715f2a5a7b8f9bd0",
        "question": "What are the names of customers who use payment method \"Cash\"?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ payment_method = 'Cash' ] Output [ payment_method , customer_name ]"
    },
    {
        "id": "fea86beafeac0a7ed9124a2e32e645be0289947d4a97f14a6c71fac3613fbdf0",
        "question": "Which customers use \"Cash\" for payment method? Return the customer names.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ payment_method = 'Cash' ] Output [ payment_method , customer_name ]"
    },
    {
        "id": "357a1efec007cbe403e4fa96a99f4a201f6877f106e3964785793f1c6ab44e51",
        "question": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ customer_id >= 10 AND customer_id <= 20 ] Output [ customer_id , date_became_customer ]"
    },
    {
        "id": "cb8d46397c34e425201f8cc91ff05b2bc5d1f083729884871037dbe620d56007",
        "question": "What are the dates when customers with ids between 10 and 20 became customers?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ customer_id >= 10 AND customer_id <= 20 ] Output [ customer_id , date_became_customer ]"
    },
    {
        "id": "afe4a90c94208e8b11e5dce671d58eb83db6ff561e9fbe48605806c0b272b295",
        "question": "Which payment method is used by most customers?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Output [ payment_method ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method ] Output [ countstar AS Count_Star , payment_method ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , payment_method ]"
    },
    {
        "id": "3f1b71c398dd2112b230fc7158a8e6fa25046b45d7bd5c9a6d3ae434f2b40ec4",
        "question": "Find the payment method that is used most frequently.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Output [ payment_method ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method ] Output [ countstar AS Count_Star , payment_method ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , payment_method ]"
    },
    {
        "id": "a1b2696411abc0ce8efce75972e56c727de2d512e4c789c4be2d382dbac45a1f",
        "question": "What are the names of customers using the most popular payment method?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Output [ payment_method ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method ] Output [ countstar AS Count_Star , payment_method ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , payment_method ] ; #4 = Scan Table [ Customers ] Output [ payment_method , customer_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.payment_method = #4.payment_method ] Output [ #4.customer_name ]"
    },
    {
        "id": "6d164ab354bb59abf06c3c4b4b1bac01c58e6277a90fd3e436ff24bf815aa1d2",
        "question": "Find the name of the customers who use the most frequently used payment method.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Output [ payment_method ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method ] Output [ countstar AS Count_Star , payment_method ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , payment_method ] ; #4 = Scan Table [ Customers ] Output [ payment_method , customer_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.payment_method = #4.payment_method ] Output [ #4.customer_name ]"
    },
    {
        "id": "ed6cfb2bb20fd8f632c6ccc047c0a349f3e857e3d137733d18377da4b0781a0c",
        "question": "What are all the payment methods?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ payment_method ]"
    },
    {
        "id": "15bab62f4ce4e890b5b0c5e603e69b2d58f974e4f7b584bb95d700051d8ae38f",
        "question": "Return all the distinct payment methods used by customers.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ payment_method ]"
    },
    {
        "id": "1da08a77bba731cd3f52fdd80e74b88a11eb327bebc4c909311de5a8f45f4979",
        "question": "What are the details of all products?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Products ] Distinct [ true ] Output [ product_details ]"
    },
    {
        "id": "90d7732661175597a39c955351a2e04e15d765e5b5b1ae9ef63d9976dfcd5fcf",
        "question": "Return the the details of all products.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Products ] Distinct [ true ] Output [ product_details ]"
    },
    {
        "id": "d5b4bd19e013407912ebe590962d7b3264ecf3f3883165226a58c871259ea0c3",
        "question": "Find the name of all customers whose name contains \"Alex\".",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ customer_name like '%Alex%' ] Output [ customer_name ]"
    },
    {
        "id": "ab063c52bbaff444bf49fadd8fd3e273b9d7ad61c747b444420b51dff3a67485",
        "question": "Which customer's name contains \"Alex\"? Find the full name.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ customer_name like '%Alex%' ] Output [ customer_name ]"
    },
    {
        "id": "931e85edfc53088784e9fd8d2bda725e80bf9196dd16830f4ad1e5a364b48f5c",
        "question": "Find the detail of products whose detail contains the word \"Latte\" or the word \"Americano\"",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Products ] Predicate [ product_details like '%Latte%' OR product_details like '%Americano%' ] Output [ product_details ]"
    },
    {
        "id": "b1c744e9d8c9a093205798012e3126fd79c149f531af6a7a869310a60a65bf73",
        "question": "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Products ] Predicate [ product_details like '%Latte%' OR product_details like '%Americano%' ] Output [ product_details ]"
    },
    {
        "id": "7404dd03f42c9c3bef0cdb8194121a7c0a4cfc1640b1ad8cdbe0d1dcbe6ac53d",
        "question": "What is the address content of the customer named \"Maudie Kertzmann\"?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ customer_name = 'Maudie Kertzmann' ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Customer_Addresses ] Output [ address_id , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.address_id ] ; #4 = Scan Table [ Addresses ] Output [ address_id , address_content ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.address_id = #4.address_id ] Output [ #4.address_content ]"
    },
    {
        "id": "93d1f9c3ffdc850344b5871e36b4af31d4b4ef398c0bd85a0a2f49f9bf7136c2",
        "question": "Return the address content for the customer whose name is \"Maudie Kertzmann\".",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ customer_name = 'Maudie Kertzmann' ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Customer_Addresses ] Output [ address_id , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.address_id ] ; #4 = Scan Table [ Addresses ] Output [ address_id , address_content ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.address_id = #4.address_id ] Output [ #4.address_content ]"
    },
    {
        "id": "69433eee7ce63b895a4534b0fdac7c4db80e083e117ffe8a1f6cac4456ed3e8c",
        "question": "How many customers are living in city \"Lake Geovannyton\"?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Addresses ] Predicate [ city = 'Lake Geovannyton' ] Output [ address_id , city ] ; #2 = Scan Table [ Customer_Addresses ] Output [ address_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #1.address_id , #1.city ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "301033f5dc5ef2516003bbba8391c8998559c457b496d8424c0ba43b8860e5e8",
        "question": "Find the number of customers who live in the city called Lake Geovannyton.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Addresses ] Predicate [ city = 'Lake Geovannyton' ] Output [ address_id , city ] ; #2 = Scan Table [ Customer_Addresses ] Output [ address_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #1.address_id , #1.city ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cda7abdc47b9f499d3f84a9a97346fc2dddced0c0dce44f8d6f4919c688d932e",
        "question": "Find the name of customers who are living in Colorado?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Addresses ] Predicate [ state_province_county = 'Colorado' ] Output [ address_id , state_province_county ] ; #2 = Scan Table [ Customer_Addresses ] Output [ address_id , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.customer_id ] ; #4 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.customer_id = #4.customer_id ] Output [ #4.customer_name ]"
    },
    {
        "id": "36f1bfcde6ffc83664bedd53065014929115b3ce67b042e84129a5df8dfb5e15",
        "question": "What are the names of customers who live in Colorado state?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Addresses ] Predicate [ state_province_county = 'Colorado' ] Output [ address_id , state_province_county ] ; #2 = Scan Table [ Customer_Addresses ] Output [ address_id , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.customer_id ] ; #4 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.customer_id = #4.customer_id ] Output [ #4.customer_name ]"
    },
    {
        "id": "e1d695918a72f6948cda207e50b96ce21dde2b603863e10b36a9019b0c5a99ee",
        "question": "Which city has the most customers living in?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Addresses ] Output [ address_id ] ; #2 = Scan Table [ Addresses ] Output [ address_id , city ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.city ] ; #4 = Aggregate [ #3 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , city ]"
    },
    {
        "id": "d0d2d629a9c896d2e9afbf2ce7593d154381da1f731af9c12e71aa48e94797fd",
        "question": "Find the city where the most customers live.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Addresses ] Output [ address_id ] ; #2 = Scan Table [ Addresses ] Output [ address_id , city ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.address_id ] Output [ #2.city ] ; #4 = Aggregate [ #3 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , city ]"
    },
    {
        "id": "a4b3665b56fe6fba86c108e68984e8881136630027b4c9b7ea5f3e4c66ce6e22",
        "question": "Retrieve the list of all cities.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Addresses ] Distinct [ true ] Output [ city ]"
    },
    {
        "id": "b776b2d562a8219e95345654b5c8e8a79ce3c99a5de6f42076a974221b7caef7",
        "question": "List all the distinct cities",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Addresses ] Distinct [ true ] Output [ city ]"
    },
    {
        "id": "0aaf665d9d27543c3b4a2e7ed1d49fa8a24c95273dedad767cbd6256d4cf69f8",
        "question": "Find the city with post code 255.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Addresses ] Predicate [ zip_postcode = 255 ] Output [ city , zip_postcode ]"
    },
    {
        "id": "3da52e7333eefbb7b2854a94cfb9f83cb35059d373a5c591ea1a7417f12751ca",
        "question": "Which city is post code 255 located in?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Addresses ] Predicate [ zip_postcode = 255 ] Output [ city , zip_postcode ]"
    },
    {
        "id": "fe34c3c4af10fa1ec3f0c4d5d352de3818f7055ab57272483f24480d058792d6",
        "question": "Find the state and country of all cities with post code starting with 4.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Addresses ] Predicate [ zip_postcode like '4%' ] Output [ country , state_province_county , zip_postcode ]"
    },
    {
        "id": "91d17b09a333b9cd88c50b9f29e55506a11355560f1c52fd4bd0078f67ca28df",
        "question": "What are the state and country of all the cities that have post codes starting with 4.\\",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Addresses ] Predicate [ zip_postcode like '4%' ] Output [ country , state_province_county , zip_postcode ]"
    },
    {
        "id": "013f552e96af4fdfca60a5713b4ae29f34b8d68f3a64663dc4f33ccc9ebc96b1",
        "question": "List the countries having more than 4 addresses listed.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Addresses ] Output [ country ] ; #2 = Aggregate [ #1 ] GroupBy [ country ] Output [ countstar AS Count_Star , country ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 4 ] Output [ country ]"
    },
    {
        "id": "4fa0888e51e3a8cfcfe29ec61382e5d0bbb33f8632cb58e0de0d6450d06b09bd",
        "question": "For which countries are there more than four distinct addresses listed?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Addresses ] Output [ country ] ; #2 = Aggregate [ #1 ] GroupBy [ country ] Output [ countstar AS Count_Star , country ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 4 ] Output [ country ]"
    },
    {
        "id": "dc118397df790743acd11b1e4429848df38e8aa8b6e79e045b37950aad96b718",
        "question": "List all the contact channel codes that were used less than 5 times.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Contact_Channels ] Output [ channel_code ] ; #2 = Aggregate [ #1 ] GroupBy [ channel_code ] Output [ countstar AS Count_Star , channel_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star < 5 ] Output [ channel_code ]"
    },
    {
        "id": "33ef110b36826aea420897b2d5ba44b8b7f3a9395bfcbda842cf01170ce41ddf",
        "question": "Which contact channel codes were used less than 5 times?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Contact_Channels ] Output [ channel_code ] ; #2 = Aggregate [ #1 ] GroupBy [ channel_code ] Output [ countstar AS Count_Star , channel_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star < 5 ] Output [ channel_code ]"
    },
    {
        "id": "ebfdc9ff39c7cd062d215bb01a2bfe536b8e656062ef5a9cb488f6300c51d467",
        "question": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ customer_name = 'Tillman Ernser' ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Customer_Contact_Channels ] Output [ customer_id , channel_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Distinct [ true ] Output [ #2.channel_code ]"
    },
    {
        "id": "28fe2145bf656e946d5829b9849f18451fae722515ed08140a5cc9d8a9e77b22",
        "question": "Find the contact channel code that was used by the customer named \"Tillman Ernser\".",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ customer_name = 'Tillman Ernser' ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Customer_Contact_Channels ] Output [ customer_id , channel_code ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Distinct [ true ] Output [ #2.channel_code ]"
    },
    {
        "id": "9adaac263c267de4fafd4fa6f308afef24ab4e7c609c9120d99f9ad36e3f1647",
        "question": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ customer_name = 'Tillman Ernser' ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Customer_Contact_Channels ] Output [ customer_id , active_to_date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.active_to_date ] ; #4 = Aggregate [ #3 ] Output [ MAX(active_to_date) AS Max_active_to_date ]"
    },
    {
        "id": "f7e74c4b52608858e0a61b1aa493ac028ece5f694aed95347c194e5e28100ad3",
        "question": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ customer_name = 'Tillman Ernser' ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Customer_Contact_Channels ] Output [ customer_id , active_to_date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.active_to_date ] ; #4 = Aggregate [ #3 ] Output [ MAX(active_to_date) AS Max_active_to_date ]"
    },
    {
        "id": "762d910df1bb53f4b3f6432b45da3911fa75a28e2b89c6862d75d501aae37db4",
        "question": "Find the name and active date of the customer that use email as the contact channel.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Contact_Channels ] Predicate [ channel_code = 'Email' ] Output [ active_from_date , customer_id , channel_code ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.active_from_date , #2.customer_name ]"
    },
    {
        "id": "76186e8491149ad22204a46e18ead78814a051133c54310f8acb1059b8fa3335",
        "question": "What are the name and active date of the customers whose contact channel code is email?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Contact_Channels ] Predicate [ channel_code = 'Email' ] Output [ active_from_date , customer_id , channel_code ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.active_from_date , #2.customer_name ]"
    },
    {
        "id": "45b1eb2488515ef10afee011e1344947104b8b05b1649347861e0561dd00d242",
        "question": "What is the name of the customer that has purchased the most items?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Order_Items ] Output [ order_quantity , order_id ] ; #2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.order_id , #3.customer_name ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.order_id = #4.order_id ] Output [ #1.order_quantity , #4.customer_name ] ; #6 = Aggregate [ #5 ] GroupBy [ customer_name ] Output [ SUM(order_quantity) AS Sum_order_quantity , customer_name ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_order_quantity DESC ] Output [ Sum_order_quantity , customer_name ]"
    },
    {
        "id": "740562fbb5beb7487d7efcd474f53f0c3e15aad650093583d4813480248a443b",
        "question": "Give me the name of the customer who ordered the most items in total.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Order_Items ] Output [ order_quantity , order_id ] ; #2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.order_id , #3.customer_name ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.order_id = #4.order_id ] Output [ #1.order_quantity , #4.customer_name ] ; #6 = Aggregate [ #5 ] GroupBy [ customer_name ] Output [ SUM(order_quantity) AS Sum_order_quantity , customer_name ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_order_quantity DESC ] Output [ Sum_order_quantity , customer_name ]"
    },
    {
        "id": "5e621c4e94ea6aaca06c2e481803bc1c79a9fdada14c52181c5ab7ae884b6c9e",
        "question": "What is the payment method of the customer that has purchased the least quantity of items?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Order_Items ] Output [ order_quantity , order_id ] ; #2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , payment_method , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.payment_method , #2.order_id , #3.customer_name ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.order_id = #4.order_id ] Output [ #1.order_quantity , #4.customer_name , #4.payment_method ] ; #6 = Aggregate [ #5 ] GroupBy [ customer_name , payment_method ] Output [ SUM(order_quantity) AS Sum_order_quantity , payment_method ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_order_quantity ASC ] Output [ Sum_order_quantity , payment_method ]"
    },
    {
        "id": "be453251d6f2a4e576608b090b3fec9de7da10d3766ba56e9b9cdd505aa53f28",
        "question": "Tell me the payment method used by the customer who ordered the least amount of goods in total.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Order_Items ] Output [ order_quantity , order_id ] ; #2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , payment_method , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.payment_method , #2.order_id , #3.customer_name ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.order_id = #4.order_id ] Output [ #1.order_quantity , #4.customer_name , #4.payment_method ] ; #6 = Aggregate [ #5 ] GroupBy [ customer_name , payment_method ] Output [ SUM(order_quantity) AS Sum_order_quantity , payment_method ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_order_quantity ASC ] Output [ Sum_order_quantity , payment_method ]"
    },
    {
        "id": "c84203c8b4bdeb84da6c6b2cd9f0dae3707e04ef63a2ff9f1a3c6d285ac74c2c",
        "question": "How many types of products have Rodrick Heaney bought in total?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ customer_name = 'Rodrick Heaney' ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.order_id ] ; #4 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.order_id = #4.order_id ] Distinct [ true ] Output [ #4.product_id ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9e17e3cedd4a3c62b3c6e613366a4b22a55de43b1ab475b8cd68471c6967c8af",
        "question": "Find the number of distinct products Rodrick Heaney has bought so far.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ customer_name = 'Rodrick Heaney' ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.order_id ] ; #4 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.order_id = #4.order_id ] Distinct [ true ] Output [ #4.product_id ] ; #6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6fd0059690f9386f97b962da2fdecb20103825108efd7e4402c2fad498d39cbf",
        "question": "What is the total quantity of products purchased by \"Rodrick Heaney\"?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ customer_name = 'Rodrick Heaney' ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.order_id ] ; #4 = Scan Table [ Order_Items ] Output [ order_quantity , order_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.order_id = #4.order_id ] Output [ #4.order_quantity ] ; #6 = Aggregate [ #5 ] Output [ SUM(order_quantity) AS Sum_order_quantity ]"
    },
    {
        "id": "898e9d837b68d0ce62e660ebb07898a1d670525b36c1cdb75e57465a61148e68",
        "question": "Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\".",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ customer_name = 'Rodrick Heaney' ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.order_id ] ; #4 = Scan Table [ Order_Items ] Output [ order_quantity , order_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.order_id = #4.order_id ] Output [ #4.order_quantity ] ; #6 = Aggregate [ #5 ] Output [ SUM(order_quantity) AS Sum_order_quantity ]"
    },
    {
        "id": "787674b1db8db09a8dd53e7fce4759f83b88f1b65b20618a5673963fb61b5633",
        "question": "How many customers have at least one order with status \"Cancelled\"?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status = 'Cancelled' ] Distinct [ true ] Output [ customer_id , order_status ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a778ee394e213baa47a0c74acaad20ccde2cbfcac9a020c6ab696b4dfaa1f03c",
        "question": "Return the number of customers who have at least one order with \"Cancelled\" status.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status = 'Cancelled' ] Distinct [ true ] Output [ customer_id , order_status ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9f81d3cb9b5e2ecc9018a1949201f7c8813f790b22aabb7abca48fb568a3f49f",
        "question": "How many orders have detail \"Second time\"?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Orders ] Predicate [ order_details = 'Second time' ] Output [ order_details ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "3b36cdc2af31b11fc50d04a6565eadea93435c8cf9ae4134f6d1d4c74f6f52bf",
        "question": "Tell me the number of orders with \"Second time\" as order detail.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Orders ] Predicate [ order_details = 'Second time' ] Output [ order_details ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1cd3e7ec9d1d3a29ade598c3fd10fe8e4db728c39cab9f888be17745c84bb022",
        "question": "Find the customer name and date of the orders that have the status \"Delivered\".",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status = 'Delivered' ] Output [ customer_id , order_status , order_date ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.order_date , #2.customer_name ]"
    },
    {
        "id": "5b607f6119a44d9743ae093da89df0cc684c5853d73171f3bc48d4da3555ea23",
        "question": "What are the customer name and date of the orders whose status is \"Delivered\".",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status = 'Delivered' ] Output [ customer_id , order_status , order_date ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.order_date , #2.customer_name ]"
    },
    {
        "id": "1597b2f89ebbe8848261cb9bd151bc7d5fb10b8a5630f0bb8bfc3e8e7f05a49f",
        "question": "What is the total number of products that are in orders with status \"Cancelled\"?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status = 'Cancelled' ] Output [ order_status , order_id ] ; #2 = Scan Table [ Order_Items ] Output [ order_quantity , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #2.order_quantity ] ; #4 = Aggregate [ #3 ] Output [ SUM(order_quantity) AS Sum_order_quantity ]"
    },
    {
        "id": "9cfd980c6964d6daf6a152d65b947d1d2c906c5e08411056cae5ff381d3f4014",
        "question": "Find the total quantity of products associated with the orders in the \"Cancelled\" status.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Orders ] Predicate [ order_status = 'Cancelled' ] Output [ order_status , order_id ] ; #2 = Scan Table [ Order_Items ] Output [ order_quantity , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #2.order_quantity ] ; #4 = Aggregate [ #3 ] Output [ SUM(order_quantity) AS Sum_order_quantity ]"
    },
    {
        "id": "e9c443b6cdf2aa26ae73284002aaad45707d9d7b5e161e85db5f4580ba23d9ea",
        "question": "Find the total amount of products ordered before 2018-03-17 07:13:53.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Orders ] Predicate [ order_date < '2018-03-17 07:13:53.000' ] Output [ order_date , order_id ] ; #2 = Scan Table [ Order_Items ] Output [ order_quantity , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #2.order_quantity ] ; #4 = Aggregate [ #3 ] Output [ SUM(order_quantity) AS Sum_order_quantity ]"
    },
    {
        "id": "d63f059676d8f9c1faa78a626d3e6e865dfd7456893fbe064bef0edd1714be9b",
        "question": "What is the total amount of products purchased before 2018-03-17 07:13:53?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Orders ] Predicate [ order_date < '2018-03-17 07:13:53.000' ] Output [ order_date , order_id ] ; #2 = Scan Table [ Order_Items ] Output [ order_quantity , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #2.order_quantity ] ; #4 = Aggregate [ #3 ] Output [ SUM(order_quantity) AS Sum_order_quantity ]"
    },
    {
        "id": "97128b9bcf69ecde95d19c8c3a3f1c2bd0460576e59a1c5eec8b502fe046580c",
        "question": "Who made the latest order?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Orders ] Output [ customer_id , order_date ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.order_date , #2.customer_name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ order_date DESC ] Output [ order_date , customer_name ]"
    },
    {
        "id": "85def9c6c97e71cdd7c1139f9e86b7371ce022533b0afee21727cc358494fdcc",
        "question": "Find the name of the customer who made an order most recently.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customer_Orders ] Output [ customer_id , order_date ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.order_date , #2.customer_name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ order_date DESC ] Output [ order_date , customer_name ]"
    },
    {
        "id": "775019867621421e9d8be4c4a1335ad0cd5997391f3f5ac8e7be7d9c1e531e76",
        "question": "Which product has been ordered most number of times?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Order_Items ] Output [ product_id ] ; #2 = Aggregate [ #1 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_id ] ; #3 = Scan Table [ Products ] Output [ product_id , product_details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.product_id = #3.product_id ] Output [ #3.product_details , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , product_details ]"
    },
    {
        "id": "84a954919de3633a06059b1e8fd95c54f150c530ebc03d55b2b4376ca973d51c",
        "question": "What is the most frequently ordered product? Tell me the detail of the product",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Order_Items ] Output [ product_id ] ; #2 = Aggregate [ #1 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_id ] ; #3 = Scan Table [ Products ] Output [ product_id , product_details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.product_id = #3.product_id ] Output [ #3.product_details , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , product_details ]"
    },
    {
        "id": "74d79156e0eaab0504e228d83a9acb78ca4e3108be31dbcc55a3d0b80487add6",
        "question": "Find the name and ID of the product whose total order quantity is the largest.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Order_Items ] Output [ product_id , order_quantity ] ; #2 = Aggregate [ #1 ] GroupBy [ product_id ] Output [ product_id , SUM(order_quantity) AS Sum_order_quantity ] ; #3 = Scan Table [ Products ] Output [ product_id , product_details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.product_id = #3.product_id ] Output [ #3.product_id , #3.product_details , #2.Sum_order_quantity ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_order_quantity ASC ] Output [ Sum_order_quantity , product_id , product_details ]"
    },
    {
        "id": "a139b51c304c8f92a6a582223d8b2a9ed78a8224541db0d2ea0be5fce9fae0e6",
        "question": "What are the name and ID of the product bought the most.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Order_Items ] Output [ product_id , order_quantity ] ; #2 = Aggregate [ #1 ] GroupBy [ product_id ] Output [ product_id , SUM(order_quantity) AS Sum_order_quantity ] ; #3 = Scan Table [ Products ] Output [ product_id , product_details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.product_id = #3.product_id ] Output [ #3.product_id , #3.product_details , #2.Sum_order_quantity ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_order_quantity ASC ] Output [ Sum_order_quantity , product_id , product_details ]"
    },
    {
        "id": "2032b5424f69f0a9905b65efe541f334abe1d9d6cbd06ff3aaa34170acb854b5",
        "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Addresses ] Predicate [ city = 'East Julianaside' AND state_province_county = 'Texas' ] Output [ state_province_county , address_content , city ] ; #2 = Scan Table [ Addresses ] Predicate [ city = 'Gleasonmouth' AND state_province_county = 'Arizona' ] Output [ state_province_county , address_content , city ] ; #3 = Union [ #1 , #2 ] Output [ #1.address_content ]"
    },
    {
        "id": "6d06082ed05e6bbceadd1662225ee07a015cca8e660a10d585c552bb60c8451d",
        "question": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Addresses ] Predicate [ city = 'East Julianaside' AND state_province_county = 'Texas' ] Output [ state_province_county , address_content , city ] ; #2 = Scan Table [ Addresses ] Predicate [ city = 'Gleasonmouth' AND state_province_county = 'Arizona' ] Output [ state_province_county , address_content , city ] ; #3 = Union [ #1 , #2 ] Output [ #1.address_content ]"
    },
    {
        "id": "e127d53024a4353dd47274aa28d0be4d8cdb5ef32ef382d08999b42ffd8ecf79",
        "question": "Find the name of customers who did not pay with Cash.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ payment_method <> 'Cash' ] Output [ payment_method , customer_name ]"
    },
    {
        "id": "39a1a03758ff1247d52ad35066f8e04de3e05e2a7285ee7ffd1225839acc3167",
        "question": "What is the name of customers who do not use Cash as payment method.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Predicate [ payment_method <> 'Cash' ] Output [ payment_method , customer_name ]"
    },
    {
        "id": "d78fada89346b05f247b344bbbb765d2f1c78767ec50b8cddc64581d728f2d9d",
        "question": "Find the names of customers who never ordered product Latte.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ customer_name ] ; #2 = Scan Table [ Products ] Predicate [ product_details = 'Latte' ] Output [ product_id , product_details ] ; #3 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.product_id = #3.product_id ] Output [ #3.order_id ] ; #5 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.order_id = #5.order_id ] Output [ #5.customer_id ] ; #7 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.customer_id = #7.customer_id ] Output [ #7.customer_name ] ; #9 = Except [ #1 , #8 ] Predicate [ #1.customer_name = #8.customer_name ] Output [ #1.customer_name ]"
    },
    {
        "id": "d9aa57626ce957f35cedd0f02dcabfb204d4134ea348e4bac18b358361f52161",
        "question": "What are names of customers who never ordered product Latte.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ customer_name ] ; #2 = Scan Table [ Products ] Predicate [ product_details = 'Latte' ] Output [ product_id , product_details ] ; #3 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.product_id = #3.product_id ] Output [ #3.order_id ] ; #5 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.order_id = #5.order_id ] Output [ #5.customer_id ] ; #7 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.customer_id = #7.customer_id ] Output [ #7.customer_name ] ; #9 = Except [ #1 , #8 ] Predicate [ #1.customer_name = #8.customer_name ] Output [ #1.customer_name ]"
    },
    {
        "id": "ffcdfa4b751564af42a7d12e8369fd334d280b6289ca70f57dbb8c8422c56c6b",
        "question": "Find the names of customers who never placed an order.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ customer_name ] ; #2 = Scan Table [ Customer_Orders ] Output [ customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.customer_name = #4.customer_name ] Output [ #1.customer_name ]"
    },
    {
        "id": "5324cd6efff73e667557ce6034f830e8aeb984711a034a5b3177e2ab99f662e8",
        "question": "What are the names of customers who never made an order.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ customer_name ] ; #2 = Scan Table [ Customer_Orders ] Output [ customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.customer_name = #4.customer_name ] Output [ #1.customer_name ]"
    },
    {
        "id": "0d0a30c0b8c86d24d9e2e5e831648551be0e9ed7e7d2d745daa7a79378209aff",
        "question": "Find the names of customers who ordered both products Latte and Americano.",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Products ] Predicate [ product_details = 'Latte' ] Output [ product_id , product_details ] ; #2 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.order_id ] ; #4 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.order_id = #4.order_id ] Output [ #4.customer_id ] ; #6 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.customer_id = #6.customer_id ] Distinct [ true ] Output [ #6.customer_name ] ; #8 = Scan Table [ Products ] Predicate [ product_details = 'Americano' ] Output [ product_id , product_details ] ; #9 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.product_id = #9.product_id ] Output [ #9.order_id ] ; #11 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #12 = Join [ #10 , #11 ] Predicate [ #10.order_id = #11.order_id ] Output [ #11.customer_id ] ; #13 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #14 = Join [ #12 , #13 ] Predicate [ #12.customer_id = #13.customer_id ] Output [ #13.customer_name ] ; #15 = Intersect [ #7 , #14 ] Predicate [ #7.customer_name = #14.customer_name ] Output [ #7.customer_name ]"
    },
    {
        "id": "170697ab3aa60d1a84e5f3697749d33752a61f0513525017ccd4319c6374be8a",
        "question": "What are the names of customers who have purchased both products Latte and Americano?",
        "parsing_tree": "customers_and_addresses | #1 = Scan Table [ Products ] Predicate [ product_details = 'Latte' ] Output [ product_id , product_details ] ; #2 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #2.order_id ] ; #4 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.order_id = #4.order_id ] Output [ #4.customer_id ] ; #6 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.customer_id = #6.customer_id ] Distinct [ true ] Output [ #6.customer_name ] ; #8 = Scan Table [ Products ] Predicate [ product_details = 'Americano' ] Output [ product_id , product_details ] ; #9 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.product_id = #9.product_id ] Output [ #9.order_id ] ; #11 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ] ; #12 = Join [ #10 , #11 ] Predicate [ #10.order_id = #11.order_id ] Output [ #11.customer_id ] ; #13 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #14 = Join [ #12 , #13 ] Predicate [ #12.customer_id = #13.customer_id ] Output [ #13.customer_name ] ; #15 = Intersect [ #7 , #14 ] Predicate [ #7.customer_name = #14.customer_name ] Output [ #7.customer_name ]"
    },
    {
        "id": "43a3f9374ad06d4350c0fc5cb3c56c2a91d5c92ce752685749e8c8c3540852a1",
        "question": "How many artists are there?",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "82108d36c9cd36042abaf5958231cb6fdc1ba17640240d5167068ce6a60f86cf",
        "question": "Count the number of artists.",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d727574e8b118d076799098694008b63f143314865ed12dd12aaf12acde87c67",
        "question": "List the age of all music artists.",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Output [ Age ]"
    },
    {
        "id": "ec4b7f6eacae90c11a14dcbdf52587d01daf1e005af2634ec810afd11190b9cd",
        "question": "What are the ages of all music artists?",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Output [ Age ]"
    },
    {
        "id": "837a50fd1169b695fc9b74f355b08488043d30d854217710358a6a29a06941ff",
        "question": "What is the average age of all artists?",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "4ad76524cf8ec4fa241b865436769f694f3d0efcf8abfe201208f3b30260ced0",
        "question": "Return the average age across all artists.",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Output [ Age ] ; #2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ]"
    },
    {
        "id": "b8c806612a0bfe787d9296b343931774d5b47cf720497f675f47a3001099c714",
        "question": "What are the famous titles of the artist \"Triumfall\"?",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Predicate [ Artist = 'Triumfall' ] Output [ Artist , Famous_Title ]"
    },
    {
        "id": "1e9f1d2a32a615fff24f8c52df34af112aed6805f5f9d2a08e79f58913b89d1e",
        "question": "Return the famous titles of the artist called \"Triumfall\".",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Predicate [ Artist = 'Triumfall' ] Output [ Artist , Famous_Title ]"
    },
    {
        "id": "b21ef118f3d6f91aba5981aaff7e9816417874908470c984ada583301e2d8f5a",
        "question": "What are the distinct Famous release dates?",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Distinct [ true ] Output [ Famous_Release_date ]"
    },
    {
        "id": "5356c58fb085fe91b65c787ab37c35de7c0ff8d8d0b64c91cd20be5dbb70a322",
        "question": "Give the distinct famous release dates for all artists.",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Distinct [ true ] Output [ Famous_Release_date ]"
    },
    {
        "id": "19ec5f7d393a1721341dc1de28d11b0fe26828515af4884f29c399bd83667348",
        "question": "Return the dates of ceremony and the results of all music festivals",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Output [ Result , Date_of_ceremony ]"
    },
    {
        "id": "4fbf4dff80625cff1cdc3331bc9d936f065c68519a2cd3251141ba10efff1b7e",
        "question": "What are the dates of ceremony and results for each music festival?",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Output [ Result , Date_of_ceremony ]"
    },
    {
        "id": "fb6dfbdce80d27108494c94e335a2d0ef693c4f4c0df61dc26a7790657ab7ea1",
        "question": "What are the category of music festivals with result \"Awarded\"?",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Predicate [ Result = 'Awarded' ] Output [ Result , Category ]"
    },
    {
        "id": "bb46cd676b8885406ded361d26e30e985c287252c3054d3099679387b2ad48b7",
        "question": "Return the categories of music festivals that have the result \"Awarded\".",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Predicate [ Result = 'Awarded' ] Output [ Result , Category ]"
    },
    {
        "id": "1cc72962747aca998b50cf5c16b1f0c2514fb6870253a75431dc060dce39aaab",
        "question": "What are the maximum and minimum week on top of all volumes?",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Output [ Weeks_on_Top ] ; #2 = Aggregate [ #1 ] Output [ MAX(Weeks_on_Top) AS Max_Weeks_on_Top , MIN(Weeks_on_Top) AS Min_Weeks_on_Top ]"
    },
    {
        "id": "e28f8cbd3ded78ffacd07bbb84774697774143e202782bbe2b3aa42a59a62cff",
        "question": "Give the maximum and minimum weeks on top across all volumes.",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Output [ Weeks_on_Top ] ; #2 = Aggregate [ #1 ] Output [ MAX(Weeks_on_Top) AS Max_Weeks_on_Top , MIN(Weeks_on_Top) AS Min_Weeks_on_Top ]"
    },
    {
        "id": "25f29bd466a7d1758b105a8a29236f887735caf1537dc7c121cd4ef01d68082d",
        "question": "What are the songs in volumes with more than 1 week on top?",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Predicate [ Weeks_on_Top > 1.0 ] Output [ Weeks_on_Top , Song ]"
    },
    {
        "id": "d6ff55c63a4fb1f6fc9af1921da6e208caae4dfb3e4ee6e68f8a23798b6e5a78",
        "question": "Give the songs included in volumes that have more than 1 week on top.",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Predicate [ Weeks_on_Top > 1.0 ] Output [ Weeks_on_Top , Song ]"
    },
    {
        "id": "4c71f624037136df494534d7dc2dd999f9eaa143ad1aeb24ef352e0345a27a35",
        "question": "Please list all songs in volumes in ascending alphabetical order.",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Output [ Song ] ; #2 = Sort [ #1 ] OrderBy [ Song ASC ] Output [ Song ]"
    },
    {
        "id": "24635e2475146263ecc9426fd9d1b76413ca25f2cb0e27f8666452be60a102b9",
        "question": "What are the the songs in volumes, listed in ascending order?",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Output [ Song ] ; #2 = Sort [ #1 ] OrderBy [ Song ASC ] Output [ Song ]"
    },
    {
        "id": "b8fbb46988a3fe64918bc60f4ca814404ede13b004a4392a796d708e56bfb434",
        "question": "How many distinct artists do the volumes associate to?",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Distinct [ true ] Output [ Artist_ID ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Artist_ID) AS Count_Dist_Artist_ID ]"
    },
    {
        "id": "c327e646aa21341853ac56b46644f0ee910c3b0ad17d5330f02f44405f3bcbd9",
        "question": "Count the number of distinct artists who have volumes.",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Distinct [ true ] Output [ Artist_ID ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Artist_ID) AS Count_Dist_Artist_ID ]"
    },
    {
        "id": "86bd235f3ce7a940d999c767d60961d2013db4c51fadf49cff2b7917234d4ae3",
        "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Predicate [ Weeks_on_Top > 2.0 ] Output [ Weeks_on_Top , Volume_ID ] ; #2 = Scan Table [ music_festival ] Output [ Date_of_ceremony , Volume ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Volume_ID = #2.Volume ] Output [ #2.Date_of_ceremony ]"
    },
    {
        "id": "ef115d7172e07b3f491fa6933494866a6b1b12cea91ac3058a584fc04d2bfaa6",
        "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Predicate [ Weeks_on_Top > 2.0 ] Output [ Weeks_on_Top , Volume_ID ] ; #2 = Scan Table [ music_festival ] Output [ Date_of_ceremony , Volume ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Volume_ID = #2.Volume ] Output [ #2.Date_of_ceremony ]"
    },
    {
        "id": "65770b8637a95869fcaa599e4e848cf2bb005469fd75e5cca368b95945c0d1e8",
        "question": "Please show the songs that have result \"nominated\" at music festivals.",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Predicate [ Result = 'Nominated' ] Output [ Result , Volume ] ; #2 = Scan Table [ volume ] Output [ Volume_ID , Song ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Volume = #2.Volume_ID ] Output [ #2.Song ]"
    },
    {
        "id": "9f4096f9781c84929ee879d21abf168fdbf7cc20c4ea9004a71ae926fbb13c14",
        "question": "What are the songs in volumes that have resulted in a nomination at music festivals?",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Predicate [ Result = 'Nominated' ] Output [ Result , Volume ] ; #2 = Scan Table [ volume ] Output [ Volume_ID , Song ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Volume = #2.Volume_ID ] Output [ #2.Song ]"
    },
    {
        "id": "b4aa15ec4826f2fc7029fc4e851acfc1525715cc110d8f8e5e181152fd720575",
        "question": "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Predicate [ Artist = 'Gorgoroth' ] Output [ Artist , Artist_ID ] ; #2 = Scan Table [ volume ] Output [ Issue_Date , Artist_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Issue_Date ]"
    },
    {
        "id": "1c652ebce6f4fbd21c69c98fd558680ef60058ff155d5140d514ea73175d79b4",
        "question": "Return the issue dates of volumes that are by the artist named Gorgoroth.",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Predicate [ Artist = 'Gorgoroth' ] Output [ Artist , Artist_ID ] ; #2 = Scan Table [ volume ] Output [ Issue_Date , Artist_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Issue_Date ]"
    },
    {
        "id": "c4d4464f2b189c76e1caa962f9ebe724b4b195b56d48131af97a1e36354c05e9",
        "question": "What are the songs in volumes associated with the artist aged 32 or older?",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Predicate [ Age >= 32 ] Output [ Artist_ID , Age ] ; #2 = Scan Table [ volume ] Output [ Artist_ID , Song ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Song ]"
    },
    {
        "id": "964e12b51af31d445b81cfab71e8542b23ed99b09d204292696f22a805d693e5",
        "question": "Return names of songs in volumes that are by artists that are at least 32 years old.",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Predicate [ Age >= 32 ] Output [ Artist_ID , Age ] ; #2 = Scan Table [ volume ] Output [ Artist_ID , Song ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Song ]"
    },
    {
        "id": "777311879e658e102467d1e216253bb1e2dab7ae4fbd61dbad39006368437916",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Predicate [ Age <= 25 ] Output [ Artist_ID , Age ] ; #2 = Scan Table [ volume ] Output [ Weeks_on_Top , Artist_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Weeks_on_Top ] ; #4 = Aggregate [ #3 ] Output [ AVG(Weeks_on_Top) AS Avg_Weeks_on_Top ]"
    },
    {
        "id": "ede81b9d1cdcfbbd4cc96b480d3d188b41b7e7f5d5e24287be8149508c26b9eb",
        "question": "Return the average number of weeks on top for volumes by artists that are at most 25 years old.",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Predicate [ Age <= 25 ] Output [ Artist_ID , Age ] ; #2 = Scan Table [ volume ] Output [ Weeks_on_Top , Artist_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Weeks_on_Top ] ; #4 = Aggregate [ #3 ] Output [ AVG(Weeks_on_Top) AS Avg_Weeks_on_Top ]"
    },
    {
        "id": "7f57bc9bd5e5837fd488bcbc6c63dc0797e3aa5988bd6250c5f792d4a401214b",
        "question": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Predicate [ Weeks_on_Top > 2.0 ] Output [ Weeks_on_Top , Artist_ID ] ; #2 = Scan Table [ artist ] Output [ Artist_ID , Famous_Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Famous_Title ]"
    },
    {
        "id": "fee4dc1dcb7e7a4510e51498b385be66cd6d54b695f85a2b57c92b08b69eb02e",
        "question": "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Predicate [ Weeks_on_Top > 2.0 ] Output [ Weeks_on_Top , Artist_ID ] ; #2 = Scan Table [ artist ] Output [ Artist_ID , Famous_Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Famous_Title ]"
    },
    {
        "id": "c8eb21f9ae47f8e8bb331897b5ac6a9ad259ac2ef32874b708e1bc8155ff52bd",
        "question": "Please list the age and famous title of artists in descending order of age.",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Output [ Famous_Title , Age ] ; #2 = Sort [ #1 ] OrderBy [ Age DESC ] Output [ Age , Famous_Title ]"
    },
    {
        "id": "eb74466b022470bc4f04c40d0a6c7cb8ced59f2e5ea38d82fa9e77126f096f01",
        "question": "What are the famous titles and ages of each artist, listed in descending order by age?",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Output [ Famous_Title , Age ] ; #2 = Sort [ #1 ] OrderBy [ Age DESC ] Output [ Age , Famous_Title ]"
    },
    {
        "id": "a81c48282f2deab245b00f1a9cb92f6de3708e5d7e1999a7d29c26fa9c927254",
        "question": "What is the famous release date of the artist with the oldest age?",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Output [ Famous_Release_date , Age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Age DESC ] Output [ Famous_Release_date , Age ]"
    },
    {
        "id": "c2078f871a2f78ec07447182a9e6d713e8340278d00cc0eaf8ef11d9910e63fa",
        "question": "Return the famous release date for the oldest artist.",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Output [ Famous_Release_date , Age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Age DESC ] Output [ Famous_Release_date , Age ]"
    },
    {
        "id": "3dca34536eaa1e55b711d1d941ddd8917193ae7240405eb98a0ecdfc964d8a20",
        "question": "Please show the categories of the music festivals and the count.",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Output [ Category ] ; #2 = Aggregate [ #1 ] GroupBy [ Category ] Output [ countstar AS Count_Star , Category ]"
    },
    {
        "id": "fac6d69f0f11c5760602689ae0964b0ae01f721e1dcb8f7f47b9c470cb615286",
        "question": "Return the number of music festivals of each category.",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Output [ Category ] ; #2 = Aggregate [ #1 ] GroupBy [ Category ] Output [ countstar AS Count_Star , Category ]"
    },
    {
        "id": "6483f00e646eda4eec5e5dd218d2bcca7b94654413e1e35df4d452df3c3872c7",
        "question": "What is the most common result of the music festival?",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Output [ Result ] ; #2 = Aggregate [ #1 ] GroupBy [ Result ] Output [ Result , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Result , Count_Star ]"
    },
    {
        "id": "135912aca107787de9c15d02e397c5109aabbb28ac95a7b2d01183b78371d51b",
        "question": "Return the result that is most frequent at music festivals.",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Output [ Result ] ; #2 = Aggregate [ #1 ] GroupBy [ Result ] Output [ Result , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Result , Count_Star ]"
    },
    {
        "id": "89373d070f9df37368de0e790cb72913cc336bf2b7998d77fc5e55d4271a9554",
        "question": "Please show the categories of the music festivals with count more than 1.",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Output [ Category ] ; #2 = Aggregate [ #1 ] GroupBy [ Category ] Output [ countstar AS Count_Star , Category ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Category ]"
    },
    {
        "id": "138951cb307f3e39fc760c130e20d06bff205f5fa1799d896e39bcce6f50d492",
        "question": "What are the categories of music festivals for which there have been more than 1 music festival?",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Output [ Category ] ; #2 = Aggregate [ #1 ] GroupBy [ Category ] Output [ countstar AS Count_Star , Category ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Category ]"
    },
    {
        "id": "2d93c4e349e5243051a05aa29845b35095efdf0b98ef882b3bef77805416c071",
        "question": "What is the song in the volume with the maximum weeks on top?",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Output [ Weeks_on_Top , Song ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Weeks_on_Top DESC ] Output [ Weeks_on_Top , Song ]"
    },
    {
        "id": "dd724725c65219b820d726c4d1c9f7a5ae17b4f12b746347f033df56718bfffb",
        "question": "Return the song in the volume that has spent the most weeks on top?",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Output [ Weeks_on_Top , Song ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Weeks_on_Top DESC ] Output [ Weeks_on_Top , Song ]"
    },
    {
        "id": "327d63d520d623019d7571f1bd2d660ece953c7d6dc35d5101cef97d72023c92",
        "question": "Find the famous titles of artists that do not have any volume.",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Output [ Artist_ID , Famous_Title ] ; #2 = Scan Table [ volume ] Output [ Artist_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Artist_ID IS NULL OR #1.Artist_ID = #2.Artist_ID ] Output [ #1.Famous_Title ]"
    },
    {
        "id": "848ce85edf2e8b841443008304235bc8b6e9c216a385915eb7edc8bc50ba2350",
        "question": "What are the famous titles of artists who do not have any volumes?",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Output [ Artist_ID , Famous_Title ] ; #2 = Scan Table [ volume ] Output [ Artist_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Artist_ID IS NULL OR #1.Artist_ID = #2.Artist_ID ] Output [ #1.Famous_Title ]"
    },
    {
        "id": "c81bd501cc4229d4a39b1682d78372b44776f67e7f88ac698bdf00c75a847003",
        "question": "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Predicate [ Weeks_on_Top > 2.0 ] Output [ Weeks_on_Top , Artist_ID ] ; #2 = Scan Table [ artist ] Output [ Artist_ID , Famous_Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Distinct [ true ] Output [ #2.Famous_Title ] ; #4 = Scan Table [ volume ] Predicate [ Weeks_on_Top < 2.0 ] Output [ Weeks_on_Top , Artist_ID ] ; #5 = Scan Table [ artist ] Output [ Artist_ID , Famous_Title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Artist_ID = #5.Artist_ID ] Output [ #5.Famous_Title ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Famous_Title = #6.Famous_Title ] Output [ #3.Famous_Title ]"
    },
    {
        "id": "c9e5bf328a05508226c0788532d63330b964a36c877f77709b129a26e9dc5618",
        "question": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Predicate [ Weeks_on_Top > 2.0 ] Output [ Weeks_on_Top , Artist_ID ] ; #2 = Scan Table [ artist ] Output [ Artist_ID , Famous_Title ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Distinct [ true ] Output [ #2.Famous_Title ] ; #4 = Scan Table [ volume ] Predicate [ Weeks_on_Top < 2.0 ] Output [ Weeks_on_Top , Artist_ID ] ; #5 = Scan Table [ artist ] Output [ Artist_ID , Famous_Title ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Artist_ID = #5.Artist_ID ] Output [ #5.Famous_Title ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Famous_Title = #6.Famous_Title ] Output [ #3.Famous_Title ]"
    },
    {
        "id": "4169d27a10c539320aa8a6e4ae4a68a93a7223be7d7f036fabee128c336b15f5",
        "question": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Predicate [ Category = 'Best Song' AND Result = 'Awarded' ] Output [ Result , Date_of_ceremony , Category ]"
    },
    {
        "id": "07f3d2949c5d9261a0be945ee51ca0eb25321cfeb85b464fea6d405f2a5edc9b",
        "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Predicate [ Category = 'Best Song' AND Result = 'Awarded' ] Output [ Result , Date_of_ceremony , Category ]"
    },
    {
        "id": "bcf4baf41a0f8ec67337860c99997597c8b7e7d60273573a68bab03eda91973c",
        "question": "What is the issue date of the volume with the minimum weeks on top?",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Output [ Weeks_on_Top , Issue_Date ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Weeks_on_Top ASC ] Output [ Weeks_on_Top , Issue_Date ]"
    },
    {
        "id": "3ed90fb9f53ac81e125fe3d874a2b3fa6e8bc9ac4a0d4e28fbb517d980372c42",
        "question": "Return the issue date of the volume that has spent the fewest weeks on top.",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Output [ Weeks_on_Top , Issue_Date ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Weeks_on_Top ASC ] Output [ Weeks_on_Top , Issue_Date ]"
    },
    {
        "id": "7c41857d87d3947a73d40fa49215f45a0bfa2feee430d2a7e6f69bfada87a747",
        "question": "How many distinct artists have volumes?",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Distinct [ true ] Output [ Artist_ID ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Artist_ID) AS Count_Dist_Artist_ID ]"
    },
    {
        "id": "b2fd09728b2f2c7229cb6ff09611ec04d720bb9c839b938c80141e7eb78d5c32",
        "question": "Count the number of artists who have had volumes.",
        "parsing_tree": "music_4 | #1 = Scan Table [ volume ] Distinct [ true ] Output [ Artist_ID ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Artist_ID) AS Count_Dist_Artist_ID ]"
    },
    {
        "id": "e8492a3afe7e7f212a202c5f27eef992c1ae65cbeb0d4883c4e60ebc1a911154",
        "question": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Output [ Result ] ; #2 = Aggregate [ #1 ] GroupBy [ Result ] Output [ Result , countstar AS Count_Star ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ Result , Count_Star ]"
    },
    {
        "id": "66934ea42572a1fc9f0337c3f3fe1a3c5853f212a00e0c473fa6df25731126df",
        "question": "How many music festivals have had each kind of result, ordered descending by count?",
        "parsing_tree": "music_4 | #1 = Scan Table [ music_festival ] Output [ Result ] ; #2 = Aggregate [ #1 ] GroupBy [ Result ] Output [ Result , countstar AS Count_Star ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ Result , Count_Star ]"
    },
    {
        "id": "69ee30e433e12b3b3199e452e57929d6f0c2234f835e6a32ebcdf62889d3cd33",
        "question": "What are the issue dates of volumes associated with the artist aged 23 or younger?",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Predicate [ Age <= 23 ] Output [ Artist_ID , Age ] ; #2 = Scan Table [ volume ] Output [ Issue_Date , Artist_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Issue_Date ]"
    },
    {
        "id": "3b84b58b65ec11249ea18c0884c106f4eb8a8dcad4655bf0facc8324f339afbe",
        "question": "Return the issue dates of volumes by artists who are at most 23 years old?",
        "parsing_tree": "music_4 | #1 = Scan Table [ artist ] Predicate [ Age <= 23 ] Output [ Artist_ID , Age ] ; #2 = Scan Table [ volume ] Output [ Issue_Date , Artist_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Issue_Date ]"
    },
    {
        "id": "7ae763fbec371a7c27e8cde52201c70ab207d39e2e50415d4549f284a5ff389a",
        "question": "How many roller coasters are there?",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ roller_coaster ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7bf02f1faea56ffb20245c20435f2b2b90de3051616106474a22106be59f5d75",
        "question": "List the names of roller coasters by ascending order of length.",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ roller_coaster ] Output [ Length , Name ] ; #2 = Sort [ #1 ] OrderBy [ Length ASC ] Output [ Length , Name ]"
    },
    {
        "id": "13869b6096012581666c773beee4dd251ce8916b3e5873bb2481bc8a53adf06b",
        "question": "What are the lengths and heights of roller coasters?",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ roller_coaster ] Output [ Length , Height ]"
    },
    {
        "id": "6697b869523ec4e9cbe92c9778d5ece58077fd018a2516ebbaeb109c59921a72",
        "question": "List the names of countries whose language is not \"German\".",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ country ] Predicate [ Languages <> 'German' ] Output [ Name , Languages ]"
    },
    {
        "id": "3763a3c4c087380bda8376484d5344b293e5dafa2790d51e0031ee0dd07be290",
        "question": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ roller_coaster ] Predicate [ Length > 3300.0 OR Height > 100.0 ] Output [ Length , Status , Height ]"
    },
    {
        "id": "c6edbfa86784ff8bf68afe2cdd62b896b601cd4656327e3bc3636d8f6843c234",
        "question": "What are the speeds of the longest roller coaster?",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ roller_coaster ] Output [ Length , Speed ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Length DESC ] Output [ Length , Speed ]"
    },
    {
        "id": "2f504d5240988562d88d920881e6dcd7d39692aa79cb9c276139a7ebe647e02f",
        "question": "What is the average speed of roller coasters?",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ roller_coaster ] Output [ Speed ] ; #2 = Aggregate [ #1 ] Output [ AVG(Speed) AS Avg_Speed ]"
    },
    {
        "id": "082a731ec593ed0a3e1a6fc0aa170e51d0f02a8256d453dc1789349f003dad1b",
        "question": "Show the different statuses and the numbers of roller coasters for each status.",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ roller_coaster ] Output [ Status ] ; #2 = Aggregate [ #1 ] GroupBy [ Status ] Output [ countstar AS Count_Star , Status ]"
    },
    {
        "id": "cbcdce06f70103c9ad33aa3fcfaae18146be24482d3011325e2885c530236407",
        "question": "Please show the most common status of roller coasters.",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ roller_coaster ] Output [ Status ] ; #2 = Aggregate [ #1 ] GroupBy [ Status ] Output [ countstar AS Count_Star , Status ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Status ]"
    },
    {
        "id": "fc214df666fb00eeec9f579020170043f6bdafad82f705665893e8d5d40ffae5",
        "question": "List the status shared by more than two roller coaster.",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ roller_coaster ] Output [ Status ] ; #2 = Aggregate [ #1 ] GroupBy [ Status ] Output [ countstar AS Count_Star , Status ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Status ]"
    },
    {
        "id": "5364052fb6ae7a3cb25a3835359d7c19adf8c19d9399ba5cf92f259ba73dfdee",
        "question": "Show the park of the roller coaster with the highest speed.",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ roller_coaster ] Output [ Park , Speed ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Speed DESC ] Output [ Park , Speed ]"
    },
    {
        "id": "9596461678a1c98b18a492134ac98f71e2cbfa5420ea675604f5d7bbe0177c4d",
        "question": "Show the names of countries that have more than one roller coaster.",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ country ] Output [ Country_ID , Name ] ; #2 = Scan Table [ roller_coaster ] Output [ Country_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country_ID = #2.Country_ID ] Output [ #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name ]"
    },
    {
        "id": "67f6d8be3789313d289e68f3d035d0ed16931bc64233c40c69f6064fab8dac56",
        "question": "Show the name and population of the country that has the highest roller coaster.",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ country ] Output [ Country_ID , Population , Name ] ; #2 = Scan Table [ roller_coaster ] Output [ Country_ID , Height ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country_ID = #2.Country_ID ] Output [ #1.Population , #2.Height , #1.Name ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Height DESC ] Output [ Population , Name , Height ]"
    },
    {
        "id": "efd2c2b779f8339bde46a0f605cc36fcba797ece8a5662f83011a52e3ff24050",
        "question": "Show the names of countries and the average speed of roller coasters from each country.",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ country ] Output [ Country_ID , Name ] ; #2 = Scan Table [ roller_coaster ] Output [ Country_ID , Speed ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country_ID = #2.Country_ID ] Output [ #2.Speed , #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ AVG(Speed) AS Avg_Speed , Name ]"
    },
    {
        "id": "40633721330bdf9dbd3ee84fd08d9be46c0e88b7e978429645b387c6b3f48a6c",
        "question": "How many countries do not have an roller coaster longer than 3000?",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ country ] Output [ Country_ID ] ; #2 = Scan Table [ roller_coaster ] Predicate [ Length > 3000.0 ] Output [ Country_ID , Length ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Country_ID IS NULL OR #1.Country_ID = #2.Country_ID ] Output [ #1.Country_ID ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5042307bd42e43e9cbfbf9ad51591f39b9e5857b22e7b6bc008d72a34c22ba80",
        "question": "What are the country names, area and population which has both roller coasters with speed higher",
        "parsing_tree": "roller_coaster | #1 = Scan Table [ roller_coaster ] Predicate [ Speed > 60.0 ] Output [ Country_ID , Speed ] ; #2 = Scan Table [ country ] Output [ Country_ID , Population , Name , Area ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Country_ID = #2.Country_ID ] Distinct [ true ] Output [ #2.Name , #2.Area , #2.Population ] ; #4 = Scan Table [ roller_coaster ] Predicate [ Speed < 55.0 ] Output [ Country_ID , Speed ] ; #5 = Scan Table [ country ] Output [ Country_ID , Population , Name , Area ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Country_ID = #5.Country_ID ] Output [ #5.Area , #5.Population , #5.Name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Name = #6.Name ] Output [ #3.Name , #3.Area , #3.Population ]"
    },
    {
        "id": "bd592585e28fee39a18dbcead61d94f827a36031c9d9a841f18d544925156c75",
        "question": "How many different captain ranks are there?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Distinct [ true ] Output [ Rank ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Rank) AS Count_Dist_Rank ]"
    },
    {
        "id": "13ca22a3245e6400d7e6df61ff4d34fbb66edbc96bb93b360eb41b13db39698a",
        "question": "Count the number of different ranks of captain.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Distinct [ true ] Output [ Rank ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Rank) AS Count_Dist_Rank ]"
    },
    {
        "id": "f8ae0b00513746f3e9ee1d1aed53a423214b501c2fc98f2f8a0519f2edb44a52",
        "question": "How many captains are in each rank?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Output [ Rank ] ; #2 = Aggregate [ #1 ] GroupBy [ Rank ] Output [ countstar AS Count_Star , Rank ]"
    },
    {
        "id": "3e86f2c97d752a6740bce0f40c8f30190ec721fd817e42fe351b9fcdf72da1da",
        "question": "Count the number of captains that have each rank.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Output [ Rank ] ; #2 = Aggregate [ #1 ] GroupBy [ Rank ] Output [ countstar AS Count_Star , Rank ]"
    },
    {
        "id": "f5cc240dc62476cd0fac2444b87c25dc91efca04df16bc836a202c086f5e6968",
        "question": "How many captains with younger than 50 are in each rank?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Predicate [ age < 50 ] Output [ Rank , age ] ; #2 = Aggregate [ #1 ] GroupBy [ Rank ] Output [ countstar AS Count_Star , Rank ]"
    },
    {
        "id": "2bf026d9a981b4b1a46c242c0bf79c29225390b4edd895ac9897db014af36f4f",
        "question": "Count the number of captains younger than 50 of each rank.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Predicate [ age < 50 ] Output [ Rank , age ] ; #2 = Aggregate [ #1 ] GroupBy [ Rank ] Output [ countstar AS Count_Star , Rank ]"
    },
    {
        "id": "bb147b4be376f253630ee80a7a3c5256ec482067ac849840cc183e728e076c30",
        "question": "Sort all captain names by their ages from old to young.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Output [ Name , age ] ; #2 = Sort [ #1 ] OrderBy [ age DESC ] Output [ Name , age ]"
    },
    {
        "id": "a0bbc697fc26e18c87c9951913c9cf17480361c030471341aa7c113b43628fca",
        "question": "What are the names of captains, sorted by age descending?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Output [ Name , age ] ; #2 = Sort [ #1 ] OrderBy [ age DESC ] Output [ Name , age ]"
    },
    {
        "id": "98521d924c332b559379a3ef1c2b0924b1e5c4ad59e83d369659e12e32d66139",
        "question": "Find the name, class and rank of all captains.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Output [ Rank , Name , Class ]"
    },
    {
        "id": "f7e6463ac5123b7f80b437cafe3a1e396d0c785db8b8def00fd776a9271b3b27",
        "question": "What are the names, classes, and ranks of all captains?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Output [ Rank , Name , Class ]"
    },
    {
        "id": "c1f44dba87a7bb9f74dc70adcad2df2d7afabacaa07674e40a65456527fbd487",
        "question": "Which rank is the most common among captains?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Output [ Rank ] ; #2 = Aggregate [ #1 ] GroupBy [ Rank ] Output [ countstar AS Count_Star , Rank ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Rank , Count_Star ]"
    },
    {
        "id": "810246008413c7ed8c9492dd8c142e68268c2c8160bc1636227597a624a4dc93",
        "question": "Return the rank for which there are the fewest captains.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Output [ Rank ] ; #2 = Aggregate [ #1 ] GroupBy [ Rank ] Output [ countstar AS Count_Star , Rank ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Rank , Count_Star ]"
    },
    {
        "id": "b68b117298069c49ab88dc3e4f7ecb46b3dca2c8c40e2e950ce3322aeb9f48bf",
        "question": "Which classes have more than two captains?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Output [ Class ] ; #2 = Aggregate [ #1 ] GroupBy [ Class ] Output [ countstar AS Count_Star , Class ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Class ]"
    },
    {
        "id": "0e09f0e0a6657a875e4e038072122d7c175372765d8d1b21f5a4fbde61a2549e",
        "question": "Give the classes that have more than two captains.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Output [ Class ] ; #2 = Aggregate [ #1 ] GroupBy [ Class ] Output [ countstar AS Count_Star , Class ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Class ]"
    },
    {
        "id": "32cf8b10ae5c4ac18571e745ff5ac39c49a9f387b15d540fe0c1ee3e2da812dd",
        "question": "Find the name of captains whose rank are either Midshipman or Lieutenant.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Predicate [ Rank = 'Lieutenant' OR Rank = 'Midshipman' ] Output [ Rank , Name ]"
    },
    {
        "id": "f676bc8ad17cf0368f6575552c935bd0b52d7680ddd02ef9df08ec726544341e",
        "question": "What are the names of captains that have either the rank Midshipman or Lieutenant?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Predicate [ Rank = 'Lieutenant' OR Rank = 'Midshipman' ] Output [ Rank , Name ]"
    },
    {
        "id": "b47612235fc2012ca966c17f7615759697847d175fbe9d0838da487181da2210",
        "question": "What are the average and minimum age of captains in different class?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Output [ Class , age ] ; #2 = Aggregate [ #1 ] GroupBy [ Class ] Output [ MIN(age) AS Min_age , Class , AVG(age) AS Avg_age ]"
    },
    {
        "id": "79ba8320f989df8e23bbd8dbc26cb99bf73577807d027069ed2bd49bb1702568",
        "question": "Return the average and minimum age of captains in each class.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Output [ Class , age ] ; #2 = Aggregate [ #1 ] GroupBy [ Class ] Output [ MIN(age) AS Min_age , Class , AVG(age) AS Avg_age ]"
    },
    {
        "id": "110fa35a883eabd86e9fb916a6b83d1f2e044b8346cf790f8de6b52e39154202",
        "question": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Predicate [ Class = 'Cutter' ] Distinct [ true ] Output [ Rank , Class ] ; #2 = Scan Table [ captain ] Predicate [ Class = 'Armed schooner' ] Output [ Rank , Class ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Rank = #2.Rank ] Output [ #1.Rank ]"
    },
    {
        "id": "2d7755abe97d360af9fb1b5fc2133d7e69e5e5ee3ad33201e1b9177e91886a21",
        "question": "What are the ranks of captains that are both in the Cutter and Armed schooner classes?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Predicate [ Class = 'Cutter' ] Distinct [ true ] Output [ Rank , Class ] ; #2 = Scan Table [ captain ] Predicate [ Class = 'Armed schooner' ] Output [ Rank , Class ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Rank = #2.Rank ] Output [ #1.Rank ]"
    },
    {
        "id": "476604f15831d78edebd9476accb5de9afaf2ce03a6ddec5681a711049317600",
        "question": "Find the captain rank that has no captain in Third-rate ship of the line class.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Distinct [ true ] Output [ Rank ] ; #2 = Scan Table [ captain ] Predicate [ Class = 'Third-rate ship of the line' ] Output [ Rank , Class ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Rank = #2.Rank ] Output [ #1.Rank ]"
    },
    {
        "id": "9e0380b24327cc66cb7b91a778773517f04c8e7d2afdad29f09e86a0ff373d3e",
        "question": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Distinct [ true ] Output [ Rank ] ; #2 = Scan Table [ captain ] Predicate [ Class = 'Third-rate ship of the line' ] Output [ Rank , Class ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Rank = #2.Rank ] Output [ #1.Rank ]"
    },
    {
        "id": "b650c94e8d4ec98554d9c34cfbf1cd3fc09199eff3e23b319f0e5548ea8ca6eb",
        "question": "What is the name of the youngest captain?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Output [ Name , age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ age ASC ] Output [ Name , age ]"
    },
    {
        "id": "acd141bc6ed0276ed6a0b7db288b70b84058469a02cc2f005c488559220d286c",
        "question": "Return the name of the youngest captain.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Output [ Name , age ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ age ASC ] Output [ Name , age ]"
    },
    {
        "id": "815a460a40740fa9bc9e76b3263a13eaf9743ef2ed2fbae36018067418287c77",
        "question": "how many ships are there?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "90c143f1f09460cb45543398d273705dfc7a6888ca09f0d15633ed46cf2c22de",
        "question": "Count the number of ships.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d5db61e702e725295afeba68c6d8a91791c01c6bf91b7f3883d07e6653914395",
        "question": "Find the name, type, and flag of the ship that is built in the most recent year.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ Flag , Type , Name , Built_Year ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Built_Year DESC ] Output [ Flag , Type , Name , Built_Year ]"
    },
    {
        "id": "bea3892b86b01b59c2450ef83d2ec378f3472039ce8a820d5cd77b9895cf8045",
        "question": "What is the name, type, and flag of the ship that was built in the most recent year?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ Flag , Type , Name , Built_Year ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Built_Year DESC ] Output [ Flag , Type , Name , Built_Year ]"
    },
    {
        "id": "f53bf218379877f07840f38d399f56115f92cfb0d81361634fa788e6096375dc",
        "question": "Group by ships by flag, and return number of ships that have each flag.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ Flag ] ; #2 = Aggregate [ #1 ] GroupBy [ Flag ] Output [ countstar AS Count_Star , Flag ]"
    },
    {
        "id": "da11161f3c001c9f74c830fab1f36ba26894a6004f54568bfac9ddfee152b6a3",
        "question": "What are the different ship flags, and how many ships have each?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ Flag ] ; #2 = Aggregate [ #1 ] GroupBy [ Flag ] Output [ countstar AS Count_Star , Flag ]"
    },
    {
        "id": "d2a02ef11a09ee05beb2f8573aeb1bb3d9ba7c95ca03cb359192491a3a2b91c5",
        "question": "Which flag is most widely used among all ships?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ Flag ] ; #2 = Aggregate [ #1 ] GroupBy [ Flag ] Output [ countstar AS Count_Star , Flag ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Flag , Count_Star ]"
    },
    {
        "id": "dfeb3e2c243e36dab1af727130e6676a5e9fe8ae2326efc57f5839d30badb355",
        "question": "Return the flag that is most common among all ships.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ Flag ] ; #2 = Aggregate [ #1 ] GroupBy [ Flag ] Output [ countstar AS Count_Star , Flag ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Flag , Count_Star ]"
    },
    {
        "id": "af7353f14286d60d429144f38eaac76abd57bc4fd298733f7d538014bac14188",
        "question": "List all ship names in the order of built year and class.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ Name , Built_Year , Class ] ; #2 = Sort [ #1 ] OrderBy [ Built_Year ASC , Class ASC ] Output [ Name , Built_Year , Class ]"
    },
    {
        "id": "a71e0de538e901a49717fa45ced5fcedbfa0fd3961676188fe28335d886d92da",
        "question": "What are the names of ships, ordered by year they were built and their class?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ Name , Built_Year , Class ] ; #2 = Sort [ #1 ] OrderBy [ Built_Year ASC , Class ASC ] Output [ Name , Built_Year , Class ]"
    },
    {
        "id": "7038da2b84e855a2011ea2e283b42cce7538053991b5d5b74cce21af93f1d76a",
        "question": "Find the ship type that are used by both ships with Panama and Malta flags.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Predicate [ Flag = 'Panama' ] Distinct [ true ] Output [ Flag , Type ] ; #2 = Scan Table [ Ship ] Predicate [ Flag = 'Malta' ] Output [ Flag , Type ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Type = #2.Type ] Output [ #1.Type ]"
    },
    {
        "id": "0e7564a264ace58e6298a6e16c6fe8870df7f566a6d2b259768ce45f92071acf",
        "question": "What types of ships have both ships that have Panama Flags and Malta flags?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Predicate [ Flag = 'Panama' ] Distinct [ true ] Output [ Flag , Type ] ; #2 = Scan Table [ Ship ] Predicate [ Flag = 'Malta' ] Output [ Flag , Type ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Type = #2.Type ] Output [ #1.Type ]"
    },
    {
        "id": "eb41be5b726361098aaa2225fc5eea1fad186c86c56b25c4de784489724e2f16",
        "question": "In which year were most of ships built?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ Built_Year ] ; #2 = Aggregate [ #1 ] GroupBy [ Built_Year ] Output [ countstar AS Count_Star , Built_Year ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Built_Year ]"
    },
    {
        "id": "328abf1222a7e27604b82987f6ab7dbf700d5906ab502690de00b457fc38e12b",
        "question": "What is the year in which most ships were built?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ Built_Year ] ; #2 = Aggregate [ #1 ] GroupBy [ Built_Year ] Output [ countstar AS Count_Star , Built_Year ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Built_Year ]"
    },
    {
        "id": "a0a5aa62294b502e3288a5ad8b3ece106a25715b30f208018bcf0920e8114037",
        "question": "what are the names and classes of the ships that do not have any captain yet?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ Name , Ship_ID , Class ] ; #2 = Scan Table [ captain ] Output [ Ship_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Ship_ID IS NULL OR #1.Ship_ID = #2.Ship_ID ] Output [ #1.Name , #1.Class ]"
    },
    {
        "id": "49676a0af2204b26a0af0aaed3f1670b30170f608ea98d15922da59f83e79bbc",
        "question": "Return the names and classes of ships that do not have a captain?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ Name , Ship_ID , Class ] ; #2 = Scan Table [ captain ] Output [ Ship_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Ship_ID IS NULL OR #1.Ship_ID = #2.Ship_ID ] Output [ #1.Name , #1.Class ]"
    },
    {
        "id": "db37956a95fe615e3ad8ca67fda2de0a3cc5a55adce8cd44953ebe45c4532120",
        "question": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ Flag , Name , Ship_ID ] ; #2 = Scan Table [ captain ] Predicate [ Rank = 'Midshipman' ] Output [ Rank , Ship_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Ship_ID IS NULL OR #1.Ship_ID = #2.Ship_ID ] Output [ #1.Flag , #1.Name ]"
    },
    {
        "id": "5c157c01252a5296f16551767e4eb2ca75b17b2c0f27cc910234b3e2c30d3e76",
        "question": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ Ship ] Output [ Flag , Name , Ship_ID ] ; #2 = Scan Table [ captain ] Predicate [ Rank = 'Midshipman' ] Output [ Rank , Ship_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Ship_ID IS NULL OR #1.Ship_ID = #2.Ship_ID ] Output [ #1.Flag , #1.Name ]"
    },
    {
        "id": "f55d8bec7120ca462244ca89103d547fa06271350dfab60332214b2e9e27f516",
        "question": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Predicate [ Rank = 'Midshipman' ] Output [ Rank , Ship_ID ] ; #2 = Scan Table [ Ship ] Output [ Name , Ship_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Ship_ID = #2.Ship_ID ] Distinct [ true ] Output [ #2.Name ] ; #4 = Scan Table [ captain ] Predicate [ Rank = 'Lieutenant' ] Output [ Rank , Ship_ID ] ; #5 = Scan Table [ Ship ] Output [ Name , Ship_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Ship_ID = #5.Ship_ID ] Output [ #5.Name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Name = #6.Name ] Output [ #3.Name ]"
    },
    {
        "id": "a82c2108da97ba0ba5e52f814057ce039fc34637133fc1280e00f81bc0ab1578",
        "question": "What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?",
        "parsing_tree": "ship_1 | #1 = Scan Table [ captain ] Predicate [ Rank = 'Midshipman' ] Output [ Rank , Ship_ID ] ; #2 = Scan Table [ Ship ] Output [ Name , Ship_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Ship_ID = #2.Ship_ID ] Distinct [ true ] Output [ #2.Name ] ; #4 = Scan Table [ captain ] Predicate [ Rank = 'Lieutenant' ] Output [ Rank , Ship_ID ] ; #5 = Scan Table [ Ship ] Output [ Name , Ship_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Ship_ID = #5.Ship_ID ] Output [ #5.Name ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Name = #6.Name ] Output [ #3.Name ]"
    },
    {
        "id": "01519619b3807ad8d6ebfbe52e1ddecf04bf82101314f98262ba1c53db8ed9e3",
        "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
        "parsing_tree": "city_record | #1 = Scan Table [ match ] Predicate [ Competition = '1994 FIFA World Cup qualification' ] Output [ Match_ID , Competition ]"
    },
    {
        "id": "d25d0e00083e21d3291cfbad221c67772bc806363920643a8764f6f8b72a2c87",
        "question": "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?",
        "parsing_tree": "city_record | #1 = Scan Table [ match ] Predicate [ Competition = '1994 FIFA World Cup qualification' ] Output [ Match_ID , Competition ]"
    },
    {
        "id": "acd81aef3d93fc5e6b73b666d8a44129cf51c26896fb0b5a34d393126dfe45a5",
        "question": "Find the cities which were once a host city after 2010?",
        "parsing_tree": "city_record | #1 = Scan Table [ hosting_city ] Predicate [ Year > 2010 ] Output [ Year , Host_City ] ; #2 = Scan Table [ city ] Output [ City , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Host_City = #2.City_ID ] Output [ #2.City ]"
    },
    {
        "id": "b5d6edcf779f1475f0532f8711ae5cda444ed0fea73dc9d645f52a774abf5d8d",
        "question": "Which cities served as a host city after 2010?",
        "parsing_tree": "city_record | #1 = Scan Table [ hosting_city ] Predicate [ Year > 2010 ] Output [ Year , Host_City ] ; #2 = Scan Table [ city ] Output [ City , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Host_City = #2.City_ID ] Output [ #2.City ]"
    },
    {
        "id": "861146e2e919a2a454a8253877d560fe00d169b8d45a7e80e479a4e316041e55",
        "question": "Which city has hosted the most events?",
        "parsing_tree": "city_record | #1 = Scan Table [ hosting_city ] Output [ Host_City ] ; #2 = Aggregate [ #1 ] GroupBy [ Host_City ] Output [ countstar AS Count_Star , Host_City ] ; #3 = Scan Table [ city ] Output [ City , City_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Host_City = #3.City_ID ] Output [ #3.City , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , City ]"
    },
    {
        "id": "2fb573afbab44c3cdda93714a240504ef17996a7481c42680434142fab0f9d13",
        "question": "Find the city that hosted the most events.",
        "parsing_tree": "city_record | #1 = Scan Table [ hosting_city ] Output [ Host_City ] ; #2 = Aggregate [ #1 ] GroupBy [ Host_City ] Output [ countstar AS Count_Star , Host_City ] ; #3 = Scan Table [ city ] Output [ City , City_ID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Host_City = #3.City_ID ] Output [ #3.City , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , City ]"
    },
    {
        "id": "080959f7ef05225bb457a5f8f858d7f2328764e9a6c7c54f51fc033736a8700c",
        "question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Predicate [ City = 'Nanjing ( Jiangsu )' ] Output [ City , City_ID ] ; #2 = Scan Table [ hosting_city ] Output [ Match_ID , Host_City ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.Host_City ] Output [ #2.Match_ID ] ; #4 = Scan Table [ match ] Predicate [ Competition = '1994 FIFA World Cup qualification' ] Output [ Venue , Match_ID , Competition ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Match_ID = #4.Match_ID ] Output [ #4.Venue ]"
    },
    {
        "id": "886ee234b08d72d7bf8da29cb67a932fadd025ec969aab927fe911ac93a307b2",
        "question": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Predicate [ City = 'Nanjing ( Jiangsu )' ] Output [ City , City_ID ] ; #2 = Scan Table [ hosting_city ] Output [ Match_ID , Host_City ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.Host_City ] Output [ #2.Match_ID ] ; #4 = Scan Table [ match ] Predicate [ Competition = '1994 FIFA World Cup qualification' ] Output [ Venue , Match_ID , Competition ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Match_ID = #4.Match_ID ] Output [ #4.Venue ]"
    },
    {
        "id": "0172b15c5e6504ec4a6e58dcacd856831afa64f7606435db0910bab6d082f7ca",
        "question": "Give me the temperature of Shanghai in January.",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Predicate [ City = 'Shanghai' ] Output [ City , City_ID ] ; #2 = Scan Table [ temperature ] Output [ Jan , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.City_ID ] Output [ #2.Jan ]"
    },
    {
        "id": "bf9fcadde59952eb4dbdbc40ac276da78ea9874b20b221e8f0f97fce3540558c",
        "question": "What is the temperature of \"Shanghai\" city in January?",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Predicate [ City = 'Shanghai' ] Output [ City , City_ID ] ; #2 = Scan Table [ temperature ] Output [ Jan , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.City_ID ] Output [ #2.Jan ]"
    },
    {
        "id": "f8336ea20982ee421454737b9c3463dedb661a57b2a6bf724376e87c2e195271",
        "question": "What is the host year of city \"Taizhou ( Zhejiang )\"?",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Predicate [ City = 'Taizhou ( Zhejiang )' ] Output [ City , City_ID ] ; #2 = Scan Table [ hosting_city ] Output [ Year , Host_City ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.Host_City ] Output [ #2.Year ]"
    },
    {
        "id": "2ddf9107dee518033c0c6becdcd73d6de8d7f2aea48a14709d9837e12cba8781",
        "question": "IN which year did city \"Taizhou ( Zhejiang )\" serve as a host city?",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Predicate [ City = 'Taizhou ( Zhejiang )' ] Output [ City , City_ID ] ; #2 = Scan Table [ hosting_city ] Output [ Year , Host_City ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.Host_City ] Output [ #2.Year ]"
    },
    {
        "id": "ee71391aacf86876bcd6cdd9b13141694d0c5be79de0aafb4437f48fb2222e36",
        "question": "Which three cities have the largest regional population?",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Output [ Regional_Population , City ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ Regional_Population DESC ] Output [ Regional_Population , City ]"
    },
    {
        "id": "0ba9ed7d7280a726f8640f62078796867ed54365ab4d0a22ef9c51b31c9fa413",
        "question": "What are the three largest cities in terms of regional population?",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Output [ Regional_Population , City ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ Regional_Population DESC ] Output [ Regional_Population , City ]"
    },
    {
        "id": "596fe1c2f9ecad56cce7f554e995c46f1f4cef4a6a4715c6da577f4d9d5c40e9",
        "question": "Which city has the lowest GDP? Please list the city name and its GDP.",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Output [ GDP , City ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ GDP ASC ] Output [ GDP , City ]"
    },
    {
        "id": "a326df3b648c6237555bdf6bec29967944e6ec9970cc117a3f6d3b496e16b4eb",
        "question": "What is the city with the smallest GDP? Return the city and its GDP.",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Output [ GDP , City ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ GDP ASC ] Output [ GDP , City ]"
    },
    {
        "id": "0a730b5d4848a117b8ca85ba1397e0907f89d48d2270988ec22d42a2c18991a4",
        "question": "Which city has the highest temperature in February?",
        "parsing_tree": "city_record | #1 = Scan Table [ temperature ] Output [ Feb , City_ID ] ; #2 = Scan Table [ city ] Output [ City , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.City_ID ] Output [ #1.Feb , #2.City ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Feb DESC ] Output [ Feb , City ]"
    },
    {
        "id": "29ac1109a4c524f1c93ad1538f349adb964afd3a74a779ac4428ffba22fd10d5",
        "question": "In February, which city marks the highest temperature?",
        "parsing_tree": "city_record | #1 = Scan Table [ temperature ] Output [ Feb , City_ID ] ; #2 = Scan Table [ city ] Output [ City , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.City_ID ] Output [ #1.Feb , #2.City ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Feb DESC ] Output [ Feb , City ]"
    },
    {
        "id": "59348fa5507a1c5ae798121c42273d3d5514599e47f2360aa6ced72606769a10",
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "parsing_tree": "city_record | #1 = Scan Table [ temperature ] Predicate [ Mar < Jul OR Mar > Oct ] Output [ Oct , City_ID , Mar , Jul ] ; #2 = Scan Table [ city ] Output [ City , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.City_ID ] Output [ #2.City ]"
    },
    {
        "id": "f71b1153510b3f8ba356100d06bed8f76f2ada7882eab44316621954679cd865",
        "question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
        "parsing_tree": "city_record | #1 = Scan Table [ temperature ] Predicate [ Mar < Jul OR Mar > Oct ] Output [ Oct , City_ID , Mar , Jul ] ; #2 = Scan Table [ city ] Output [ City , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.City_ID ] Output [ #2.City ]"
    },
    {
        "id": "bcf0841de353255fd0ea10a98e2f0671463d9956e86d1930217856ae12c84464",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?",
        "parsing_tree": "city_record | #1 = Scan Table [ temperature ] Predicate [ Mar < Jul ] Output [ City_ID , Mar , Jul ] ; #2 = Scan Table [ city ] Output [ City , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.City_ID ] Distinct [ true ] Output [ #2.City ] ; #4 = Scan Table [ hosting_city ] Output [ Host_City ] ; #5 = Scan Table [ city ] Output [ City , City_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Host_City = #5.City_ID ] Output [ #5.City ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.City = #6.City ] Output [ #3.City ]"
    },
    {
        "id": "bd69b8493d271d7773840f118d91bfb3f769d08947a9c2f0ffefcce898920659",
        "question": "Which cities have lower temperature in March than in July and have been once host cities?",
        "parsing_tree": "city_record | #1 = Scan Table [ temperature ] Predicate [ Mar < Jul ] Output [ City_ID , Mar , Jul ] ; #2 = Scan Table [ city ] Output [ City , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.City_ID ] Distinct [ true ] Output [ #2.City ] ; #4 = Scan Table [ hosting_city ] Output [ Host_City ] ; #5 = Scan Table [ city ] Output [ City , City_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Host_City = #5.City_ID ] Output [ #5.City ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.City = #6.City ] Output [ #3.City ]"
    },
    {
        "id": "c22a9507bf333d350c35764229d6b7b2d82462820a35319f1ee960d8f0cf7005",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "parsing_tree": "city_record | #1 = Scan Table [ temperature ] Predicate [ Mar < Dec ] Output [ Dec , City_ID , Mar ] ; #2 = Scan Table [ city ] Output [ City , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.City_ID ] Distinct [ true ] Output [ #2.City ] ; #4 = Scan Table [ hosting_city ] Output [ Host_City ] ; #5 = Scan Table [ city ] Output [ City , City_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Host_City = #5.City_ID ] Output [ #5.City ] ; #7 = Except [ #3 , #6 ] Predicate [ #3.City = #6.City ] Output [ #3.City ]"
    },
    {
        "id": "64727304a34656267e31f492336c69162c1517bc68ae2c6250ea76a5179d46ef",
        "question": "Which cities have lower temperature in March than in Dec and have never served as host cities?",
        "parsing_tree": "city_record | #1 = Scan Table [ temperature ] Predicate [ Mar < Dec ] Output [ Dec , City_ID , Mar ] ; #2 = Scan Table [ city ] Output [ City , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.City_ID ] Distinct [ true ] Output [ #2.City ] ; #4 = Scan Table [ hosting_city ] Output [ Host_City ] ; #5 = Scan Table [ city ] Output [ City , City_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Host_City = #5.City_ID ] Output [ #5.City ] ; #7 = Except [ #3 , #6 ] Predicate [ #3.City = #6.City ] Output [ #3.City ]"
    },
    {
        "id": "a120b09e66c4e6728f1a913151ec4636c354ff0ad45b57e1a55ba009617137f7",
        "question": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?",
        "parsing_tree": "city_record | #1 = Scan Table [ temperature ] Predicate [ Feb > Jun ] Output [ Jun , Feb , City_ID ] ; #2 = Scan Table [ city ] Output [ City , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.City_ID ] Output [ #2.City ] ; #4 = Scan Table [ hosting_city ] Output [ Host_City ] ; #5 = Scan Table [ city ] Output [ City , City_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Host_City = #5.City_ID ] Output [ #5.City ] ; #7 = Union [ #3 , #6 ] Output [ #3.City ]"
    },
    {
        "id": "6e182611cb02027da25bc039dc4c0678b94832f570bd9efb1ee287773f554063",
        "question": "Which cities have higher temperature in Feb than in Jun or have once served as host cities?",
        "parsing_tree": "city_record | #1 = Scan Table [ temperature ] Predicate [ Feb > Jun ] Output [ Jun , Feb , City_ID ] ; #2 = Scan Table [ city ] Output [ City , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.City_ID = #2.City_ID ] Output [ #2.City ] ; #4 = Scan Table [ hosting_city ] Output [ Host_City ] ; #5 = Scan Table [ city ] Output [ City , City_ID ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.Host_City = #5.City_ID ] Output [ #5.City ] ; #7 = Union [ #3 , #6 ] Output [ #3.City ]"
    },
    {
        "id": "677c09d2ce4db5971e1ad3f998c068f6d697cbb80b8b3d38b575551085d73a43",
        "question": "Please give me a list of cities whose regional population is over 10000000.",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Predicate [ Regional_Population > 10000000 ] Output [ Regional_Population , City ]"
    },
    {
        "id": "8ea601b68f2c3e96b9ab48d6f81c0ad5a4ae3fd3db0dd2ec514a0872aa852265",
        "question": "Which cities have regional population above 10000000?",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Predicate [ Regional_Population > 10000000 ] Output [ Regional_Population , City ]"
    },
    {
        "id": "b3989a31327e7d1bb69ed2c742023aa11666d92e17a11a9a6bf4654bc8c91a06",
        "question": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Predicate [ Regional_Population > 10000000 ] Output [ Regional_Population , City ] ; #2 = Scan Table [ city ] Predicate [ Regional_Population < 5000000 ] Output [ Regional_Population , City ] ; #3 = Union [ #1 , #2 ] Output [ #1.City ]"
    },
    {
        "id": "31876327586fb70ee183a445a09fe443467e3074e4aefa8b9f0cac244e7209bc",
        "question": "Which cities have regional population above 8000000 or below 5000000?",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Predicate [ Regional_Population > 10000000 ] Output [ Regional_Population , City ] ; #2 = Scan Table [ city ] Predicate [ Regional_Population < 5000000 ] Output [ Regional_Population , City ] ; #3 = Union [ #1 , #2 ] Output [ #1.City ]"
    },
    {
        "id": "4d7a91ae4f74595dbec77eebee3ac1121cba06b0b4ce71d77298d1ec19c307e1",
        "question": "Find the number of matches in different competitions.",
        "parsing_tree": "city_record | #1 = Scan Table [ match ] Output [ Competition ] ; #2 = Aggregate [ #1 ] GroupBy [ Competition ] Output [ countstar AS Count_Star , Competition ]"
    },
    {
        "id": "95a8e1a83867cfc80322f8b73612d38c452ecb04deb069f82d36344aca0b1f65",
        "question": "For each competition, count the number of matches.",
        "parsing_tree": "city_record | #1 = Scan Table [ match ] Output [ Competition ] ; #2 = Aggregate [ #1 ] GroupBy [ Competition ] Output [ countstar AS Count_Star , Competition ]"
    },
    {
        "id": "06d71f1c0dd64c886f0a78a7b5778b209418ed2b2c6ad5b59098592d31a0ef07",
        "question": "List venues of all matches in the order of their dates starting from the most recent one.",
        "parsing_tree": "city_record | #1 = Scan Table [ match ] Output [ Venue , Date ] ; #2 = Sort [ #1 ] OrderBy [ Date DESC ] Output [ Venue , Date ]"
    },
    {
        "id": "4dc56cfe48a8795f7d79408bdcb0baa803e5cb0d4ee4d422aa48b6211e7eff05",
        "question": "What are the venues of all the matches? Sort them in the descending order of match date.",
        "parsing_tree": "city_record | #1 = Scan Table [ match ] Output [ Venue , Date ] ; #2 = Sort [ #1 ] OrderBy [ Date DESC ] Output [ Venue , Date ]"
    },
    {
        "id": "d93d0066521ccb62fbb1ce91471d698283765dbd620b607e0fa89bb0cda19f87",
        "question": "what is the GDP of the city with the largest population.",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Output [ Regional_Population , GDP ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Regional_Population DESC ] Output [ Regional_Population , GDP ]"
    },
    {
        "id": "c4de824b1dcd1c1835f000271b123af728ff69894675583b9ea5c24603a2ae50",
        "question": "Find the GDP of the city with the largest regional population.",
        "parsing_tree": "city_record | #1 = Scan Table [ city ] Output [ Regional_Population , GDP ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Regional_Population DESC ] Output [ Regional_Population , GDP ]"
    },
    {
        "id": "c505e034b6ab390c612a65cbe599b2cbc3402900823b61caaa4391343122b450",
        "question": "What are the GDP and population of the city that already served as a host more than once?",
        "parsing_tree": "city_record | #1 = Scan Table [ hosting_city ] Output [ Host_City ] ; #2 = Scan Table [ city ] Output [ Regional_Population , GDP , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Host_City = #2.City_ID ] Output [ #2.GDP , #1.Host_City , #2.Regional_Population , #2.City_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Host_City ] Output [ countstar AS Count_Star , Regional_Population , GDP ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Regional_Population , GDP ]"
    },
    {
        "id": "1c86c209ad1a47e08cf9b643e292a2231d28175bf1efe2f8f9cc5d352a766308",
        "question": "Which cities have served as host cities more than once? Return me their GDP and population.",
        "parsing_tree": "city_record | #1 = Scan Table [ hosting_city ] Output [ Host_City ] ; #2 = Scan Table [ city ] Output [ Regional_Population , GDP , City_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Host_City = #2.City_ID ] Output [ #2.GDP , #1.Host_City , #2.Regional_Population , #2.City_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Host_City ] Output [ countstar AS Count_Star , Regional_Population , GDP ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Regional_Population , GDP ]"
    },
    {
        "id": "30e9ac2b03031c197e28239498843d491d483586a1dea95719baacf470055cba",
        "question": "List every individual's first name, middle name and last name in alphabetical order by last name.",
        "parsing_tree": "e_government | #1 = Scan Table [ Individuals ] Output [ individual_first_name , individual_middle_name , individual_last_name ] ; #2 = Sort [ #1 ] OrderBy [ individual_last_name ASC ] Output [ individual_first_name , individual_middle_name , individual_last_name ]"
    },
    {
        "id": "d501ba3feca84f0208490634e4fc1dbc362b81d32836db38b60abce7e350fe3f",
        "question": "What are the first, middle, and last names of all individuals, ordered by last name?",
        "parsing_tree": "e_government | #1 = Scan Table [ Individuals ] Output [ individual_first_name , individual_middle_name , individual_last_name ] ; #2 = Sort [ #1 ] OrderBy [ individual_last_name ASC ] Output [ individual_first_name , individual_middle_name , individual_last_name ]"
    },
    {
        "id": "5c50abf55be2d0030b979078edbde1194e76b3adeef2a1b4d4492eadd1dc55c0",
        "question": "List all the types of forms.",
        "parsing_tree": "e_government | #1 = Scan Table [ Forms ] Distinct [ true ] Output [ form_type_code ]"
    },
    {
        "id": "665f441faa36fcb241995e50c40f67fd36421b81f681947e9355a1c324b7c2fb",
        "question": "What are the different types of forms?",
        "parsing_tree": "e_government | #1 = Scan Table [ Forms ] Distinct [ true ] Output [ form_type_code ]"
    },
    {
        "id": "fa5a778dba4973a87cc1ea991d7f0db448c67d04d5190565c5ab62a76e756002",
        "question": "Find the name of the most popular party form.",
        "parsing_tree": "e_government | #1 = Scan Table [ Party_Forms ] Output [ form_id ] ; #2 = Aggregate [ #1 ] GroupBy [ form_id ] Output [ countstar AS Count_Star , form_id ] ; #3 = Scan Table [ Forms ] Output [ form_name , form_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.form_id = #3.form_id ] Output [ #3.form_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ form_name , Count_Star ]"
    },
    {
        "id": "88e93f5b38a8f2c155f06d841e113297217707c5ba0277d649454692e75e8beb",
        "question": "What is the name of the party form that is most common?",
        "parsing_tree": "e_government | #1 = Scan Table [ Party_Forms ] Output [ form_id ] ; #2 = Aggregate [ #1 ] GroupBy [ form_id ] Output [ countstar AS Count_Star , form_id ] ; #3 = Scan Table [ Forms ] Output [ form_name , form_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.form_id = #3.form_id ] Output [ #3.form_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ form_name , Count_Star ]"
    },
    {
        "id": "e2b1c4695c5a11d92b74fdeadf58c87434e29ea50499a02e9d417b71f290ff6d",
        "question": "Find the emails of parties with the most popular party form.",
        "parsing_tree": "e_government | #1 = Scan Table [ Party_Forms ] Output [ form_id ] ; #2 = Aggregate [ #1 ] GroupBy [ form_id ] Output [ countstar AS Count_Star , form_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , form_id ] ; #4 = Scan Table [ Party_Forms ] Output [ form_id , party_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.form_id = #4.form_id ] Output [ #4.party_id ] ; #6 = Scan Table [ Parties ] Output [ party_email , party_id ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.party_id = #6.party_id ] Output [ #6.party_email ]"
    },
    {
        "id": "684b65ba756314fd497491e39fa08262cebc7db665f269bd367428363bde4dd6",
        "question": "What are the party emails associated with parties that used the party form that is the most common?",
        "parsing_tree": "e_government | #1 = Scan Table [ Party_Forms ] Output [ form_id ] ; #2 = Aggregate [ #1 ] GroupBy [ form_id ] Output [ countstar AS Count_Star , form_id ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , form_id ] ; #4 = Scan Table [ Party_Forms ] Output [ form_id , party_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.form_id = #4.form_id ] Output [ #4.party_id ] ; #6 = Scan Table [ Parties ] Output [ party_email , party_id ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.party_id = #6.party_id ] Output [ #6.party_email ]"
    },
    {
        "id": "878f8c04de9ba6ee1672923de3d9d30819da0b25d215ac90da5743c1f5c90b70",
        "question": "List all the name of organizations in order of the date formed.",
        "parsing_tree": "e_government | #1 = Scan Table [ Organizations ] Output [ date_formed , organization_name ] ; #2 = Sort [ #1 ] OrderBy [ date_formed ASC ] Output [ date_formed , organization_name ]"
    },
    {
        "id": "df9c7b58948d1059ae74f970441d14ea5bac7522cd2cb455198270b11ec33601",
        "question": "What are the names of organizations, ordered by the date they were formed, ascending?",
        "parsing_tree": "e_government | #1 = Scan Table [ Organizations ] Output [ date_formed , organization_name ] ; #2 = Sort [ #1 ] OrderBy [ date_formed ASC ] Output [ date_formed , organization_name ]"
    },
    {
        "id": "350cf0e982f3218088320d9bac32c5b19e72f0322124ab75c0a8ee4dc9123a2e",
        "question": "Find the name of the youngest organization.",
        "parsing_tree": "e_government | #1 = Scan Table [ Organizations ] Output [ date_formed , organization_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date_formed DESC ] Output [ date_formed , organization_name ]"
    },
    {
        "id": "907830e117ce55536da0efd485f0dfce804c7e3cc4cb126b0702b208cbe12058",
        "question": "What is the name of the organization that was formed most recently?",
        "parsing_tree": "e_government | #1 = Scan Table [ Organizations ] Output [ date_formed , organization_name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date_formed DESC ] Output [ date_formed , organization_name ]"
    },
    {
        "id": "05e3582d50be82a65edf29fbb222a0f575403ccb059bc1ef7f077d0b372d8c99",
        "question": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
        "parsing_tree": "e_government | #1 = Scan Table [ Organizations ] Predicate [ organization_name = 'Labour Party' ] Output [ organization_id , organization_name ] ; #2 = Scan Table [ Organization_Contact_Individuals ] Output [ individual_id , organization_id , date_contact_to ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.organization_id = #2.organization_id ] Output [ #2.date_contact_to , #2.individual_id ] ; #4 = Scan Table [ Individuals ] Output [ individual_id , individual_last_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.individual_id = #4.individual_id ] Output [ #4.individual_last_name , #3.date_contact_to ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ date_contact_to DESC ] Output [ date_contact_to , individual_last_name ]"
    },
    {
        "id": "47939dfc0c46cb3f3ba205913159ab2bf8ca13671566bacffa09c63bb7e44936",
        "question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?",
        "parsing_tree": "e_government | #1 = Scan Table [ Organizations ] Predicate [ organization_name = 'Labour Party' ] Output [ organization_id , organization_name ] ; #2 = Scan Table [ Organization_Contact_Individuals ] Output [ individual_id , organization_id , date_contact_to ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.organization_id = #2.organization_id ] Output [ #2.date_contact_to , #2.individual_id ] ; #4 = Scan Table [ Individuals ] Output [ individual_id , individual_last_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.individual_id = #4.individual_id ] Output [ #4.individual_last_name , #3.date_contact_to ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ date_contact_to DESC ] Output [ date_contact_to , individual_last_name ]"
    },
    {
        "id": "4d894e159c3a35425feddd52b97c7d2cd27814a1dab7cc24e507669fea8330bc",
        "question": "How many services are there?",
        "parsing_tree": "e_government | #1 = Scan Table [ Services ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0284638a39738da2d995e7234a29fb2ce159648c97988ce6f2a06df627d426fc",
        "question": "Count the number of services.",
        "parsing_tree": "e_government | #1 = Scan Table [ Services ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "eea28ae5b8c5dbd675f89d2e6adf0b7c7723bb5fa854daa6c26b3aeb8b6e5a72",
        "question": "Find name of the services that has never been used.",
        "parsing_tree": "e_government | #1 = Scan Table [ Services ] Distinct [ true ] Output [ service_name ] ; #2 = Scan Table [ Party_Services ] Output [ service_id ] ; #3 = Scan Table [ Services ] Output [ service_name , service_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.service_id = #3.service_id ] Output [ #3.service_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.service_name = #4.service_name ] Output [ #1.service_name ]"
    },
    {
        "id": "fff5604fba7429bd8d216d158d0ff5fb7d27cb0d410068b9efdc1e52e2a740a5",
        "question": "What are the names of the services that have never been used?",
        "parsing_tree": "e_government | #1 = Scan Table [ Services ] Distinct [ true ] Output [ service_name ] ; #2 = Scan Table [ Party_Services ] Output [ service_id ] ; #3 = Scan Table [ Services ] Output [ service_name , service_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.service_id = #3.service_id ] Output [ #3.service_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.service_name = #4.service_name ] Output [ #1.service_name ]"
    },
    {
        "id": "6de844a521b294066e2b87fbeb0b6514d858b3b2d951b76b4623395f7a493aa2",
        "question": "How many cities are there in state \"Colorado\"?",
        "parsing_tree": "e_government | #1 = Scan Table [ Addresses ] Predicate [ state_province_county = 'Colorado' ] Output [ state_province_county ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6a0df2a5d9320908d922533e90bcc8b4711cb2ac1436ba097c5a0004c16ae41d",
        "question": "Count the number of cities in the state of Colorado.",
        "parsing_tree": "e_government | #1 = Scan Table [ Addresses ] Predicate [ state_province_county = 'Colorado' ] Output [ state_province_county ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "af640181dc62a75adfa42a41d25256c184c796b5cbb4ee4be191610a39fd7cab",
        "question": "Find the payment method code used by more than 3 parties.",
        "parsing_tree": "e_government | #1 = Scan Table [ Parties ] Output [ payment_method_code ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method_code ] Output [ countstar AS Count_Star , payment_method_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ payment_method_code ]"
    },
    {
        "id": "d5c1ed6a84d7331bb468869df61ab13aa16dfea60686f41efe71d3e701102214",
        "question": "What are the payment method codes that have been used by more than 3 parties?",
        "parsing_tree": "e_government | #1 = Scan Table [ Parties ] Output [ payment_method_code ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method_code ] Output [ countstar AS Count_Star , payment_method_code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ payment_method_code ]"
    },
    {
        "id": "5c1578242cd1c45c7be0c7085a34eb34bb8bfb9bc67d2eae1b80c45196a3011a",
        "question": "Find the name of organizations whose names contain \"Party\".",
        "parsing_tree": "e_government | #1 = Scan Table [ Organizations ] Predicate [ organization_name like '%Party%' ] Output [ organization_name ]"
    },
    {
        "id": "ee48196fb6dfa46d45140ec968074e7184010c76a6fc90ea96da3d08e26982a8",
        "question": "What are the names of organizations that contain the word \"Party\"?",
        "parsing_tree": "e_government | #1 = Scan Table [ Organizations ] Predicate [ organization_name like '%Party%' ] Output [ organization_name ]"
    },
    {
        "id": "cf7eb49c6f14358fd8b920153dee08157bc8f0fb1916e04fb8d579ddcc5ae914",
        "question": "How many distinct payment methods are used by parties?",
        "parsing_tree": "e_government | #1 = Scan Table [ Parties ] Distinct [ true ] Output [ payment_method_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "acd02b0847ac347c9559138dc9eaa20ddd4901a0c59e29de98d0d6af0c01717f",
        "question": "Count the number of different payment method codes used by parties.",
        "parsing_tree": "e_government | #1 = Scan Table [ Parties ] Distinct [ true ] Output [ payment_method_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7300dbb315629fa9ba290cc228bd983f1370ed974f872cb7d97e7884c781431c",
        "question": "Which is the email of the party that has used the services the most number of times?",
        "parsing_tree": "e_government | #1 = Scan Table [ Party_Services ] Output [ customer_id ] ; #2 = Scan Table [ Parties ] Output [ party_email , party_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.party_id ] Output [ #2.party_email ] ; #4 = Aggregate [ #3 ] GroupBy [ party_email ] Output [ countstar AS Count_Star , party_email ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , party_email ]"
    },
    {
        "id": "3c5df02589e38d7aedc91901c83618e118f5b77f1e20ecf81d4e558f2910655b",
        "question": "Return the party email that has used party services the greatest number of times.",
        "parsing_tree": "e_government | #1 = Scan Table [ Party_Services ] Output [ customer_id ] ; #2 = Scan Table [ Parties ] Output [ party_email , party_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.party_id ] Output [ #2.party_email ] ; #4 = Aggregate [ #3 ] GroupBy [ party_email ] Output [ countstar AS Count_Star , party_email ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , party_email ]"
    },
    {
        "id": "db1a73185d006d3348a27a1703b29481b98b1f298f095e174300f3fa15c3ee4c",
        "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "parsing_tree": "e_government | #1 = Scan Table [ Addresses ] Predicate [ line_1_number_building like '%6862 Kaitlyn Knolls%' ] Output [ line_1_number_building , state_province_county ]"
    },
    {
        "id": "b0f4cc279f815dfa7fe355e622f21ac20190a714fd1616e1d7a93df2377ffdf1",
        "question": "Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\".",
        "parsing_tree": "e_government | #1 = Scan Table [ Addresses ] Predicate [ line_1_number_building like '%6862 Kaitlyn Knolls%' ] Output [ line_1_number_building , state_province_county ]"
    },
    {
        "id": "68f909fb7ad8e1411a271eb559cf3db9a4605deccfb90ff0e4118e75273fb70e",
        "question": "What is the name of organization that has the greatest number of contact individuals?",
        "parsing_tree": "e_government | #1 = Scan Table [ Organizations ] Output [ organization_id , organization_name ] ; #2 = Scan Table [ Organization_Contact_Individuals ] Output [ organization_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.organization_id = #2.organization_id ] Output [ #1.organization_name ] ; #4 = Aggregate [ #3 ] GroupBy [ organization_name ] Output [ countstar AS Count_Star , organization_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , organization_name ]"
    },
    {
        "id": "d93cd6e45579f85ab13afc295455275cf97c3a8a68dd5abcaa21a871183af15c",
        "question": "Return the name of the organization which has the most contact individuals.",
        "parsing_tree": "e_government | #1 = Scan Table [ Organizations ] Output [ organization_id , organization_name ] ; #2 = Scan Table [ Organization_Contact_Individuals ] Output [ organization_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.organization_id = #2.organization_id ] Output [ #1.organization_name ] ; #4 = Aggregate [ #3 ] GroupBy [ organization_name ] Output [ countstar AS Count_Star , organization_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , organization_name ]"
    },
    {
        "id": "244e0a032f0a3e033adb393fecfb415e319121ed0a2df6aebf511e87d3c429f8",
        "question": "Find the last name of the individuals that have been contact individuals of an organization.",
        "parsing_tree": "e_government | #1 = Scan Table [ Organization_Contact_Individuals ] Output [ individual_id ] ; #2 = Scan Table [ Individuals ] Output [ individual_id , individual_last_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.individual_id = #2.individual_id ] Distinct [ true ] Output [ #2.individual_last_name ]"
    },
    {
        "id": "cb1eb25bdfb69942f41d321f8345abebb7d6ec520582af8cf89975ec5eacd83b",
        "question": "What are the last names of individuals who have been contact individuals for an organization?",
        "parsing_tree": "e_government | #1 = Scan Table [ Organization_Contact_Individuals ] Output [ individual_id ] ; #2 = Scan Table [ Individuals ] Output [ individual_id , individual_last_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.individual_id = #2.individual_id ] Distinct [ true ] Output [ #2.individual_last_name ]"
    },
    {
        "id": "2f8d61d109ca3146489b48a4becc154e5b1e7a56bc80cf2a2036499a55893679",
        "question": "How many drivers are there?",
        "parsing_tree": "school_bus | #1 = Scan Table [ driver ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "19248db2df91685c6b5c10f5be806c009a51ee396cd3d73a4db6e1ae6aa72766",
        "question": "Show the name, home city, and age for all drivers.",
        "parsing_tree": "school_bus | #1 = Scan Table [ driver ] Output [ Home_city , Name , Age ]"
    },
    {
        "id": "6c15a65f3febfe689fb2290ff38ade4f17fd20559ad7859f6c523e27620a32ac",
        "question": "Show the party and the number of drivers in each party.",
        "parsing_tree": "school_bus | #1 = Scan Table [ driver ] Output [ Party ] ; #2 = Aggregate [ #1 ] GroupBy [ Party ] Output [ countstar AS Count_Star , Party ]"
    },
    {
        "id": "9b3ffcbdba46bc667b3b60ea7a932b5bec28337fa48c88eab11ce42ab583f8c8",
        "question": "Show the name of drivers in descending order of age.",
        "parsing_tree": "school_bus | #1 = Scan Table [ driver ] Output [ Name , Age ] ; #2 = Sort [ #1 ] OrderBy [ Age DESC ] Output [ Name , Age ]"
    },
    {
        "id": "3daa1b7a41cd12e7968485fbff182515d3d8cef8f7e857210b5dc3b0e3c92f80",
        "question": "Show all different home cities.",
        "parsing_tree": "school_bus | #1 = Scan Table [ driver ] Distinct [ true ] Output [ Home_city ]"
    },
    {
        "id": "03103d28e01df22adc7792559e007953427cd292b6e3ba8a862feeb7c394f343",
        "question": "Show the home city with the most number of drivers.",
        "parsing_tree": "school_bus | #1 = Scan Table [ driver ] Output [ Home_city ] ; #2 = Aggregate [ #1 ] GroupBy [ Home_city ] Output [ countstar AS Count_Star , Home_city ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Home_city ]"
    },
    {
        "id": "6b783fe487ab2ecff02ca1c7a55d2cb7a8a353c4e1f17f94fe0d60e92ad5fe19",
        "question": "Show the party with drivers from Hartford and drivers older than 40.",
        "parsing_tree": "school_bus | #1 = Scan Table [ driver ] Predicate [ Age > 40 AND Home_city = 'Hartford' ] Output [ Party , Home_city , Age ]"
    },
    {
        "id": "170713c97e6704e0baacd65b22f5352796f4039c8063765223710a7603d75ae4",
        "question": "Show home city where at least two drivers older than 40 are from.",
        "parsing_tree": "school_bus | #1 = Scan Table [ driver ] Predicate [ Age > 40 ] Output [ Home_city , Age ] ; #2 = Aggregate [ #1 ] GroupBy [ Home_city ] Output [ countstar AS Count_Star , Home_city ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Home_city ]"
    },
    {
        "id": "6560eab6cef003c0d999fd3823c46a566073c3081a09460562a3fe297f163a5c",
        "question": "Show all home cities except for those having a driver older than 40.",
        "parsing_tree": "school_bus | #1 = Scan Table [ driver ] Distinct [ true ] Output [ Home_city ] ; #2 = Scan Table [ driver ] Predicate [ Age > 40 ] Output [ Home_city , Age ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Home_city = #2.Home_city ] Output [ #1.Home_city ]"
    },
    {
        "id": "36920eddbe84bd974774540f9fad8361479fe90fcf896aa4ab79411f7ee55f24",
        "question": "Show the names of the drivers without a school bus.",
        "parsing_tree": "school_bus | #1 = Scan Table [ driver ] Output [ Driver_ID , Name ] ; #2 = Scan Table [ school_bus ] Output [ Driver_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Driver_ID = #1.Driver_ID ] Output [ #1.Name ]"
    },
    {
        "id": "81c846e7f1cf29aded17ab8d5c13c86f596de4231593aceee7dc765424866290",
        "question": "Show the types of schools that have two schools.",
        "parsing_tree": "school_bus | #1 = Scan Table [ school ] Output [ Type ] ; #2 = Aggregate [ #1 ] GroupBy [ Type ] Output [ countstar AS Count_Star , Type ] ; #3 = Filter [ #2 ] Predicate [ Count_Star = 2 ] Output [ Type ]"
    },
    {
        "id": "80cdf2483e141719004c9d587371cc1d92387a37093fc7d44dd8d7391bc15037",
        "question": "Show the school name and driver name for all school buses.",
        "parsing_tree": "school_bus | #1 = Scan Table [ school_bus ] Output [ Driver_ID , School_ID ] ; #2 = Scan Table [ driver ] Output [ Driver_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Driver_ID = #2.Driver_ID ] Output [ #2.Name , #1.School_ID ] ; #4 = Scan Table [ school ] Output [ School , School_ID ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.School_ID = #4.School_ID ] Output [ #3.Name , #4.School ]"
    },
    {
        "id": "ff9c5bcfad25b4862e1ea31c1326ce38fa3bf790f7070a8c4f1af07b6bdf6e22",
        "question": "What is the maximum, minimum and average years spent working on a school bus?",
        "parsing_tree": "school_bus | #1 = Scan Table [ school_bus ] Output [ Years_Working ] ; #2 = Aggregate [ #1 ] Output [ MIN(Years_Working) AS Min_Years_Working , AVG(Years_Working) AS Avg_Years_Working , MAX(Years_Working) AS Max_Years_Working ]"
    },
    {
        "id": "4159e4ed0e61a34460ea8e650a43e7985570ef8e94e367b0e0d696fe4780def4",
        "question": "Show the school name and type for schools without a school bus.",
        "parsing_tree": "school_bus | #1 = Scan Table [ school ] Output [ Type , School , School_ID ] ; #2 = Scan Table [ school_bus ] Output [ School_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.School_ID = #1.School_ID ] Output [ #1.School , #1.Type ]"
    },
    {
        "id": "f357b7c4937a7d9a840bec11c057975364b24dcceb71fad7db976279058555e6",
        "question": "Show the type of school and the number of buses for each type.",
        "parsing_tree": "school_bus | #1 = Scan Table [ school_bus ] Output [ School_ID ] ; #2 = Scan Table [ school ] Output [ Type , School_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.School_ID = #2.School_ID ] Output [ #2.Type ] ; #4 = Aggregate [ #3 ] GroupBy [ Type ] Output [ countstar AS Count_Star , Type ]"
    },
    {
        "id": "e6eaa195f4a336512f94c44abb731321a30e6a3017db20981aadfdfb2eb9773c",
        "question": "How many drivers are from Hartford city or younger than 40?",
        "parsing_tree": "school_bus | #1 = Scan Table [ driver ] Predicate [ Home_city = 'Hartford' OR Age < 40 ] Output [ Home_city , Age ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "fcafa87dc76cf2afcabb92c8cc8bd6bd2695524c2797dfa773678050d69bb3f5",
        "question": "List names for drivers from Hartford city and younger than 40.",
        "parsing_tree": "school_bus | #1 = Scan Table [ driver ] Predicate [ Age < 40 AND Home_city = 'Hartford' ] Output [ Home_city , Name , Age ]"
    },
    {
        "id": "ca3556099b2d64a72851a1b448f39258c734c08d9765adf1710799099beb4e89",
        "question": "find the name of driver who is driving the school bus with the longest working history.",
        "parsing_tree": "school_bus | #1 = Scan Table [ school_bus ] Output [ Years_Working , Driver_ID ] ; #2 = Scan Table [ driver ] Output [ Driver_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Driver_ID = #2.Driver_ID ] Output [ #2.Name , #1.Years_Working ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Years_Working DESC ] Output [ Years_Working , Name ]"
    },
    {
        "id": "37e47d7e7804d384ba06b6b6dd0367b6b87399cf1aeb5f5eac72ff5cc5b61809",
        "question": "How many flights have a velocity larger than 200?",
        "parsing_tree": "flight_company | #1 = Scan Table [ flight ] Predicate [ Velocity > 200.0 ] Output [ Velocity ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "42c471c95753d2533d7e0145d8b69865f4cf0029ccc1dc5065fc88635b555eec",
        "question": "List the vehicle flight number, date and pilot of all the flights, ordered by altitude.",
        "parsing_tree": "flight_company | #1 = Scan Table [ flight ] Output [ Altitude , Pilot , Vehicle_Flight_number , Date ] ; #2 = Sort [ #1 ] OrderBy [ Altitude ASC ] Output [ Altitude , Pilot , Vehicle_Flight_number , Date ]"
    },
    {
        "id": "5ff73bc36ba48bce20999cadfc41bf5eb169e6d9a218de0f94585350fbfe30bf",
        "question": "List the id, country, city and name of the airports ordered alphabetically by the name.",
        "parsing_tree": "flight_company | #1 = Scan Table [ airport ] Output [ name , Country , City , id ] ; #2 = Sort [ #1 ] OrderBy [ name ASC ] Output [ name , City , Country , id ]"
    },
    {
        "id": "aff9413b8ffc387bd89a560f1b6265f982ad9ec6aaa04a1eaed65c3a18be91d6",
        "question": "What is maximum group equity shareholding of the companies?",
        "parsing_tree": "flight_company | #1 = Scan Table [ operate_company ] Output [ Group_Equity_Shareholding ] ; #2 = Aggregate [ #1 ] Output [ MAX(Group_Equity_Shareholding) AS Max_Group_Equity_Shareholding ]"
    },
    {
        "id": "e6bc3b60ba36cb8399875ca199e63f9d645a11221a60ea8f29387361d279ecd1",
        "question": "What is the velocity of the pilot named 'Thompson'?",
        "parsing_tree": "flight_company | #1 = Scan Table [ flight ] Predicate [ Pilot = 'Thompson' ] Output [ Pilot , Velocity ] ; #2 = Aggregate [ #1 ] Output [ AVG(Velocity) AS Avg_Velocity ]"
    },
    {
        "id": "5c587c5453a771c82571b64f876e5ad3a2ea9fd441eb46f6c80b48848faf0351",
        "question": "What are the names and types of the companies that have ever operated a flight?",
        "parsing_tree": "flight_company | #1 = Scan Table [ flight ] Output [ company_id ] ; #2 = Scan Table [ operate_company ] Output [ name , Type , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.company_id = #2.id ] Output [ #2.name , #2.Type ]"
    },
    {
        "id": "c96b8272e24cdc103ee5ded1113f65366f66a296b7b9037b441cbfd867e7115e",
        "question": "What are the names of the airports which are not in the country 'Iceland'?",
        "parsing_tree": "flight_company | #1 = Scan Table [ airport ] Predicate [ Country <> 'Iceland' ] Output [ name , Country ]"
    },
    {
        "id": "49b222f8b0eb8c7679c9250292a90ec16b869d4e3c85ab8d262c417cfbddd1d1",
        "question": "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
        "parsing_tree": "flight_company | #1 = Scan Table [ flight ] Predicate [ Velocity < 200.0 ] Output [ company_id , Velocity ] ; #2 = Scan Table [ operate_company ] Output [ Type , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.company_id = #2.id ] Distinct [ true ] Output [ #2.Type ]"
    },
    {
        "id": "7c6d82d29b25d0572189c4cf597610144dda49ed5115cc79a49e9c2020040f18",
        "question": "What are the ids and names of the companies that operated more than one flight?",
        "parsing_tree": "flight_company | #1 = Scan Table [ flight ] Output [ company_id ] ; #2 = Scan Table [ operate_company ] Output [ name , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.company_id = #2.id ] Output [ #2.id , #2.name ] ; #4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name , id ]"
    },
    {
        "id": "4700d80f34c0f437e768d7c37ce4b2b5ac4c76887fda25adbf087f34bf6fdea2",
        "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
        "parsing_tree": "flight_company | #1 = Scan Table [ airport ] Predicate [ Country = 'United States' OR name = 'Billund Airport' ] Output [ name , Country , id ] ; #2 = Scan Table [ flight ] Output [ Pilot , airport_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.airport_id ] Distinct [ true ] Output [ #2.Pilot ]"
    },
    {
        "id": "e9db9526820a05a08be1bf5d81f9e68310770b0c44e461237267993b02959534",
        "question": "What is the most common company type, and how many are there?",
        "parsing_tree": "flight_company | #1 = Scan Table [ operate_company ] Output [ Type ] ; #2 = Aggregate [ #1 ] GroupBy [ Type ] Output [ countstar AS Count_Star , Type ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Type ]"
    },
    {
        "id": "bdc1009bf13b25b592449ee31e20e5b339a6c19a252aea7352f3c290039f95d3",
        "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?",
        "parsing_tree": "flight_company | #1 = Scan Table [ airport ] Output [ id ] ; #2 = Scan Table [ flight ] Predicate [ Pilot = 'Thompson' ] Output [ Pilot , airport_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.airport_id IS NULL OR #1.id = #2.airport_id ] Output [ #1.id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9aaeb854ec26f63d5d56fcb0515e0fd1c13b15e878b2f85147e18dcd87b1458e",
        "question": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.",
        "parsing_tree": "flight_company | #1 = Scan Table [ operate_company ] Predicate [ Principal_activities = 'Cargo' ] Output [ Principal_activities , id ] ; #2 = Scan Table [ flight ] Output [ company_id , Pilot ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.company_id ] Distinct [ true ] Output [ #2.Pilot ] ; #4 = Scan Table [ operate_company ] Predicate [ Principal_activities = 'Catering services' ] Output [ Principal_activities , id ] ; #5 = Scan Table [ flight ] Output [ company_id , Pilot ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.id = #5.company_id ] Output [ #5.Pilot ] ; #7 = Intersect [ #3 , #6 ] Predicate [ #3.Pilot = #6.Pilot ] Output [ #3.Pilot ]"
    },
    {
        "id": "9180e913c0ab70074b762c9b84c24e0fc8a90ce359f2ea7853158391de8e2931",
        "question": "Which of the airport names contains the word 'international'?",
        "parsing_tree": "flight_company | #1 = Scan Table [ airport ] Predicate [ name like '%international%' ] Output [ name ]"
    },
    {
        "id": "36d605f3794c4d4eec2315e4317609bb803a6cdbe7076539a87c5856787abe11",
        "question": "How many companies operates airlines in each airport?",
        "parsing_tree": "flight_company | #1 = Scan Table [ airport ] Output [ id ] ; #2 = Scan Table [ flight ] Output [ company_id , airport_id ] ; #3 = Scan Table [ operate_company ] Output [ id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.company_id = #3.id ] Output [ #2.airport_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.id = #4.airport_id ] Output [ #1.id , #4.airport_id ] ; #6 = Aggregate [ #5 ] GroupBy [ id ] Output [ countstar AS Count_Star , id ]"
    },
    {
        "id": "1688273cd7407047be3929ab5e3ab05fe6f84fd86289fa4d495c95721e793202",
        "question": "how many airports are there in each country?",
        "parsing_tree": "flight_company | #1 = Scan Table [ airport ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]"
    },
    {
        "id": "bec72b2592ec51d301a72748358f0c990f4debf931f884764864e164a7324a49",
        "question": "which countries have more than 2 airports?",
        "parsing_tree": "flight_company | #1 = Scan Table [ airport ] Output [ Country ] ; #2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Country ]"
    },
    {
        "id": "8c8d36a8bbd13a339c78e3d3938e8c9dfd6821f3fb677ebfc55abdd28e0c3e24",
        "question": "which pilot is in charge of the most number of flights?",
        "parsing_tree": "flight_company | #1 = Scan Table [ flight ] Output [ Pilot ] ; #2 = Aggregate [ #1 ] GroupBy [ Pilot ] Output [ countstar AS Count_Star , Pilot ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Pilot , Count_Star ]"
    },
    {
        "id": "322798601e33333ec3fcf1f8602d98fbc9cb134d40a4af0f9be0494d1ffde283",
        "question": "How many accounts do we have?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Accounts ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "560b14aea408e7b2d16832e6d2323659eb453e38156dfa2f2a2f10cb8cf24416",
        "question": "Count the number of accounts.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Accounts ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e1ec406d962d9b75e5221d9e8fe3afac4df9608d969284fc5f719f0f6600f01a",
        "question": "Show all account ids and account details.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Accounts ] Output [ Account_Details , Account_ID ]"
    },
    {
        "id": "19997a38304ae731e0229f0a118db674012ad1a79bad9d9a97112f2479ede65f",
        "question": "What are the ids and details of all accounts?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Accounts ] Output [ Account_Details , Account_ID ]"
    },
    {
        "id": "8e615921a96885f6c54731010ee5554b0c220e194c3dfba490407eb1401965a7",
        "question": "How many statements do we have?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Statements ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "73614f222944660eaca7c0785dc1fbdebabb410c3bc345ba167b854da63f31de",
        "question": "Count the number of statements.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Statements ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d4d897e7c8129ced34553f2be44845d3a621d88a0769d0ba20885e36b971faca",
        "question": "List all statement ids and statement details.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Statements ] Output [ Statement_ID , Statement_Details ]"
    },
    {
        "id": "391a109ba3e2f689dba14933b208a1edb8be78e03a20c2940e5fbf5e9a2e8c56",
        "question": "What are the ids and details of all statements?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Statements ] Output [ Statement_ID , Statement_Details ]"
    },
    {
        "id": "cb7cf4e970cc91e489b9d25b0857c7d03a139bfefbd1d589f8dff99709badc7c",
        "question": "Show statement id, statement detail, account detail for accounts.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Statements ] Output [ Statement_ID , Statement_Details ] ; #2 = Scan Table [ Accounts ] Output [ Statement_ID , Account_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Statement_ID = #2.Statement_ID ] Output [ #2.Statement_ID , #2.Account_Details , #1.Statement_Details ]"
    },
    {
        "id": "6191b089bc88202e0ebc02f5c2e40a8498ee9cd317b71c2bc3e64c39e86093d6",
        "question": "What are the statement ids, statement details, and account details, for all accounts?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Statements ] Output [ Statement_ID , Statement_Details ] ; #2 = Scan Table [ Accounts ] Output [ Statement_ID , Account_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Statement_ID = #2.Statement_ID ] Output [ #2.Statement_ID , #2.Account_Details , #1.Statement_Details ]"
    },
    {
        "id": "089fdee9ed2e599928e4f878a1e7f358170d1807a3476d43331f3cc117a2822c",
        "question": "Show all statement id and the number of accounts for each statement.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Accounts ] Output [ Statement_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Statement_ID ] Output [ countstar AS Count_Star , Statement_ID ]"
    },
    {
        "id": "34d01e5b09dea9bae6c44a905c0a1028c0a3ebbdda2dd9f9bf351197593789d2",
        "question": "What are the different statement ids on accounts, and the number of accounts for each?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Accounts ] Output [ Statement_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Statement_ID ] Output [ countstar AS Count_Star , Statement_ID ]"
    },
    {
        "id": "518ec082d8ee4a30423a332157614cd9ad9ac035b5fc88672ad59d60b5b7ae79",
        "question": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Accounts ] Output [ Statement_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Statement_ID ] Output [ countstar AS Count_Star , Statement_ID ] ; #3 = Scan Table [ Statements ] Output [ Statement_ID , Statement_Details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Statement_ID = #3.Statement_ID ] Output [ #2.Statement_ID , #3.Statement_Details , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Statement_ID , Statement_Details ]"
    },
    {
        "id": "fd3fd3a3267c24f7581ed8bf876c0a8dfb60293257d7309f1e44119ccadb71bd",
        "question": "What are the statement id and statement detail for the statement that has the most corresponding accounts?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Accounts ] Output [ Statement_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Statement_ID ] Output [ countstar AS Count_Star , Statement_ID ] ; #3 = Scan Table [ Statements ] Output [ Statement_ID , Statement_Details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Statement_ID = #3.Statement_ID ] Output [ #2.Statement_ID , #3.Statement_Details , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Statement_ID , Statement_Details ]"
    },
    {
        "id": "77ec8dc2f0a7857ea6659898f42db411cc99f4d56930a695b9b50306f5cff595",
        "question": "Show the number of documents.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "402baea38f77f255c8f1fd016fe94fac5818f1e7a39c6977ee457adbb4a5b070",
        "question": "Count the number of documents.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ce8ae1c1dbcbfce4710ca7d4fe4f96fc93e9f87a507ec68fe68b8e28f72f0978",
        "question": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Predicate [ Document_Name = 'King Book' OR Document_Name = 'Noel CV' ] Output [ Document_Description , Document_Type_Code , Document_Name ]"
    },
    {
        "id": "64f2b4eb00f2eeba431bebc601141ea4ea0fbb3c08938961c89a54600a6a840e",
        "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Predicate [ Document_Name = 'King Book' OR Document_Name = 'Noel CV' ] Output [ Document_Description , Document_Type_Code , Document_Name ]"
    },
    {
        "id": "a7afef2746e658fce39eee2aab2378032658d2e2522616351713ed90e39f8594",
        "question": "Show the ids and names of all documents.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Document_Name , Document_ID ]"
    },
    {
        "id": "01fab8ca093fc97469b75d1299d2ec74ceae8e9070e9812ebf6f86b1a5b839da",
        "question": "What are the ids and names for each of the documents?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Document_Name , Document_ID ]"
    },
    {
        "id": "9b6972bdb803c5d0a2dd832a4a40b96fd405cb576323d31873ef95fa2b577e6a",
        "question": "Find names and ids of all documents with document type code BK.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Predicate [ Document_Type_Code = 'BK' ] Output [ Document_Type_Code , Document_Name , Document_ID ]"
    },
    {
        "id": "48cd594f6d66efd635ccff3d49634075c54cabee9e690a8b2df575fb8a5ecb1c",
        "question": "What are the names and ids of documents that have the type code BK?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Predicate [ Document_Type_Code = 'BK' ] Output [ Document_Type_Code , Document_Name , Document_ID ]"
    },
    {
        "id": "5ac44c637b8308b0e1d624ac9851bb66d9167d3d5d8e252ce1ff666538e60966",
        "question": "How many documents are with document type code BK for each product id?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Predicate [ Document_Type_Code = 'BK' ] Output [ Project_ID , Document_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Project_ID ] Output [ Project_ID , countstar AS Count_Star ]"
    },
    {
        "id": "02f11706319414ea966a34b893e52d4f2bef4f3a5b3a9b6c37d6ab58fc0b0523",
        "question": "Count the number of documents with the type code BK that correspond to each product id.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Predicate [ Document_Type_Code = 'BK' ] Output [ Project_ID , Document_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Project_ID ] Output [ Project_ID , countstar AS Count_Star ]"
    },
    {
        "id": "70d16f0002b52f03f51c1bbac59cc15479178ebd428d80bd4d8e5e76790e5cf0",
        "question": "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Projects ] Predicate [ Project_Details = 'Graph Database project' ] Output [ Project_ID , Project_Details ] ; #2 = Scan Table [ Documents ] Output [ Project_ID , Document_Name , Document_Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Project_ID = #2.Project_ID ] Output [ #2.Document_Name , #2.Document_Date ]"
    },
    {
        "id": "172d7c28144b28ee4425216fe53fb5e0545fc1a45c220918d524cadfffe991d7",
        "question": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Projects ] Predicate [ Project_Details = 'Graph Database project' ] Output [ Project_ID , Project_Details ] ; #2 = Scan Table [ Documents ] Output [ Project_ID , Document_Name , Document_Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Project_ID = #2.Project_ID ] Output [ #2.Document_Name , #2.Document_Date ]"
    },
    {
        "id": "53629750d172837089317219b83bbed290123ba5dd516ca0625831b5020bd1e2",
        "question": "Show project ids and the number of documents in each project.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Project_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Project_ID ] Output [ Project_ID , countstar AS Count_Star ]"
    },
    {
        "id": "0a5027deb942a69cc2f03d52185508af1fcb3208aba4adee1881f240459dc73b",
        "question": "How many documents correspond with each project id?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Project_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Project_ID ] Output [ Project_ID , countstar AS Count_Star ]"
    },
    {
        "id": "80ceecd52a8e382378926f95027320fc1be9bedbd50d61d446a5966c21792bc3",
        "question": "What is the id of the project with least number of documents?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Project_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Project_ID ] Output [ Project_ID , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Project_ID , Count_Star ]"
    },
    {
        "id": "731ed957a851c090c1be1a73804714f50de6bb0fc6a2b45ba49618e903b63ce4",
        "question": "Return the id of the project that has the fewest corresponding documents.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Project_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Project_ID ] Output [ Project_ID , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Project_ID , Count_Star ]"
    },
    {
        "id": "1a9f7f0d441601d6fbb8bc529ec6450bb392007321d73d1e826ba62118d04c7a",
        "question": "Show the ids for projects with at least 2 documents.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Project_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Project_ID ] Output [ Project_ID , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Project_ID ]"
    },
    {
        "id": "6ae7a86cf811208f484bf4b8c0b2880a4e9f806e195ee7d99fcb01d057c7796e",
        "question": "What are project ids of projects that have 2 or more corresponding documents?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Project_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Project_ID ] Output [ Project_ID , countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Project_ID ]"
    },
    {
        "id": "d78fd0615b04a5137eb501bd6b9e9d53c4cf5a5d7148cb6f05030d9b60834775",
        "question": "List document type codes and the number of documents in each code.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Document_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Document_Type_Code ] Output [ countstar AS Count_Star , Document_Type_Code ]"
    },
    {
        "id": "ff0d13180f61ec06a4b7c9ca41ca2b2d08af1b0ddecd7b92534f79c7bf5d2728",
        "question": "How many documents are there of each type?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Document_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Document_Type_Code ] Output [ countstar AS Count_Star , Document_Type_Code ]"
    },
    {
        "id": "68fcec737cad4b75f28b1d46ec586d87238e9dccae0f872752bf30f5fd014141",
        "question": "What is the document type code with most number of documents?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Document_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Document_Type_Code ] Output [ countstar AS Count_Star , Document_Type_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_Type_Code , Count_Star ]"
    },
    {
        "id": "1be5968e1786eff228c553d824bd0a6eebb0b4821c6d86d71ceadf91e0775156",
        "question": "Return the code of the document type that is most common.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Document_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Document_Type_Code ] Output [ countstar AS Count_Star , Document_Type_Code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_Type_Code , Count_Star ]"
    },
    {
        "id": "9de45103231b3e9b3b46d88c69c5e5d68ccd99a953ac3798a751098c7ded31a9",
        "question": "Show the document type code with fewer than 3 documents.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Document_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Document_Type_Code ] Output [ countstar AS Count_Star , Document_Type_Code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star < 3 ] Output [ Document_Type_Code ]"
    },
    {
        "id": "c66b41e9418d8dfa1422bed29aff0e0761af075b4a3e56645b42385274dc6a08",
        "question": "What are the codes corresponding to document types for which there are less than 3 documents?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Document_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Document_Type_Code ] Output [ countstar AS Count_Star , Document_Type_Code ] ; #3 = Filter [ #2 ] Predicate [ Count_Star < 3 ] Output [ Document_Type_Code ]"
    },
    {
        "id": "706e847c22a3241e73db12037e1784efb6bd935f6d13eae55b591a2b11ffe4f2",
        "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Statements ] Predicate [ Statement_Details = 'Private Project' ] Output [ Statement_ID , Statement_Details ] ; #2 = Scan Table [ Documents ] Output [ Document_Name , Document_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Statement_ID = #2.Document_ID ] Output [ #1.Statement_Details , #2.Document_Name ]"
    },
    {
        "id": "d173869f1f8aea50914d0f7f12f62d9cdd257e1f906a9dc65b0951651ba28c0f",
        "question": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Statements ] Predicate [ Statement_Details = 'Private Project' ] Output [ Statement_ID , Statement_Details ] ; #2 = Scan Table [ Documents ] Output [ Document_Name , Document_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Statement_ID = #2.Document_ID ] Output [ #1.Statement_Details , #2.Document_Name ]"
    },
    {
        "id": "e59236d9c31aa8456fcc27d0c8140d2929cc0b842f42d1a47d8dfb7d9b0eb959",
        "question": "Show all document type codes, document type names, document type descriptions.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Document_Types ] Output [ Document_Type_Code , Document_Type_Description , Document_Type_Name ]"
    },
    {
        "id": "8a151d8b1b256c12af7fd23a14cc990cc669610099fb471dc56c05b9f9980f4c",
        "question": "What are the codes, names, and descriptions of the different document types?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Document_Types ] Output [ Document_Type_Code , Document_Type_Description , Document_Type_Name ]"
    },
    {
        "id": "1e4a1f0d0425d3bba316f8e92e2fbee6bff7300a0bb321c4280a36677bf42b66",
        "question": "What is the document type description for document type named Film?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Document_Types ] Predicate [ Document_Type_Name = 'Film' ] Output [ Document_Type_Description , Document_Type_Name ]"
    },
    {
        "id": "684ca3bf5036b7299fcf64059b474ece74cea4a3f6e7fd650820474059abad3a",
        "question": "Return the description of the document type name 'Film'.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Document_Types ] Predicate [ Document_Type_Name = 'Film' ] Output [ Document_Type_Description , Document_Type_Name ]"
    },
    {
        "id": "0d67544e7a950205719b07c7e6a0a8e9df1c3be0cd7522df1f48e9b71748c539",
        "question": "What is the document type name and the document type description and creation date for all the documents?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Document_Types ] Output [ Document_Type_Code , Document_Type_Description , Document_Type_Name ] ; #2 = Scan Table [ Documents ] Output [ Document_Type_Code , Document_Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Document_Type_Code = #2.Document_Type_Code ] Output [ #2.Document_Date , #1.Document_Type_Name , #1.Document_Type_Description ]"
    },
    {
        "id": "e324f16a5fb0f5d4248b2bf411697a482f6ebd989b0e8dff80fec739eea7a636",
        "question": "Return the type name, type description, and date of creation for each document.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Document_Types ] Output [ Document_Type_Code , Document_Type_Description , Document_Type_Name ] ; #2 = Scan Table [ Documents ] Output [ Document_Type_Code , Document_Date ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Document_Type_Code = #2.Document_Type_Code ] Output [ #2.Document_Date , #1.Document_Type_Name , #1.Document_Type_Description ]"
    },
    {
        "id": "76eb905880f52dbc4153402af2cc59f920ea17fe125cd0572b2b5ae0f463ee65",
        "question": "Show the number of projects.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Projects ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "571b89190d67660804e47b1611890632dd4aaed54d47183dd138b2c7ba7fe24a",
        "question": "How many projects are there?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Projects ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e8569f8e21145df1303fc86fa8ba0e3d8828098dcf213afd477aa69c3af55ddd",
        "question": "List ids and details for all projects.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Projects ] Output [ Project_ID , Project_Details ]"
    },
    {
        "id": "39cc32d8daf7c350d611b313f8e5bc8457e22d3bd7644aa2dabf524ce0393626",
        "question": "What are the ids and details for each project?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Projects ] Output [ Project_ID , Project_Details ]"
    },
    {
        "id": "4479f13b9823a2dc625b33c73c5d9cae0e0a93097fcd5b4122ce90d92235a996",
        "question": "What is the project id and detail for the project with at least two documents?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Project_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Project_ID ] Output [ Project_ID , countstar AS Count_Star ] ; #3 = Scan Table [ Projects ] Output [ Project_ID , Project_Details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Project_ID = #3.Project_ID ] Output [ #3.Project_ID , #3.Project_Details , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ Project_ID , Project_Details ]"
    },
    {
        "id": "2eb9451335047be8b3f19c9565676ae5eda2779b9eae9131fa20effe74c5cfbe",
        "question": "Return the ids and details corresponding to projects for which there are more than two documents.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Project_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Project_ID ] Output [ Project_ID , countstar AS Count_Star ] ; #3 = Scan Table [ Projects ] Output [ Project_ID , Project_Details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Project_ID = #3.Project_ID ] Output [ #3.Project_ID , #3.Project_Details , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ Project_ID , Project_Details ]"
    },
    {
        "id": "a916a8549e3439b0946a264f5399fe8a3dd943a4da175b30b7f64728802505f7",
        "question": "What is the project detail for the project with document \"King Book\"?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Predicate [ Document_Name = 'King Book' ] Output [ Project_ID , Document_Name ] ; #2 = Scan Table [ Projects ] Output [ Project_ID , Project_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Project_ID = #2.Project_ID ] Output [ #2.Project_Details ]"
    },
    {
        "id": "4eaf4c40730bf2cc383d50a413d1c50882ee99cdf6512a98daaaf6f0a2937515",
        "question": "Give the details of the project with the document name 'King Book'.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Predicate [ Document_Name = 'King Book' ] Output [ Project_ID , Document_Name ] ; #2 = Scan Table [ Projects ] Output [ Project_ID , Project_Details ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Project_ID = #2.Project_ID ] Output [ #2.Project_Details ]"
    },
    {
        "id": "7abd4ae34f68b2eb04ebc8ccfc2c1405d771c39651f583a2d6cbc781026cc01e",
        "question": "How many budget types do we have?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Budget_Codes ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cb28aa7f0488f02c98ea4312c8b4ede1320f589fbe8215c76d271fbc00f0d604",
        "question": "Count the number of budget codes.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Budget_Codes ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "9b67eff6e3d78a046b515b509fba91f78f23c0540fbf9eb31ea559ddc10405ba",
        "question": "List all budget type codes and descriptions.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Budget_Codes ] Output [ Budget_Type_Code , Budget_Type_Description ]"
    },
    {
        "id": "fca833c046f64eabb835390fdb9e95e7c20f68b3846c7d760c4eeef71b89ab01",
        "question": "What are the type codes and descriptions of each budget type?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Budget_Codes ] Output [ Budget_Type_Code , Budget_Type_Description ]"
    },
    {
        "id": "e5897ab485714ce59c16458810dc24e86a5f9e8ac47d6b0e19b71cadf66b3284",
        "question": "What is the description for the budget type with code ORG?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Budget_Codes ] Predicate [ Budget_Type_Code = 'ORG' ] Output [ Budget_Type_Code , Budget_Type_Description ]"
    },
    {
        "id": "506a7ff7559640cb2c299794a6dd889533e9a0f07150c30cbe82cf44848ecb2d",
        "question": "Return the description of the budget type that has the code ORG.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Budget_Codes ] Predicate [ Budget_Type_Code = 'ORG' ] Output [ Budget_Type_Code , Budget_Type_Description ]"
    },
    {
        "id": "faec51f62c7bcd665694e3b193e69eb06c65d1d855ddb5dc722157e28a776a23",
        "question": "How many documents have expenses?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents_with_Expenses ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "94475a2a8df010da78b03c076ef8357d0cbefc90935ee5870460d78fa0c743aa",
        "question": "Count the number of documents with expenses.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents_with_Expenses ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "80876fda1cc2322fd311cb9fe2900d6f503a45f2b1fc9760f85237c2dfd4b118",
        "question": "What are the document ids for the budget type code 'SF'?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents_with_Expenses ] Predicate [ Budget_Type_Code = 'SF' ] Output [ Budget_Type_Code , Document_ID ]"
    },
    {
        "id": "09f35a5bfd7ef139d5843b19b5b44420e25716aed75e61dbe9be55459402b2e8",
        "question": "Give the ids of documents with expenses that have the budget code 'SF'.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents_with_Expenses ] Predicate [ Budget_Type_Code = 'SF' ] Output [ Budget_Type_Code , Document_ID ]"
    },
    {
        "id": "5dca4302143b068bf335672a0a9110eef7b876c34c7c9ec28918c9ebd56c56a3",
        "question": "Show the budget type code and description and the corresponding document id.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Budget_Codes ] Output [ Budget_Type_Code , Budget_Type_Description ] ; #2 = Scan Table [ Documents_with_Expenses ] Output [ Budget_Type_Code , Document_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Budget_Type_Code = #2.Budget_Type_Code ] Output [ #2.Document_ID , #1.Budget_Type_Code , #1.Budget_Type_Description ]"
    },
    {
        "id": "12ab28b54c804c7bd3239f249e8dded8969abfa4ef316fa1a45208927b28e1e4",
        "question": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Budget_Codes ] Output [ Budget_Type_Code , Budget_Type_Description ] ; #2 = Scan Table [ Documents_with_Expenses ] Output [ Budget_Type_Code , Document_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Budget_Type_Code = #2.Budget_Type_Code ] Output [ #2.Document_ID , #1.Budget_Type_Code , #1.Budget_Type_Description ]"
    },
    {
        "id": "4324cc6ae57bb2f2347dd88022f7ac3ac27de51b9f166ef394a569ebb52c2658",
        "question": "Show ids for all documents with budget types described as 'Government'.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Budget_Codes ] Predicate [ Budget_Type_Description = 'Government' ] Output [ Budget_Type_Code , Budget_Type_Description ] ; #2 = Scan Table [ Documents_with_Expenses ] Output [ Budget_Type_Code , Document_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Budget_Type_Code = #2.Budget_Type_Code ] Output [ #2.Document_ID ]"
    },
    {
        "id": "7b820abb5909f4da7340586d77f5987129e237fa5d31f44eff7f0f5ca908694d",
        "question": "Give the ids for documents that have the budget description 'Government'.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Ref_Budget_Codes ] Predicate [ Budget_Type_Description = 'Government' ] Output [ Budget_Type_Code , Budget_Type_Description ] ; #2 = Scan Table [ Documents_with_Expenses ] Output [ Budget_Type_Code , Document_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Budget_Type_Code = #2.Budget_Type_Code ] Output [ #2.Document_ID ]"
    },
    {
        "id": "997204a26705dcfbf075101a5439c836d790c61fd144e19240e5ef97f3df81be",
        "question": "Show budget type codes and the number of documents in each budget type.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents_with_Expenses ] Output [ Budget_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Budget_Type_Code ] Output [ Budget_Type_Code , countstar AS Count_Star ]"
    },
    {
        "id": "f771317f806a4dcbd7f2aaa0ab255cab658d7894784880f63181f2ce073c1113",
        "question": "What are the different budget type codes, and how many documents are there for each?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents_with_Expenses ] Output [ Budget_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Budget_Type_Code ] Output [ Budget_Type_Code , countstar AS Count_Star ]"
    },
    {
        "id": "60227271b46018db44d5b54863013d85e1b7109376e79c4e2fe3fecfea1d7927",
        "question": "What is the budget type code with most number of documents.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents_with_Expenses ] Output [ Budget_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Budget_Type_Code ] Output [ Budget_Type_Code , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Budget_Type_Code , Count_Star ]"
    },
    {
        "id": "101a2f965cb8be49d5eec2e813861b4629a908fd55f89b8c855b99a30c2b8de5",
        "question": "Give the budget type code that is most common among documents with expenses.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents_with_Expenses ] Output [ Budget_Type_Code ] ; #2 = Aggregate [ #1 ] GroupBy [ Budget_Type_Code ] Output [ Budget_Type_Code , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Budget_Type_Code , Count_Star ]"
    },
    {
        "id": "157164d4f5f6b0b6c097471309659220a1e35cc4e31aae650c09e3c496d8da71",
        "question": "What are the ids of documents which don't have expense budgets?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Document_ID ] ; #2 = Scan Table [ Documents_with_Expenses ] Output [ Document_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Document_ID = #1.Document_ID ] Output [ #1.Document_ID ]"
    },
    {
        "id": "a94b99aca095672d9d09de575cf83edf9b8304aa489cb615dcce23d8dbe73fd4",
        "question": "Return the ids of documents that do not have expenses.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Document_ID ] ; #2 = Scan Table [ Documents_with_Expenses ] Output [ Document_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Document_ID = #1.Document_ID ] Output [ #1.Document_ID ]"
    },
    {
        "id": "584214e0996ab33359c09615c50e666a5a7f7d7a652e0b771300607d729ea45d",
        "question": "Show ids for all documents in type CV without expense budgets.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Predicate [ Document_Type_Code = 'CV' ] Output [ Document_Type_Code , Document_ID ] ; #2 = Scan Table [ Documents_with_Expenses ] Output [ Document_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Document_ID = #2.Document_ID ] Output [ #1.Document_ID ]"
    },
    {
        "id": "9b3605212948b37d19ff548061203f35bfecffc2f28f34d483041889966e4cee",
        "question": "What are the ids of documents with the type code CV that do not have expenses.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Predicate [ Document_Type_Code = 'CV' ] Output [ Document_Type_Code , Document_ID ] ; #2 = Scan Table [ Documents_with_Expenses ] Output [ Document_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Document_ID = #2.Document_ID ] Output [ #1.Document_ID ]"
    },
    {
        "id": "58a38987fc951b5dc7acca55cdf1f4e527397de3361605d28b1e9d0f8ed2fba7",
        "question": "What are the ids of documents with letter 's' in the name with any expense budgets.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Predicate [ Document_Name like '%s%' ] Output [ Document_Name , Document_ID ] ; #2 = Scan Table [ Documents_with_Expenses ] Output [ Document_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Document_ID = #2.Document_ID ] Output [ #1.Document_ID ]"
    },
    {
        "id": "be0035b21b3473941aed3d0b24cb8cccf95a6a5725e1d764413d0599f01a9426",
        "question": "Give the ids of documents that have expenses and contain the letter s in their names.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Predicate [ Document_Name like '%s%' ] Output [ Document_Name , Document_ID ] ; #2 = Scan Table [ Documents_with_Expenses ] Output [ Document_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Document_ID = #2.Document_ID ] Output [ #1.Document_ID ]"
    },
    {
        "id": "3f4740a43da878d2f4443ad9ca5d7727a7665e9a93e102bc955074d6a054c984",
        "question": "How many documents do not have any expense?",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Document_ID ] ; #2 = Scan Table [ Documents_with_Expenses ] Output [ Document_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Document_ID = #1.Document_ID ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0b5e7f57da5c18df66fa074db84adaafec0d105ca6fe3fc7c8bf03341aa41375",
        "question": "Count the number of documents that do not have expenses.",
        "parsing_tree": "cre_Docs_and_Epenses | #1 = Scan Table [ Documents ] Output [ Document_ID ] ; #2 = Scan Table [ Documents_with_Expenses ] Output [ Document_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Document_ID = #1.Document_ID ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "81bc026cc721a4e422a18601b592c8cefc412ae59460a9b229e7b28b1932a00d",
        "question": "Find the total number of scientists.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "79b96d054f54f6feedaa9e032dd6fbe1e0c03aeab559e2f8c8945b1ba0231c25",
        "question": "How many scientists are there?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6d91d4083b562e220d13c64b03e2537f8c7945fa1393d85b3ea84e2164d3f33d",
        "question": "Find the total hours of all projects.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Output [ Hours ] ; #2 = Aggregate [ #1 ] Output [ SUM(Hours) AS Sum_Hours ]"
    },
    {
        "id": "33f83beff584de19366093013dd121b59a9e72c579bb8172a7a7cab32f125cbc",
        "question": "What is the total number of hours for all projects?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Output [ Hours ] ; #2 = Aggregate [ #1 ] Output [ SUM(Hours) AS Sum_Hours ]"
    },
    {
        "id": "def9ba9e96efca95677f27aca75636390788d1ec54a8611de099e7079d063c58",
        "question": "How many different scientists are assigned to any project?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ AssignedTo ] Output [ Scientist ] ; #2 = Aggregate [ #1 ] GroupBy [ Scientist ] Output [ Scientist ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "d7b0754bc7dd7e8fd0c7294adaddf54714d4145238be84b29f90302738be8933",
        "question": "Count the number of different scientists assigned to any project.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ AssignedTo ] Output [ Scientist ] ; #2 = Aggregate [ #1 ] GroupBy [ Scientist ] Output [ Scientist ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a821562847ab2123e9ba49974f827cdad53fdaf58407d279f2cdc3c20c916042",
        "question": "Find the number of distinct projects.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Distinct [ true ] Output [ Name ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f025e5809646907756a8de46c530bda03d98f208494a71fd595ed93776a2e54d",
        "question": "How many different projects are there?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Distinct [ true ] Output [ Name ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "41b21195ac14d20fd83930bbf8682387a67789f01cc84fdb36b2f546ae204799",
        "question": "Find the average hours of all projects.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Output [ Hours ] ; #2 = Aggregate [ #1 ] Output [ AVG(Hours) AS Avg_Hours ]"
    },
    {
        "id": "b342f0fab46933bfe1c74856a9236232a46fcb445fefb0768faee5525127dfa0",
        "question": "What is the average hours across all projects?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Output [ Hours ] ; #2 = Aggregate [ #1 ] Output [ AVG(Hours) AS Avg_Hours ]"
    },
    {
        "id": "75e336e6c67091b76f817756aea615ee28c3ac3e8ee40307fe48f82ed5ea7413",
        "question": "Find the name of project that continues for the longest time.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Output [ Name , Hours ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Hours DESC ] Output [ Name , Hours ]"
    },
    {
        "id": "4dbdb966192613c130dd811b56bb357347c3bb98bfd14f6932d96c8e76332920",
        "question": "What is the name of the project with the most hours?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Output [ Name , Hours ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Hours DESC ] Output [ Name , Hours ]"
    },
    {
        "id": "d7d81a93f198df9a0d002617dfdfa654a8aba14e9524f2a6eb2fd5b387bbfec0",
        "question": "List the name of all projects that are operated longer than the average working hours of all projects.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Output [ Hours ] ; #2 = Aggregate [ #1 ] Output [ AVG(Hours) AS Avg_Hours ] ; #3 = Scan Table [ Projects ] Output [ Name , Hours ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Hours > #2.Avg_Hours ] Output [ #3.Name ]"
    },
    {
        "id": "1b77e5223b3651de088eef2b8a3f3111e4b3c327a3a7c156055e7fc611f0fed3",
        "question": "What are the names of projects that have taken longer than the average number of hours for all projects?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Output [ Hours ] ; #2 = Aggregate [ #1 ] Output [ AVG(Hours) AS Avg_Hours ] ; #3 = Scan Table [ Projects ] Output [ Name , Hours ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Hours > #2.Avg_Hours ] Output [ #3.Name ]"
    },
    {
        "id": "97b479b53d9ac81afd2f0dad51f956d1beea8678446580f90a95a7ddf7a8d0cd",
        "question": "Find the name and hours of project that has the most number of scientists.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ AssignedTo ] Output [ Project ] ; #2 = Aggregate [ #1 ] GroupBy [ Project ] Output [ Project , countstar AS Count_Star ] ; #3 = Scan Table [ Projects ] Output [ Code , Name , Hours ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Project = #3.Code ] Output [ #3.Name , #3.Hours , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name , Hours ]"
    },
    {
        "id": "1688b41fa96f88b5b56fa83b960bcd10f8308fccf0e8abb1956e78f25e6535f2",
        "question": "What is the name and hours for the project which has the most scientists assigned to it?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ AssignedTo ] Output [ Project ] ; #2 = Aggregate [ #1 ] GroupBy [ Project ] Output [ Project , countstar AS Count_Star ] ; #3 = Scan Table [ Projects ] Output [ Code , Name , Hours ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Project = #3.Code ] Output [ #3.Name , #3.Hours , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name , Hours ]"
    },
    {
        "id": "c6ccb5da4b5dc4a43d92f3bc3bc96e09e516f421992e757737031e40d678f06e",
        "question": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Predicate [ Name like '%Smith%' ] Output [ SSN , Name ] ; #2 = Scan Table [ AssignedTo ] Output [ Project , Scientist ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SSN = #2.Scientist ] Output [ #2.Project ] ; #4 = Scan Table [ Projects ] Output [ Code , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Project = #4.Code ] Output [ #4.Name ]"
    },
    {
        "id": "fc057289407ee9d5df064cc56d021499be84db2c8ff5d87028cf284af77dcb7a",
        "question": "What is the name of the project that has a scientist assigned to it whose name contains 'Smith'?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Predicate [ Name like '%Smith%' ] Output [ SSN , Name ] ; #2 = Scan Table [ AssignedTo ] Output [ Project , Scientist ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SSN = #2.Scientist ] Output [ #2.Project ] ; #4 = Scan Table [ Projects ] Output [ Code , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Project = #4.Code ] Output [ #4.Name ]"
    },
    {
        "id": "487c330b10cbb0c9e1df87cb842e55d7aa959c4ef7e219b317b9dc5fb37f47e0",
        "question": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Predicate [ Name = 'Carol Smith' OR Name = 'Michael Rogers' ] Output [ SSN , Name ] ; #2 = Scan Table [ AssignedTo ] Output [ Project , Scientist ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SSN = #2.Scientist ] Output [ #2.Project ] ; #4 = Scan Table [ Projects ] Output [ Code , Hours ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Project = #4.Code ] Output [ #4.Hours ] ; #6 = Aggregate [ #5 ] Output [ SUM(Hours) AS Sum_Hours ]"
    },
    {
        "id": "942afe654e85453baaff0a3842ce152b29ed70c74ce3917cb86d3fb277e57480",
        "question": "What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Predicate [ Name = 'Carol Smith' OR Name = 'Michael Rogers' ] Output [ SSN , Name ] ; #2 = Scan Table [ AssignedTo ] Output [ Project , Scientist ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SSN = #2.Scientist ] Output [ #2.Project ] ; #4 = Scan Table [ Projects ] Output [ Code , Hours ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Project = #4.Code ] Output [ #4.Hours ] ; #6 = Aggregate [ #5 ] Output [ SUM(Hours) AS Sum_Hours ]"
    },
    {
        "id": "695d0999185c89b05a8fda82c1d32e55ab7592116153674c6e6a3a5111c6b8b5",
        "question": "Find the name of projects that require between 100 and 300 hours of work.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Predicate [ Hours >= 100 AND Hours <= 300 ] Output [ Name , Hours ]"
    },
    {
        "id": "77c0b6243aa62ad98b2269979086f8d28a43b485e6fb929752acf812099da3cf",
        "question": "What are the names of projects that require between 100 and 300 hours?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Predicate [ Hours >= 100 AND Hours <= 300 ] Output [ Name , Hours ]"
    },
    {
        "id": "48c6ae6811b087482916ca706fb5933da426b756efebc91f53079cac67831066",
        "question": "List the names of all scientists sorted in alphabetical order.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "0043e247bcd62e3a47ffd9a5f57977670ad07046e15939d14888236319d26e05",
        "question": "What are the names of all the scientists in alphabetical order?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Name ]"
    },
    {
        "id": "c0442059f20fbc7bfb52b073050461bb478138fcce481d80129fa6f027f8f307",
        "question": "Find the number of scientists involved for each project name.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ AssignedTo ] Output [ Project ] ; #2 = Scan Table [ Projects ] Output [ Code , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Project = #2.Code ] Output [ #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "7ccc79c8a4bb3abc8390d7d66d8715859e743dc3b812854ca6960febe9217f8c",
        "question": "What are the naems of all the projects, and how many scientists were assigned to each of them?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ AssignedTo ] Output [ Project ] ; #2 = Scan Table [ Projects ] Output [ Code , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Project = #2.Code ] Output [ #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "a7c89458393ba46ad6b25c11c52ce50c7681739595e3142c0fb72ba88eb7a6ce",
        "question": "Find the number of scientists involved for the projects that require more than 300 hours.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Predicate [ Hours > 300 ] Output [ Code , Name , Hours ] ; #2 = Scan Table [ AssignedTo ] Output [ Project ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Project ] Output [ #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "6c8a31606711c06b9ac6d3236ec66b81fe47462a43053c3684e499188042c673",
        "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Predicate [ Hours > 300 ] Output [ Code , Name , Hours ] ; #2 = Scan Table [ AssignedTo ] Output [ Project ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Code = #2.Project ] Output [ #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "dbcb6bd545b7fb0169d4f1466b221d3c027f6749fcb8f1dd9ea581f5c6c8a686",
        "question": "Find the number of projects which each scientist is working on and scientist's name.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Output [ SSN , Name ] ; #2 = Scan Table [ AssignedTo ] Output [ Scientist ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SSN = #2.Scientist ] Output [ #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "97620bcc86689ad5bc6e559305b623c9f430c581a9f80c2401155ce8c6253f85",
        "question": "What are the names of the scientists, and how many projects are each of them working on?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Output [ SSN , Name ] ; #2 = Scan Table [ AssignedTo ] Output [ Scientist ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SSN = #2.Scientist ] Output [ #1.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Name ] Output [ countstar AS Count_Star , Name ]"
    },
    {
        "id": "0bec609ccf163c18f2edfeb6bda6ba020b79940816c0db091ad8dfa0f41c0433",
        "question": "Find the name of scientists who are assigned to some project.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Output [ SSN , Name ] ; #2 = Scan Table [ AssignedTo ] Output [ Scientist ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SSN = #2.Scientist ] Output [ #1.Name ]"
    },
    {
        "id": "5231c2b658ff71128e7852c02e70c199f039b4fa46694f5ce528833ad60d053a",
        "question": "What are the names of scientists who are assigned to any project?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Output [ SSN , Name ] ; #2 = Scan Table [ AssignedTo ] Output [ Scientist ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.SSN = #2.Scientist ] Output [ #1.Name ]"
    },
    {
        "id": "e7a0e0262eb9e0a3ca98940f201959689f25e561196d832a979549c4363a003e",
        "question": "Select the project names which are not assigned yet.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Output [ Code , Name ] ; #2 = Scan Table [ AssignedTo ] Output [ Project ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Project = #1.Code ] Output [ #1.Name ]"
    },
    {
        "id": "7ee4e009abc7c1df8055d3b25cc1993249de9255e963afe93ccda42ef299d901",
        "question": "What are the names of projects that have not been assigned?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Projects ] Output [ Code , Name ] ; #2 = Scan Table [ AssignedTo ] Output [ Project ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Project = #1.Code ] Output [ #1.Name ]"
    },
    {
        "id": "549f2e032ca2cb9e998abd733ef8c85d488efbbc6eb7358c764cf1a8a054e155",
        "question": "Find the name of scientists who are not assigned to any project.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Output [ SSN , Name ] ; #2 = Scan Table [ AssignedTo ] Output [ Scientist ] ; #3 = Aggregate [ #2 ] GroupBy [ Scientist ] Output [ Scientist ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Scientist = #1.SSN ] Output [ #1.Name ]"
    },
    {
        "id": "2d83031d583a3a94cc045ca10aea6cf87a3ca48c056f0c6bcea8dfe08f04ed14",
        "question": "What are the names of scientists who have not been assigned a project?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Output [ SSN , Name ] ; #2 = Scan Table [ AssignedTo ] Output [ Scientist ] ; #3 = Aggregate [ #2 ] GroupBy [ Scientist ] Output [ Scientist ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Scientist = #1.SSN ] Output [ #1.Name ]"
    },
    {
        "id": "5139018091885aa0577aab1eb2feb37e99c8cb3a844243e38e9eb1998e3209c0",
        "question": "Find the number of scientists who are not assigned to any project.",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Output [ SSN ] ; #2 = Scan Table [ AssignedTo ] Output [ Scientist ] ; #3 = Aggregate [ #2 ] GroupBy [ Scientist ] Output [ Scientist ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Scientist = #1.SSN ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cdbdfe4407e59e8fe3bfcc109f1a0d92f4e1f05adc3c3e4ff46936907b593f95",
        "question": "How many scientists do not have any projects assigned to them?",
        "parsing_tree": "scientist_1 | #1 = Scan Table [ Scientists ] Output [ SSN ] ; #2 = Scan Table [ AssignedTo ] Output [ Scientist ] ; #3 = Aggregate [ #2 ] GroupBy [ Scientist ] Output [ Scientist ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.Scientist = #1.SSN ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4e938665d2f93ec6923335cc791a675d2d3c8e5e114395c92fda818a96cb7852",
        "question": "What is the name of the highest rated wine?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Score , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Score ASC ] Output [ Score , Name ]"
    },
    {
        "id": "cbf2c673e64d13c4704984759789b1ba8f53afb283fde78fc309f42c6224767e",
        "question": "Give the name of the wine with the highest score.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Score , Name ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Score ASC ] Output [ Score , Name ]"
    },
    {
        "id": "91523462f4ce7a98b60a9945dd79a2fb86acaba44da51d3b8ca0915d9c850876",
        "question": "Which winery is the wine that has the highest score from?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Score , Winery ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Score ASC ] Output [ Score , Winery ]"
    },
    {
        "id": "b3db905470fd8707ecf784103c29612bfc79af53d16f231fa2f8de8e226bd99e",
        "question": "What is the winery at which the wine with the highest score was made?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Score , Winery ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Score ASC ] Output [ Score , Winery ]"
    },
    {
        "id": "0be0b248c213c48cd2dc017ae1656c439415e0635a24531232611de6e57e16f8",
        "question": "Find the names of all wines produced in 2008.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Year = 2008 ] Output [ Name , Year ]"
    },
    {
        "id": "c21721ded08c0f32562cb6696ef7a35190351aebd6607e19dab39ddb5a3af70b",
        "question": "What are the names of all wines produced in 2008?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Year = 2008 ] Output [ Name , Year ]"
    },
    {
        "id": "9c84a3a9e81a92c1113a0c3af8e837045f1da1ebf4df3de78afac6137992f40e",
        "question": "List the grapes and appelations of all wines.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Grape , Appelation ]"
    },
    {
        "id": "22732a7a3b77ab93d273087d999ea898d3b329f5484499258b9fef82366f4d25",
        "question": "What are the grapes and appelations of each wine?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Grape , Appelation ]"
    },
    {
        "id": "b4425ab56298aab59ac5931551b0947d6d4783cf25e707656ccd86e577b8c299",
        "question": "List the names and scores of all wines.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Score , Name ]"
    },
    {
        "id": "b9be115aa7938c3acc3a623b7cfed540751a6c14dd2c1083952d9200999bd00b",
        "question": "What are the names and scores of all wines?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Score , Name ]"
    },
    {
        "id": "5efce930ba0a0ad4fae3a827b0f732910a64a0fb5e50a566eeb10e98f4afa75e",
        "question": "List the area and county of all appelations.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ appellations ] Output [ Area , County ]"
    },
    {
        "id": "01d69e34cdf6243d64399c3f97bb7e5ae1ed3a1ed0b7349581c4a24e87ff3eda",
        "question": "What are the areas and counties for all appelations?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ appellations ] Output [ Area , County ]"
    },
    {
        "id": "6eff17ffdefb831f4f564cdb35202707ac4317030af50ac867d309ccaccfe78f",
        "question": "What are the prices of wines produced before the year of 2010?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Year < 2010 ] Output [ Price , Year ]"
    },
    {
        "id": "59f5ef9048a2ed8d2017f60efed9046aa89a56427a32203e269428778d06e51a",
        "question": "Return the prices of wines produced before 2010.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Year < 2010 ] Output [ Price , Year ]"
    },
    {
        "id": "24742f196bc6f157ebd787e208d77159656b298148af61046a495ab536fb0f70",
        "question": "List the names of all distinct wines that have scores higher than 90.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Score > 90 ] Output [ Score , Name ]"
    },
    {
        "id": "a304676be13889a93aa02cad6e7ca5c1736045eea454066d4336f8cedc6f30c1",
        "question": "What are the names of wines with scores higher than 90?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Score > 90 ] Output [ Score , Name ]"
    },
    {
        "id": "043bcfef0413c4996abe24985b05604c30786a8290aa37fc867735a81a9eed35",
        "question": "List the names of all distinct wines that are made of red color grape.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ grapes ] Predicate [ Color = 'Red' ] Output [ Grape , Color ] ; #2 = Scan Table [ wine ] Output [ Grape , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Grape = #2.Grape ] Distinct [ true ] Output [ #2.Name ]"
    },
    {
        "id": "d9afcc75055ccccc4e57591ac5b7fca3989ef58725d05be44ac3387cc4759fd4",
        "question": "What are the names of wines made from red grapes?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ grapes ] Predicate [ Color = 'Red' ] Output [ Grape , Color ] ; #2 = Scan Table [ wine ] Output [ Grape , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Grape = #2.Grape ] Distinct [ true ] Output [ #2.Name ]"
    },
    {
        "id": "f25ccc26be86d2e1506b4c62fb7bcc6a2330a090250bb94b92b0b97c346a0d20",
        "question": "Find the names of all distinct wines that have appellations in North Coast area.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ appellations ] Predicate [ Area = 'North Coast' ] Output [ Appelation , Area ] ; #2 = Scan Table [ wine ] Output [ Appelation , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Appelation = #2.Appelation ] Distinct [ true ] Output [ #2.Name ]"
    },
    {
        "id": "19070cac6c48134b792bcb5c21fd306ddc23ac99fba5f5d0b66192f4a9a21089",
        "question": "What are the distinct names of wines that have appellations in the North Coast area?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ appellations ] Predicate [ Area = 'North Coast' ] Output [ Appelation , Area ] ; #2 = Scan Table [ wine ] Output [ Appelation , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Appelation = #2.Appelation ] Distinct [ true ] Output [ #2.Name ]"
    },
    {
        "id": "4fbd8267e963088802199f563f436df6e67edbbab2748c2fd781ada587718586",
        "question": "How many wines are produced at Robert Biale winery?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Winery = 'Robert Biale' ] Output [ Winery ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "eac50961ade37dac6f9422b4148c338cc6a6226392b89d765369bdc60f260d41",
        "question": "Count the number of wines produced at Robert Biale winery.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Winery = 'Robert Biale' ] Output [ Winery ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1656639b3c1fbeeb23b8d52cd12ac84fb2a6ba7d3a28e18bdb2e8a136727f598",
        "question": "How many appelations are in Napa Country?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ appellations ] Predicate [ County = 'Napa' ] Output [ County ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "941662cf45a17e2591deafc7b07ad1906ec354ad1dc93e365b186bcc6b255ef2",
        "question": "Count the number of appelations in Napa County.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ appellations ] Predicate [ County = 'Napa' ] Output [ County ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5ac44379eb9c33c4f7e6a89bba605d81a3f4dd02338925df7aa3ee523b5246a6",
        "question": "Give me the average prices of wines that are produced by appelations in Sonoma County.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ appellations ] Predicate [ County = 'Sonoma' ] Output [ Appelation , County ] ; #2 = Scan Table [ wine ] Output [ Price , Appelation ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Appelation = #2.Appelation ] Output [ #2.Price ] ; #4 = Aggregate [ #3 ] Output [ AVG(Price) AS Avg_Price ]"
    },
    {
        "id": "e693e0a9a9c9df11059d548ebd7eec2cc094251ae22b20a9a254e45a20f73659",
        "question": "What is the average price of wines produced in appelations in Sonoma County?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ appellations ] Predicate [ County = 'Sonoma' ] Output [ Appelation , County ] ; #2 = Scan Table [ wine ] Output [ Price , Appelation ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Appelation = #2.Appelation ] Output [ #2.Price ] ; #4 = Aggregate [ #3 ] Output [ AVG(Price) AS Avg_Price ]"
    },
    {
        "id": "2a96bdaf051c3cc012d4c258d0f19382a65d9e228eb0e7357094fca1ba9dd7d0",
        "question": "What are the names and scores of wines that are made of white color grapes?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ grapes ] Predicate [ Color = 'White' ] Output [ Grape , Color ] ; #2 = Scan Table [ wine ] Output [ Grape , Score , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Grape = #2.Grape ] Output [ #2.Name , #2.Score ]"
    },
    {
        "id": "42249dc576c7d5e59b620a028b886d5041df2fa226c0298f3ca72838298e643a",
        "question": "Give the names and scores of wines made from white grapes.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ grapes ] Predicate [ Color = 'White' ] Output [ Grape , Color ] ; #2 = Scan Table [ wine ] Output [ Grape , Score , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Grape = #2.Grape ] Output [ #2.Name , #2.Score ]"
    },
    {
        "id": "c400a8b2468daf7e76f7a1cf464777a1f5988e2efb867af1cec637d487859f8e",
        "question": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Year < 2005 ] Output [ Price , Appelation , Year ] ; #2 = Scan Table [ appellations ] Predicate [ Area = 'Central Coast' ] Output [ Appelation , Area ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Appelation = #2.Appelation ] Output [ #1.Price ] ; #4 = Aggregate [ #3 ] Output [ MAX(Price) AS Max_Price ]"
    },
    {
        "id": "af389fab08d021ed96e9c7d5a980a189184360ebb7eb58c179dd412cd4a5f9c0",
        "question": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Year < 2005 ] Output [ Price , Appelation , Year ] ; #2 = Scan Table [ appellations ] Predicate [ Area = 'Central Coast' ] Output [ Appelation , Area ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Appelation = #2.Appelation ] Output [ #1.Price ] ; #4 = Aggregate [ #3 ] Output [ MAX(Price) AS Max_Price ]"
    },
    {
        "id": "381e69d295ca82eb84e1ea96e9bd87277870c2a0d8afccfb52ba83beb485bf3a",
        "question": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ grapes ] Predicate [ Color = 'White' ] Output [ Grape , Color ] ; #2 = Scan Table [ wine ] Predicate [ Score > 90 ] Output [ Grape , Score ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Grape = #2.Grape ] Output [ #1.Grape ]"
    },
    {
        "id": "83d4ec8cc86af78577a320900a040e9a2e7deb726b0cbcf16046215c86e9691a",
        "question": "Find the white grape used to produce wines with scores above 90.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ grapes ] Predicate [ Color = 'White' ] Output [ Grape , Color ] ; #2 = Scan Table [ wine ] Predicate [ Score > 90 ] Output [ Grape , Score ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Grape = #2.Grape ] Output [ #1.Grape ]"
    },
    {
        "id": "b10aa979fc9ac1dcdb49bb032adf9deb2cf5c1e745f12bc07d0558347051d850",
        "question": "What are the wines that have prices higher than 50 and made of Red color grapes?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ grapes ] Predicate [ Color = 'Red' ] Output [ Grape , Color ] ; #2 = Scan Table [ wine ] Predicate [ Price > 50 ] Output [ Grape , Name , Price ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Grape = #2.Grape ] Output [ #2.Name ]"
    },
    {
        "id": "57977af1086f6450ff7a6ba607e1c934d7aa8fa0372c1ad1a409bad6d8a2d65f",
        "question": "What are the names of wines made from red grapes and with prices above 50?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ grapes ] Predicate [ Color = 'Red' ] Output [ Grape , Color ] ; #2 = Scan Table [ wine ] Predicate [ Price > 50 ] Output [ Grape , Name , Price ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Grape = #2.Grape ] Output [ #2.Name ]"
    },
    {
        "id": "0143aec3daaae25dc43a858a78dd9cde77c5c1a4734588e3623851f9881ffb8d",
        "question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ appellations ] Predicate [ County = 'Monterey' ] Output [ Appelation , County ] ; #2 = Scan Table [ wine ] Predicate [ Price < 50 ] Output [ Price , Appelation , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Appelation = #2.Appelation ] Output [ #2.Name ]"
    },
    {
        "id": "d7c3bde694f1124e10c25d1a996afdfca2680078e7fcc796cc2d2e93c1b3e4df",
        "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ appellations ] Predicate [ County = 'Monterey' ] Output [ Appelation , County ] ; #2 = Scan Table [ wine ] Predicate [ Price < 50 ] Output [ Price , Appelation , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Appelation = #2.Appelation ] Output [ #2.Name ]"
    },
    {
        "id": "2ab3be78f5d179f874a152438e458750f77f630f3b542611c8c07fc01f30c360",
        "question": "What are the numbers of wines for different grapes?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Grape ] ; #2 = Aggregate [ #1 ] GroupBy [ Grape ] Output [ Grape , countstar AS Count_Star ]"
    },
    {
        "id": "3c479323b6a501916331091a9c0500e3ff2dae3cb2056e3c879ac6f41182eae1",
        "question": "How many wines are there for each grape?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Grape ] ; #2 = Aggregate [ #1 ] GroupBy [ Grape ] Output [ Grape , countstar AS Count_Star ]"
    },
    {
        "id": "a728d2357bacda2b31699ca030e288dcc41c8606921fdeb2411f42805fa02ef7",
        "question": "What are the average prices of wines for different years?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Price , Year ] ; #2 = Aggregate [ #1 ] GroupBy [ Year ] Output [ AVG(Price) AS Avg_Price , Year ]"
    },
    {
        "id": "1ea87c44f77c8089ecc8685d2b5cb3630a46292427626dc2ad573493b83bfe19",
        "question": "What is the average prices of wines for each each?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Price , Year ] ; #2 = Aggregate [ #1 ] GroupBy [ Year ] Output [ AVG(Price) AS Avg_Price , Year ]"
    },
    {
        "id": "20e2c85051dbb7c8770e0c286b05d3937932fde3b27520b3320a3b56f0a61427",
        "question": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Winery = 'John Anthony' ] Output [ Price , Winery ] ; #2 = Aggregate [ #1 ] Output [ MIN(Price) AS Min_Price ] ; #3 = Scan Table [ wine ] Output [ Price , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Price > #2.Min_Price ] Distinct [ true ] Output [ #3.Name ]"
    },
    {
        "id": "1d344239abae9aebd52f00c916c4ad3573df2cb0af9055cab21dccb77c5f986c",
        "question": "What are the distinct names of wines with prices higher than any wine from John Anthony winery.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Winery = 'John Anthony' ] Output [ Price , Winery ] ; #2 = Aggregate [ #1 ] Output [ MIN(Price) AS Min_Price ] ; #3 = Scan Table [ wine ] Output [ Price , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Price > #2.Min_Price ] Distinct [ true ] Output [ #3.Name ]"
    },
    {
        "id": "616beb1b11ca59795812e12bd398b27355727e7ae4bf3146cee8b776a6ef2f1d",
        "question": "List the names of all distinct wines in alphabetical order.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Distinct [ true ] Output [ Name ]"
    },
    {
        "id": "4cf4c18ad00ef14aee991724043344e506dbe172345fa3e3a82582739b3f1ee1",
        "question": "What are the names of wines, sorted in alphabetical order?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Name ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Distinct [ true ] Output [ Name ]"
    },
    {
        "id": "ac220b02d7c5ee8145295d00814c720e10881d1cc3399c722d837b4a3b437f87",
        "question": "List the names of all distinct wines ordered by price.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Price , Name ] ; #2 = Sort [ #1 ] OrderBy [ Price ASC ] Distinct [ true ] Output [ Price , Name ]"
    },
    {
        "id": "1aca9f0daf435280773283de5a5af7b6bced4d8937340847b627c6f8976dec67",
        "question": "What are the names of wines, sorted by price ascending?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Price , Name ] ; #2 = Sort [ #1 ] OrderBy [ Price ASC ] Distinct [ true ] Output [ Price , Name ]"
    },
    {
        "id": "49dfa431b1fd557329a7903f0ea85ed6b173d0b82898082b9e97cddb9010774d",
        "question": "What is the color of the grape whose wine products has the highest average price?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Grape , Price ] ; #2 = Aggregate [ #1 ] GroupBy [ Grape ] Output [ Grape , AVG(Price) AS Avg_Price ] ; #3 = Scan Table [ grapes ] Output [ Grape , Color ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Grape = #3.Grape ] Output [ #3.Color , #2.Avg_Price ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_Price DESC ] Output [ Color , Avg_Price ]"
    },
    {
        "id": "2ab4b003dd63de52dad7914c6c3e7c5ab6788cd36d4788937d9a25fe883d7881",
        "question": "Give the color of the grape whose wine products have the highest average price?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Grape , Price ] ; #2 = Aggregate [ #1 ] GroupBy [ Grape ] Output [ Grape , AVG(Price) AS Avg_Price ] ; #3 = Scan Table [ grapes ] Output [ Grape , Color ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Grape = #3.Grape ] Output [ #3.Color , #2.Avg_Price ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Avg_Price DESC ] Output [ Color , Avg_Price ]"
    },
    {
        "id": "2ec3620dbd0569adf68d23ab8b1aed933251082fe109a72eed1ace3b6040adff",
        "question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Year < 2000 OR Year > 2010 ] Distinct [ true ] Output [ Name ]"
    },
    {
        "id": "42f173784f42233a1c9e35b1cb6c8c7bccd96eec4b574070178b604e09757bda",
        "question": "Give the distinct names of wines made before 2000 or after 2010.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Year < 2000 OR Year > 2010 ] Distinct [ true ] Output [ Name ]"
    },
    {
        "id": "9fc410563aa5a98c373762b20ea610d5dbeb228da3bde36ba9bd3ca8bf168b19",
        "question": "Find the distinct winery of wines having price between 50 and 100.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Price >= 50 AND Price <= 100 ] Distinct [ true ] Output [ Winery ]"
    },
    {
        "id": "943ac9d574dec1d78ebbb0b00b4f6f42ea8275fc322feae1c113efe17a38eac6",
        "question": "What are the distinct wineries which produce wines costing between 50 and 100?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Price >= 50 AND Price <= 100 ] Distinct [ true ] Output [ Winery ]"
    },
    {
        "id": "4c0c6c278b0761a5c4f15311ff89bdbea330afe7670c3cbe081ed0ab189e1175",
        "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Year = 2009 AND Grape = 'Zinfandel' ] Output [ Price , Grape , Year , Cases ] ; #2 = Aggregate [ #1 ] Output [ AVG(Price) AS Avg_Price , AVG(Cases) AS Avg_Cases ]"
    },
    {
        "id": "03cec056c58f45466bc4493032a14195e09ccf490e25e87141a3d8f8fc12e81a",
        "question": "Give the average price and case of wines made from Zinfandel grapes in the year 2009.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Year = 2009 AND Grape = 'Zinfandel' ] Output [ Price , Grape , Year , Cases ] ; #2 = Aggregate [ #1 ] Output [ AVG(Price) AS Avg_Price , AVG(Cases) AS Avg_Cases ]"
    },
    {
        "id": "2e2dcfe8503a20089d2e189ad2f66b25cfbb2ae08f56aba4f92cf7cdc518c05b",
        "question": "What are the maximum price and score of wines produced by St. Helena appelation?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Appelation = 'St. Helena' ] Output [ Price , Appelation , Score ] ; #2 = Aggregate [ #1 ] Output [ MAX(Score) AS Max_Score , MAX(Price) AS Max_Price ]"
    },
    {
        "id": "d1b48e004e580ac877f5fbbec490dcdec2b101f3c8f43dcb52777dd528e594e0",
        "question": "Give the maximum price and score for wines produced in the appelation St. Helena.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Appelation = 'St. Helena' ] Output [ Price , Appelation , Score ] ; #2 = Aggregate [ #1 ] Output [ MAX(Score) AS Max_Score , MAX(Price) AS Max_Price ]"
    },
    {
        "id": "a042cc439b7b93e766b108e9838df620a9f765f93502ea540359dd158d396ddc",
        "question": "What are the maximum price and score of wines in each year?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Price , Score , Year ] ; #2 = Aggregate [ #1 ] GroupBy [ Year ] Output [ MAX(Score) AS Max_Score , MAX(Price) AS Max_Price , Year ]"
    },
    {
        "id": "7da500b5fc54c982d2c0f49a56dfe494d46e690f8adf622ef9692c5a3d894a1c",
        "question": "What are the maximum price and score of wines for each year?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Price , Score , Year ] ; #2 = Aggregate [ #1 ] GroupBy [ Year ] Output [ MAX(Score) AS Max_Score , MAX(Price) AS Max_Price , Year ]"
    },
    {
        "id": "fb8b76244604b049aadfd888be23650d8d0f0932a5497fb94a8f97497f4de7d5",
        "question": "Find the wineries that have at least four wines.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Winery ] ; #2 = Aggregate [ #1 ] GroupBy [ Winery ] Output [ countstar AS Count_Star , Winery ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 4 ] Output [ Winery ]"
    },
    {
        "id": "f1e21971f46c74c1f02fd3cb6fcd19d1accad4b97f508d4e6707be4b47355cc6",
        "question": "Which wineries produce at least four wines?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Winery ] ; #2 = Aggregate [ #1 ] GroupBy [ Winery ] Output [ countstar AS Count_Star , Winery ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 4 ] Output [ Winery ]"
    },
    {
        "id": "6e9592b5cbba2813b6487e0c6bd57f452f935a2c7f6ab2aba867b89a95319760",
        "question": "Find the country of all appelations who have at most three wines.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Appelation ] ; #2 = Aggregate [ #1 ] GroupBy [ Appelation ] Output [ countstar AS Count_Star , Appelation ] ; #3 = Scan Table [ appellations ] Output [ Appelation , County ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Appelation = #3.Appelation ] Output [ #3.County , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star <= 3 ] Output [ County ]"
    },
    {
        "id": "30b31636cf04541442bdfbba9291f120407a35b6bdc5e762f053e38a53e016d4",
        "question": "What are the countries for appelations with at most 3 wines?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Appelation ] ; #2 = Aggregate [ #1 ] GroupBy [ Appelation ] Output [ countstar AS Count_Star , Appelation ] ; #3 = Scan Table [ appellations ] Output [ Appelation , County ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Appelation = #3.Appelation ] Output [ #3.County , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star <= 3 ] Output [ County ]"
    },
    {
        "id": "2e3b2951c58086c2f9ba73ef539f81f4d9d6049c496771492d35ff21398c2c1a",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Winery = 'Brander' ] Output [ Year , Winery ] ; #2 = Aggregate [ #1 ] Output [ MIN(Year) AS Min_Year ] ; #3 = Scan Table [ wine ] Output [ Name , Year ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Year < #2.Min_Year ] Output [ #3.Name ]"
    },
    {
        "id": "36867722ce0d4c22cae5e2b4242500a0eb12c53c4ee3d020ec1655453da28d3a",
        "question": "What are the names of wines produced before any wine from the Brander winery?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Winery = 'Brander' ] Output [ Year , Winery ] ; #2 = Aggregate [ #1 ] Output [ MIN(Year) AS Min_Year ] ; #3 = Scan Table [ wine ] Output [ Name , Year ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Year < #2.Min_Year ] Output [ #3.Name ]"
    },
    {
        "id": "fd3791d3f877cf6be880642cedffc163aa67c7474ed2eb301fe00dc3cd77fbca",
        "question": "What are the names of wines that are more expensive then all wines made in the year 2006?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Year = 2006 ] Output [ Price , Year ] ; #2 = Aggregate [ #1 ] Output [ MAX(Price) AS Max_Price ] ; #3 = Scan Table [ wine ] Output [ Price , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Price > #2.Max_Price ] Output [ #3.Name ]"
    },
    {
        "id": "cd7050b7d62fefda09192ed4f840ae693ff63d2d8adc2579911fc5f60fbcd3b2",
        "question": "Give the names of wines with prices above any wine produced in 2006.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Year = 2006 ] Output [ Price , Year ] ; #2 = Aggregate [ #1 ] Output [ MAX(Price) AS Max_Price ] ; #3 = Scan Table [ wine ] Output [ Price , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Price > #2.Max_Price ] Output [ #3.Name ]"
    },
    {
        "id": "eac791ab541a763693ae63f2a0f845bdd037e33441ffe7012024342832bb85ea",
        "question": "Find the top 3 wineries with the greatest number of wines made of white color grapes.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ grapes ] Predicate [ Color = 'White' ] Output [ Grape , Color ] ; #2 = Scan Table [ wine ] Output [ Grape , Winery ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Grape = #2.Grape ] Output [ #2.Winery ] ; #4 = Aggregate [ #3 ] GroupBy [ Winery ] Output [ countstar AS Count_Star , Winery ] ; #5 = TopSort [ #4 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Winery ]"
    },
    {
        "id": "3e647e0fda91fc3f02d51c30527d91f44affdd8e0a36a4fe298864f52d4384e5",
        "question": "Which 3 wineries produce the most wines made from white grapes?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ grapes ] Predicate [ Color = 'White' ] Output [ Grape , Color ] ; #2 = Scan Table [ wine ] Output [ Grape , Winery ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Grape = #2.Grape ] Output [ #2.Winery ] ; #4 = Aggregate [ #3 ] GroupBy [ Winery ] Output [ countstar AS Count_Star , Winery ] ; #5 = TopSort [ #4 ] Rows [ 3 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Winery ]"
    },
    {
        "id": "5dce7696fdd3d2a7c328993a67f7d07c7a8137ad68f47fbad3e44ecd2b7c9cd5",
        "question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Price > 100 ] Output [ Grape , Year , Winery , Price ] ; #2 = Sort [ #1 ] OrderBy [ Year ASC ] Output [ Grape , Year , Winery ]"
    },
    {
        "id": "8bd2c7eb4ed55a8024dc74ac6b4a28b176fa24ad571ff0b62200fc617676b7b2",
        "question": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Price > 100 ] Output [ Grape , Year , Winery , Price ] ; #2 = Sort [ #1 ] OrderBy [ Year ASC ] Output [ Grape , Year , Winery ]"
    },
    {
        "id": "84e83088cea2ba19a468dd666333a7b31cef9960ed96c4474a548e7dcee40174",
        "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Score > 93 ] Output [ Grape , Appelation , Name , Score ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Grape , Appelation , Name ]"
    },
    {
        "id": "059ef3a71b16509caeee7290cf50a88d6ee0badabf370d461b42ee489adb3607",
        "question": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Predicate [ Score > 93 ] Output [ Grape , Appelation , Name , Score ] ; #2 = Sort [ #1 ] OrderBy [ Name ASC ] Output [ Grape , Appelation , Name ]"
    },
    {
        "id": "2143ff35d388d65b112f63778115233513f1df24b924008d30308e62f488a401",
        "question": "Find the average price of wines that are not produced from Sonoma county.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Price , Appelation ] ; #2 = Scan Table [ appellations ] Predicate [ County = 'Sonoma' ] Output [ Appelation , County ] ; #3 = Scan Table [ wine ] Output [ Appelation ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Appelation = #2.Appelation ] Output [ #2.Appelation , #2.County ] ; #5 = Top [ #4 ] Rows [ 1 ] Output [ Appelation , County ] ; #6 = Except [ #1 , #5 ] Predicate [ #1.Appelation IS NULL ] Output [ #1.Appelation , #1.Price ] ; #7 = Scan Table [ appellations ] Predicate [ County = 'Sonoma' ] Output [ Appelation , County ] ; #8 = Scan Table [ wine ] Output [ Appelation ] ; #9 = Intersect [ #7 , #8 ] Predicate [ #8.Appelation = #7.Appelation ] Output [ #7.Appelation ] ; #10 = Except [ #6 , #9 ] Predicate [ #9.Appelation = #6.Appelation ] Output [ #6.Price ] ; #11 = Aggregate [ #10 ] Output [ AVG(Price) AS Avg_Price ]"
    },
    {
        "id": "5bae63b2452a1d2282bfc263397365bf7e2b49122f0c0f67d0862d1e5bb09096",
        "question": "What is the average price for wines not produced in Sonoma county?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ wine ] Output [ Price , Appelation ] ; #2 = Scan Table [ appellations ] Predicate [ County = 'Sonoma' ] Output [ Appelation , County ] ; #3 = Scan Table [ wine ] Output [ Appelation ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Appelation = #2.Appelation ] Output [ #2.Appelation , #2.County ] ; #5 = Top [ #4 ] Rows [ 1 ] Output [ Appelation , County ] ; #6 = Except [ #1 , #5 ] Predicate [ #1.Appelation IS NULL ] Output [ #1.Appelation , #1.Price ] ; #7 = Scan Table [ appellations ] Predicate [ County = 'Sonoma' ] Output [ Appelation , County ] ; #8 = Scan Table [ wine ] Output [ Appelation ] ; #9 = Intersect [ #7 , #8 ] Predicate [ #8.Appelation = #7.Appelation ] Output [ #7.Appelation ] ; #10 = Except [ #6 , #9 ] Predicate [ #9.Appelation = #6.Appelation ] Output [ #6.Price ] ; #11 = Aggregate [ #10 ] Output [ AVG(Price) AS Avg_Price ]"
    },
    {
        "id": "5c44fe5adb4b66ed77a6d8d43697705e5cdc61ba6e15c18c4962fe6569919a2a",
        "question": "Find the county where produces the most number of wines with score higher than 90.",
        "parsing_tree": "wine_1 | #1 = Scan Table [ appellations ] Output [ Appelation , County ] ; #2 = Scan Table [ wine ] Predicate [ Score > 90 ] Output [ Appelation , Score ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Appelation = #2.Appelation ] Output [ #1.County ] ; #4 = Aggregate [ #3 ] GroupBy [ County ] Output [ countstar AS Count_Star , County ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , County ]"
    },
    {
        "id": "2c04b28626d880ad1ef35c8c4cb8ceb0603c870278d7a9b65ba54141a169876d",
        "question": "What is the county that produces the most wines scoring higher than 90?",
        "parsing_tree": "wine_1 | #1 = Scan Table [ appellations ] Output [ Appelation , County ] ; #2 = Scan Table [ wine ] Predicate [ Score > 90 ] Output [ Appelation , Score ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Appelation = #2.Appelation ] Output [ #1.County ] ; #4 = Aggregate [ #3 ] GroupBy [ County ] Output [ countstar AS Count_Star , County ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , County ]"
    },
    {
        "id": "e73dccc3e368624bfbf638bd6f3382547e67531f8c9adb768e3296499d3a341e",
        "question": "How many train stations are there?",
        "parsing_tree": "train_station | #1 = Scan Table [ station ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "be347c1fb93f75dd486c1a58b8a22bde79e4311f0ec3ec6eb455ca70f8457d10",
        "question": "Show the name, location, and number of platforms for all stations.",
        "parsing_tree": "train_station | #1 = Scan Table [ station ] Output [ Location , Number_of_Platforms , Name ]"
    },
    {
        "id": "bc65d9dcc0658b8880056597aaca31654305fb182bc5e7f6e3a2ea181972d03d",
        "question": "What are all locations of train stations?",
        "parsing_tree": "train_station | #1 = Scan Table [ station ] Distinct [ true ] Output [ Location ]"
    },
    {
        "id": "bdb690c75dcd016f35d8845c9ec1c120245765503c62becbd72d591290a2b515",
        "question": "Show the names and total passengers for all train stations not in London.",
        "parsing_tree": "train_station | #1 = Scan Table [ station ] Predicate [ Location <> 'London' ] Output [ Total_Passengers , Location , Name ]"
    },
    {
        "id": "01c394f5c60dc1d698213709db4aa6e3b5eb1c8cfa6d035a259f49ba7cfe11d2",
        "question": "Show the names and main services for train stations that have the top three total number of passengers.",
        "parsing_tree": "train_station | #1 = Scan Table [ station ] Output [ Total_Passengers , Main_Services , Name ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ Total_Passengers DESC ] Output [ Total_Passengers , Main_Services , Name ]"
    },
    {
        "id": "a460a492c9bd304f3c4cea26d08a2727e99362e321bd2e32205d92be5b3b6751",
        "question": "What is the average and maximum number of total passengers for train stations in London or Glasgow?",
        "parsing_tree": "train_station | #1 = Scan Table [ station ] Predicate [ Location = 'Glasgow' OR Location = 'London' ] Output [ Total_Passengers , Location ] ; #2 = Aggregate [ #1 ] Output [ AVG(Total_Passengers) AS Avg_Total_Passengers , MAX(Total_Passengers) AS Max_Total_Passengers ]"
    },
    {
        "id": "0f7f821814864e6eabd5e098ce9f3c9bd9f05daeb0f0fc843a8c582f0d7966ff",
        "question": "Show all locations and the total number of platforms and passengers for all train stations in each location.",
        "parsing_tree": "train_station | #1 = Scan Table [ station ] Output [ Total_Passengers , Location , Number_of_Platforms ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ Location , SUM(Number_of_Platforms) AS Sum_Number_of_Platforms , SUM(Total_Passengers) AS Sum_Total_Passengers ]"
    },
    {
        "id": "9fad310ecc012c783e332e111e098186f91e51d1015e2c1c63707c7447497141",
        "question": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.",
        "parsing_tree": "train_station | #1 = Scan Table [ station ] Predicate [ Number_of_Platforms >= 15 AND Total_Passengers > 25.0 ] Distinct [ true ] Output [ Location ]"
    },
    {
        "id": "85fd94b719e30b148a7b3c6cb1e0bf19580d18ba8ae7e84f60f2504e061c8538",
        "question": "Show all locations which don't have a train station with at least 15 platforms.",
        "parsing_tree": "train_station | #1 = Scan Table [ station ] Distinct [ true ] Output [ Location ] ; #2 = Scan Table [ station ] Predicate [ Number_of_Platforms >= 15 ] Output [ Location , Number_of_Platforms ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Location = #2.Location ] Output [ #1.Location ]"
    },
    {
        "id": "bbefc944a844ff2c5390a0899c25b9263ccfa62b1325a701a52f3435cdf044d3",
        "question": "Show the location with most number of train stations.",
        "parsing_tree": "train_station | #1 = Scan Table [ station ] Output [ Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Location ]"
    },
    {
        "id": "e775c6cd938236f6dd1b51dfdb22759bc8c63756615b58a13379f896a0dc796a",
        "question": "Show the name, time, and service for all trains.",
        "parsing_tree": "train_station | #1 = Scan Table [ train ] Output [ Service , Name , Time ]"
    },
    {
        "id": "2a9eff5a70c0891f6117aca18b1cbc5471ddfbdd758dc7937f2606f5750bd4a7",
        "question": "Show the number of trains",
        "parsing_tree": "train_station | #1 = Scan Table [ train ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "441823ec721bf8fc9f86233cd34e611f0e610d5be1b499817c41253ff4e2aa6f",
        "question": "Show the name and service for all trains in order by time.",
        "parsing_tree": "train_station | #1 = Scan Table [ train ] Output [ Service , Name , Time ] ; #2 = Sort [ #1 ] OrderBy [ Time ASC ] Output [ Service , Name , Time ]"
    },
    {
        "id": "96c4db851f946cd7f8069dfd6a13a89b75dae6e3fe1b64aa2fdc5709f3db2374",
        "question": "Show the station name and number of trains in each station.",
        "parsing_tree": "train_station | #1 = Scan Table [ train_station ] Output [ Station_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Station_ID ] Output [ countstar AS Count_Star , Station_ID ] ; #3 = Scan Table [ station ] Output [ Station_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Station_ID = #3.Station_ID ] Output [ #3.Name , #2.Count_Star ]"
    },
    {
        "id": "8883e287c265f341aa3b77c07e22392ef104f0ea4b0fb0ef36237a4c1c8442ce",
        "question": "Show all train names and times in stations in London in descending order by train time.",
        "parsing_tree": "train_station | #1 = Scan Table [ station ] Predicate [ Location = 'London' ] Output [ Location , Station_ID ] ; #2 = Scan Table [ train_station ] Output [ Train_ID , Station_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Station_ID = #2.Station_ID ] Output [ #2.Train_ID ] ; #4 = Scan Table [ train ] Output [ Train_ID , Name , Time ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Train_ID = #4.Train_ID ] Output [ #4.Name , #4.Time ] ; #6 = Sort [ #5 ] OrderBy [ Time DESC ] Output [ Name , Time ]"
    },
    {
        "id": "88fc5c259061dace2aedc2e2eddfa222ffdbd45700f2c15303f35d60c53862c2",
        "question": "Show the station name with greatest number of trains.",
        "parsing_tree": "train_station | #1 = Scan Table [ train_station ] Output [ Station_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Station_ID ] Output [ countstar AS Count_Star , Station_ID ] ; #3 = Scan Table [ station ] Output [ Station_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Station_ID = #3.Station_ID ] Output [ #3.Name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]"
    },
    {
        "id": "4e89f6530703c09385df0b085c1aa65730a20e0cb22a4ae0eca0f57df069b863",
        "question": "Show the station name with at least two trains.",
        "parsing_tree": "train_station | #1 = Scan Table [ train_station ] Output [ Station_ID ] ; #2 = Aggregate [ #1 ] GroupBy [ Station_ID ] Output [ countstar AS Count_Star , Station_ID ] ; #3 = Scan Table [ station ] Output [ Station_ID , Name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Station_ID = #3.Station_ID ] Output [ #3.Name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Name ]"
    },
    {
        "id": "9385f19b7f018a6ad27f84c934f0183403e7029629bf0987b079353239949b4b",
        "question": "Show all locations with only 1 station.",
        "parsing_tree": "train_station | #1 = Scan Table [ station ] Output [ Location ] ; #2 = Aggregate [ #1 ] GroupBy [ Location ] Output [ countstar AS Count_Star , Location ] ; #3 = Filter [ #2 ] Predicate [ Count_Star = 1 ] Output [ Location ]"
    },
    {
        "id": "5baffd6d6f882ecf4ba113904e0d37233fa7d38556417f21d10dee86a81afa17",
        "question": "Show station names without any trains.",
        "parsing_tree": "train_station | #1 = Scan Table [ station ] Output [ Station_ID , Name ] ; #2 = Scan Table [ train_station ] Output [ Station_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Station_ID = #1.Station_ID ] Output [ #1.Name ]"
    },
    {
        "id": "f1c2001dbbd7d0f282ad0f6e85970cbbde31232b1424fbbbf7ab66bea8eca084",
        "question": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?",
        "parsing_tree": "train_station | #1 = Scan Table [ train ] Predicate [ Name = 'Ananthapuri Express' ] Output [ Train_ID , Name ] ; #2 = Scan Table [ train_station ] Output [ Train_ID , Station_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Train_ID = #2.Train_ID ] Output [ #2.Station_ID ] ; #4 = Scan Table [ station ] Output [ Station_ID , Name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.Station_ID = #4.Station_ID ] Distinct [ true ] Output [ #4.Name ] ; #6 = Scan Table [ train ] Predicate [ Name = 'Guruvayur Express' ] Output [ Train_ID , Name ] ; #7 = Scan Table [ train_station ] Output [ Train_ID , Station_ID ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.Train_ID = #7.Train_ID ] Output [ #7.Station_ID ] ; #9 = Scan Table [ station ] Output [ Station_ID , Name ] ; #10 = Join [ #8 , #9 ] Predicate [ #8.Station_ID = #9.Station_ID ] Output [ #9.Name ] ; #11 = Intersect [ #5 , #10 ] Predicate [ #5.Name = #10.Name ] Output [ #5.Name ]"
    },
    {
        "id": "04028e422bc1c48a3db5e290b344b527c601a9c7cbd45044a43acfedf67fd84d",
        "question": "Find the names of the trains that do not pass any station located in London.",
        "parsing_tree": "train_station | #1 = Scan Table [ train_station ] Output [ Train_ID , Station_ID ] ; #2 = Scan Table [ station ] Predicate [ Location = 'London' ] Output [ Location , Station_ID ] ; #3 = Scan Table [ train_station ] Output [ Station_ID ] ; #4 = Intersect [ #2 , #3 ] Predicate [ #2.Station_ID = #3.Station_ID ] Output [ #2.Station_ID ] ; #5 = Except [ #1 , #4 ] Predicate [ #4.Station_ID = #1.Station_ID ] Output [ #1.Train_ID ] ; #6 = Scan Table [ train ] Output [ Train_ID , Name ] ; #7 = Join [ #5 , #6 ] Predicate [ #5.Train_ID = #6.Train_ID ] Output [ #6.Name ]"
    },
    {
        "id": "b2ea87226aa1af2345509b8e8919d59ddde1af9d2e5109727d25abe063a03fec",
        "question": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.",
        "parsing_tree": "train_station | #1 = Scan Table [ station ] Output [ Location , Annual_entry_exit , Annual_interchanges , Name ] ; #2 = Sort [ #1 ] OrderBy [ Annual_entry_exit ASC , Annual_interchanges ASC ] Output [ Annual_entry_exit , Location , Annual_interchanges , Name ]"
    },
    {
        "id": "20c5906f0b6078813ade0e98113de6315c92ac00e2d8b62cc6f7c52ef8a88042",
        "question": "List all vehicle id",
        "parsing_tree": "driving_school | #1 = Scan Table [ Vehicles ] Output [ vehicle_id ]"
    },
    {
        "id": "3e5c4563a8d14c030c30df453f1f1051b5854c77bf1a2ee0d8fbd933080519fc",
        "question": "What are the ids of all vehicles?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Vehicles ] Output [ vehicle_id ]"
    },
    {
        "id": "91902fa785405aa4c5856fa969383ccc18b5032e52908125ca8661dd649a4123",
        "question": "How many vehicle in total?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Vehicles ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7b0bfde5844a11466f589e249570f35a51a84e92348ef1cdefa543e8e58d7db0",
        "question": "How many vehicles exist?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Vehicles ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "de3537df571dd61d661d1fad9702d77b4ec2324eba82debc4ffff77a29ef6d4a",
        "question": "Show the detail of vehicle with id 1.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Vehicles ] Predicate [ vehicle_id = 1 ] Output [ vehicle_id , vehicle_details ]"
    },
    {
        "id": "17fa7e64a054176f9beeff41c532c320dffe1f85a6675312c93692e293bd405c",
        "question": "What are the details of the car with id 1?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Vehicles ] Predicate [ vehicle_id = 1 ] Output [ vehicle_id , vehicle_details ]"
    },
    {
        "id": "d3b0509bd3a0a8bf55629ab0c4d2d563adc51e441bb3b618473d6cd3f92aa178",
        "question": "List the first name middle name and last name of all staff.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Output [ last_name , middle_name , first_name ]"
    },
    {
        "id": "532863dd9ee7398c0a3f8641110bb0add77485202b2e26acc9230e33c9ef8903",
        "question": "What are the first, middle, and last names of all staff?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Output [ last_name , middle_name , first_name ]"
    },
    {
        "id": "6b15d15a2d3168ba0b2e75317cfff25b89af54f0570866c5838402ca6950ab95",
        "question": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , date_of_birth , first_name ]"
    },
    {
        "id": "73c355b46da2c91e5a9bf05ce4aa485b9bf58e74382aa12bf0bd6db0a36b4b89",
        "question": "What is the date of birth for the staff member named Janessa Sawayn?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , date_of_birth , first_name ]"
    },
    {
        "id": "e32a1a5714bf5d07335e9f8ef401cbe358f361436a678cbdd9c4accac9d24315",
        "question": "When did the staff member with first name as Janessa and last name as Sawayn join the company?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , date_joined_staff , first_name ]"
    },
    {
        "id": "e5076a69046bf2217cc01c59851702afd95d4db0c52c2f9f41de0dbf85bbaccd",
        "question": "When did the staff member named Janessa Sawayn join the company?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , date_joined_staff , first_name ]"
    },
    {
        "id": "129cbed48e02fcab0ec0569a3805efbf887dd2c5172a66e43223bafda7eef108",
        "question": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , date_left_staff , first_name ]"
    },
    {
        "id": "30d7063a8a79f9a30e0005cf40c7da3a99f7792f0bccdcd1b5e1bc2667fe8369",
        "question": "When did the staff member Janessa Sawayn leave the company?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , date_left_staff , first_name ]"
    },
    {
        "id": "918d857d45887f26bb81f6e78b6dd9a483fa5bc2f1a634b82a9c1ddd54d9f01a",
        "question": "How many staff have the first name Ludie?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Ludie' ] Output [ first_name ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "711aca77d230380b14f7651cc7ae622c7c7cf4c80e2fc86d8283b9f3bf67cc05",
        "question": "How many employees have a first name of Ludie?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Ludie' ] Output [ first_name ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "33dabadb29593a78db83f2569b81c375da4f969a8cffc47e75050d9a2b9dcd7b",
        "question": "What is the nickname of staff with first name as Janessa and last name as Sawayn?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , nickname , first_name ]"
    },
    {
        "id": "141b797036089a7ada003943797cc58e53797010c736f61f41ea61b8940af0df",
        "question": "What is the nickname of the employee named Janessa Sawayn?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , nickname , first_name ]"
    },
    {
        "id": "e70336a42897cc3d5211447b373bfa5ab2bbfd7b509dd86638a184506a4c70e7",
        "question": "How many staff in total?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "91a44103d4b23860ed05d7a347a1cba14d1444a3c74562795e2a02f397b5cf33",
        "question": "How many employees are there?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "442f2dd4a36c2e356194f6dce51f926b1c90344c8bc02e11a9c2b42c0579efa8",
        "question": "Which city does staff with first name as Janessa and last name as Sawayn live?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , staff_address_id , first_name ] ; #2 = Scan Table [ Addresses ] Output [ address_id , city ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_address_id = #2.address_id ] Output [ #2.city ]"
    },
    {
        "id": "b09354733295c0f0b08d3d70b27f0641b9e9c42bc5d9b98dba4247273483fa09",
        "question": "In what city does Janessa Sawayn live?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , staff_address_id , first_name ] ; #2 = Scan Table [ Addresses ] Output [ address_id , city ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_address_id = #2.address_id ] Output [ #2.city ]"
    },
    {
        "id": "629c61ca25e82474979080d2a949a7a7b6bbb76dc17c7e85abdbe762efc09412",
        "question": "Which country and state does staff with first name as Janessa and last name as Sawayn lived?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , staff_address_id , first_name ] ; #2 = Scan Table [ Addresses ] Output [ country , address_id , state_province_county ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_address_id = #2.address_id ] Output [ #2.state_province_county , #2.country ]"
    },
    {
        "id": "7c1b632907e8e0d99ceb77ce042f34aa73ba35b77bf9ae73bb3656d36a591499",
        "question": "In which country and state does Janessa Sawayn live?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , staff_address_id , first_name ] ; #2 = Scan Table [ Addresses ] Output [ country , address_id , state_province_county ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_address_id = #2.address_id ] Output [ #2.state_province_county , #2.country ]"
    },
    {
        "id": "735b49cd6bb5b84281185a1e253e4ab0ad9280aebc910dd7b54ee816e1c80b8e",
        "question": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Rylan' AND last_name = 'Goodwin' ] Output [ last_name , customer_id , first_name ] ; #2 = Scan Table [ Lessons ] Output [ lesson_time , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.lesson_time ] ; #4 = Aggregate [ #3 ] Output [ SUM(lesson_time) AS Sum_lesson_time ]"
    },
    {
        "id": "9e50005ed816878153f965e3e6613188af873e9c5b169531cc57e565282426e0",
        "question": "How long is the total lesson time took by the customer named Rylan Goodwin?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Rylan' AND last_name = 'Goodwin' ] Output [ last_name , customer_id , first_name ] ; #2 = Scan Table [ Lessons ] Output [ lesson_time , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.lesson_time ] ; #4 = Aggregate [ #3 ] Output [ SUM(lesson_time) AS Sum_lesson_time ]"
    },
    {
        "id": "9319a6f3305eef856297190ec38c5e858d1a9984c13fa1f838b6b76f42ce7a9b",
        "question": "What is the zip code of staff with first name as Janessa and last name as Sawayn lived?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , staff_address_id , first_name ] ; #2 = Scan Table [ Addresses ] Output [ address_id , zip_postcode ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_address_id = #2.address_id ] Output [ #2.zip_postcode ]"
    },
    {
        "id": "feb15605dcd92077d0bca43d8eb5a042ed019faa3bd2ca4d41bc6723bac0dd1f",
        "question": "What is the zip code of the hosue of the employee named Janessa Sawayn?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , staff_address_id , first_name ] ; #2 = Scan Table [ Addresses ] Output [ address_id , zip_postcode ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_address_id = #2.address_id ] Output [ #2.zip_postcode ]"
    },
    {
        "id": "5547b25330867f81500392092a08b182350a84656c5ac68f14de13e675aca5d1",
        "question": "How many staff live in state Georgia?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Addresses ] Predicate [ state_province_county = 'Georgia' ] Output [ state_province_county ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a8d5d5e43b5c3b7551803f5dbfc3fdedb5738ffb8dfb6bebbfcc6f1f36a4b2c7",
        "question": "How many employees live in Georgia?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Addresses ] Predicate [ state_province_county = 'Georgia' ] Output [ state_province_county ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "057460a213d21d504c2c6528a78d012502e3f1233006c396a3dab87db13ee134",
        "question": "Find out the first name and last name of staff lived in city Damianfort.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Addresses ] Predicate [ city = 'Damianfort' ] Output [ address_id , city ] ; #2 = Scan Table [ Staff ] Output [ last_name , staff_address_id , first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.staff_address_id ] Output [ #2.first_name , #2.last_name ]"
    },
    {
        "id": "4fc376c1237a7dc8fec971d58f3f90a8e5da553ef2f4cc13380b3746c0012aad",
        "question": "What is the first and last name of all employees who live in the city Damianfort?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Addresses ] Predicate [ city = 'Damianfort' ] Output [ address_id , city ] ; #2 = Scan Table [ Staff ] Output [ last_name , staff_address_id , first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.staff_address_id ] Output [ #2.first_name , #2.last_name ]"
    },
    {
        "id": "7398d4e501540666b7d5a716b30c046a3dcb545e56aecf25464d47010f3432fa",
        "question": "Which city lives most of staffs? List the city name and number of staffs.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Output [ staff_address_id ] ; #2 = Scan Table [ Addresses ] Output [ address_id , city ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_address_id = #2.address_id ] Output [ #2.city ] ; #4 = Aggregate [ #3 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , city ]"
    },
    {
        "id": "441bf0e4794c3c591ffe9ccf5801b22af62439bc48ff99a586c4f9406869c421",
        "question": "In which city do the most employees live and how many of them live there?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Output [ staff_address_id ] ; #2 = Scan Table [ Addresses ] Output [ address_id , city ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_address_id = #2.address_id ] Output [ #2.city ] ; #4 = Aggregate [ #3 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , city ]"
    },
    {
        "id": "cf6f2196c4211027478f36fe48382ff3432267c69e7d145421b61c1ff05c4c2c",
        "question": "List the states which have between 2 to 4 staffs living there.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Output [ staff_address_id ] ; #2 = Scan Table [ Addresses ] Output [ address_id , state_province_county ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_address_id = #2.address_id ] Output [ #2.state_province_county ] ; #4 = Aggregate [ #3 ] GroupBy [ state_province_county ] Output [ countstar AS Count_Star , state_province_county ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 AND Count_Star <= 4 ] Output [ state_province_county ]"
    },
    {
        "id": "badf976a3debac0c84c15563d1956ed21d4b67230ed4b7298d9618285c8a8b21",
        "question": "What are the names of the states that have 2 to 4 employees living there?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Output [ staff_address_id ] ; #2 = Scan Table [ Addresses ] Output [ address_id , state_province_county ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_address_id = #2.address_id ] Output [ #2.state_province_county ] ; #4 = Aggregate [ #3 ] GroupBy [ state_province_county ] Output [ countstar AS Count_Star , state_province_county ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 AND Count_Star <= 4 ] Output [ state_province_county ]"
    },
    {
        "id": "bf0ae651522a7afe126bc6df24facad3ea944a293e480f69a09631c95ccce96d",
        "question": "List the first name and last name of all customers.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Output [ last_name , first_name ]"
    },
    {
        "id": "671ac3f453f843e53e3ab6acbc3a8522c40616fa6640a7e82ed66213df7c9c5c",
        "question": "What are the first and last names for all customers?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Output [ last_name , first_name ]"
    },
    {
        "id": "3bbb6a726dd171bb9ac4e3ad9bc381c19aef2c01e57ab46e6734944a2d5b6017",
        "question": "List email address and birthday of customer whose first name as Carole.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Carole' ] Output [ date_of_birth , email_address , first_name ]"
    },
    {
        "id": "9796c09edda6cd982409bf5f6ecb869bc0e69e238164d8d105f3d16061e25beb",
        "question": "What are the email addresses and date of births for all customers who have a first name of Carole?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Carole' ] Output [ date_of_birth , email_address , first_name ]"
    },
    {
        "id": "f62df76a4b0c6c92d244c5fa6b7c94fa6b18fc830ac6c75c7b312d6674ea3072",
        "question": "List phone number and email address of customer with more than 2000 outstanding balance.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ amount_outstanding > 2000.0 ] Output [ email_address , phone_number , amount_outstanding ]"
    },
    {
        "id": "6fcf1ea249e20954339882e38a575bc6568cf919c1d7e7fc68a6dd82fa617038",
        "question": "What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ amount_outstanding > 2000.0 ] Output [ email_address , phone_number , amount_outstanding ]"
    },
    {
        "id": "aa3b27f92b878f3e8e811898e51ad2167046cb1e9230e07a32805191c08bc0f1",
        "question": "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Marina' OR last_name = 'Kohler' ] Output [ email_address , last_name , first_name , customer_status_code , cell_mobile_phone_number ]"
    },
    {
        "id": "430c9645609ecc2e3a2138dc3585f56bd97e3d62a957ff4723d259b0366a8e8b",
        "question": "What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Marina' OR last_name = 'Kohler' ] Output [ email_address , last_name , first_name , customer_status_code , cell_mobile_phone_number ]"
    },
    {
        "id": "43c153846d79921161e590d44e2de03172d11242ccbec59062098eaa6306ad55",
        "question": "When are the birthdays of customer who are classified as 'Good Customer' status?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ customer_status_code = 'Good Customer' ] Output [ customer_status_code , date_of_birth ]"
    },
    {
        "id": "56b29191dc72962f2c69fa5d4d86ae17b72d90f02893446f92e74c1fcd3506e6",
        "question": "What is the date of birth of every customer whose status code is 'Good Customer'?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ customer_status_code = 'Good Customer' ] Output [ customer_status_code , date_of_birth ]"
    },
    {
        "id": "f7f9404f410c8079c2ee8c7a21ae2bae2f16c95c7aaea6dde2d909a472dee769",
        "question": "When did customer with first name as Carole and last name as Bernhard became a customer?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Carole' AND last_name = 'Bernhard' ] Output [ last_name , first_name , date_became_customer ]"
    },
    {
        "id": "13002a7a1589fc58aafa853c862515a76573a9245fb2539133af9966cba63a09",
        "question": "When did Carole Bernhard first become a customer?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Carole' AND last_name = 'Bernhard' ] Output [ last_name , first_name , date_became_customer ]"
    },
    {
        "id": "2f6c335c6e074a2c568242876dfb11e8dc19809e2bc7511547036a7161c74187",
        "question": "How many customers in total?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a8492e3acafdc15da6abb0d515af375e84933eff0f5618fc9c33d508f1b31b78",
        "question": "How many customers are there?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "58bfc0b0416177a5c4da9d99791212d4cf6962057816e7ed8d5f06c3df4de3fe",
        "question": "List all customer status codes and the number of customers having each status code.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Output [ customer_status_code ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_status_code ] Output [ countstar AS Count_Star , customer_status_code ]"
    },
    {
        "id": "5d7a9e44ce8aca7190027ec5334fa8ac4203e1e23d65b9dcd02db9d7ae6e87d3",
        "question": "For each customer status code, how many customers are classified that way?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Output [ customer_status_code ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_status_code ] Output [ countstar AS Count_Star , customer_status_code ]"
    },
    {
        "id": "85c22a680dded8f409e4dfc650010584740d7d45a358d17dec7de2731e4dfacd",
        "question": "Which customer status code has least number of customers?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Output [ customer_status_code ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_status_code ] Output [ countstar AS Count_Star , customer_status_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ customer_status_code , Count_Star ]"
    },
    {
        "id": "6261db0395d43dd7e2d1f4a8053b0005e66757a70b8dad1ea4bae2f557b0cd62",
        "question": "What is the status code with the least number of customers?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Output [ customer_status_code ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_status_code ] Output [ countstar AS Count_Star , customer_status_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ customer_status_code , Count_Star ]"
    },
    {
        "id": "129a78e050ca826475330fd73de71e1099a1e20d12476136988ee819286291f7",
        "question": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Rylan' AND last_name = 'Goodwin' ] Output [ last_name , customer_id , first_name ] ; #2 = Scan Table [ Lessons ] Predicate [ lesson_status_code = 'Completed' ] Output [ lesson_status_code , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.last_name , #1.customer_id , #1.first_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "229e3e075b00d5bb8f99e101dd5667bcb62953d6a5de75ae989a2906918a9c47",
        "question": "How many lessons did the customer Ryan Goodwin complete?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Rylan' AND last_name = 'Goodwin' ] Output [ last_name , customer_id , first_name ] ; #2 = Scan Table [ Lessons ] Predicate [ lesson_status_code = 'Completed' ] Output [ lesson_status_code , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.last_name , #1.customer_id , #1.first_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "40956a4ffa8db78df513f32b35703eca1674ef076b7ec526c55fe7e9297fd592",
        "question": "What is maximum, minimum and average amount of outstanding of customer?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Output [ amount_outstanding ] ; #2 = Aggregate [ #1 ] Output [ MAX(amount_outstanding) AS Max_amount_outstanding , AVG(amount_outstanding) AS Avg_amount_outstanding , MIN(amount_outstanding) AS Min_amount_outstanding ]"
    },
    {
        "id": "b4ffb5333d4628ff5fdf7d086d152077d9b3de9bf3990b3f218c7465d647483c",
        "question": "What is the maximum, minimum, and average amount of money outsanding for all customers?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Output [ amount_outstanding ] ; #2 = Aggregate [ #1 ] Output [ MAX(amount_outstanding) AS Max_amount_outstanding , AVG(amount_outstanding) AS Avg_amount_outstanding , MIN(amount_outstanding) AS Min_amount_outstanding ]"
    },
    {
        "id": "93cb66789393f1a2fe38db77cb576d0d61a839323fa29924a5c6fd44ddeb6529",
        "question": "List the first name and last name of customers have the amount of outstanding between 1000 and 3000.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ amount_outstanding >= 1000.0 AND amount_outstanding <= 3000.0 ] Output [ last_name , amount_outstanding , first_name ]"
    },
    {
        "id": "32f9f9f2e5a64bb54560e654d0ee18894c9eb7b5c518b04523a8cae6b75c90ee",
        "question": "What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ amount_outstanding >= 1000.0 AND amount_outstanding <= 3000.0 ] Output [ last_name , amount_outstanding , first_name ]"
    },
    {
        "id": "af163f89e08fd35d856a941ef3d01988d084022f14bc18257a03b9fc97692e5a",
        "question": "List first name and last name of customers lived in city Lockmanfurt.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Addresses ] Predicate [ city = 'Lockmanfurt' ] Output [ address_id , city ] ; #2 = Scan Table [ Customers ] Output [ last_name , customer_address_id , first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.customer_address_id ] Output [ #2.first_name , #2.last_name ]"
    },
    {
        "id": "1a40506bb210a408881f80a6054ca08f673e021aa51678ec17dfcf86d694bf50",
        "question": "What are the first and last names of all customers who lived in Lockmanfurt?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Addresses ] Predicate [ city = 'Lockmanfurt' ] Output [ address_id , city ] ; #2 = Scan Table [ Customers ] Output [ last_name , customer_address_id , first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.address_id = #2.customer_address_id ] Output [ #2.first_name , #2.last_name ]"
    },
    {
        "id": "3cc8acf98af1d34c8805a4ad1ce46def555f3cdea72ffe656fe1c9d38fc5cfc0",
        "question": "Which country does customer with first name as Carole and last name as Bernhard lived in?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Carole' AND last_name = 'Bernhard' ] Output [ last_name , customer_address_id , first_name ] ; #2 = Scan Table [ Addresses ] Output [ country , address_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_address_id = #2.address_id ] Output [ #2.country ]"
    },
    {
        "id": "1145a2fb14172eb389b53779ef6f4652c647052048e520e7fd39d8133b49875e",
        "question": "What is the country in which the customer Carole Bernhard lived?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Carole' AND last_name = 'Bernhard' ] Output [ last_name , customer_address_id , first_name ] ; #2 = Scan Table [ Addresses ] Output [ country , address_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_address_id = #2.address_id ] Output [ #2.country ]"
    },
    {
        "id": "7e5af0fd5e7c783ad3e954630fdc066f852f8d982648de9bf4b86fa3b78ceaf0",
        "question": "What is zip code of customer with first name as Carole and last name as Bernhard?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Carole' AND last_name = 'Bernhard' ] Output [ last_name , customer_address_id , first_name ] ; #2 = Scan Table [ Addresses ] Output [ address_id , zip_postcode ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_address_id = #2.address_id ] Output [ #2.zip_postcode ]"
    },
    {
        "id": "c2abb84355a57fc5f0467e62374e840b7fb56c4fdf955462a910ce7a614011c0",
        "question": "What is the zip code of the customer Carole Bernhard?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Carole' AND last_name = 'Bernhard' ] Output [ last_name , customer_address_id , first_name ] ; #2 = Scan Table [ Addresses ] Output [ address_id , zip_postcode ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_address_id = #2.address_id ] Output [ #2.zip_postcode ]"
    },
    {
        "id": "1d432f2f4b32f1ae241cf04c91faa376b3766ba3a7ffeddc0937bd726a64c6a2",
        "question": "Which city does has most number of customers?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Output [ customer_address_id ] ; #2 = Scan Table [ Addresses ] Output [ address_id , city ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_address_id = #2.address_id ] Output [ #2.city ] ; #4 = Aggregate [ #3 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , city ]"
    },
    {
        "id": "bc5d0c7c844d9a7535cfa1821171c90c809cfb273d9d0d691426e76471dfe95b",
        "question": "What is the city with the most customers?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Output [ customer_address_id ] ; #2 = Scan Table [ Addresses ] Output [ address_id , city ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_address_id = #2.address_id ] Output [ #2.city ] ; #4 = Aggregate [ #3 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , city ]"
    },
    {
        "id": "70a8cc96b226f4100c84c2fa1f32bfe41f334bcf969c32c037b9967e742c9ac6",
        "question": "How much in total does customer with first name as Carole and last name as Bernhard paid?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Carole' AND last_name = 'Bernhard' ] Output [ last_name , customer_id , first_name ] ; #2 = Scan Table [ Customer_Payments ] Output [ customer_id , amount_payment ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.amount_payment ] ; #4 = Aggregate [ #3 ] Output [ SUM(amount_payment) AS Sum_amount_payment ]"
    },
    {
        "id": "dbb866c5729c6f4394c084cf9f6618338e0fa459ce89b4932565f5431f78a719",
        "question": "What is the total amount of moeny paid by the customer Carole Bernhard?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Carole' AND last_name = 'Bernhard' ] Output [ last_name , customer_id , first_name ] ; #2 = Scan Table [ Customer_Payments ] Output [ customer_id , amount_payment ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.amount_payment ] ; #4 = Aggregate [ #3 ] Output [ SUM(amount_payment) AS Sum_amount_payment ]"
    },
    {
        "id": "8bc1c0e66ac975f615805a6a5d66c326dfed1233480a7fbd619f3fa50d61a01e",
        "question": "List the number of customers that did not have any payment history.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Output [ customer_id ] ; #2 = Scan Table [ Customer_Payments ] Output [ customer_id ] ; #3 = Aggregate [ #2 ] GroupBy [ customer_id ] Output [ customer_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.customer_id = #1.customer_id ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "66fccdc332cfabf0fee079fcb7755ca2736ebaa5ce3debf3249b24e64269d5eb",
        "question": "How many customers have no payment histories?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Output [ customer_id ] ; #2 = Scan Table [ Customer_Payments ] Output [ customer_id ] ; #3 = Aggregate [ #2 ] GroupBy [ customer_id ] Output [ customer_id ] ; #4 = Except [ #1 , #3 ] Predicate [ #3.customer_id = #1.customer_id ] Output [ 1 AS One ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c51bccbf430df505d4bc271212f0b4deb384c2a074d5b6681c2d6af0df03ac3c",
        "question": "List first name and last name of customers that have more than 2 payments.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customer_Payments ] Output [ customer_id ] ; #2 = Scan Table [ Customers ] Output [ last_name , customer_id , first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.first_name , #1.customer_id , #2.last_name ] ; #4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ last_name , countstar AS Count_Star , first_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ last_name , first_name ]"
    },
    {
        "id": "bba4037c9afa8cbcd11ba7ee0c88b5fd1bc27036e1fc5e40500701fa61af62fb",
        "question": "What are the first and last names of all customers with more than 2 payments?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customer_Payments ] Output [ customer_id ] ; #2 = Scan Table [ Customers ] Output [ last_name , customer_id , first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.first_name , #1.customer_id , #2.last_name ] ; #4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ last_name , countstar AS Count_Star , first_name ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ last_name , first_name ]"
    },
    {
        "id": "8982586ebfb27f5faabe3ab03cb3a0980512ba41dbd3b257449c028b7a78ad62",
        "question": "List all payment methods and number of payments using each payment methods.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customer_Payments ] Output [ payment_method_code ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method_code ] Output [ countstar AS Count_Star , payment_method_code ]"
    },
    {
        "id": "60330f96b3610888075c062be2681f3b2aacdc38359e4bd4987b8ecdc8137a8a",
        "question": "For each payment method, how many payments were made?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customer_Payments ] Output [ payment_method_code ] ; #2 = Aggregate [ #1 ] GroupBy [ payment_method_code ] Output [ countstar AS Count_Star , payment_method_code ]"
    },
    {
        "id": "9fd7d1ad3ca737495d0f76af5280751491f63f3a7cada23038d400fd14fd26e5",
        "question": "How many lessons were in cancelled state?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Lessons ] Predicate [ lesson_status_code = 'Cancelled' ] Output [ lesson_status_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "093286ca8ced2d19ed5b7face2be79a0ad39c25d32b6b37e8d5b00da0bb08f0d",
        "question": "How many lessons have been cancelled?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Lessons ] Predicate [ lesson_status_code = 'Cancelled' ] Output [ lesson_status_code ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "96cd1c17a91afca34bdaebdb4f63f24ac6a39b0b2ab73ce11ede601375a36907",
        "question": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , first_name , nickname , staff_id ] ; #2 = Scan Table [ Lessons ] Output [ lesson_id , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Output [ #2.lesson_id ]"
    },
    {
        "id": "e63709bb8dce1e04e06a9030f81b11181a90a6c58f74e38a13c1724d57192c1c",
        "question": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , first_name , nickname , staff_id ] ; #2 = Scan Table [ Lessons ] Output [ lesson_id , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Output [ #2.lesson_id ]"
    },
    {
        "id": "069577e240e3efba92e2acf0102cd3f30ba29312e132af51af7caed27a8501b3",
        "question": "How many lessons taught by staff whose first name has letter 'a' in it?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name like '%a%' ] Output [ first_name , staff_id ] ; #2 = Scan Table [ Lessons ] Output [ staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Output [ #1.staff_id , #1.first_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "1e2150e168fad3cd2d327029748c4035d6456b336de89ad49cbf642f660fde93",
        "question": "How many lessons were taught by a staff member whose first name has the letter 'a' in it?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name like '%a%' ] Output [ first_name , staff_id ] ; #2 = Scan Table [ Lessons ] Output [ staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Output [ #1.staff_id , #1.first_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "5c663047affbcc0ca200ae75ce06dc5330a771ca2b3643f76fec2ac745e33b08",
        "question": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , first_name , staff_id ] ; #2 = Scan Table [ Lessons ] Output [ lesson_time , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Output [ #2.lesson_time ] ; #4 = Aggregate [ #3 ] Output [ SUM(lesson_time) AS Sum_lesson_time ]"
    },
    {
        "id": "15d8767091cacd88d837e552ca3e6193785d987306b82ccce15b371708d483eb",
        "question": "What is the total time for all lessons taught by Janessa Sawayn?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , first_name , staff_id ] ; #2 = Scan Table [ Lessons ] Output [ lesson_time , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Output [ #2.lesson_time ] ; #4 = Aggregate [ #3 ] Output [ SUM(lesson_time) AS Sum_lesson_time ]"
    },
    {
        "id": "915580c348f8b2d2c410229c1a209546e3f0de73d522ceb1b9b4f923b1fb4c43",
        "question": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , first_name , staff_id ] ; #2 = Scan Table [ Lessons ] Output [ price , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Output [ #2.price ] ; #4 = Aggregate [ #3 ] Output [ AVG(price) AS Avg_price ]"
    },
    {
        "id": "9fdff0cda3ae2aa598d62bc2941b85f26df6bb55d38d3373c93a62e7c644ec67",
        "question": "What is the average price for a lesson taught by Janessa Sawayn?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Predicate [ first_name = 'Janessa' AND last_name = 'Sawayn' ] Output [ last_name , first_name , staff_id ] ; #2 = Scan Table [ Lessons ] Output [ price , staff_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.staff_id = #2.staff_id ] Output [ #2.price ] ; #4 = Aggregate [ #3 ] Output [ AVG(price) AS Avg_price ]"
    },
    {
        "id": "d5d8df1ca3de6687c6d447131268a8bf625cb9ce106d6872080d9a45fa42a373",
        "question": "How many lesson does customer with first name Ray took?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Ray' ] Output [ customer_id , first_name ] ; #2 = Scan Table [ Lessons ] Output [ customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.customer_id , #1.first_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "bcd40d4caa4bca8dbacca68989b965fd0b884170741267268fa6a9cbf4a9443b",
        "question": "How many lessons did the customer with the first name Ray take?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Predicate [ first_name = 'Ray' ] Output [ customer_id , first_name ] ; #2 = Scan Table [ Lessons ] Output [ customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.customer_id , #1.first_name ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c44a55efc1b443528895623d6c10981be93b014885c7cbdfb3c5c1ce5ce312c2",
        "question": "Which last names are both used by customers and by staff?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ last_name ] ; #2 = Scan Table [ Staff ] Output [ last_name ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.last_name = #2.last_name ] Output [ #1.last_name ]"
    },
    {
        "id": "6f971ba35e403688422dd63b3dbf210fbc301c1e5d9fe1a9282307841a998349",
        "question": "What are the last names that are used by customers and staff?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Customers ] Distinct [ true ] Output [ last_name ] ; #2 = Scan Table [ Staff ] Output [ last_name ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.last_name = #2.last_name ] Output [ #1.last_name ]"
    },
    {
        "id": "5c9b1da9be3f0dbca09e775694725f107d99dc9147a7c4658fde959bbba7b6a2",
        "question": "What is the first name of the staff who did not give any lesson?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Distinct [ true ] Output [ first_name ] ; #2 = Scan Table [ Lessons ] Output [ staff_id ] ; #3 = Scan Table [ Staff ] Output [ first_name , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.staff_id = #3.staff_id ] Output [ #3.first_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.first_name = #4.first_name ] Output [ #1.first_name ]"
    },
    {
        "id": "f3200189f8281979a17635eb6839c5455062c0f27aa604d3b3b4f6280b850b78",
        "question": "What is the first name of all employees who do not give any lessons?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Staff ] Distinct [ true ] Output [ first_name ] ; #2 = Scan Table [ Lessons ] Output [ staff_id ] ; #3 = Scan Table [ Staff ] Output [ first_name , staff_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.staff_id = #3.staff_id ] Output [ #3.first_name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.first_name = #4.first_name ] Output [ #1.first_name ]"
    },
    {
        "id": "1fcabda1d31b02bcdcde75f524cd6c6fdbca7b500d88d33a54e7e6762943a53d",
        "question": "What is the id and detail of the vehicle used in lessons for most of the times?",
        "parsing_tree": "driving_school | #1 = Scan Table [ Lessons ] Output [ vehicle_id ] ; #2 = Aggregate [ #1 ] GroupBy [ vehicle_id ] Output [ countstar AS Count_Star , vehicle_id ] ; #3 = Scan Table [ Vehicles ] Output [ vehicle_id , vehicle_details ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.vehicle_id = #3.vehicle_id ] Output [ #2.Count_Star , #3.vehicle_id , #3.vehicle_details ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , vehicle_id , vehicle_details ]"
    },
    {
        "id": "376ee9c91745e5e4fda0e538b2268098fcd8f31a8ed9341a795a7e4b3c96f1a6",
        "question": "How many faculty do we have?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "bad24621bf090a7fd7379435a574f6f1fa8deebffa09a42f379ef94e97aa3115",
        "question": "What is the total number of faculty members?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "0947bc6cc12db3cef19752f4279c5d9df6a2730e04e7b18648e312645e06a86c",
        "question": "What ranks do we have for faculty?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Distinct [ true ] Output [ Rank ]"
    },
    {
        "id": "7ee5fc4b64e686dd81e4215dedcd3d057e1662299861f416b2bf79fb432f9e63",
        "question": "Find the list of distinct ranks for faculty.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Distinct [ true ] Output [ Rank ]"
    },
    {
        "id": "10262f41d9d54284d218f6a9a97a2b348637ca528fa8924e5ae72d06cd8ac2f4",
        "question": "Show all the distinct buildings that have faculty rooms.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Distinct [ true ] Output [ Building ]"
    },
    {
        "id": "f702bb18ab7ba4871c696613d2f0cbd3b04f7af1535d0f88c8459c19bfb41670",
        "question": "What buildings have faculty offices?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Distinct [ true ] Output [ Building ]"
    },
    {
        "id": "fb7cb8b2e2e0084b999099e53e9361c982ee0c9a9e842efe26a4c9c5ac493c80",
        "question": "Show the rank, first name, and last name for all the faculty.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ Fname , Lname , Rank ]"
    },
    {
        "id": "a88dec3c79a194c53ef22a2f7c2554fc30ef3e6cf8c541d5215e334b02f65fba",
        "question": "What are the rank, first name, and last name of the faculty members?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ Fname , Lname , Rank ]"
    },
    {
        "id": "4a521077ccc9c28bd82808ac7f1bb1ddb79304b5906d4522902ba3b4da9aa73e",
        "question": "Show the first name, last name, and phone number for all female faculty members.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Sex = 'F' ] Output [ Fname , Lname , Sex , Phone ]"
    },
    {
        "id": "bf49c9c2797f092ca988c2e569f26a70f4b6fd337a730e6d4c40c5a287e7b40f",
        "question": "What are the first name, last name, and phone number of all the female faculty members?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Sex = 'F' ] Output [ Fname , Lname , Sex , Phone ]"
    },
    {
        "id": "0474a40f919d1b1c89385f72e8cc764a2e537c8afb29d4afb82203d6aba56c18",
        "question": "Show ids for all the male faculty.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Sex = 'M' ] Output [ Sex , FacID ]"
    },
    {
        "id": "fcdf7013cf910f739134927a5ab5f1871b8a6818b8b3e4dffc1eca67cbd3ad7c",
        "question": "What are the faculty ids of all the male faculty members?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Sex = 'M' ] Output [ Sex , FacID ]"
    },
    {
        "id": "1b84e36fb2703a89e059dd2d444eb2e0006dcdfcae3193b7c8672e541a80e550",
        "question": "How many female Professors do we have?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Sex = 'F' AND Rank = 'Professor' ] Output [ Rank , Sex ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4fd7f034e217f4a097139d89282e4ec3fa40f34ba1acab49045cb3fff92bc6b2",
        "question": "Count the number of female Professors we have.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Sex = 'F' AND Rank = 'Professor' ] Output [ Rank , Sex ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "eb7812e8962748bd8b6d5d637f36dc58291c00befc11246289d18b5d3163a53a",
        "question": "Show the phone, room, and building for the faculty named Jerry Prince.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Fname = 'Jerry' AND Lname = 'Prince' ] Output [ Lname , Fname , Phone , Building , Room ]"
    },
    {
        "id": "636dfda00f9eb6d7016f464477147cbc68ef5e0685d99fd8cf3d08a10020eab8",
        "question": "What are the phone, room, and building of the faculty member called Jerry Prince?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Fname = 'Jerry' AND Lname = 'Prince' ] Output [ Lname , Fname , Phone , Building , Room ]"
    },
    {
        "id": "e2d3efdd5afd09b1102ba7447a9b0163a5fa3eb719a7d11fa8c892998bed0f54",
        "question": "How many Professors are in building NEB?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Rank = 'Professor' AND Building = 'NEB' ] Output [ Rank , Building ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e7b1376971c555b46e494826a92b0374dd4f1af78e31e254c95cc9697d319979",
        "question": "Count the number of Professors who have office in building NEB.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Rank = 'Professor' AND Building = 'NEB' ] Output [ Rank , Building ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "6f0c6d417cb89428fc0528c445f66bbc41fd1448cd33539996f93a8f1dd7ce43",
        "question": "Show the first name and last name for all the instructors.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Rank = 'Instructor' ] Output [ Fname , Lname , Rank ]"
    },
    {
        "id": "e8474c5a577e111a527be6a3314154cd43a8854a98f641b860272f0c76e93e11",
        "question": "What are the first name and last name of all the instructors?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Rank = 'Instructor' ] Output [ Fname , Lname , Rank ]"
    },
    {
        "id": "74da6358ef8040478dcaf5dd2134c79fbb4ac9dca9f1bec52f51f906ad702fce",
        "question": "Show all the buildings along with the number of faculty members the buildings have.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ Building ] ; #2 = Aggregate [ #1 ] GroupBy [ Building ] Output [ countstar AS Count_Star , Building ]"
    },
    {
        "id": "f0650d7ad9b856ab88e331b023166ad8bbdfe2a4beb6828e8bed11f823d53986",
        "question": "How many faculty members does each building have? List the result with the name of the building.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ Building ] ; #2 = Aggregate [ #1 ] GroupBy [ Building ] Output [ countstar AS Count_Star , Building ]"
    },
    {
        "id": "8e04420723bede66d365bfbde3770acbd7dd07d9824d5cdaf15134d1325162f8",
        "question": "Which building has most faculty members?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ Building ] ; #2 = Aggregate [ #1 ] GroupBy [ Building ] Output [ countstar AS Count_Star , Building ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Building ]"
    },
    {
        "id": "a6891ad9e0865ed35359dadc949a42036d5255ec5d08ebd52fd72e9bb30a9907",
        "question": "Find the building that has the largest number of faculty members.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ Building ] ; #2 = Aggregate [ #1 ] GroupBy [ Building ] Output [ countstar AS Count_Star , Building ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Building ]"
    },
    {
        "id": "bddb8ef4ccb10f9fa628e09f2d2cf0ee4280823141fc35c07e38b091ca01e843",
        "question": "Show all the buildings that have at least 10 professors.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Rank = 'Professor' ] Output [ Rank , Building ] ; #2 = Aggregate [ #1 ] GroupBy [ Building ] Output [ countstar AS Count_Star , Building ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 10 ] Output [ Building ]"
    },
    {
        "id": "dabe6c8959282e9ee30dcf49fdebb69dcca33e1f8f6c62a5b5d783cc08e8c2f7",
        "question": "In which buildings are there at least ten professors?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Rank = 'Professor' ] Output [ Rank , Building ] ; #2 = Aggregate [ #1 ] GroupBy [ Building ] Output [ countstar AS Count_Star , Building ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 10 ] Output [ Building ]"
    },
    {
        "id": "f3cc671e35c534ef6b2adbc5b2556aa7c68e6cba16335823f105294a3fb64d9d",
        "question": "For each faculty rank, show the number of faculty members who have it.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ Rank ] ; #2 = Aggregate [ #1 ] GroupBy [ Rank ] Output [ countstar AS Count_Star , Rank ]"
    },
    {
        "id": "806b15fe06516b053d2ea82b97cd6a94d87feed49495c7f3628bac42ac8372dc",
        "question": "How many faculty members do we have for each faculty rank?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ Rank ] ; #2 = Aggregate [ #1 ] GroupBy [ Rank ] Output [ countstar AS Count_Star , Rank ]"
    },
    {
        "id": "e967d742cc8f38386d634d8af28f25d219be39b665c75bd9bd8600b48ebe673d",
        "question": "Show all the ranks and the number of male and female faculty for each rank.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ Rank , Sex ] ; #2 = Aggregate [ #1 ] GroupBy [ Sex , Rank ] Output [ countstar AS Count_Star , Rank , Sex ]"
    },
    {
        "id": "e1047cb563ee444fa835d4c1dd377f206725cbc3e133d2032e07a6d726d5c573",
        "question": "How many faculty members do we have for each rank and gender?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ Rank , Sex ] ; #2 = Aggregate [ #1 ] GroupBy [ Sex , Rank ] Output [ countstar AS Count_Star , Rank , Sex ]"
    },
    {
        "id": "14bee2098254b9992771be44f456d575c600e74d2c62a1503e82bd1bbd886fa4",
        "question": "Which rank has the smallest number of faculty members?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ Rank ] ; #2 = Aggregate [ #1 ] GroupBy [ Rank ] Output [ countstar AS Count_Star , Rank ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Rank , Count_Star ]"
    },
    {
        "id": "70454712f07f6e1c70e1a648dcd55118e19b460baec8f64a1354e2126cd806c7",
        "question": "Find the faculty rank that has the least members.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ Rank ] ; #2 = Aggregate [ #1 ] GroupBy [ Rank ] Output [ countstar AS Count_Star , Rank ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Rank , Count_Star ]"
    },
    {
        "id": "2d0733749f6a92298fa56d7b051cd677afce5b57395c19c27504a66c1a52538d",
        "question": "Show the number of male and female assistant professors.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Rank = 'AsstProf' ] Output [ Rank , Sex ] ; #2 = Aggregate [ #1 ] GroupBy [ Sex ] Output [ countstar AS Count_Star , Sex ]"
    },
    {
        "id": "a97fb822298dc321bd51ea54f60b54301722eb62618904e4311cf3710d4dcadb",
        "question": "How many male and female assistant professors do we have?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Rank = 'AsstProf' ] Output [ Rank , Sex ] ; #2 = Aggregate [ #1 ] GroupBy [ Sex ] Output [ countstar AS Count_Star , Sex ]"
    },
    {
        "id": "2e7292031072e10c3eb57e218651c579f132d88cfffa1781a63f5e2ca4c46961",
        "question": "What are the first name and last name of Linda Smith's advisor?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Linda' AND LName = 'Smith' ] Output [ Advisor , LName , Fname ] ; #2 = Scan Table [ Faculty ] Output [ Fname , Lname , FacID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Advisor = #2.FacID ] Output [ #2.Fname , #2.Lname ]"
    },
    {
        "id": "b6c9b4b78b666a3caf2f629d3d1fbde4a7553d776a1c9e2371a1a10fb9d0ded8",
        "question": "Who is the advisor of Linda Smith? Give me the first name and last name.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Student ] Predicate [ Fname = 'Linda' AND LName = 'Smith' ] Output [ Advisor , LName , Fname ] ; #2 = Scan Table [ Faculty ] Output [ Fname , Lname , FacID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Advisor = #2.FacID ] Output [ #2.Fname , #2.Lname ]"
    },
    {
        "id": "8e1559c439d13d71acabb768819f0acc841e62c3a1d033774d19c1792fc3f5d7",
        "question": "Show the ids of students whose advisors are professors.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Rank = 'Professor' ] Output [ Rank , FacID ] ; #2 = Scan Table [ Student ] Output [ Advisor , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.FacID = #2.Advisor ] Output [ #2.StuID ]"
    },
    {
        "id": "ac1c977c371fe5ac4cc0d9fc3b6b9d5c4b658173a18131774f531ee4c97b4b28",
        "question": "Which students have professors as their advisors? Find their student ids.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Rank = 'Professor' ] Output [ Rank , FacID ] ; #2 = Scan Table [ Student ] Output [ Advisor , StuID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.FacID = #2.Advisor ] Output [ #2.StuID ]"
    },
    {
        "id": "36bd6d9a5ed7440d76ddf211fd1216fa7a321408195c2fe719caad5913e9517d",
        "question": "Show first name and last name for all the students advised by Michael Goodrich.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Fname = 'Michael' AND Lname = 'Goodrich' ] Output [ Fname , Lname , FacID ] ; #2 = Scan Table [ Student ] Output [ LName , Fname , Advisor ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.FacID = #2.Advisor ] Output [ #2.LName , #2.Fname ]"
    },
    {
        "id": "e70da4b9f7bef0368e1f91c928c67a15356728f98dd4435f3e9ab179ae222868",
        "question": "Which students are advised by Michael Goodrich? Give me their first and last names.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Fname = 'Michael' AND Lname = 'Goodrich' ] Output [ Fname , Lname , FacID ] ; #2 = Scan Table [ Student ] Output [ LName , Fname , Advisor ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.FacID = #2.Advisor ] Output [ #2.LName , #2.Fname ]"
    },
    {
        "id": "2283af85e97b646ffdfd704a0bde1cb071a96f1eb19d326d479d96f858c6fcd1",
        "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ] ; #3 = Scan Table [ Faculty ] Output [ FacID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Advisor = #3.FacID ] Output [ #3.FacID , #2.Count_Star ]"
    },
    {
        "id": "9287c88e5db743bc5eff1268c7fdaf33f387a9fcab9b0ed2571fd6cba6b23c0d",
        "question": "What are the faculty id and the number of students each faculty has?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ] ; #3 = Scan Table [ Faculty ] Output [ FacID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Advisor = #3.FacID ] Output [ #3.FacID , #2.Count_Star ]"
    },
    {
        "id": "8ace45ccf603910d994ab1b74bafac56ba5acc4868e509247f48a45b0723efbe",
        "question": "Show all the faculty ranks and the number of students advised by each rank.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Scan Table [ Faculty ] Output [ Rank , FacID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Advisor = #2.FacID ] Output [ #2.Rank ] ; #4 = Aggregate [ #3 ] GroupBy [ Rank ] Output [ countstar AS Count_Star , Rank ]"
    },
    {
        "id": "33552dc1b8348d460cf7de08cbc8ff3bbca122cdcd15345edc49beacc1a75ca0",
        "question": "How many students are advised by each rank of faculty? List the rank and the number of students.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Scan Table [ Faculty ] Output [ Rank , FacID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Advisor = #2.FacID ] Output [ #2.Rank ] ; #4 = Aggregate [ #3 ] GroupBy [ Rank ] Output [ countstar AS Count_Star , Rank ]"
    },
    {
        "id": "4eb96f63c2411037db598e12ea1d03c7b5abd0225392830efd95264a3085d0da",
        "question": "What are the first and last name of the faculty who has the most students?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ] ; #3 = Scan Table [ Faculty ] Output [ Fname , Lname , FacID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Advisor = #3.FacID ] Output [ #3.Lname , #2.Count_Star , #3.Fname ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Fname , Lname , Count_Star ]"
    },
    {
        "id": "1562b8b1a15010915477d0a3cefd638290c9e7f2860909015c23426f1a4d5faf",
        "question": "Give me the the first and last name of the faculty who advises the most students.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ] ; #3 = Scan Table [ Faculty ] Output [ Fname , Lname , FacID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Advisor = #3.FacID ] Output [ #3.Lname , #2.Count_Star , #3.Fname ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Fname , Lname , Count_Star ]"
    },
    {
        "id": "83d8e802ac61c3c1c67e15fdb0d0f65e95f746eb49ef7e6fe832a472f340e116",
        "question": "Show the ids for all the faculty members who have at least 2 students.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ] ; #3 = Scan Table [ Faculty ] Output [ FacID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Advisor = #3.FacID ] Output [ #3.FacID , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ FacID ]"
    },
    {
        "id": "d9ef0bfcf90571f6b944912bc16c7f9b33f24bf787edbde43e3466054a99a54b",
        "question": "Which faculty members advise two ore more students? Give me their faculty ids.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Student ] Output [ Advisor ] ; #2 = Aggregate [ #1 ] GroupBy [ Advisor ] Output [ countstar AS Count_Star , Advisor ] ; #3 = Scan Table [ Faculty ] Output [ FacID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.Advisor = #3.FacID ] Output [ #3.FacID , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ FacID ]"
    },
    {
        "id": "def9c233fe9677edaa5311aa9b172672372dfe06fcfe03c41fe63490d28d6076",
        "question": "Show ids for the faculty members who don't advise any student.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ FacID ] ; #2 = Scan Table [ Student ] Output [ Advisor ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Advisor = #1.FacID ] Output [ #1.FacID ]"
    },
    {
        "id": "e9b1ed3ed338c8f6a15c9a859a59c9c09991fd3d18d507aab42b479ccb619bfb",
        "question": "What are the ids of the faculty members who do not advise any student.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ FacID ] ; #2 = Scan Table [ Student ] Output [ Advisor ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Advisor = #1.FacID ] Output [ #1.FacID ]"
    },
    {
        "id": "08095c93a712b1ae994a6d1e3b7dbbba929e7e54b034a9775ba96615113a84b6",
        "question": "What activities do we have?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Activity ] Output [ activity_name ]"
    },
    {
        "id": "64e7c3b2373dea7af83b1d2d7cdc4b0ae09bab0e22d778aaac1a819eda6390ea",
        "question": "List all the activities we have.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Activity ] Output [ activity_name ]"
    },
    {
        "id": "4b66128eef8ccf754fc7a3420c9665f5328bb2bef1b96957719530f54978e5cc",
        "question": "How many activities do we have?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Activity ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "73187da8f838b7b36da2e8482faf998184282c3f8d59d307156c67d525c67846",
        "question": "Find the number of activities available.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Activity ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "dd08bbd8f027eaf453c66141ddba624ee5725600a5d475d7848af0fcb99e240b",
        "question": "How many faculty members participate in an activity?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty_Participates_in ] Distinct [ true ] Output [ FacID ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT FacID) AS Count_Dist_FacID ]"
    },
    {
        "id": "86990a8af87a59587525a70e2a762be14aa9430be7c9c154806ca93b1e94eed7",
        "question": "Give me the number of faculty members who participate in an activity",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty_Participates_in ] Distinct [ true ] Output [ FacID ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT FacID) AS Count_Dist_FacID ]"
    },
    {
        "id": "a372dbedf31b297ae172bb06f3c5a4ea273d35ba2f16779bc82cab2649e9ac1f",
        "question": "Show the ids of the faculty who don't participate in any activity.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ FacID ] ; #2 = Scan Table [ Faculty_Participates_in ] Output [ FacID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.FacID = #1.FacID ] Output [ #1.FacID ]"
    },
    {
        "id": "cfc2515a87252bb0263965a6192d6a09ed942b4887ad6426633b43d09459929c",
        "question": "Which faculty do not participate in any activity? Find their faculty ids.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Output [ FacID ] ; #2 = Scan Table [ Faculty_Participates_in ] Output [ FacID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.FacID = #1.FacID ] Output [ #1.FacID ]"
    },
    {
        "id": "8181a9a2526d6a207c150e0709170284f54c7ea5121c32578911df9551b34e9a",
        "question": "How many activities does Mark Giuliano participate in?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Fname = 'Mark' AND Lname = 'Giuliano' ] Output [ Fname , Lname , FacID ] ; #2 = Scan Table [ Faculty_Participates_in ] Output [ FacID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.FacID = #2.FacID ] Output [ #1.Lname , #1.FacID , #1.Fname ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "cc1c34fb43230b33478931829a67879764db8a4149a461e562b6897b895b1ebe",
        "question": "Find the number of activities Mark Giuliano is involved in.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Fname = 'Mark' AND Lname = 'Giuliano' ] Output [ Fname , Lname , FacID ] ; #2 = Scan Table [ Faculty_Participates_in ] Output [ FacID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.FacID = #2.FacID ] Output [ #1.Lname , #1.FacID , #1.Fname ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "242599fc0d0014635e47b81ffc539cc96ded694acd0031141ce9e0fd6196a851",
        "question": "Show the names of all the activities Mark Giuliano participates in.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Fname = 'Mark' AND Lname = 'Giuliano' ] Output [ Fname , Lname , FacID ] ; #2 = Scan Table [ Faculty_Participates_in ] Output [ actid , FacID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.FacID = #2.FacID ] Output [ #2.actid ] ; #4 = Scan Table [ Activity ] Output [ actid , activity_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.actid = #4.actid ] Output [ #4.activity_name ]"
    },
    {
        "id": "3bd2411f633b141382c3e5c326df29c79700fba60763ad3502b3ed6a831fe6bb",
        "question": "What are the names of the activities Mark Giuliano is involved in",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty ] Predicate [ Fname = 'Mark' AND Lname = 'Giuliano' ] Output [ Fname , Lname , FacID ] ; #2 = Scan Table [ Faculty_Participates_in ] Output [ actid , FacID ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.FacID = #2.FacID ] Output [ #2.actid ] ; #4 = Scan Table [ Activity ] Output [ actid , activity_name ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.actid = #4.actid ] Output [ #4.activity_name ]"
    },
    {
        "id": "ceefc0f053043a33d6baf96f9342496e69cd0a7db913eede03f78697ffa67986",
        "question": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty_Participates_in ] Output [ FacID ] ; #2 = Aggregate [ #1 ] GroupBy [ FacID ] Output [ countstar AS Count_Star , FacID ] ; #3 = Scan Table [ Faculty ] Output [ Fname , Lname , FacID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.FacID = #3.FacID ] Output [ #3.Lname , #3.FacID , #2.Count_Star , #3.Fname ]"
    },
    {
        "id": "9cf6929c0c1fd91650107e6906d22d3d13fd1da1dccb00da7bd8cfed4b58d7f5",
        "question": "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty_Participates_in ] Output [ FacID ] ; #2 = Aggregate [ #1 ] GroupBy [ FacID ] Output [ countstar AS Count_Star , FacID ] ; #3 = Scan Table [ Faculty ] Output [ Fname , Lname , FacID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.FacID = #3.FacID ] Output [ #3.Lname , #3.FacID , #2.Count_Star , #3.Fname ]"
    },
    {
        "id": "6cc8138eb0509a8ba4371c1a25a867575fcd45ee0b97b0d11a462b15d566e5d4",
        "question": "Show all the activity names and the number of faculty involved in each activity.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty_Participates_in ] Output [ actid ] ; #2 = Aggregate [ #1 ] GroupBy [ actid ] Output [ countstar AS Count_Star , actid ] ; #3 = Scan Table [ Activity ] Output [ actid , activity_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.actid = #3.actid ] Output [ #3.activity_name , #2.Count_Star ]"
    },
    {
        "id": "9d41c89620a9fde369f9bdf4c55b5882482ee4fa808fedcc786c6b7dd8f63d35",
        "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty_Participates_in ] Output [ actid ] ; #2 = Aggregate [ #1 ] GroupBy [ actid ] Output [ countstar AS Count_Star , actid ] ; #3 = Scan Table [ Activity ] Output [ actid , activity_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.actid = #3.actid ] Output [ #3.activity_name , #2.Count_Star ]"
    },
    {
        "id": "748ea2a6385499c4022aaa9aa908bb0a7fd198ffdb457b00f9aaead6b669dd58",
        "question": "What is the name of the activity that has the most faculty members involved in?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty_Participates_in ] Output [ actid ] ; #2 = Aggregate [ #1 ] GroupBy [ actid ] Output [ countstar AS Count_Star , actid ] ; #3 = Scan Table [ Activity ] Output [ actid , activity_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.actid = #3.actid ] Output [ #3.activity_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , activity_name ]"
    },
    {
        "id": "87ae8c0caf23c00019b6ed4f80799aebeade80618628819483d0c3ec704179e0",
        "question": "Which activity has the most faculty members participating in? Find the activity name.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty_Participates_in ] Output [ actid ] ; #2 = Aggregate [ #1 ] GroupBy [ actid ] Output [ countstar AS Count_Star , actid ] ; #3 = Scan Table [ Activity ] Output [ actid , activity_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.actid = #3.actid ] Output [ #3.activity_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , activity_name ]"
    },
    {
        "id": "d9dcba86b3f8ddc314490c0d2576c6e33ec901a452fa6fb40b4373168bdb73f6",
        "question": "Show the ids of the students who don't participate in any activity.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Student ] Output [ StuID ] ; #2 = Scan Table [ Participates_in ] Output [ stuid ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.StuID = #2.stuid ] Output [ #1.StuID ]"
    },
    {
        "id": "8f49291c5da79ac9b289a8600a5abfd0eab344e6c170523f47bd8b3ef125fb00",
        "question": "What are the ids of the students who are not involved in any activity",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Student ] Output [ StuID ] ; #2 = Scan Table [ Participates_in ] Output [ stuid ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.StuID = #2.stuid ] Output [ #1.StuID ]"
    },
    {
        "id": "3f4163d5ff4a933915b3e97b9da24d33dcbb3f8be684473cea4e4474035639b3",
        "question": "Show the ids for all the students who participate in an activity and are under 20.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Student ] Predicate [ Age < 20 ] Output [ StuID , Age ] ; #2 = Scan Table [ Participates_in ] Distinct [ true ] Output [ stuid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.stuid ] Output [ #2.stuid ]"
    },
    {
        "id": "0b28bb50dc51a5b18e2e8736f1dfd3e6f84df3969dd51d36906ea023344384ce",
        "question": "What are the ids of the students who are under 20 years old and are involved in at least one activity.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Student ] Predicate [ Age < 20 ] Output [ StuID , Age ] ; #2 = Scan Table [ Participates_in ] Distinct [ true ] Output [ stuid ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.stuid ] Output [ #2.stuid ]"
    },
    {
        "id": "953f6e6794fcc582d4658fcc083879fe5fb0d33020ec9b781f2e66db95b7dcf2",
        "question": "What is the first and last name of the student participating in the most activities?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Participates_in ] Output [ stuid ] ; #2 = Aggregate [ #1 ] GroupBy [ stuid ] Output [ countstar AS Count_Star , stuid ] ; #3 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.stuid = #3.StuID ] Output [ #2.Count_Star , #3.LName , #3.Fname ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ LName , Count_Star , Fname ]"
    },
    {
        "id": "0ed06a6bfec2713cb358946257c4a40585003af4516c59d2184afe4680fdf78b",
        "question": "Tell me the first and last name of the student who has the most activities.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Participates_in ] Output [ stuid ] ; #2 = Aggregate [ #1 ] GroupBy [ stuid ] Output [ countstar AS Count_Star , stuid ] ; #3 = Scan Table [ Student ] Output [ LName , Fname , StuID ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.stuid = #3.StuID ] Output [ #2.Count_Star , #3.LName , #3.Fname ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ LName , Count_Star , Fname ]"
    },
    {
        "id": "81d67c1cee21c2b4ad420a260c59d926ecf1815cfbdce53c6287a57764360281",
        "question": "What is the name of the activity with the most students?",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Participates_in ] Output [ actid ] ; #2 = Aggregate [ #1 ] GroupBy [ actid ] Output [ countstar AS Count_Star , actid ] ; #3 = Scan Table [ Activity ] Output [ actid , activity_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.actid = #3.actid ] Output [ #3.activity_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , activity_name ]"
    },
    {
        "id": "e991939705797829114f3203f0a05160dbf457d96a71d81b460698c31e650fc2",
        "question": "Find the name of the activity that has the largest number of student participants.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Participates_in ] Output [ actid ] ; #2 = Aggregate [ #1 ] GroupBy [ actid ] Output [ countstar AS Count_Star , actid ] ; #3 = Scan Table [ Activity ] Output [ actid , activity_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.actid = #3.actid ] Output [ #3.activity_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , activity_name ]"
    },
    {
        "id": "6dc1bfe83bb9af53ef14f025d0ac0989cc81d09517d6c57db6d71af865798baf",
        "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty_Participates_in ] Output [ actid , FacID ] ; #2 = Scan Table [ Activity ] Predicate [ activity_name = 'Canoeing' OR activity_name = 'Kayaking' ] Output [ activity_name ] ; #3 = Scan Table [ Faculty ] Output [ Lname , FacID ] ; #4 = Join [ #2 , #3 ] Output [ #3.Lname , #3.FacID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.FacID = #4.FacID ] Distinct [ true ] Output [ #4.Lname ]"
    },
    {
        "id": "d7e8e933225d1b093bc310d10cb1080b9ab3df9955c81cba55759679fa81db02",
        "question": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.",
        "parsing_tree": "activity_1 | #1 = Scan Table [ Faculty_Participates_in ] Output [ actid , FacID ] ; #2 = Scan Table [ Activity ] Predicate [ activity_name = 'Canoeing' OR activity_name = 'Kayaking' ] Output [ activity_name ] ; #3 = Scan Table [ Faculty ] Output [ Lname , FacID ] ; #4 = Join [ #2 , #3 ] Output [ #3.Lname , #3.FacID ] ; #5 = Join [ #1 , #4 ] Predicate [ #1.FacID = #4.FacID ] Distinct [ true ] Output [ #4.Lname ]"
    },
    {
        "id": "f07519bff8bbb2f753ad3699ab3e561455f6e2efa62ff5cefb369d23b2e57ff6",
        "question": "Find the name of the airport in the city of Goroka.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , city ] ; #2 = Filter [ #1 ] Predicate [ city = 'Goroka' ] Output [ name ]"
    },
    {
        "id": "fc5411d151e47651b7d9ea20aa3d57ed1b6e36f22ceb7c0f0551b2e4502cf39d",
        "question": "What are the names of the airports in the city of Goroka?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , city ] ; #2 = Filter [ #1 ] Predicate [ city = 'Goroka' ] Output [ name ]"
    },
    {
        "id": "b50be722a54f4dd0a207ee658a76a8cfbba2038ef243b1b355be5dc0d9abe2ed",
        "question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , country , city , elevation ] ; #2 = Filter [ #1 ] Predicate [ city = 'New York' ] Output [ name , country , city , elevation ]"
    },
    {
        "id": "a72d843d057574aa4b81ecdbc1548062d00f06a73cd43437f97527f40ddd1eed",
        "question": "What is the name, city, country, and elevation for every airport in the city of New York?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , country , city , elevation ] ; #2 = Filter [ #1 ] Predicate [ city = 'New York' ] Output [ name , country , city , elevation ]"
    },
    {
        "id": "4e3ef91476f91481b79883334de9d0da36c01df8c369ad9beafabb77ee6dd1b4",
        "question": "How many airlines are there?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "894e4cf3b66a8a3f5abc137a8fc5c40a5a8cf2b5af15a32d61ddc497afaeaa2b",
        "question": "What is the total number of airlines?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ba898405154fa38dfc7c81af1c6c45eab406b8fbe807c3ea825558012907b82f",
        "question": "How many airlines does Russia has?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ country ] ; #2 = Filter [ #1 ] Predicate [ country = 'Russia' ] Output [ 1 AS One ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "a0f0334107ae896851b0643cf4d8a81d72207d0cec216a0f1c2e20e918f70a7d",
        "question": "What is the number of airlines based in Russia?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ country ] ; #2 = Filter [ #1 ] Predicate [ country = 'Russia' ] Output [ 1 AS One ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "761b5f6a84fd8ef6cc32802e28d9f835741394f4af8e717b9cc75b3adb52476f",
        "question": "What is the maximum elevation of all airports in the country of Iceland?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , elevation ] ; #2 = Filter [ #1 ] Predicate [ country = 'Iceland' ] Output [ elevation ] ; #3 = Aggregate [ #2 ] Output [ MAX(elevation) AS Max_elevation ]"
    },
    {
        "id": "bd1e582cd84776576f499de7c3c20b3d5316fa416698e622e04342d677eb23d9",
        "question": "What is the highest elevation of an airport in the country of Iceland?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , elevation ] ; #2 = Filter [ #1 ] Predicate [ country = 'Iceland' ] Output [ elevation ] ; #3 = Aggregate [ #2 ] Output [ MAX(elevation) AS Max_elevation ]"
    },
    {
        "id": "e8d839c308e255add7e6083d2b7b0bb057024ec979de392659bee2e455fa8c79",
        "question": "Find the name of the airports located in Cuba or Argentina.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , country ] ; #2 = Filter [ #1 ] Predicate [ country = 'Argentina' OR country = 'Cuba' ] Output [ name ]"
    },
    {
        "id": "e17edd64bdb037b3d4fdbe02876b6f46f1a55175031110c5c3ba69226a81c9e6",
        "question": "What are the names of all airports in Cuba or Argentina?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , country ] ; #2 = Filter [ #1 ] Predicate [ country = 'Argentina' OR country = 'Cuba' ] Output [ name ]"
    },
    {
        "id": "bd2a34c8c3d2ac999fced348a89d18ee798fb632eed00464aaf3a5d077b697d9",
        "question": "Find the country of the airlines whose name starts with 'Orbit'.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ name , country ] ; #2 = Filter [ #1 ] Predicate [ name like 'Orbit%' ] Output [ country ]"
    },
    {
        "id": "64ae654efd151412f44679308b419aba1c3cdd4283b6de1e113d417922173cb7",
        "question": "What are the countries of all airlines whose names start with Orbit?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ name , country ] ; #2 = Filter [ #1 ] Predicate [ name like 'Orbit%' ] Output [ country ]"
    },
    {
        "id": "76165d9a0d031a59398aa7969f89ac4dbbc661f1e348f9348443e870b638905d",
        "question": "Find the name of airports whose altitude is between -50 and 50.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Predicate [ elevation >= -50 AND elevation <= 50 ] Output [ name , elevation ]"
    },
    {
        "id": "be9427135f32e64a1b4b4b407da0cca6bfe26a7da6c6f311a9dd25789eabfcec",
        "question": "What are the names of all airports whose elevation is between -50 and 50?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Predicate [ elevation >= -50 AND elevation <= 50 ] Output [ name , elevation ]"
    },
    {
        "id": "70f89af0b1c9351af58424e5d926eb14e3f3d1a14df70cd4a317fe97391bf31a",
        "question": "Which country is the airport that has the highest altitude located in?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , elevation ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ elevation DESC ] Output [ country , elevation ]"
    },
    {
        "id": "61d6e41501f83073990e183cabbd5296539a753da79b64064a41ee402c779348",
        "question": "What is the country of the airport with the highest elevation?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , elevation ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ elevation DESC ] Output [ country , elevation ]"
    },
    {
        "id": "dbbc3d33679420e3feb92aa3789e09feaf0e977714c1ac2f074a7db65aff2eda",
        "question": "Find the number of airports whose name contain the word 'International'.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name ] ; #2 = Filter [ #1 ] Predicate [ name like '%International%' ] Output [ 1 AS One ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "e02b2a96752cef895c21e341b09bc28cdd93c88c1448bbe0613fd3cc98bbcebe",
        "question": "How many airports' names have the word Interanation in them?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name ] ; #2 = Filter [ #1 ] Predicate [ name like '%International%' ] Output [ 1 AS One ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4904a894c71071166b3bd21c4e51bbc3c9f58f0116bd2c1dc3cea98afddbd767",
        "question": "How many different cities do have some airport in the country of Greenland?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , city ] ; #2 = Filter [ #1 ] Predicate [ country = 'Greenland' ] Distinct [ true ] Output [ city ] ; #3 = Aggregate [ #2 ] Output [ COUNT(city) AS Count_city ]"
    },
    {
        "id": "9537d6c190822368b8416e8193297bb62c55e62e3c356e6462413c82890f1fda",
        "question": "In how many cities are there airports in the country of Greenland?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , city ] ; #2 = Filter [ #1 ] Predicate [ country = 'Greenland' ] Distinct [ true ] Output [ city ] ; #3 = Aggregate [ #2 ] Output [ COUNT(city) AS Count_city ]"
    },
    {
        "id": "9932f8855554b1ce13997d62284d9020811626dac3f4de6ab3b974706375fa74",
        "question": "Find the number of routes operated by American Airlines.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ alid , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'American Airlines' ] Output [ alid ] ; #3 = Scan Table [ routes ] Output [ alid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.alid = #3.alid ] Output [ #2.alid ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "be6d4f4c423312d0e359bd539c50aee76ac49e7d35f0707c2bdde9f529ddac7d",
        "question": "How many routes does American Airlines operate?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ alid , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'American Airlines' ] Output [ alid ] ; #3 = Scan Table [ routes ] Output [ alid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.alid = #3.alid ] Output [ #2.alid ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "4d6920f03a8860235c44766dfd4bd845228eede246fba4822eb5a05b2679b066",
        "question": "Find the number of routes whose destination airports are in Canada.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , apid ] ; #2 = Filter [ #1 ] Predicate [ country = 'Canada' ] Output [ apid ] ; #3 = Scan Table [ routes ] Output [ dst_apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.apid = #3.dst_apid ] Output [ #2.apid ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "de34d5a0869e54c0d498c9c3829571515af15be5f95d6afd1bdd57b308fdcd74",
        "question": "How many routes end in a Canadian airport?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , apid ] ; #2 = Filter [ #1 ] Predicate [ country = 'Canada' ] Output [ apid ] ; #3 = Scan Table [ routes ] Output [ dst_apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.apid = #3.dst_apid ] Output [ #2.apid ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f53c505406f93af0d697e798b76c1383002472cdb1c6be7bdef5971006ec8af1",
        "question": "Find the name, city, and country of the airport that has the lowest altitude.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , country , city , elevation ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ elevation ASC ] Output [ name , country , city , elevation ]"
    },
    {
        "id": "d7fe58fa7ec2d13d0a5f2d5ac8142823692b41d768dd21b5102754a0a8ce845d",
        "question": "What is the name, city, and country of the airport with the lowest altitude?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , country , city , elevation ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ elevation ASC ] Output [ name , country , city , elevation ]"
    },
    {
        "id": "18ea5a7aeb3d15d061195f2813fe97ccafc13c66b6e0f866be1b57af28c48630",
        "question": "Find the name, city, and country of the airport that has the highest latitude.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , country , city , elevation ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ elevation DESC ] Output [ name , country , city , elevation ]"
    },
    {
        "id": "c62dc63040cf10b24604c04efdf6ccff79e5c8796dc8cb037931b9db4e19648a",
        "question": "What is the name, city, and country of the airport with the highest elevation?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , country , city , elevation ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ elevation DESC ] Output [ name , country , city , elevation ]"
    },
    {
        "id": "b9d21e43b3c79125415414018109487bef49eab7921dbfa0f9dff7b81656dc30",
        "question": "Find the name and city of the airport which is the destination of the most number of routes.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ routes ] Output [ dst_apid ] ; #2 = Aggregate [ #1 ] GroupBy [ dst_apid ] Output [ countstar AS Count_Star , dst_apid ] ; #3 = Scan Table [ airports ] Output [ name , city , apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.dst_apid = #3.apid ] Output [ #3.name , #2.dst_apid , #3.city , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , dst_apid , city ]"
    },
    {
        "id": "86b5f92f249ff704dbb6c884db79bcd7327a00d682cc0c69903dc65097854940",
        "question": "What is the name and city of the airport that the most routes end at?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ routes ] Output [ dst_apid ] ; #2 = Aggregate [ #1 ] GroupBy [ dst_apid ] Output [ countstar AS Count_Star , dst_apid ] ; #3 = Scan Table [ airports ] Output [ name , city , apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.dst_apid = #3.apid ] Output [ #3.name , #2.dst_apid , #3.city , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , dst_apid , city ]"
    },
    {
        "id": "f0c3345337af21a3ba8b0f1f6e3cd77d8d0fd6f617e89f2b7366c75f180b9248",
        "question": "Find the names of the top 10 airlines that operate the most number of routes.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ routes ] Output [ alid ] ; #2 = Aggregate [ #1 ] GroupBy [ alid ] Output [ alid , countstar AS Count_Star ] ; #3 = Scan Table [ airlines ] Output [ alid , name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.alid = #3.alid ] Output [ #3.name , #2.alid , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 10 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , alid ]"
    },
    {
        "id": "612ffa914e063a6ed74354ba5ef57b4e94bcdeb3d18d69c2bb19ab54a1d52747",
        "question": "For the airline ids with the top 10 most routes operated, what are their names?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ routes ] Output [ alid ] ; #2 = Aggregate [ #1 ] GroupBy [ alid ] Output [ alid , countstar AS Count_Star ] ; #3 = Scan Table [ airlines ] Output [ alid , name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.alid = #3.alid ] Output [ #3.name , #2.alid , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 10 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , alid ]"
    },
    {
        "id": "94bb156ef964cb85ed01808f8c31211bfe95247f8ea20b0fda66066c0322a0d1",
        "question": "Find the name and city of the airport which is the source for the most number of flight routes.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ routes ] Output [ src_apid ] ; #2 = Aggregate [ #1 ] GroupBy [ src_apid ] Output [ countstar AS Count_Star , src_apid ] ; #3 = Scan Table [ airports ] Output [ name , city , apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.src_apid = #3.apid ] Output [ #3.name , #2.src_apid , #3.city , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , city , src_apid ]"
    },
    {
        "id": "91c923fe86296b7403f1bafa03834467d02aa9d9842895de6798ad1f489590f5",
        "question": "What is the name and city of the airport from most of the routes start?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ routes ] Output [ src_apid ] ; #2 = Aggregate [ #1 ] GroupBy [ src_apid ] Output [ countstar AS Count_Star , src_apid ] ; #3 = Scan Table [ airports ] Output [ name , city , apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.src_apid = #3.apid ] Output [ #3.name , #2.src_apid , #3.city , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , city , src_apid ]"
    },
    {
        "id": "ffb92689b6fdb24cc6fe12c27dfeec63a05fdc3ffe83b9a474377c5be3ebfa3c",
        "question": "Find the number of different airports which are the destinations of the American Airlines.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ alid , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'American Airlines' ] Output [ alid ] ; #3 = Scan Table [ routes ] Output [ alid , dst_apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.alid = #3.alid ] Distinct [ true ] Output [ #3.dst_apid ] ; #5 = Aggregate [ #4 ] Output [ COUNT(dst_apid) AS Count_dst_apid ]"
    },
    {
        "id": "c2472fff269b5ee88a7de67654b907541265eb7e56f42deabe98d87971669bb9",
        "question": "What is the number of different different airports that are destinations for American Airlines?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ alid , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'American Airlines' ] Output [ alid ] ; #3 = Scan Table [ routes ] Output [ alid , dst_apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.alid = #3.alid ] Distinct [ true ] Output [ #3.dst_apid ] ; #5 = Aggregate [ #4 ] Output [ COUNT(dst_apid) AS Count_dst_apid ]"
    },
    {
        "id": "b8724b8ac3b79ae33238b69c8ed68c33b7c535050c7e3f8652d1e6955cb00398",
        "question": "Which countries has the most number of airlines?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ country ] ; #2 = Aggregate [ #1 ] GroupBy [ country ] Output [ countstar AS Count_Star , country ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ country , Count_Star ]"
    },
    {
        "id": "e48ae271b627df3fda3d25fc6de096631a152bd97953b76b7e3f969b7ade5657",
        "question": "What is the name of the country with the most number of home airlines?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ country ] ; #2 = Aggregate [ #1 ] GroupBy [ country ] Output [ countstar AS Count_Star , country ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ country , Count_Star ]"
    },
    {
        "id": "62cab1f97d83e552182b023cbc18026916f39a6057ed467d9d0ad17be03546b8",
        "question": "Which countries has the most number of airlines whose active status is 'Y'?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Predicate [ active = 'Y' ] Output [ country , active ] ; #2 = Aggregate [ #1 ] GroupBy [ country ] Output [ countstar AS Count_Star , country ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ country , Count_Star ]"
    },
    {
        "id": "2c4692c1774694e0f8a17edea4f327a9595cd9d83095a5feb225575e2e342470",
        "question": "What are the countries with the most airlines whose active status is Y?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Predicate [ active = 'Y' ] Output [ country , active ] ; #2 = Aggregate [ #1 ] GroupBy [ country ] Output [ countstar AS Count_Star , country ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ country , Count_Star ]"
    },
    {
        "id": "61554aa63c5b9bedc7cad9e4915a0cbc7e027bef071238763fe362e79551b968",
        "question": "List all countries and their number of airlines in the descending order of number of airlines.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ country ] ; #2 = Aggregate [ #1 ] GroupBy [ country ] Output [ countstar AS Count_Star , country ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ country , Count_Star ]"
    },
    {
        "id": "7c112619243f95986bf4a5bddf195972093aecf561359b4e41260530a5b37e30",
        "question": "How many airlines operate out of each country in descending order?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ country ] ; #2 = Aggregate [ #1 ] GroupBy [ country ] Output [ countstar AS Count_Star , country ] ; #3 = Sort [ #2 ] OrderBy [ Count_Star DESC ] Output [ country , Count_Star ]"
    },
    {
        "id": "6f64d65315dc0a85992f1b694a77313aac3cc9d41063f314d8609ee62dd0b676",
        "question": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , city ] ; #2 = Filter [ #1 ] Predicate [ country = 'United States' ] Output [ city ] ; #3 = Aggregate [ #2 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #4 = Sort [ #3 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , city ]"
    },
    {
        "id": "343f91030afe0a001aafeea5fbdceb3503285e8b29a6228b2b034da0207a2620",
        "question": "How many airports are there per city in the US ordered from most to least?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , city ] ; #2 = Filter [ #1 ] Predicate [ country = 'United States' ] Output [ city ] ; #3 = Aggregate [ #2 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #4 = Sort [ #3 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , city ]"
    },
    {
        "id": "22c45b9c954d9c06e352f744ed699534db41546181b7e267740964fb6f15a707",
        "question": "Return the cities with more than 3 airports in the United States.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , city ] ; #2 = Filter [ #1 ] Predicate [ country = 'United States' ] Output [ city ] ; #3 = Aggregate [ #2 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #4 = Filter [ #3 ] Predicate [ Count_Star > 3 ] Output [ city ]"
    },
    {
        "id": "a4e3fe2b0267d3192d200c0d267b2b5e6ef1d51c5b5223f13237123d296c1810",
        "question": "What is the number of cities in the United States with more than 3 airports?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , city ] ; #2 = Filter [ #1 ] Predicate [ country = 'United States' ] Output [ city ] ; #3 = Aggregate [ #2 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #4 = Filter [ #3 ] Predicate [ Count_Star > 3 ] Output [ city ]"
    },
    {
        "id": "347e723159f4bac6f001dfea8bce797fa373d5aa382047de47d76c879541bbc1",
        "question": "How many cities are there that have more than 3 airports?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ city ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "060d99148c0e9fa32cd14548608641744159789dc8b12cd4409629d846d36683",
        "question": "What is the count of cities with more than 3 airports?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ city ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "92fcfa2b402ff951d93a5fcac54f9002ac7563257141059dcd3590458fae726e",
        "question": "List the cities which have more than one airport and number of airports.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ city ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Count_Star , city ]"
    },
    {
        "id": "61ad0552848979c1ee7fd1a15e963b52a216a137b623f84209f3243ef2931589",
        "question": "What are the names of all cities with more than one airport and how many airports do they have?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ city ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 1 ] Output [ Count_Star , city ]"
    },
    {
        "id": "a85cd20b14e5782236989b220739c11fc9234ddfe359f98527dfd80ba0a38240",
        "question": "List the cities which have more than 2 airports sorted by the number of airports.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ city ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Count_Star , city ] ; #4 = Sort [ #3 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , city ]"
    },
    {
        "id": "5c276ab1b0334c518a8ed13723fe883fd278083f070d1c99dc27c3991c045377",
        "question": "What are the cities that have more than 2 airports sorted by number of airports?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ city ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ Count_Star , city ] ; #4 = Sort [ #3 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , city ]"
    },
    {
        "id": "4ad96e14525e4830e6e0f2798424b4d3912635b21ee43c0c529f218b73da6417",
        "question": "Find the average elevation of all airports for each country.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , elevation ] ; #2 = Aggregate [ #1 ] GroupBy [ country ] Output [ country , AVG(elevation) AS Avg_elevation ]"
    },
    {
        "id": "2521eda52c9484065e2bed5e8a2a527e5dac142eaae2f095c1e7390cb3a28aaa",
        "question": "For each country, what is the average elevation of that country's airports?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , elevation ] ; #2 = Aggregate [ #1 ] GroupBy [ country ] Output [ country , AVG(elevation) AS Avg_elevation ]"
    },
    {
        "id": "95ef5312bd31d68822a4824b20158c74f167f2a5bf7257119a8232d53d7f1f1a",
        "question": "Find the cities which have exactly two airports.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ city ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #3 = Filter [ #2 ] Predicate [ Count_Star = 2 ] Output [ city ]"
    },
    {
        "id": "d73f79e7119d40a7d7b7e37afa3a38308e50c575ed2a5d600056230ec641b4f0",
        "question": "What are the cities with exactly two airports?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ city ] ; #2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star , city ] ; #3 = Filter [ #2 ] Predicate [ Count_Star = 2 ] Output [ city ]"
    },
    {
        "id": "cf1e7bee34fc42959025493c5c564d8fa5a836da31f302f990b4d848cb558adf",
        "question": "Find the number of routes with destination airports in Italy.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , apid ] ; #2 = Filter [ #1 ] Predicate [ country = 'Italy' ] Output [ apid ] ; #3 = Scan Table [ routes ] Output [ dst_apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.apid = #3.dst_apid ] Output [ #2.apid ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "13bfa49d8aaff81908adb3c4fd6e9b6dbc8956afc9186f3f36d09b1e972f8c23",
        "question": "What is the number of routes whose destinations are Italian airports?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , apid ] ; #2 = Filter [ #1 ] Predicate [ country = 'Italy' ] Output [ apid ] ; #3 = Scan Table [ routes ] Output [ dst_apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.apid = #3.dst_apid ] Output [ #2.apid ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7deb241bed5c64d974e870fca03880c7b299aa52f28a89994316933b27bc0395",
        "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ alid , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'American Airlines' ] Output [ alid ] ; #3 = Scan Table [ routes ] Output [ alid , dst_apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.alid = #3.alid ] Output [ #3.dst_apid ] ; #5 = Scan Table [ airports ] Output [ country , apid ] ; #6 = Filter [ #5 ] Predicate [ country = 'Italy' ] Output [ apid ] ; #7 = Join [ #4 , #6 ] Predicate [ #4.dst_apid = #6.apid ] Output [ #4.dst_apid ] ; #8 = Aggregate [ #7 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "7b2ca3ef6da4e3ae774406921a69782858d56fb05de3593c9b62c9839ed799e8",
        "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airlines ] Output [ alid , name ] ; #2 = Filter [ #1 ] Predicate [ name = 'American Airlines' ] Output [ alid ] ; #3 = Scan Table [ routes ] Output [ alid , dst_apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.alid = #3.alid ] Output [ #3.dst_apid ] ; #5 = Scan Table [ airports ] Output [ country , apid ] ; #6 = Filter [ #5 ] Predicate [ country = 'Italy' ] Output [ apid ] ; #7 = Join [ #4 , #6 ] Predicate [ #4.dst_apid = #6.apid ] Output [ #4.dst_apid ] ; #8 = Aggregate [ #7 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "2bac6497af70bcd49424c777c23916b156c64250c6e2dcea3b90ab128f768917",
        "question": "Find the number of routes that have destination John F Kennedy International Airport.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , apid ] ; #2 = Filter [ #1 ] Predicate [ name = 'John F Kennedy International Airport' ] Output [ apid ] ; #3 = Scan Table [ routes ] Output [ dst_apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.apid = #3.dst_apid ] Output [ #2.apid ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "236f0eb82a6de1195a3f5af50653147f687bf265d09fa8694ba34042fa92b082",
        "question": "What is the number of routes that end at John F Kennedy International Airport?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , apid ] ; #2 = Filter [ #1 ] Predicate [ name = 'John F Kennedy International Airport' ] Output [ apid ] ; #3 = Scan Table [ routes ] Output [ dst_apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.apid = #3.dst_apid ] Output [ #2.apid ] ; #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "084269603c0ba1f23a096a3d2ece1ec43a312994e5a9e48f9ad8bb79db938e6a",
        "question": "Find the number of routes from the United States to Canada.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , apid ] ; #2 = Filter [ #1 ] Predicate [ country = 'United States' ] Output [ apid ] ; #3 = Scan Table [ airports ] Output [ country , apid ] ; #4 = Filter [ #3 ] Predicate [ country = 'Canada' ] Output [ apid ] ; #5 = Scan Table [ routes ] Output [ dst_apid , src_apid ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.apid = #5.dst_apid ] Output [ #5.src_apid ] ; #7 = Join [ #2 , #6 ] Predicate [ #2.apid = #6.src_apid ] Output [ #2.apid ] ; #8 = Aggregate [ #7 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "bbc54f3f2de70c9f51def45f9e0ea0bd9cfb56bfd4f06997d23a3ca5fbbec69b",
        "question": "How many routes go from the United States to Canada?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , apid ] ; #2 = Filter [ #1 ] Predicate [ country = 'United States' ] Output [ apid ] ; #3 = Scan Table [ airports ] Output [ country , apid ] ; #4 = Filter [ #3 ] Predicate [ country = 'Canada' ] Output [ apid ] ; #5 = Scan Table [ routes ] Output [ dst_apid , src_apid ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.apid = #5.dst_apid ] Output [ #5.src_apid ] ; #7 = Join [ #2 , #6 ] Predicate [ #2.apid = #6.src_apid ] Output [ #2.apid ] ; #8 = Aggregate [ #7 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "f0ea01d9a4088e5c8db0256ef0b429daca99ee9aa596fe75a6b741b7921c0291",
        "question": "Find the id of routes whose source and destination airports are in the United States.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , apid ] ; #2 = Filter [ #1 ] Predicate [ country = 'United States' ] Output [ apid ] ; #3 = Scan Table [ airports ] Output [ country , apid ] ; #4 = Filter [ #3 ] Predicate [ country = 'United States' ] Output [ apid ] ; #5 = Scan Table [ routes ] Output [ rid , dst_apid , src_apid ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.apid = #5.dst_apid ] Output [ #5.src_apid , #5.rid ] ; #7 = Join [ #2 , #6 ] Predicate [ #2.apid = #6.src_apid ] Output [ #6.rid ]"
    },
    {
        "id": "2e5b6786361ed60b2b5fbf593cb80d3ff721d7a2c6a763403c74515e6afadb0f",
        "question": "What is the id of the routes whose source and destination airports are in the United States?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ country , apid ] ; #2 = Filter [ #1 ] Predicate [ country = 'United States' ] Output [ apid ] ; #3 = Scan Table [ airports ] Output [ country , apid ] ; #4 = Filter [ #3 ] Predicate [ country = 'United States' ] Output [ apid ] ; #5 = Scan Table [ routes ] Output [ rid , dst_apid , src_apid ] ; #6 = Join [ #4 , #5 ] Predicate [ #4.apid = #5.dst_apid ] Output [ #5.src_apid , #5.rid ] ; #7 = Join [ #2 , #6 ] Predicate [ #2.apid = #6.src_apid ] Output [ #6.rid ]"
    },
    {
        "id": "634ae6eebe00267c86e1dcad6eb14f3ecfb7a7f0214758b0943a4b79adfe117e",
        "question": "Find the busiest source airport that runs most number of routes in China.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , country , apid ] ; #2 = Filter [ #1 ] Predicate [ country = 'China' ] Output [ name , apid ] ; #3 = Scan Table [ routes ] Output [ src_apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.apid = #3.src_apid ] Output [ #2.name ] ; #5 = Aggregate [ #4 ] GroupBy [ name ] Output [ name , countstar AS Count_Star ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "98322c3acf8da8277be839ce4b365c3353c65f40aade959ee3c8e30bb38160e4",
        "question": "What is the name of the airport with the most number of routes that start in China?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , country , apid ] ; #2 = Filter [ #1 ] Predicate [ country = 'China' ] Output [ name , apid ] ; #3 = Scan Table [ routes ] Output [ src_apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.apid = #3.src_apid ] Output [ #2.name ] ; #5 = Aggregate [ #4 ] GroupBy [ name ] Output [ name , countstar AS Count_Star ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "60bd9452ea0c98257b6d958c122857b938c2930cedf74617c4bcb9553e65f2c2",
        "question": "Find the busiest destination airport that runs most number of routes in China.",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , country , apid ] ; #2 = Filter [ #1 ] Predicate [ country = 'China' ] Output [ name , apid ] ; #3 = Scan Table [ routes ] Output [ dst_apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.apid = #3.dst_apid ] Output [ #2.name ] ; #5 = Aggregate [ #4 ] GroupBy [ name ] Output [ name , countstar AS Count_Star ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "dda3af6c47a4ec99274e8b30e62d4970a7d0c67fa7d50face343591da3f80289",
        "question": "What is the name of the airport that is the destination of the most number of routes that start in China?",
        "parsing_tree": "flight_4 | #1 = Scan Table [ airports ] Output [ name , country , apid ] ; #2 = Filter [ #1 ] Predicate [ country = 'China' ] Output [ name , apid ] ; #3 = Scan Table [ routes ] Output [ dst_apid ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.apid = #3.dst_apid ] Output [ #2.name ] ; #5 = Aggregate [ #4 ] GroupBy [ name ] Output [ name , countstar AS Count_Star ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]"
    },
    {
        "id": "4d28e55f6c888e63b5beffc2eca5983a84586ab410c21dd4a8b0fe93b79bbf11",
        "question": "What is the id of the most recent order?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ date_order_placed , order_id ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date_order_placed DESC ] Output [ date_order_placed , order_id ]"
    },
    {
        "id": "8c443f20931d7589d1c8a28cc8e62e5302c14ea18f63d177295cb078df418cb9",
        "question": "Find the id of the order made most recently.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ date_order_placed , order_id ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date_order_placed DESC ] Output [ date_order_placed , order_id ]"
    },
    {
        "id": "cf173a3bce5a9361c77869e907ce9e5f41b17c300645695fa7aec9334084cc8c",
        "question": "what are the order id and customer id of the oldest order?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ date_order_placed , customer_id , order_id ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date_order_placed ASC ] Output [ date_order_placed , customer_id , order_id ]"
    },
    {
        "id": "106793b1b07c25065d548a6245d3430a62ef3b1b31036a12af7b72a96a7bed83",
        "question": "Find the order id and customer id associated with the oldest order.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ date_order_placed , customer_id , order_id ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ date_order_placed ASC ] Output [ date_order_placed , customer_id , order_id ]"
    },
    {
        "id": "4b5b94a24dd3b996bb8956909cccd4770b2ec888c7cc9cab39780faa70a46646",
        "question": "Find the id of the order whose shipment tracking number is \"3452\".",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Shipments ] Predicate [ shipment_tracking_number = '3452' ] Output [ shipment_tracking_number , order_id ]"
    },
    {
        "id": "9f4ae4976b684008d9e7750e63eaef26f6b2df7c083015212bec3342bb30d2c6",
        "question": "Which order's shipment tracking number is \"3452\"? Give me the id of the order.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Shipments ] Predicate [ shipment_tracking_number = '3452' ] Output [ shipment_tracking_number , order_id ]"
    },
    {
        "id": "5421323f5e56e2203b110756c255d64e0198d497ac218a122a57bc91751f80b7",
        "question": "Find the ids of all the order items whose product id is 11.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Order_Items ] Predicate [ product_id = 11 ] Output [ product_id , order_item_id ]"
    },
    {
        "id": "9376faf149fe5b71493550e4fb3c4cb4971bb36a1db7016dfe694204fc7255ac",
        "question": "Find all the order items whose product id is 11. What are the order item ids?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Order_Items ] Predicate [ product_id = 11 ] Output [ product_id , order_item_id ]"
    },
    {
        "id": "1e3452e0ac45e9182018e7d348b41715c17cf50cb3a3f2d1805acb0713e2bd32",
        "question": "List the name of all the distinct customers who have orders with status \"Packing\".",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Predicate [ order_status = 'Packing' ] Output [ customer_id , order_status ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Distinct [ true ] Output [ #2.customer_name ]"
    },
    {
        "id": "ea59b0de0ee2e1358988e73b8a0e10c29b7dff5f49154a683882df50ab271d00",
        "question": "Which customers have orders with status \"Packing\"? Give me the customer names.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Predicate [ order_status = 'Packing' ] Output [ customer_id , order_status ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Distinct [ true ] Output [ #2.customer_name ]"
    },
    {
        "id": "20d4e1eb299878dfd88e3086baeebdb90686c8c63d3439443869bdd473a3896a",
        "question": "What is the name of the customer who has the most orders?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , customer_name ]"
    },
    {
        "id": "c599d962d5e10586702d0316138e7770a318d3b409da8c8ce8669848764a0390",
        "question": "Which customer made the most orders? Find the customer name.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , customer_name ]"
    },
    {
        "id": "81d50ffef9493942ebe2231971dcef97e098e9f2da9e74a228eae514112ec5d9",
        "question": "What is the customer id of the customer who has the most orders?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , customer_id ]"
    },
    {
        "id": "5880884bdb89223d34870cbe07ac28fde95f12f8bc0bc74aae86e445f2249f34",
        "question": "Find the id of the customer who made the most orders.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , customer_id ]"
    },
    {
        "id": "84d82b61a66480fcd2281c288bea5252fd16da8059a7480d1bc98c9e35cfff11",
        "question": "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Customers ] Predicate [ customer_name = 'Jeramie' ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Orders ] Output [ customer_id , order_status , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.order_id , #2.order_status ]"
    },
    {
        "id": "657f520d81c75f58afacc5f1794ba61c8f5181d0dccdd74dc90fb74d37364c34",
        "question": "Which orders are made by the customer named \"Jeramie\"? Give me the order ids and status.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Customers ] Predicate [ customer_name = 'Jeramie' ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Orders ] Output [ customer_id , order_status , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.order_id , #2.order_status ]"
    },
    {
        "id": "b44d915424ca0e3e6b60d773ed5114f7ef1eb62887f837b577f98c0264766821",
        "question": "Find the dates of orders which belong to the customer named \"Jeramie\".",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Customers ] Predicate [ customer_name = 'Jeramie' ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Orders ] Output [ date_order_placed , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.date_order_placed ]"
    },
    {
        "id": "7946d49eba803e561a1c882dc03ffa4299394cef838f9106e19f4998c3ef8394",
        "question": "What are the dates of the orders made by the customer named \"Jeramie\"?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Customers ] Predicate [ customer_name = 'Jeramie' ] Output [ customer_id , customer_name ] ; #2 = Scan Table [ Orders ] Output [ date_order_placed , customer_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.date_order_placed ]"
    },
    {
        "id": "faa6106b2f2e2bb9a35c0a82437f9eda7ababc4fe6293e8143b848842aa528e6",
        "question": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Predicate [ date_order_placed >= '2009-01-01 00:00:00.000' AND date_order_placed <= '2010-01-01 00:00:00.000' ] Output [ date_order_placed , customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_name ]"
    },
    {
        "id": "8b214e0c082a772b40bdc8a92858895b71904dcceb02f7b3a1f524c66cb631a1",
        "question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Predicate [ date_order_placed >= '2009-01-01 00:00:00.000' AND date_order_placed <= '2010-01-01 00:00:00.000' ] Output [ date_order_placed , customer_id ] ; #2 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_name ]"
    },
    {
        "id": "a41557408879e16b4c49ef85cfb80652299d0347954ebc07779f4b08eac3e512",
        "question": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Predicate [ date_order_placed >= '1975-01-01 00:00:00.000' AND date_order_placed <= '1976-01-01 00:00:00.000' ] Output [ date_order_placed , order_id ] ; #2 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Distinct [ true ] Output [ #2.product_id ]"
    },
    {
        "id": "2fc229e293322c2e647dc8a70ccded2fa7da3dbf204ffe28dbf5b0d42a34ab25",
        "question": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Predicate [ date_order_placed >= '1975-01-01 00:00:00.000' AND date_order_placed <= '1976-01-01 00:00:00.000' ] Output [ date_order_placed , order_id ] ; #2 = Scan Table [ Order_Items ] Output [ product_id , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Distinct [ true ] Output [ #2.product_id ]"
    },
    {
        "id": "eac52ccb250f2085fc38855dcbf1f53689b8aa3c8251392c527fffaf6c603e22",
        "question": "When was the order placed whose shipment tracking number is 3452? Give me the date.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Shipments ] Predicate [ shipment_tracking_number = 3452 ] Output [ shipment_tracking_number , order_id ] ; #2 = Scan Table [ Orders ] Output [ date_order_placed , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #2.date_order_placed ]"
    },
    {
        "id": "c43e930b9c42d62be895dced9b8104c3af749bf2bac01e49fea898d4200d1590",
        "question": "On which day was the order placed whose shipment tracking number is 3452?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Shipments ] Predicate [ shipment_tracking_number = 3452 ] Output [ shipment_tracking_number , order_id ] ; #2 = Scan Table [ Orders ] Output [ date_order_placed , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #2.date_order_placed ]"
    },
    {
        "id": "a39d5baa4a41c4f5cf8055063732178921edeb6348b79d31e090b65c53b34a9e",
        "question": "What is the placement date of the order whose invoice number is 10?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Shipments ] Predicate [ invoice_number = 10 ] Output [ order_id , invoice_number ] ; #2 = Scan Table [ Orders ] Output [ date_order_placed , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #2.date_order_placed ]"
    },
    {
        "id": "aeb04612288e82a6de4c96a041a4d0e1240215286fbb0114ae6205d42ea274f9",
        "question": "On what day was the order with invoice number 10 placed?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Shipments ] Predicate [ invoice_number = 10 ] Output [ order_id , invoice_number ] ; #2 = Scan Table [ Orders ] Output [ date_order_placed , order_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #2.date_order_placed ]"
    },
    {
        "id": "68a032582daa69f4992da1a4e031115e3e88257f151460646055b9896423da5a",
        "question": "Find the ids of orders which are shipped after 2000-01-01.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Shipments ] Predicate [ shipment_date > '2000-01-01 00:00:00.000' ] Output [ shipment_date , order_id ]"
    },
    {
        "id": "69b8bc6aee528edd53d4a7237b6ecd05288895afed3c657886dcf649e1a9bd28",
        "question": "Which orders have shipment after 2000-01-01? Give me the order ids.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Shipments ] Predicate [ shipment_date > '2000-01-01 00:00:00.000' ] Output [ shipment_date , order_id ]"
    },
    {
        "id": "69534439ae093cd60b0a74e51d70e20594c17f823bfb62524a162e91e8f8e601",
        "question": "List the names of all distinct products in alphabetical order.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Products ] Output [ product_name ] ; #2 = Sort [ #1 ] OrderBy [ product_name ASC ] Distinct [ true ] Output [ product_name ]"
    },
    {
        "id": "016517dd00e2b7f474ac6aa67e84476c0f1d5ba0e94e2d9ab8eb21a6050353e8",
        "question": "Sort all the distinct products in alphabetical order.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Products ] Output [ product_name ] ; #2 = Sort [ #1 ] OrderBy [ product_name ASC ] Distinct [ true ] Output [ product_name ]"
    },
    {
        "id": "62b1e86a5ae8344ee6746819402fc5b6353693cbb9afa3a2b536304a5cc34778",
        "question": "List the ids of all distinct orders ordered by placed date.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ date_order_placed , order_id ] ; #2 = Sort [ #1 ] OrderBy [ date_order_placed ASC ] Output [ date_order_placed , order_id ]"
    },
    {
        "id": "23ae4a49d1a48cafe244366222ecd099e62a42cc0da6d4e3172bc3c08e9e1ff0",
        "question": "What are ids of the all distinct orders, sorted by placement date?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ date_order_placed , order_id ] ; #2 = Sort [ #1 ] OrderBy [ date_order_placed ASC ] Output [ date_order_placed , order_id ]"
    },
    {
        "id": "a02e7e6b19f54abab82584b9f423632ae226097385bbe76b3a5959e523efffc6",
        "question": "What is the id of the order which has the most items?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Order_Items ] Output [ order_id ] ; #2 = Aggregate [ #1 ] GroupBy [ order_id ] Output [ countstar AS Count_Star , order_id ] ; #3 = Scan Table [ Orders ] Output [ order_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.order_id = #3.order_id ] Output [ #3.order_id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , order_id ]"
    },
    {
        "id": "45446de9db694c2454a2db54948efd31e2de730160dcf3a6a50bff04ff498fd8",
        "question": "Which order deals with the most items? Return the order id.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Order_Items ] Output [ order_id ] ; #2 = Aggregate [ #1 ] GroupBy [ order_id ] Output [ countstar AS Count_Star , order_id ] ; #3 = Scan Table [ Orders ] Output [ order_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.order_id = #3.order_id ] Output [ #3.order_id , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , order_id ]"
    },
    {
        "id": "1f424752fb1c6ae27a2b75ee77cc1e55e327dc60a2259e93ea573c9557e738d1",
        "question": "What is the name of the customer who has the largest number of orders?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , customer_name ]"
    },
    {
        "id": "86f3f4d05e6c15f42a47095827f5901ac46e22bce3fc23ec15b24e5f82a9162b",
        "question": "Find the name of the customer who made the most orders.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_name , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , customer_name ]"
    },
    {
        "id": "80c0d173c7ae8017066cb249c6a59bfd51a0408bdb8686ea78e51d64b15fd294",
        "question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Invoices ] Predicate [ invoice_date < '1989-09-03 00:00:00.000' OR invoice_date > '2007-12-25 00:00:00.000' ] Output [ invoice_date , invoice_number ]"
    },
    {
        "id": "6ddc33a399b2ff977092d585a03e4f9e6fcfda38e4a8b23a43f8fa69887755b9",
        "question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Invoices ] Predicate [ invoice_date < '1989-09-03 00:00:00.000' OR invoice_date > '2007-12-25 00:00:00.000' ] Output [ invoice_date , invoice_number ]"
    },
    {
        "id": "6afcb49e69d2883369461e0fa3696bce3328501ba4d72acd60f77b2928460590",
        "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Invoices ] Predicate [ invoice_date < '1989-09-03 00:00:00.000' OR invoice_date > '2007-12-25 00:00:00.000' ] Distinct [ true ] Output [ invoice_details ]"
    },
    {
        "id": "43c077dac21fb0194ca163e67b72ad064052f6efa8ca90631505a0a73bcc65e4",
        "question": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Invoices ] Predicate [ invoice_date < '1989-09-03 00:00:00.000' OR invoice_date > '2007-12-25 00:00:00.000' ] Distinct [ true ] Output [ invoice_details ]"
    },
    {
        "id": "0965422e6200ef8ca61ba90d0680621dd6fca4dd24f04439649b6157a30c861b",
        "question": "For each customer who has at least two orders, find the customer name and number of orders made.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Count_Star , customer_name ]"
    },
    {
        "id": "3033a31be746376ec81973ac8e94977134d909e34b92bf620c2b251e950f21bd",
        "question": "Which customers have made at least two orders? Give me each customer name and number of orders made.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Count_Star , customer_name ]"
    },
    {
        "id": "bdfb122ebb262bf379667dbdd853fc0b9a137a459dc795d229751b7acec25546",
        "question": "Find the name of the customers who have at most two orders.",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star <= 2 ] Output [ customer_name ]"
    },
    {
        "id": "63f194e865452a360cfb88e0ac008281f6ccd8bda47bea3cf01c85e1e966fba8",
        "question": "What are the names of the customers who have made two or less orders?",
        "parsing_tree": "tracking_orders | #1 = Scan Table [ Orders ] Output [ customer_id ] ; #2 = Aggregate [ #1 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_id ] ; #3 = Scan Table [ Customers ] Output [ customer_id , customer_name ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.customer_name , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star <= 2 ] Output [ customer_name ]"
    },
    {
        "id": "1bab534adc9430f8989d9f17ac5ed885e07a4bf2c7f7cde978aa66058089088c",
        "question": "How many architects are female?",
        "parsing_tree": "architecture | #1 = Scan Table [ architect ] Predicate [ gender = 'female' ] Output [ gender ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "65a787680b6a4f109d98056370b67eaf971cb0570ff611210467f68f4ae43a44",
        "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
        "parsing_tree": "architecture | #1 = Scan Table [ architect ] Predicate [ gender = 'male' ] Output [ name , gender , nationality , id ] ; #2 = Sort [ #1 ] OrderBy [ name ASC ] Output [ name , id , nationality ]"
    },
    {
        "id": "a4a100ee2e6a4159b57500c999e82086a9d089902114cebea405da4a6619d10a",
        "question": "What is the average length in feet of the bridges?",
        "parsing_tree": "architecture | #1 = Scan Table [ bridge ] Output [ length_feet ] ; #2 = Aggregate [ #1 ] Output [ AVG(length_feet) AS Avg_length_feet ]"
    },
    {
        "id": "63e25f545c664b76b754133f89657e28517485f60dc576f8971980ac90aff517",
        "question": "What are the names and year of construction for the mills of 'Grondzeiler' type?",
        "parsing_tree": "architecture | #1 = Scan Table [ mill ] Predicate [ type = 'Grondzeiler' ] Output [ name , built_year , type ]"
    },
    {
        "id": "97af42cbe726887815cd43c9182af27353397ebb05ab52231b8d2dca75247749",
        "question": "What are the distinct names and nationalities of the architects who have ever built a mill?",
        "parsing_tree": "architecture | #1 = Scan Table [ architect ] Output [ name , nationality , id ] ; #2 = Scan Table [ mill ] Output [ architect_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.architect_id ] Distinct [ true ] Output [ #1.name , #1.nationality ]"
    },
    {
        "id": "7f82244911e7b03f42c9ecfb304dc6c24b667c60fc648d99295f7acf198a65ac",
        "question": "What are the names of the mills which are not located in 'Donceel'?",
        "parsing_tree": "architecture | #1 = Scan Table [ mill ] Predicate [ location <> 'Donceel' ] Output [ name , location ]"
    },
    {
        "id": "71994a3ef850c1385fde9f77d1b6e2dd2f87c451028c0c9e321801bd5afbf754",
        "question": "What are the distinct types of mills that are built by American or Canadian architects?",
        "parsing_tree": "architecture | #1 = Scan Table [ architect ] Predicate [ nationality = 'American' OR nationality = 'Canadian' ] Output [ nationality , id ] ; #2 = Scan Table [ mill ] Output [ type , architect_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.architect_id ] Distinct [ true ] Output [ #2.type ]"
    },
    {
        "id": "38b10f21cf41a422c9a284f36fe2a8fd7911dc16cccf92ee2daa2af15da4e66b",
        "question": "What are the ids and names of the architects who built at least 3 bridges ?",
        "parsing_tree": "architecture | #1 = Scan Table [ bridge ] Output [ architect_id ] ; #2 = Aggregate [ #1 ] GroupBy [ architect_id ] Output [ countstar AS Count_Star , architect_id ] ; #3 = Scan Table [ architect ] Output [ name , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.architect_id = #3.id ] Output [ #3.name , #3.id , #2.Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ name , id ]"
    },
    {
        "id": "ff299cc91fb69c38a4bcc286098773ef0a3ccd361b5e9cbef8015e743e2acfa5",
        "question": "What is the id, name and nationality of the architect who built most mills?",
        "parsing_tree": "architecture | #1 = Scan Table [ mill ] Output [ architect_id ] ; #2 = Aggregate [ #1 ] GroupBy [ architect_id ] Output [ countstar AS Count_Star , architect_id ] ; #3 = Scan Table [ architect ] Output [ name , nationality , id ] ; #4 = Join [ #2 , #3 ] Predicate [ #2.architect_id = #3.id ] Output [ #3.name , #3.id , #3.nationality , #2.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , nationality , id ]"
    },
    {
        "id": "5c8501f6634a93510fc23782662496f7d25fe6d875835cb3ab754e24234672f2",
        "question": "What are the ids, names and genders of the architects who built two bridges or one mill?",
        "parsing_tree": "architecture | #1 = Scan Table [ architect ] Output [ name , gender , id ] ; #2 = Scan Table [ bridge ] Output [ architect_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.architect_id ] Output [ #1.gender , #1.name , #1.id ] ; #4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , gender , id ] ; #5 = Filter [ #4 ] Predicate [ Count_Star = 2 ] Output [ name , gender , id ] ; #6 = Scan Table [ architect ] Output [ name , gender , id ] ; #7 = Scan Table [ mill ] Output [ architect_id ] ; #8 = Join [ #6 , #7 ] Predicate [ #6.id = #7.architect_id ] Output [ #6.gender , #6.id , #6.name ] ; #9 = Aggregate [ #8 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , gender , id ] ; #10 = Filter [ #9 ] Predicate [ Count_Star = 1 ] Output [ name , gender , id ] ; #11 = Union [ #5 , #10 ] Output [ #5.name , #5.id , #5.gender ]"
    },
    {
        "id": "cf43b43ee517cf6fbc0b45e6129960a7ece0aaeb213979df9e794f63389c55ce",
        "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
        "parsing_tree": "architecture | #1 = Scan Table [ bridge ] Predicate [ name = 'Kolob Arch' OR name = 'Rainbow Bridge' ] Output [ name , location ]"
    },
    {
        "id": "05fd1c248321fec1558a6f53472f0b7e93b5505973ea31524f1011cef4f7c3a5",
        "question": "Which of the mill names contains the french word 'Moulin'?",
        "parsing_tree": "architecture | #1 = Scan Table [ mill ] Predicate [ name like '%Moulin%' ] Output [ name ]"
    },
    {
        "id": "1e82d7158f9c91e4450ac30fc5749a29b90971d2397703f333d44128660bb19a",
        "question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
        "parsing_tree": "architecture | #1 = Scan Table [ bridge ] Predicate [ length_meters > 80.0 ] Output [ architect_id , length_meters ] ; #2 = Scan Table [ architect ] Output [ id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.architect_id = #2.id ] Output [ #1.architect_id ] ; #4 = Scan Table [ mill ] Output [ name , architect_id ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.architect_id = #4.architect_id ] Distinct [ true ] Output [ #4.name ]"
    },
    {
        "id": "e64531ed058d332a95aef470b87d0ef38c16614df637175be7f777e9a96a0558",
        "question": "What is the most common mill type, and how many are there?",
        "parsing_tree": "architecture | #1 = Scan Table [ mill ] Output [ type ] ; #2 = Aggregate [ #1 ] GroupBy [ type ] Output [ type , countstar AS Count_Star ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ type , Count_Star ]"
    },
    {
        "id": "bab0923c99d60959139b133615127df455ff8f320814a73b7fbb5c8f6e8f268b",
        "question": "How many architects haven't built a mill before year 1850?",
        "parsing_tree": "architecture | #1 = Scan Table [ architect ] Output [ id ] ; #2 = Scan Table [ mill ] Predicate [ built_year < 1850 ] Output [ architect_id , built_year ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.architect_id IS NULL OR #1.id = #2.architect_id ] Output [ #1.id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "ed0985ed359adee2287eac4a0ded0e00c6b79dfc5863b4d1d27f63c31f37271d",
        "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
        "parsing_tree": "architecture | #1 = Scan Table [ architect ] Predicate [ nationality = 'American' ] Output [ nationality , id ] ; #2 = Scan Table [ bridge ] Output [ name , architect_id , length_feet ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.architect_id ] Output [ #2.length_feet , #2.name ] ; #4 = Sort [ #3 ] OrderBy [ length_feet ASC ] Output [ name , length_feet ]"
    },
    {
        "id": "7559954c871a5bb59f975a13ae015385574d0858f06326fe0f6d8b201bb0fe90",
        "question": "How many book clubs are there?",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "c7f4e4de04b2bcf14646f5d702484238c2678333dd1d48eb261c4d603bb4c3cd",
        "question": "Count the number of book clubs.",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Output [ 1 AS One ] ; #2 = Aggregate [ #1 ] Output [ countstar AS Count_Star ]"
    },
    {
        "id": "36f93d4a20f7a9ee1415efd3d2996ab05d63d7751800ec05abdd2842fc9f1fcf",
        "question": "show the titles, and authors or editors for all books made after the year 1989.",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Predicate [ Year > 1989 ] Output [ Author_or_Editor , Year , Book_Title ]"
    },
    {
        "id": "52971c1aaff95c3b4cf63116f7cce5994e402cc6eeec7819152908d9a68183fa",
        "question": "What are the titles and authors or editors that correspond to books made after 1989?",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Predicate [ Year > 1989 ] Output [ Author_or_Editor , Year , Book_Title ]"
    },
    {
        "id": "ec64c9f50be6377523e0b687ebd1862edd37a0357bcb7530d1d3b2b3cff5b642",
        "question": "Show all distinct publishers for books.",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Distinct [ true ] Output [ Publisher ]"
    },
    {
        "id": "23da23ef2dfc78574a04991ffb933ee9e77d597a787baee2caff8d961410e671",
        "question": "What are all the different book publishers?",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Distinct [ true ] Output [ Publisher ]"
    },
    {
        "id": "57512e60714fee326b9532afb9e6d23b7b11089d4e6f91ceaccdba998b2ab1e1",
        "question": "Show the years, book titles, and publishers for all books, in descending order by year.",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Output [ Book_Title , Publisher , Year ] ; #2 = Sort [ #1 ] OrderBy [ Year DESC ] Output [ Book_Title , Publisher , Year ]"
    },
    {
        "id": "074e2275feba1fd64de9ac77ee24ddff3f7b02884ab70a30102437790022a4f2",
        "question": "What are the years, titles, and publishers for all books, ordered by year descending?",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Output [ Book_Title , Publisher , Year ] ; #2 = Sort [ #1 ] OrderBy [ Year DESC ] Output [ Book_Title , Publisher , Year ]"
    },
    {
        "id": "63c754e1bde31cf337d82642034840096afdcbd962f576cfe0b72591f6069a5c",
        "question": "Show all publishers and the number of books for each publisher.",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Output [ Publisher ] ; #2 = Aggregate [ #1 ] GroupBy [ Publisher ] Output [ countstar AS Count_Star , Publisher ]"
    },
    {
        "id": "bf76d3797ad882a37ed9bc420810202a501ac4987fa5bab21b263b59959d64f2",
        "question": "How many books are there for each publisher?",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Output [ Publisher ] ; #2 = Aggregate [ #1 ] GroupBy [ Publisher ] Output [ countstar AS Count_Star , Publisher ]"
    },
    {
        "id": "cc80a43d2e07ba2d0e119b0e06a9e08bdb23e57a4e1c8a4f608d85d629a59a85",
        "question": "What is the publisher with most number of books?",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Output [ Publisher ] ; #2 = Aggregate [ #1 ] GroupBy [ Publisher ] Output [ countstar AS Count_Star , Publisher ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Publisher ]"
    },
    {
        "id": "41bf1709a2e5cd020a8f2664973bc4ab30b04f41664602192666adc68f900c74",
        "question": "Return the publisher that has published the most books.",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Output [ Publisher ] ; #2 = Aggregate [ #1 ] GroupBy [ Publisher ] Output [ countstar AS Count_Star , Publisher ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Publisher ]"
    },
    {
        "id": "4498c02b1dffc411ec43c3b313dcb958acfa5c760c27ec201a8c316bf3021011",
        "question": "Show all book categories and the number of books in each category.",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Output [ Category ] ; #2 = Aggregate [ #1 ] GroupBy [ Category ] Output [ countstar AS Count_Star , Category ]"
    },
    {
        "id": "77835d55b3c71f1a2cf525c4cb548964daa6c0ed4a237fc168ff3781552ed5d6",
        "question": "How many books fall into each category?",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Output [ Category ] ; #2 = Aggregate [ #1 ] GroupBy [ Category ] Output [ countstar AS Count_Star , Category ]"
    },
    {
        "id": "eca6727aac1bcf4e6efdb11ddb936ef1df497b6408b10a117475b98ade2343de",
        "question": "List categories that have at least two books after year 1989.",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Predicate [ Year > 1989 ] Output [ Category , Year ] ; #2 = Aggregate [ #1 ] GroupBy [ Category ] Output [ countstar AS Count_Star , Category ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Category ]"
    },
    {
        "id": "77bf369e3d13dea9ee563c4e24be02ac41bc1d0407530e007b213ba4bd7fb488",
        "question": "What categories have two or more corresponding books that were made after 1989?",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Predicate [ Year > 1989 ] Output [ Category , Year ] ; #2 = Aggregate [ #1 ] GroupBy [ Category ] Output [ countstar AS Count_Star , Category ] ; #3 = Filter [ #2 ] Predicate [ Count_Star >= 2 ] Output [ Category ]"
    },
    {
        "id": "8c93ad9d574fb9fba066b2a303e55b419f8c9a3f45b75f6e31125256623f25c1",
        "question": "Show publishers with a book published in 1989 and a book in 1990.",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Predicate [ Year = 1989 ] Distinct [ true ] Output [ Publisher , Year ] ; #2 = Scan Table [ book_club ] Predicate [ Year = 1990 ] Output [ Publisher , Year ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Publisher = #2.Publisher ] Output [ #1.Publisher ]"
    },
    {
        "id": "854e0491d2b811c6f8fc9bf2d591ce094995341eec24e083e80c8532230fc516",
        "question": "What are the publishers who have published a book in both 1989 and 1990?",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Predicate [ Year = 1989 ] Distinct [ true ] Output [ Publisher , Year ] ; #2 = Scan Table [ book_club ] Predicate [ Year = 1990 ] Output [ Publisher , Year ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Publisher = #2.Publisher ] Output [ #1.Publisher ]"
    },
    {
        "id": "ec487077926cd6599556b2e82c0f548c98dfa555ce7883cfd3a17ed7778486d8",
        "question": "Show all publishers which do not have a book in 1989.",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Distinct [ true ] Output [ Publisher ] ; #2 = Scan Table [ book_club ] Predicate [ Year = 1989 ] Output [ Publisher , Year ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Publisher = #2.Publisher ] Output [ #1.Publisher ]"
    },
    {
        "id": "4396e35372f353f3a75291b86be1afa7f411a47c36506c5a58838f166a236600",
        "question": "Which publishers did not publish a book in 1989?",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Distinct [ true ] Output [ Publisher ] ; #2 = Scan Table [ book_club ] Predicate [ Year = 1989 ] Output [ Publisher , Year ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.Publisher = #2.Publisher ] Output [ #1.Publisher ]"
    },
    {
        "id": "eb28f1e75ac39211344909a58761bd0c74c223f236de4e2874618957ec72e1f7",
        "question": "Show all movie titles, years, and directors, ordered by budget.",
        "parsing_tree": "culture_company | #1 = Scan Table [ movie ] Output [ Budget_million , Title , Year , Director ] ; #2 = Sort [ #1 ] OrderBy [ Budget_million ASC ] Output [ Budget_million , Title , Year , Director ]"
    },
    {
        "id": "b2bd75448ec18ef93eb955bc315d6b5bab76bd7fe72da0ba683e9aba9e5e5103",
        "question": "What are the titles, years, and directors of all movies, ordered by budget in millions?",
        "parsing_tree": "culture_company | #1 = Scan Table [ movie ] Output [ Budget_million , Title , Year , Director ] ; #2 = Sort [ #1 ] OrderBy [ Budget_million ASC ] Output [ Budget_million , Title , Year , Director ]"
    },
    {
        "id": "f7e206fc209c1e77bc09ae0c67f79394e231d4509d323941cca53cb5ddf932c6",
        "question": "How many movie directors are there?",
        "parsing_tree": "culture_company | #1 = Scan Table [ movie ] Distinct [ true ] Output [ Director ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Director) AS Count_Dist_Director ]"
    },
    {
        "id": "873a5f7e2952c8ac9f06e2a292fd34de27dbe88c6bebfb5bb4722ff27cd115b9",
        "question": "Count the number of different directors.",
        "parsing_tree": "culture_company | #1 = Scan Table [ movie ] Distinct [ true ] Output [ Director ] ; #2 = Aggregate [ #1 ] Output [ COUNT(DISTINCT Director) AS Count_Dist_Director ]"
    },
    {
        "id": "14aafc8b61f681f3fa6f4374a914a91f83920b34be9bafbca8fc7d441ca0b33b",
        "question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
        "parsing_tree": "culture_company | #1 = Scan Table [ movie ] Predicate [ Year <= 2000 ] Output [ Gross_worldwide , Title , Year , Director ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Gross_worldwide DESC ] Output [ Gross_worldwide , Title , Director ]"
    },
    {
        "id": "681ca7684a41bea632c2f96d06bf1d17c186b391af04cee5dd5c161cf7ef8f76",
        "question": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.",
        "parsing_tree": "culture_company | #1 = Scan Table [ movie ] Predicate [ Year <= 2000 ] Output [ Gross_worldwide , Title , Year , Director ] ; #2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Gross_worldwide DESC ] Output [ Gross_worldwide , Title , Director ]"
    },
    {
        "id": "2347cd38e8d04c2081c48ef8a7352c8c04b9a0328b28f38c207ac0ae5a707eb7",
        "question": "Show all director names who have a movie in both year 1999 and 2000.",
        "parsing_tree": "culture_company | #1 = Scan Table [ movie ] Predicate [ Year = 2000 ] Distinct [ true ] Output [ Year , Director ] ; #2 = Scan Table [ movie ] Predicate [ Year = 1999 ] Output [ Year , Director ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Director = #2.Director ] Output [ #1.Director ]"
    },
    {
        "id": "0a2838a47be1e48b6121e036b8860745b0834753874e458fa4f71d67debac510",
        "question": "Which directors had a movie both in the year 1999 and 2000?",
        "parsing_tree": "culture_company | #1 = Scan Table [ movie ] Predicate [ Year = 2000 ] Distinct [ true ] Output [ Year , Director ] ; #2 = Scan Table [ movie ] Predicate [ Year = 1999 ] Output [ Year , Director ] ; #3 = Intersect [ #1 , #2 ] Predicate [ #1.Director = #2.Director ] Output [ #1.Director ]"
    },
    {
        "id": "b1ab4ae9c806b123a51020cf12eea2e492c04e6c4e6149f15f46daca7a9c5fa5",
        "question": "Show all director names who have a movie in the year 1999 or 2000.",
        "parsing_tree": "culture_company | #1 = Scan Table [ movie ] Predicate [ Year = 1999 OR Year = 2000 ] Output [ Year , Director ]"
    },
    {
        "id": "f3141f8828a1e0d82a8365f1ff125d44598d5f33904ba17eab677fdf5ade4c56",
        "question": "Which directors had a movie in either 1999 or 2000?",
        "parsing_tree": "culture_company | #1 = Scan Table [ movie ] Predicate [ Year = 1999 OR Year = 2000 ] Output [ Year , Director ]"
    },
    {
        "id": "4532913006201fc6b3cfebefb816ab9e5d4ebd6cdbf1d08a7b6d3e331bc34ddc",
        "question": "What is the average, maximum, and minimum budget for all movies before 2000.",
        "parsing_tree": "culture_company | #1 = Scan Table [ movie ] Predicate [ Year < 2000 ] Output [ Budget_million , Year ] ; #2 = Aggregate [ #1 ] Output [ AVG(Budget_million) AS Avg_Budget_million , MAX(Budget_million) AS Max_Budget_million , MIN(Budget_million) AS Min_Budget_million ]"
    },
    {
        "id": "b1d9a20222ea59b418ab562e17824bcfc6a7be6f7816a5eed948abc9f1791021",
        "question": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.",
        "parsing_tree": "culture_company | #1 = Scan Table [ movie ] Predicate [ Year < 2000 ] Output [ Budget_million , Year ] ; #2 = Aggregate [ #1 ] Output [ AVG(Budget_million) AS Avg_Budget_million , MAX(Budget_million) AS Max_Budget_million , MIN(Budget_million) AS Min_Budget_million ]"
    },
    {
        "id": "0ee9ed3b1cb490f4f9b5650ac9c72ca89090d1f8ccc9ad0612fe7471a6069c1f",
        "question": "List all company names with a book published by Alyson.",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Predicate [ Publisher = 'Alyson' ] Output [ book_club_id , Publisher ] ; #2 = Scan Table [ culture_company ] Output [ Company_name , book_club_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.book_club_id = #2.book_club_id ] Output [ #2.Company_name ]"
    },
    {
        "id": "b2149d1260bfd28b9d71d73cbed46ffc1ad198ce64c9e1a22cb68454692b42ce",
        "question": "What are all the company names that have a book published by Alyson?",
        "parsing_tree": "culture_company | #1 = Scan Table [ book_club ] Predicate [ Publisher = 'Alyson' ] Output [ book_club_id , Publisher ] ; #2 = Scan Table [ culture_company ] Output [ Company_name , book_club_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.book_club_id = #2.book_club_id ] Output [ #2.Company_name ]"
    },
    {
        "id": "4201872099b5af8165cb972172bd96e6613cc446a0adb3ec9f32598a5f68dea2",
        "question": "Show the movie titles and book titles for all companies in China.",
        "parsing_tree": "culture_company | #1 = Scan Table [ culture_company ] Predicate [ Incorporated_in = 'China' ] Output [ movie_id , Incorporated_in , book_club_id ] ; #2 = Scan Table [ book_club ] Output [ Book_Title , book_club_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.book_club_id = #2.book_club_id ] Output [ #1.movie_id , #2.Book_Title ] ; #4 = Scan Table [ movie ] Output [ movie_id , Title ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.movie_id = #4.movie_id ] Output [ #3.Book_Title , #4.Title ]"
    },
    {
        "id": "49d074b416a4dd8cfa1255a8b8c3677597402732074d693046faef4b0d7e1d96",
        "question": "What are the titles of movies and books corresponding to companies incorporated in China?",
        "parsing_tree": "culture_company | #1 = Scan Table [ culture_company ] Predicate [ Incorporated_in = 'China' ] Output [ movie_id , Incorporated_in , book_club_id ] ; #2 = Scan Table [ book_club ] Output [ Book_Title , book_club_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.book_club_id = #2.book_club_id ] Output [ #1.movie_id , #2.Book_Title ] ; #4 = Scan Table [ movie ] Output [ movie_id , Title ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.movie_id = #4.movie_id ] Output [ #3.Book_Title , #4.Title ]"
    },
    {
        "id": "090723569d12795e76d1ee66d08ccc1a6f5c3fe684f8800ee785ecc12f4c6e72",
        "question": "Show all company names with a movie directed in year 1999.",
        "parsing_tree": "culture_company | #1 = Scan Table [ movie ] Predicate [ Year = 1999 ] Output [ movie_id , Year ] ; #2 = Scan Table [ culture_company ] Output [ Company_name , movie_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.movie_id = #2.movie_id ] Output [ #2.Company_name ]"
    },
    {
        "id": "e43b6d294e0d84485f42180818ade78ffc51da852af70dcd1692d644f474a222",
        "question": "What are all company names that have a corresponding movie directed in the year 1999?",
        "parsing_tree": "culture_company | #1 = Scan Table [ movie ] Predicate [ Year = 1999 ] Output [ movie_id , Year ] ; #2 = Scan Table [ culture_company ] Output [ Company_name , movie_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.movie_id = #2.movie_id ] Output [ #2.Company_name ]"
    }
]